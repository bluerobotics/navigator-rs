var searchIndex = new Map(JSON.parse('[\
["ads1x1x",{"doc":"This is a platform-agnostic Rust driver for the ADS1013, …","t":"PPFPGGGGGEEGGPPPPPKGRPGPPPPGPPPPPPGPPPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFNNNNNNNNNNNNNN","n":["ActiveHigh","ActiveLow","Ads1x1x","Alternative","ChannelSelection","ComparatorLatching","ComparatorMode","ComparatorPolarity","ComparatorQueue","ConvertMeasurement","ConvertThreshold","DataRate12Bit","DataRate16Bit","Default","DifferentialA0A1","DifferentialA0A3","DifferentialA1A3","DifferentialA2A3","DynamicOneShot","Error","Error","Four","FullScaleRange","I2C","I2C","InvalidInputData","Latching","ModeChangeError","Nonlatching","One","SingleA0","SingleA1","SingleA2","SingleA3","SlaveAddr","Sps128","Sps128","Sps16","Sps1600","Sps2400","Sps250","Sps250","Sps32","Sps3300","Sps475","Sps490","Sps64","Sps8","Sps860","Sps920","Traditional","Two","Window","Within0_256V","Within0_512V","Within1_024V","Within2_048V","Within4_096V","Within6_144V","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","destroy_ads1013","destroy_ads1014","destroy_ads1015","destroy_ads1113","destroy_ads1114","destroy_ads1115","disable_comparator","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into_continuous","into_one_shot","is_measurement_in_progress","mode","new_ads1013","new_ads1014","new_ads1015","new_ads1113","new_ads1114","new_ads1115","new_gnd","new_scl","new_sda","new_vdd","read","read","read","read","reset_internal_driver_state","select_channel","set_comparator_latching","set_comparator_mode","set_comparator_polarity","set_comparator_queue","set_data_rate","set_data_rate","set_full_scale_range","set_high_threshold_raw","set_low_threshold_raw","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","use_alert_rdy_pin_as_ready","DifferentialA0A1","DifferentialA0A3","DifferentialA1A3","DifferentialA2A3","SingleA0","SingleA1","SingleA2","SingleA3","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel","channel","channel","channel","channel","channel","channel","channel","channel","channel","channel","channel","channel","channel","channel","channel","channel","channel","channel","channel","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Continuous","OneShot","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"ads1x1x"],[230,"ads1x1x::channel"],[314,"ads1x1x::mode"],[330,"core::default"],[331,"core::result"],[332,"core::fmt"],[333,"core::fmt"],[334,"embedded_hal::blocking::i2c"],[335,"embedded_hal::adc"],[336,"core::any"]],"d":["Active high","Active low (default)","ADS1x1x ADC driver","Alternative slave address using the provided values for …","ADC input channel selection","Comparator polarity (only for ADS1x14, ADS1x15)","Comparator mode (only for ADS1x14, ADS1x15)","Comparator polarity (only for ADS1x14, ADS1x15)","Comparator alert queue (only for ADS1x14, ADS1x15)","","","Data rate for ADS1013, ADS1014, ADS1015","Data rate for ADS1113, ADS1114, ADS1115","Default slave address","Measure signal on input channel 0 differentially to signal …","Measure signal on input channel 0 differentially to signal …","Measure signal on input channel 1 differentially to signal …","Measure signal on input channel 2 differentially to signal …","Multi channel One-shot ADC","Errors in this crate","Error type","Activate comparator and assert after four consecutive …","Full-scale range configuration for the programmable gain …","I²C bus error while changing mode.","I²C bus error","Invalid input data provided","Latching","Error type for mode changes.","Nonlatching (default)","Activate comparator and assert after one conversion …","Measure single-ended signal on input channel 0","Measure single-ended signal on input channel 1","Measure single-ended signal on input channel 2","Measure single-ended signal on input channel 3","Possible slave addresses","128 SPS","128 SPS (default)","16 SPS","1600 SPS (default)","2400 SPS","250 SPS","250 SPS","32 SPS","3300 SPS","475 SPS","490 SPS","64 SPS","8 SPS","860 SPS","920 SPS","Traditional comparator (default)","Activate comparator and assert after two consecutive …","Window comparator","The measurable range is ±0.256V.","The measurable range is ±0.512V.","The measurable range is ±1.024V.","The measurable range is ±2.048V. (default)","The measurable range is ±4.096V.","The measurable range is ±6.144V.","","","","","","","","","","","","","","","","","","","","","","","","","ADC input channel selection","","","","","","","","","","","","","","","","","","","","Default slave address","","Destroy driver instance, return I²C bus instance.","Destroy driver instance, return I²C bus instance.","Destroy driver instance, return I²C bus instance.","Destroy driver instance, return I²C bus instance.","Destroy driver instance, return I²C bus instance.","Destroy driver instance, return I²C bus instance.","Disable comparator (default)","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Change operating mode to Continuous","Change operating mode to OneShot","Read whether a measurement is currently in progress.","Mode marker types","Create a new instance of the device in OneShot mode.","Create a new instance of the device in OneShot mode.","Create a new instance of the device in OneShot mode.","Create a new instance of the device in OneShot mode.","Create a new instance of the device in OneShot mode.","Create a new instance of the device in OneShot mode.","Create <code>SlaveAddr</code> instance corresponding to the address …","Create <code>SlaveAddr</code> instance corresponding to the address …","Create <code>SlaveAddr</code> instance corresponding to the address …","Create <code>SlaveAddr</code> instance corresponding to the address …","Read a measurement","Request that the ADC begin a conversion on the specified …","","Read the most recent measurement","Reset the internal state of this driver to the default …","Select the channel for measurements.","Set comparator latching","Set comparator mode","Set comparator polarity","Activate comparator and set the alert queue","Set data rate","Set data rate","Set the input voltage measurable range","Set raw comparator upper threshold","Set raw comparator lower threshold","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Use the ALERT/RDY pin as conversion-ready pin.","Measure signal on input channel 0 differentially to signal …","Measure signal on input channel 0 differentially to signal …","Measure signal on input channel 1 differentially to signal …","Measure signal on input channel 3 differentially to signal …","Measure single-ended signal on input channel 0","Measure single-ended signal on input channel 1","Measure single-ended signal on input channel 2","Measure single-ended signal on input channel 3","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Continuous conversion mode","One-shot operating mode / power-down state (default)","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[5,5,0,9,0,0,0,0,0,0,0,0,0,9,1,1,1,1,0,0,25,7,0,22,13,13,6,0,6,7,1,1,1,1,0,2,3,3,2,2,2,3,3,2,3,2,3,3,3,2,4,7,4,8,8,8,8,8,8,22,1,13,2,3,4,5,6,7,8,9,11,22,1,13,2,3,4,5,6,7,8,9,11,0,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,8,9,11,11,11,11,11,11,11,11,2,3,4,5,6,7,8,9,1,13,2,3,4,5,6,7,8,9,11,22,1,13,2,3,4,5,6,7,8,9,11,22,1,13,2,3,4,5,6,7,8,9,11,11,11,11,0,11,11,11,11,11,11,9,9,9,9,25,11,11,11,11,11,11,11,11,11,11,11,11,11,11,1,2,3,4,5,6,7,8,9,22,1,13,2,3,4,5,6,7,8,9,11,22,1,13,2,3,4,5,6,7,8,9,11,22,1,13,2,3,4,5,6,7,8,9,11,11,0,0,0,0,0,0,0,0,31,32,33,34,35,36,37,38,31,32,33,34,35,36,37,38,31,31,32,32,33,33,34,34,35,35,35,35,35,35,36,36,37,37,38,38,31,32,33,34,35,36,37,38,31,32,33,34,35,36,37,38,31,32,33,34,35,36,37,38,31,32,33,34,35,36,37,38,31,32,33,34,35,36,37,38,0,0,20,21,20,21,20,21,20,21,20,21,20,21,20,21],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[],8],[[],9],[[],[[11,[-1,-2,-3,-4]]],12,12,12,12],[[[11,[[0,[-1]],0,-2,-3]]],-1,[],[],[]],[[[11,[[0,[-1]],0,-2,-3]]],-1,[],[],[]],[[[11,[[0,[-1]],0,-2,-3]]],-1,[],[],[]],[[[11,[[0,[-1]],0,-2,-3]]],-1,[],[],[]],[[[11,[[0,[-1]],0,-2,-3]]],-1,[],[],[]],[[[11,[[0,[-1]],0,-2,-3]]],-1,[],[],[]],[[[11,[-2,-3,-4,-5]]],[[14,[10,[13,[-1]]]]],[],[[0,[],[[15,[-1]]]]],0,[[0,[-1]]],[]],[[2,2],16],[[3,3],16],[[4,4],16],[[5,5],16],[[6,6],16],[[7,7],16],[[8,8],16],[[9,9],16],[[1,17],18],[[[13,[-1]],17],18,19],[[2,17],18],[[3,17],18],[[4,17],18],[[5,17],18],[[6,17],18],[[7,17],18],[[8,17],18],[[9,17],18],[[[11,[-1,-2,-3,-4]],17],18,19,19,19,19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[11,[-2,-3,-4,20]]],[[14,[[11,[-2,-3,-4,21]],[22,[-1,[11,[-2,-3,-4,20]]]]]]],[],[[0,[],[[15,[-1]]]],[0,[],[[15,[-1]]]]],[],0],[[[11,[-2,-3,-4,21]]],[[14,[[11,[-2,-3,-4,20]],[22,[-1,[11,[-2,-3,-4,21]]]]]]],[],[[0,[],[[15,[-1]]]],[0,[],[[15,[-1]]]]],[],0],[[[11,[-2,-3,-4,-5]]],[[14,[16,[13,[-1]]]]],[],[[0,[],[[15,[-1]]]],[0,[],[[15,[-1]]]]],[],[],[]],0,[[-2,9],[[11,[[0,[-2]],0,0,20]]],[],[[23,[],[[15,[-1]]]],[24,[],[[15,[-1]]]]]],[[-2,9],[[11,[[0,[-2]],0,0,20]]],[],[[23,[],[[15,[-1]]]],[24,[],[[15,[-1]]]]]],[[-2,9],[[11,[[0,[-2]],0,0,20]]],[],[[23,[],[[15,[-1]]]],[24,[],[[15,[-1]]]]]],[[-2,9],[[11,[[0,[-2]],0,0,20]]],[],[[23,[],[[15,[-1]]]],[24,[],[[15,[-1]]]]]],[[-2,9],[[11,[[0,[-2]],0,0,20]]],[],[[23,[],[[15,[-1]]]],[24,[],[[15,[-1]]]]]],[[-2,9],[[11,[[0,[-2]],0,0,20]]],[],[[23,[],[[15,[-1]]]],[24,[],[[15,[-1]]]]]],[[],9],[[],9],[[],9],[[],9],[[[25,[],[[15,[-1]]]],1],[[27,[26,-1]]],[]],[[[11,[-2,-3,-4,20]],-5],[[27,[26,-6]]],[],[[0,[],[[15,[-1]]]],[0,[],[[15,[-1]]]]],[],0,[[29,[[11,[-2,-3,-4,20]]],[[28,[1]]]]],[]],[[[11,[-2,-3,-4,20]],1],[[27,[26,-5]]],[],[[0,[],[[15,[-1]]]],[0,[],[[15,[-1]]]]],[],0,[]],[[[11,[-2,-3,-4,21]]],[[14,[26,[13,[-1]]]]],[],[[0,[],[[15,[-1]]]],[0,[],[[15,[-1]]]]],[],0],[[[11,[-2,-3,-4,-5]]],10,[],[[0,[],[[15,[-1]]]],[0,[],[[15,[-1]]]]],[],[],[]],[[[11,[-2,-3,-4,21]],-5],[[14,[10,[13,[-1]]]]],[],[[0,[],[[15,[-1]]]],[0,[],[[15,[-1]]]]],[],0,[[29,[[11,[-2,-3,-4,20]]],[[28,[1]]]]]],[[[11,[-2,-3,-4,-5]],6],[[14,[10,[13,[-1]]]]],[],[[0,[],[[15,[-1]]]]],0,[[0,[-1]]],[]],[[[11,[-2,-3,-4,-5]],4],[[14,[10,[13,[-1]]]]],[],[[0,[],[[15,[-1]]]]],0,[[0,[-1]]],[]],[[[11,[-2,-3,-4,-5]],5],[[14,[10,[13,[-1]]]]],[],[[0,[],[[15,[-1]]]]],0,[[0,[-1]]],[]],[[[11,[-2,-3,-4,-5]],7],[[14,[10,[13,[-1]]]]],[],[[0,[],[[15,[-1]]]]],0,[[0,[-1]]],[]],[[[11,[-2,-3,0,-4]],2],[[14,[10,[13,[-1]]]]],[],[[0,[],[[15,[-1]]]]],[],[]],[[[11,[-2,-3,0,-4]],3],[[14,[10,[13,[-1]]]]],[],[[0,[],[[15,[-1]]]]],[],[]],[[[11,[-2,-3,-4,-5]],8],[[14,[10,[13,[-1]]]]],[],[[0,[],[[15,[-1]]]]],0,[[0,[-1]]],[]],[[[11,[-2,-3,-4,-5]],26],[[14,[10,[13,[-1]]]]],[],[[0,[],[[15,[-1]]]]],0,[[0,[-1]]],[]],[[[11,[-2,-3,-4,-5]],26],[[14,[10,[13,[-1]]]]],[],[[0,[],[[15,[-1]]]]],0,[[0,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[11,[-2,-3,-4,-5]]],[[14,[10,[13,[-1]]]]],[],[[0,[],[[15,[-1]]]]],0,[[0,[-1]]],[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,30,[]],[-1,30,[]]],"c":[],"p":[[6,"ChannelSelection",0],[6,"DataRate12Bit",0],[6,"DataRate16Bit",0],[6,"ComparatorMode",0],[6,"ComparatorPolarity",0],[6,"ComparatorLatching",0],[6,"ComparatorQueue",0],[6,"FullScaleRange",0],[6,"SlaveAddr",0],[1,"tuple"],[5,"Ads1x1x",0],[10,"Default",330],[6,"Error",0],[6,"Result",331],[17,"Error"],[1,"bool"],[5,"Formatter",332],[8,"Result",332],[10,"Debug",332],[5,"OneShot",314],[5,"Continuous",314],[6,"ModeChangeError",0],[10,"Write",333],[10,"WriteRead",333],[10,"DynamicOneShot",0],[1,"i16"],[8,"Result",334],[17,"ID"],[10,"Channel",335],[5,"TypeId",336],[5,"SingleA0",230],[5,"SingleA1",230],[5,"SingleA2",230],[5,"SingleA3",230],[5,"DifferentialA0A1",230],[5,"DifferentialA0A3",230],[5,"DifferentialA1A3",230],[5,"DifferentialA2A3",230]],"b":[[170,"impl-OneShot%3CAds1x1x%3CDI,+IC,+CONV,+OneShot%3E,+i16,+CH%3E-for-Ads1x1x%3CDI,+IC,+CONV,+OneShot%3E"],[171,"impl-DynamicOneShot-for-Ads1x1x%3CDI,+IC,+CONV,+OneShot%3E"],[172,"impl-Ads1x1x%3CDI,+IC,+CONV,+Continuous%3E"],[179,"impl-Ads1x1x%3CDI,+IC,+Resolution12Bit,+MODE%3E"],[180,"impl-Ads1x1x%3CDI,+IC,+Resolution16Bit,+MODE%3E"],[254,"impl-Channel%3CAds1x1x%3CDI,+Ads1115,+CONV,+MODE%3E%3E-for-SingleA0"],[255,"impl-Channel%3CAds1x1x%3CDI,+Ads1015,+CONV,+MODE%3E%3E-for-SingleA0"],[256,"impl-Channel%3CAds1x1x%3CDI,+Ads1115,+CONV,+MODE%3E%3E-for-SingleA1"],[257,"impl-Channel%3CAds1x1x%3CDI,+Ads1015,+CONV,+MODE%3E%3E-for-SingleA1"],[258,"impl-Channel%3CAds1x1x%3CDI,+Ads1015,+CONV,+MODE%3E%3E-for-SingleA2"],[259,"impl-Channel%3CAds1x1x%3CDI,+Ads1115,+CONV,+MODE%3E%3E-for-SingleA2"],[260,"impl-Channel%3CAds1x1x%3CDI,+Ads1015,+CONV,+MODE%3E%3E-for-SingleA3"],[261,"impl-Channel%3CAds1x1x%3CDI,+Ads1115,+CONV,+MODE%3E%3E-for-SingleA3"],[262,"impl-Channel%3CAds1x1x%3CDI,+Ads1115,+CONV,+MODE%3E%3E-for-DifferentialA0A1"],[263,"impl-Channel%3CAds1x1x%3CDI,+Ads1014,+CONV,+MODE%3E%3E-for-DifferentialA0A1"],[264,"impl-Channel%3CAds1x1x%3CDI,+Ads1015,+CONV,+MODE%3E%3E-for-DifferentialA0A1"],[265,"impl-Channel%3CAds1x1x%3CDI,+Ads1113,+CONV,+MODE%3E%3E-for-DifferentialA0A1"],[266,"impl-Channel%3CAds1x1x%3CDI,+Ads1114,+CONV,+MODE%3E%3E-for-DifferentialA0A1"],[267,"impl-Channel%3CAds1x1x%3CDI,+Ads1013,+CONV,+MODE%3E%3E-for-DifferentialA0A1"],[268,"impl-Channel%3CAds1x1x%3CDI,+Ads1115,+CONV,+MODE%3E%3E-for-DifferentialA0A3"],[269,"impl-Channel%3CAds1x1x%3CDI,+Ads1015,+CONV,+MODE%3E%3E-for-DifferentialA0A3"],[270,"impl-Channel%3CAds1x1x%3CDI,+Ads1015,+CONV,+MODE%3E%3E-for-DifferentialA1A3"],[271,"impl-Channel%3CAds1x1x%3CDI,+Ads1115,+CONV,+MODE%3E%3E-for-DifferentialA1A3"],[272,"impl-Channel%3CAds1x1x%3CDI,+Ads1015,+CONV,+MODE%3E%3E-for-DifferentialA2A3"],[273,"impl-Channel%3CAds1x1x%3CDI,+Ads1115,+CONV,+MODE%3E%3E-for-DifferentialA2A3"]]}],\
["ak09915_rs",{"doc":"","t":"FPPPPPPPPPGPPPPPPPPPPGPGPPPPPPPPPONNNNNNNNNNNNNNNNNNNONNNNNONNNNNNNNNNNNNNNNNNNNNN","n":["Ak09915","CNTL2","CNTL3","Cont100Hz","Cont10Hz","Cont1Hz","Cont200Hz","Cont20Hz","Cont50Hz","DataNotReady","Error","HXH","HXL","HYH","HYL","HZH","HZL","I2C","I2CDIS","InvalidData","MagneticSensorOverflow","Mode","PowerDown","Register","ST1","ST2","SelfTest","Single","TMPS","TS1","TS2","WIA1","WIA2","address","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_data_ready","check_st2","check_st2_value","clone","clone_into","eq","fmt","from","from","from","from","i2c","init","into","into","into","into","mode","new","read","read_raw","read_raw_unchecked","read_register","reset","self_test","set_mode","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write_register"],"q":[[0,"ak09915_rs"],[82,"core::result"],[83,"embedded_hal::blocking::i2c"],[84,"embedded_hal::blocking::i2c"],[85,"core::fmt"],[86,"core::fmt"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check St2 register value directly","Checks the status of the ST2 register based on the …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,17,17,9,9,9,9,9,9,3,0,17,17,17,17,17,17,3,17,3,3,0,9,0,17,17,9,9,17,17,17,17,17,1,17,1,9,3,17,1,9,3,1,1,1,9,9,3,3,17,1,9,3,1,1,17,1,9,3,1,1,1,1,1,1,1,1,1,9,17,1,9,3,17,1,9,3,17,1,9,3,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-2]]],[[4,[2,[3,[-1]]]]],[],[[6,[],[[5,[-1]]]],[7,[],[[5,[-1]]]]]],[[[1,[-2]]],[[4,[2,[3,[-1]]]]],[],[[6,[],[[5,[-1]]]],[7,[],[[5,[-1]]]]]],[8,[[4,[2,[3,[-1]]]]],[]],[9,9],[[-1,-2],2,[],[]],[[[3,[-1]],[3,[-1]]],10,11],[[[3,[-1]],12],13,14],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[[1,[-2]]],[[4,[2,[3,[-1]]]]],[],[[6,[],[[5,[-1]]]],[7,[],[[5,[-1]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-2,[[1,[-2]]],[],[[6,[],[[5,[-1]]]],[7,[],[[5,[-1]]]]]],[[[1,[-2]]],[[4,[[2,[15,15,15]],[3,[-1]]]]],[],[[6,[],[[5,[-1]]]],[7,[],[[5,[-1]]]]]],[[[1,[-2]]],[[4,[[2,[16,16,16]],[3,[-1]]]]],[],[[6,[],[[5,[-1]]]],[7,[],[[5,[-1]]]]]],[[[1,[-2]]],[[4,[[2,[16,16,16]],[3,[-1]]]]],[],[[6,[],[[5,[-1]]]],[7,[],[[5,[-1]]]]]],[[[1,[-2]],17],[[4,[8,[3,[-1]]]]],[],[[6,[],[[5,[-1]]]],[7,[],[[5,[-1]]]]]],[[[1,[-2]]],[[4,[2,[3,[-1]]]]],[],[[6,[],[[5,[-1]]]],[7,[],[[5,[-1]]]]]],[[[1,[-2]]],[[4,[10,[3,[-1]]]]],[],[[6,[],[[5,[-1]]]],[7,[],[[5,[-1]]]]]],[[[1,[-2]],9],[[4,[2,[3,[-1]]]]],[],[[6,[],[[5,[-1]]]],[7,[],[[5,[-1]]]]]],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[[[1,[-2]],17,8],[[4,[2,[3,[-1]]]]],[],[[6,[],[[5,[-1]]]],[7,[],[[5,[-1]]]]]]],"c":[],"p":[[5,"Ak09915",0],[1,"tuple"],[6,"Error",0],[6,"Result",82],[17,"Error"],[10,"Write",83],[10,"WriteRead",83],[1,"u8"],[6,"Mode",0],[1,"bool"],[10,"PartialEq",84],[5,"Formatter",85],[8,"Result",85],[10,"Debug",85],[1,"f32"],[1,"i16"],[6,"Register",0],[5,"TypeId",86]],"b":[]}],\
["approx",{"doc":"A crate that provides facilities for testing the …","t":"FKRFKFKMQNNQQQQQQQNNNNNNNNNMMMNNNOOONNNNNNNNNNONONNNMQNNQNNNNNNNNNMQNNQ","n":["AbsDiff","AbsDiffEq","Epsilon","Relative","RelativeEq","Ulps","UlpsEq","abs_diff_eq","abs_diff_eq","abs_diff_ne","abs_diff_ne","abs_diff_ne","assert_abs_diff_eq","assert_abs_diff_ne","assert_relative_eq","assert_relative_ne","assert_ulps_eq","assert_ulps_ne","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","default","default","default_epsilon","default_max_relative","default_max_ulps","epsilon","epsilon","epsilon","epsilon","epsilon","epsilon","eq","eq","eq","from","from","from","into","into","into","max_relative","max_relative","max_ulps","max_ulps","ne","ne","ne","relative_eq","relative_eq","relative_ne","relative_ne","relative_ne","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ulps_eq","ulps_eq","ulps_ne","ulps_ne","ulps_ne"],"q":[[0,"approx"],[71,"core::marker"],[72,"core::result"],[73,"core::any"]],"d":["The requisite parameters for testing for approximate …","Equality that is defined using the absolute difference of …","Used for specifying relative comparisons.","The requisite parameters for testing for approximate …","Equality comparisons between two numbers using both the …","The requisite parameters for testing for approximate …","Equality comparisons between two numbers using both the …","A test for equality that uses the absolute difference to …","Approximate equality of using the absolute difference.","The inverse of <code>AbsDiffEq::abs_diff_eq</code>.","The inverse of <code>AbsDiffEq::abs_diff_eq</code>.","Approximate inequality of using the absolute difference.","An assertion that delegates to <code>abs_diff_eq!</code>, and panics …","An assertion that delegates to <code>abs_diff_ne!</code>, and panics …","An assertion that delegates to <code>relative_eq!</code>, and panics …","An assertion that delegates to <code>relative_ne!</code>, and panics …","An assertion that delegates to <code>ulps_eq!</code>, and panics with a …","An assertion that delegates to <code>ulps_ne!</code>, and panics with a …","","","","","","","","","","The default tolerance to use when testing values that are …","The default relative tolerance for testing values that are …","The default ULPs to tolerate when testing values that are …","Replace the epsilon value with the one specified.","Replace the epsilon value with the one specified.","Replace the epsilon value with the one specified.","The tolerance to use when testing values that are close …","The tolerance to use when testing values that are close …","The tolerance to use when testing values that are close …","Peform the equality comparison","Peform the equality comparison","Peform the equality comparison","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Replace the maximum relative value with the one specified.","The relative tolerance for testing values that are …","Replace the max ulps value with the one specified.","The ULPs to tolerate when testing values that are …","Peform the inequality comparison","Peform the inequality comparison","Peform the inequality comparison","A test for equality that uses a relative comparison if the …","Approximate equality using both the absolute difference …","The inverse of <code>RelativeEq::relative_eq</code>.","The inverse of <code>RelativeEq::relative_eq</code>.","Approximate inequality using both the absolute difference …","","","","","","","","","","A test for equality that uses units in the last place …","Approximate equality using both the absolute difference …","The inverse of <code>UlpsEq::ulps_eq</code>.","The inverse of <code>UlpsEq::ulps_eq</code>.","Approximate inequality using both the absolute difference …"],"i":[0,0,2,0,0,0,0,2,0,2,2,0,0,0,0,0,0,0,5,6,8,5,6,8,5,6,8,2,7,9,5,6,8,5,6,8,5,6,8,5,6,8,5,6,8,6,6,8,8,5,6,8,7,0,7,7,0,5,6,8,5,6,8,5,6,8,9,0,9,9,0],"f":[0,0,0,0,0,0,0,[[[2,[],[[1,[-1]]]],-2,-1],3,[],4],0,[[[2,[],[[1,[-1]]]],-2,-1],3,[],4],[[[2,[],[[1,[-1]]]],-2,-1],3,[],4],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[5,[-2,-1]]],4,[[2,[-1]],4]],[[],[[6,[-2,-1]]],4,[[7,[-1]],4]],[[],[[8,[-2,-1]]],4,[[9,[-1]],4]],[[],-1,[]],[[],-1,[]],[[],10],[[[5,[-2,-1]]],[[5,[-2,-1]]],4,[[2,[-1]],4]],[[[6,[-2,-1]]],[[6,[-2,-1]]],4,[[7,[-1]],4]],[[[8,[-2,-1]]],[[8,[-2,-1]]],4,[[9,[-1]],4]],0,0,0,[[[5,[-2,-1]],-2,-1],3,4,[[2,[-1]],4]],[[[6,[-2,-1]],-2,-1],3,4,[[7,[-1]],4]],[[[8,[-2,-1]],-2,-1],3,4,[[9,[-1]],4]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-2,-1]]],[[6,[-2,-1]]],4,[[7,[-1]],4]],0,[[[8,[-2,-1]],10],[[8,[-2,-1]]],4,[[9,[-1]],4]],0,[[[5,[-2,-1]],-2,-1],3,4,[[2,[-1]],4]],[[[6,[-2,-1]],-2,-1],3,4,[[7,[-1]],4]],[[[8,[-2,-1]],-2,-1],3,4,[[9,[-1]],4]],[[7,-1,-2,-2],3,4,[]],0,[[7,-1,-2,-2],3,4,[]],[[7,-1,-2,-2],3,4,[]],0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[[9,-1,-2,10],3,4,[]],0,[[9,-1,-2,10],3,4,[]],[[9,-1,-2,10],3,4,[]],0],"c":[],"p":[[17,"Epsilon"],[10,"AbsDiffEq",0],[1,"bool"],[10,"Sized",71],[5,"AbsDiff",0],[5,"Relative",0],[10,"RelativeEq",0],[5,"Ulps",0],[10,"UlpsEq",0],[1,"u32"],[6,"Result",72],[5,"TypeId",73]],"b":[]}],\
["bitflags",{"doc":"A typesafe bitmask flag generator useful for sets of …","t":"Q","n":["bitflags"],"q":[[0,"bitflags"]],"d":["The macro used to generate the flag structures."],"i":[0],"f":[0],"c":[],"p":[],"b":[]}],\
["bitvec",{"doc":"<code>bitvec</code>","t":"QCCQQQQCCCCCCCCCCCCCKKFFFFFRRTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFTONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGGPPFPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOKNMMNMMTFFFFFFTTTTTTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTKTTHHKEFFMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHEEQEEEEEEEEEEEEEEEQQQQFGFFGTFTTFPPFKPPTTTPPNNNNNNNNHHNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNHNNHNNNNNNNNNHNONHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNNNHNHNHNHNNNNHHONNHNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNHHHNHNIFKFFFFFFFRFFFFFTTRFFFFFFFFFFFFFFFFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHHHNNNNMNMNMNMNNMNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTTRRKRRTNMMMFFTEFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKKKKRTMMMMNMMMMMM","n":["BitArr","access","array","bitarr","bitbox","bits","bitvec","boxed","domain","field","index","macros","mem","order","prelude","ptr","slice","store","vec","view","BitAccess","BitSafe","BitSafeU16","BitSafeU32","BitSafeU64","BitSafeU8","BitSafeUsize","Mem","Rad","ZERO","as_raw_mut_slice","as_raw_mut_slice","as_raw_mut_slice","as_raw_mut_slice","as_raw_mut_slice","as_raw_slice","as_raw_slice","as_raw_slice","as_raw_slice","as_raw_slice","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_bits","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","get_writers","into","into","into","into","into","invert_bits","load","load","load","load","load","load","load_value","load_value","load_value","load_value","load_value","new","new","new","new","new","set_bits","store_value","store_value","store_value","store_value","store_value","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_view_bits","try_view_bits","try_view_bits","try_view_bits","try_view_bits","try_view_bits_mut","try_view_bits_mut","try_view_bits_mut","try_view_bits_mut","try_view_bits_mut","type_id","type_id","type_id","type_id","type_id","view_bits","view_bits","view_bits","view_bits","view_bits","view_bits_mut","view_bits_mut","view_bits_mut","view_bits_mut","view_bits_mut","write_bit","BitArray","IntoIter","ZERO","_ord","as_bitslice","as_bitslice","as_mut","as_mut_bitslice","as_mut_bitslice","as_mut_slice","as_mut_slice","as_raw_mut_slice","as_raw_slice","as_ref","as_slice","as_slice","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","count","data","default","deref","deref_mut","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","hash","index","index_mut","into","into","into_inner","into_iter","into_iter","into_iter","into_iter","is_empty","last","len","len","load_be","load_le","new","new","next","next_back","not","nth","nth_back","partial_cmp","size_hint","store_be","store_le","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","BitBox","IntoIter","as_bitslice","as_bitslice","as_mut","as_mut_bitslice","as_mut_bitslice","as_raw_mut_slice","as_raw_slice","as_ref","as_ref","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","count","default","deref","deref_mut","drop","eq","fill_uninitialized","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_align","from","from","from","from","from","from","from","from_bitslice","from_boxed_slice","from_iter","from_raw","hash","index","index_mut","into","into","into_bitvec","into_boxed_slice","into_iter","into_iter","into_raw","last","leak","len","load_be","load_le","next","next_back","not","nth","nth_back","partial_cmp","size_hint","store_be","store_le","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from_boxed_slice","try_into","try_into","type_id","type_id","BitDomain","Domain","Enclave","Enclave","PartialElement","Region","Region","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounds","clear","clone","clone","clone","clone_into","clone_into","clone_into","default","default","enclave","enclave","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","hash","head","into","into","into","into_bit_domain","into_bitslice","into_iter","invert","len","load_value","mask","next","next_back","region","region","set","store_value","store_value_aliased","tail","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","body","head","tail","body","head","tail","BitField","load","load_be","load_le","store","store_be","store_le","ALL","BitEnd","BitIdx","BitIdxError","BitMask","BitPos","BitSel","MAX","MAX","MAX","MIN","MIN","MIN","ZERO","bitand","bitor","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","combine","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","insert","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","mask","mask","mask","new","new","new","new","new","new_unchecked","new_unchecked","new_unchecked","next","not","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","position","prev","range","range_all","range_all","range_from","select","select","sum","test","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","ALL","BitRegister","INDX","MASK","bits_of","elts","BitOrder","LocalBits","Lsb0","Msb0","at","at","at","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","hash","hash","into","into","mask","mask","mask","partial_cmp","partial_cmp","select","select","select","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify","verify_for_type","AsBits","AsMutBits","BitArr","BitArray","BitBox","BitOrder","BitPtr","BitPtrRange","BitRef","BitSlice","BitStore","BitVec","LocalBits","Lsb0","Msb0","_","_","_","bitarr","bitbox","bits","bitvec","BitPtr","BitPtrError","BitPtrRange","BitRef","BitSpanError","CONTAINS_MUTABILITY","Const","DANGLING","EMPTY","MisalignError","Misaligned","Misaligned","Mut","Mutability","Null","Null","PEANO_NUMBER","RENDER","SELF","TooHigh","TooLong","add","address","align_offset","as_mut","as_mut","as_ref","as_ref","bit","bitslice_from_raw_parts","bitslice_from_raw_parts_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","check_alignment","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","commit","contains","copy","copy_from","copy_from_nonoverlapping","copy_nonoverlapping","copy_to","copy_to_nonoverlapping","count","default","default","default","deref","deref_mut","drop","drop_in_place","drop_in_place","end","end_bound","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","freeze","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bitptr","from_mut","from_mut_slice","from_range","from_ref","from_slice","from_slice_mut","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into_bitptr","into_iter","into_range","is_empty","is_null","last","len","new","new_unchecked","next","next_back","not","nth","nth_back","null","null_mut","offset","offset_from","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pointer","pointer","raw_parts","read","read","read_unaligned","read_unaligned","read_volatile","read_volatile","replace","replace","replace","set","size_hint","slice_from_raw_parts","slice_from_raw_parts_mut","start","start_bound","sub","swap","swap","swap","swap_nonoverlapping","thaw","to_const","to_mut","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_raw_parts","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","wrapping_add","wrapping_offset","wrapping_sub","write","write","write_bits","write_bytes","write_unaligned","write_unaligned","write_volatile","write_volatile","BitRefIter","BitSlice","BitSliceIndex","BitValIter","Chunks","ChunksExact","ChunksExactMut","ChunksExactMutNoAlias","ChunksMut","ChunksMutNoAlias","Immut","Iter","IterMut","IterMutNoAlias","IterOnes","IterZeros","MAX_BITS","MAX_ELTS","Mut","RChunks","RChunksExact","RChunksExactMut","RChunksExactMutNoAlias","RChunksMut","RChunksMutNoAlias","RSplit","RSplitMut","RSplitMutNoAlias","RSplitN","RSplitNMut","RSplitNMutNoAlias","Split","SplitInclusive","SplitInclusiveMut","SplitInclusiveMutNoAlias","SplitMut","SplitMutNoAlias","SplitN","SplitNMut","SplitNMutNoAlias","Windows","align_to","align_to_mut","all","any","as_bitptr","as_bitptr_range","as_bitslice","as_bitslice","as_mut","as_mut_bitptr","as_mut_bitptr_range","as_mut_ptr","as_mut_ptr_range","as_ptr","as_ptr_range","as_ref","as_ref","as_ref","as_slice","as_slice","bit_domain","bit_domain_mut","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_refs","by_vals","chunks","chunks_exact","chunks_exact_mut","chunks_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_from_bitslice","clone_from_slice","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","contains","copied","copy_from_bitslice","copy_from_slice","copy_within","copy_within_unchecked","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count_ones","count_zeros","default","default","default","default","domain","domain_mut","empty","empty_mut","ends_with","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fill","fill_with","first","first_mut","first_one","first_zero","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_element","from_element_mut","from_mut","from_raw_parts","from_raw_parts_mut","from_raw_parts_unchecked","from_raw_parts_unchecked_mut","from_ref","from_slice","from_slice_mut","from_slice_unchecked","from_slice_unchecked_mut","get","get","get_mut","get_mut","get_unchecked","get_unchecked","get_unchecked_mut","get_unchecked_mut","hash","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_bitslice","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_remainder","into_remainder","into_remainder","into_remainder","into_slice","is_empty","iter","iter_mut","iter_ones","iter_zeros","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last_mut","last_one","last_zero","leading_ones","leading_zeros","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","load_be","load_be","load_le","load_le","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","not","not_all","not_any","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","rchunks","rchunks_exact","rchunks_exact_mut","rchunks_mut","read","remainder","remainder","remove_alias","remove_alias","remove_alias","remove_alias","remove_alias","remove_alias","remove_alias","remove_alias","remove_alias","remove_alias","repeat","replace","replace_unchecked","reverse","rotate_left","rotate_right","rsplit","rsplit_mut","rsplitn","rsplitn_mut","set","set_aliased","set_aliased_unchecked","set_unchecked","shift_left","shift_right","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","some","split","split_at","split_at_mut","split_at_unchecked","split_at_unchecked_mut","split_first","split_first_mut","split_inclusive","split_inclusive_mut","split_last","split_last_mut","split_mut","splitn","splitn_mut","starts_with","store_be","store_be","store_le","store_le","strip_prefix","strip_suffix","swap","swap_unchecked","swap_with_bitslice","swap_with_slice","take_remainder","take_remainder","take_remainder","take_remainder","to_bitvec","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_vec","trailing_ones","trailing_zeros","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_slice","try_from_slice_mut","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","windows","write","ALIAS_WIDTH","ALIGNED_TO_SIZE","Access","Alias","BitStore","Mem","Unalias","ZERO","get_bit","load_value","new","store_value","BitVec","Drain","EMPTY","IntoIter","Splice","append","as_bitptr","as_bitslice","as_bitslice","as_mut","as_mut","as_mut_bitptr","as_mut_bitslice","as_mut_ptr","as_mut_slice","as_ptr","as_raw_mut_slice","as_raw_slice","as_ref","as_ref","as_ref","as_slice","as_slice","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone_into","cmp","count","count","default","deref","deref_mut","drain","drop","drop","drop","eq","extend","extend","extend","extend","extend","extend_from_bitslice","extend_from_raw_slice","extend_from_slice","extend_from_within","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_align","from","from","from","from","from","from","from","from","from_bitslice","from_element","from_iter","from_iter","from_iter","from_iter","from_iter","from_raw_parts","from_slice","from_vec","hash","index","index_mut","insert","into","into","into","into_boxed_bitslice","into_boxed_slice","into_iter","into_iter","into_iter","into_iter","into_iter","into_raw_parts","into_vec","is_empty","last","last","leak","len","len","len","load_be","load_le","new","next","next","next_back","next_back","not","nth","nth_back","nth_back","partial_cmp","pop","push","read","remove","repeat","reserve","reserve_exact","resize","resize_with","retain","set_elements","set_len","set_uninitialized","shrink_to_fit","size_hint","size_hint","splice","split_off","store_be","store_le","swap_remove","to_owned","to_string","truncate","try_from","try_from","try_from","try_from","try_from_slice","try_from_vec","try_into","try_into","try_into","type_id","type_id","type_id","with_capacity","write","AsBits","AsMutBits","BitView","BitViewSized","Store","ZERO","as_bits","as_mut_bits","as_raw_mut_slice","as_raw_slice","into_bitarray","try_as_bits","try_as_mut_bits","try_view_bits","try_view_bits_mut","view_bits","view_bits_mut"],"q":[[0,"bitvec"],[20,"bitvec::access"],[126,"bitvec::array"],[214,"bitvec::boxed"],[304,"bitvec::domain"],[373,"bitvec::domain::BitDomain"],[376,"bitvec::domain::Domain"],[379,"bitvec::field"],[386,"bitvec::index"],[546,"bitvec::mem"],[552,"bitvec::order"],[599,"bitvec::prelude"],[621,"bitvec::ptr"],[880,"bitvec::slice"],[1725,"bitvec::store"],[1737,"bitvec::vec"],[1900,"bitvec::view"],[1917,"core::fmt"],[1918,"core::fmt"],[1919,"core::result"],[1920,"core::any"],[1921,"core::clone"],[1922,"core::cmp"],[1923,"core::marker"],[1924,"core::hash"],[1925,"core::option"],[1926,"funty"],[1927,"alloc::string"],[1928,"core::cmp"],[1929,"alloc::borrow"],[1930,"core::iter::traits::collect"],[1931,"core::cmp"],[1932,"core::cmp"],[1933,"core::hash"],[1934,"core::iter::traits::double_ended"],[1935,"core::iter::traits::exact_size"],[1936,"core::iter::traits::marker"],[1937,"core::convert"],[1938,"wyz::comu"],[1939,"core::fmt"],[1940,"wyz::range"],[1941,"std::io::error"],[1942,"core::ops::range"]],"d":["Bit-Array Type Definition","Memory Bus Access Management","Statically-Allocated, Fixed-Size, Bit Buffer","Bit-Array Value Constructor","Boxed Bit-Slice Constructor","Bit-Slice Region Constructor","Bit-Vector Constructor","Heap-Allocated, Fixed-Size, Bit Buffer","Memory Region Description","Bit-Field Memory Slots","Bit Indices","Constructor Macros","Memory Element Descriptions","In-Element Bit Ordering","Symbol Export","Raw Pointer Implementation","Bit-Addressable Memory Regions","Storage Memory Description","Dynamically-Allocated, Adjustable-Size, Bit Buffer","Bit View Adapters","Bit-Level Access Instructions","Read-Only Semivolatile Handle","Read-Only Shared-Mutable Handle","Read-Only Shared-Mutable Handle","Read-Only Shared-Mutable Handle","Read-Only Shared-Mutable Handle","Read-Only Shared-Mutable Handle","The element type being guarded against improper mutation.","The memory-access type this guards.","The zero constant.","","","","","","","","","","","","","","","","","","","","","Clears bits within a memory element to <code>0</code>.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the function that will write <code>value</code> into all bits …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Inverts bits within a memory element.","Loads the value from memory, allowing for the possibility …","","","","","","","","","","","","","","","","Sets bits within a memory element to <code>1</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Writes a value to one bit in a memory element, returning …","Bit-Precision Array Immediate","Bit-Array Iteration","A bit-array with all bits initialized to zero.","The ordering of bits within an <code>A::Store</code> element.","Explicitly views the bit-array as a bit-slice.","Views the remaining unyielded bits in the iterator.","","Explicitly views the bit-array as a mutable bit-slice.","Mutably views the remaining unyielded bits in the iterator.","Returns a mutable bit-slice containing the entire …","","Views the bit-array as a mutable slice of its underlying …","Views the bit-array as a slice of its underlying memory …","","Returns a bit-slice containing the entire bit-array. …","","","","","","","","","","","","","","","","","","","","The wrapped data buffer.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Removes the bit-array wrapper, returning the contained …","","","","","Tests whether the array is empty.","","Gets the length (in bits) of the bit-array.","","","","Wraps an existing buffer as a bit-array.","Converts a bit-array into its iterator.","","","","","","","","","","","","","","","","","","","","","","Fixed-Size, Heap-Allocated, Bit Slice","An iterator over a <code>BitBox</code>.","Views the remaining unyielded bits as a bit-slice.","Explicitly views the bit-box as a bit-slice.","","Views the remaining unyielded bits as a mutable bit-slice.","Explicitly views the bit-box as a mutable bit-slice.","Views the bit-box as a mutable slice of its underlying …","Views the bit-box as a slice of its underlying memory …","","","","","","","","","","","","","","","","","","","","","","","","","","Sets the unused bits outside the <code>BitBox</code> buffer to a fixed …","","","","","","","","","Ensures that the allocated buffer has no dead bits between …","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Copies a bit-slice region into a new bit-box allocation.","Converts a <code>Box&lt;[T]&gt;</code> into a <code>BitBox&lt;T, O&gt;</code>, in place.","","Constructs a bit-box from a raw bit-slice pointer.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the bit-box into a bit-vector.","Converts the bit-box back into an ordinary boxed element …","","","Consumes the bit-box, returning a raw bit-slice pointer.","","Deliberately leaks the allocated memory, returning an …","","","","","","","","","","","","","","","","","","","Attempts to convert an ordinary boxed slice into a boxed …","","","","","Bit-Slice Partitioning","Bit-Slice Element Partitioning","Indicates that a bit-slice’s contents are entirely in …","Indicates that a bit-slice’s contents are entirely in …","Partially-Owned Memory Element","Indicates that a bit-slice’s contents touch an element …","Indicates that a bit-slice’s contents touch an element …","","","","","","","Gets the semantic head and tail indices that constrain …","Clears all bits governed by the partial-element to <code>0</code>.","","","","","","","","","Attempts to unpack the bit-domain as an <code>Enclave</code> variant. …","Attempts to unpack the bit-domain as an <code>Enclave</code> variant. …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Gets the starting index of the live bits in the element.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the element-wise <code>Domain</code> into the equivalent …","Converts the partial element into a bit-slice over its …","","Inverts the value of each bit governed by the …","","Fetches the value stored through <code>self</code> and masks away extra …","Gets the bit-mask over all accessible bits.","","","Attempts to unpack the bit-domain as a <code>Region</code> variant. …","Attempts to unpack the bit-domain as a <code>Region</code> variant. …","Sets all bits governed by the partial-element to <code>1</code>.","Stores a value through <code>self</code> after masking away extra bits.","Performs a store operation on a partial-element whose bits …","Gets the ending index of the live bits in the element.","","","","","","","","","","","","","","Any bits that wholly-fill elements in the interior of the …","Any bits that partially-fill the first element of the …","Any bits that partially-fill the last element of the …","All fully-used elements in the bit-slice’s underlying …","The first element in the bit-slice’s underlying storage, …","The last element in the bit-slice’s underlying storage, …","C-Style Bit-Field Access","Integer Loading","Big-Endian Integer Loading","Little-Endian Integer Loading","Integer Storing","Big-Endian Integer Storing","Little-Endian Integer Storing","A full bit-mask with every bit set.","One-Bit-After Tail Index","Semantic Bit Index","Bit Index Error","Multi-Bit Selection Mask","Bit Position","One-Hot Bit Selection Mask","The inclusive maximum index within an <code>R</code> element.","The inclusive maximum tail within (or after) an <code>R</code> element.","The position value of the most significant bit in an <code>R</code> …","The inclusive minimum index within an <code>R</code> element.","The inclusive minimum tail within (or after) an <code>R</code> element.","The position value of the least significant bit in an <code>R</code> …","An empty bit-mask with every bit cleared.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new mask with a selector bit activated.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Inserts a selector bit into a mask.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Removes the index wrapper, leaving the internal counter.","Removes the error wrapper, leaving the internal counter.","Removes the tail wrapper, leaving the internal counter.","Removes the position wrapper, leaving the internal counter.","Removes the one-hot selection wrapper, leaving the …","Removes the mask wrapper, leaving the internal value.","Computes the bit selector for <code>self</code> as an accessor mask.","Computes the bit selector for <code>self</code> as an accessor mask.","Computes a bit-mask for <code>self</code>. This is a type-cast.","Wraps a counter value as a known-good index into an <code>R</code> …","Wraps a counter value as a known-good tail of an <code>R</code> …","Wraps a counter value as a known-good position within an <code>R</code> …","Wraps a selector value as a known-good selection in an <code>R</code> …","Wraps any <code>R</code> value as a bit-mask.","Wraps a counter value as an assumed-good index into an <code>R</code> …","Wraps a counter value as an assumed-good position within …","Wraps a selector value as an assumed-good selection in an <code>R</code>…","Increments an index counter, wrapping at the back edge of …","","","","","","","","Computes the bit position corresponding to <code>self</code> under some …","Decrements an index counter, wrapping at the front edge of …","Iterates over all indices between an inclusive start and …","Iterates over all possible index values.","Iterates over all possible selector values.","Iterates over all tail indices at and after an inclusive …","Computes the bit selector corresponding to <code>self</code> under an …","Computes the bit selector corresponding to <code>self</code>.","","Tests if a mask contains a given selector bit.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The literal <code>!0</code>.","Register Descriptions","The number of bits required to store an index in the range …","A mask over all bits that can be used as an index within …","Counts the number of bits in a value of type <code>T</code>.","Bit Storage Calculator","In-Element Bit Ordering","C-Compatible Bit Ordering","Least-Significant-First Bit Traversal","Most-Significant-First Bit Traversal","Translates a semantic bit index into a real bit position.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Produces a multi-bit selection mask from a range of …","","","","","Produces a single-bit selection mask from a bit-index.","","","","","","","","","","","Complete <code>BitOrder</code> Verification","Single-Type <code>BitOrder</code> Verification","","","Bit-Array Type Definition","","","","","","","","","","","","","","","","Bit-Array Value Constructor","Boxed Bit-Slice Constructor","Bit-Slice Region Constructor","Bit-Vector Constructor","Single-Bit Pointer","Errors produced by invalid bit-pointer components.","Bit-Pointer Range","Proxy Bit-Reference","An error produced when creating <code>BitSpan</code> encoded references.","Marks whether this type contains mutability permissions …","A basic <code>const</code> marker.","The canonical dangling pointer. This selects the starting …","The canonical empty range. All ranges with zero length …","The error produced when an address is insufficiently …","Attempted to construct a bit-pointer with an address not …","The base element pointer is not aligned.","A basic <code>mut</code> marker.","Generalized mutability permissions.","Attempted to construct a bit-pointer with the null element …","A null pointer was provided.","Counts the layers of <code>Frozen&lt;&gt;</code> wrapping around a base <code>Const</code> …","One of <code>*const</code> or <code>*mut</code>.","Allow instances to be constructed generically.","The requested address is too high, and wraps to zero.","The requested length exceeds the <code>BitSpan</code> length ceiling.","Adjusts a bit-pointer upwards in memory. This is …","Gets the address of the base storage element.","Computes the offset (in bits) that needs to be applied to …","","Produces a proxy reference to the referent bit.","","Produces a proxy reference to the referent bit.","Gets the <code>BitIdx</code> that selects the bit within the memory …","Bit-Slice Pointer Construction","Bit-Slice Pointer Construction","","","","","","","","","","","","","","","","","Casts to a <code>BitPtr</code> with a different storage parameter.","Ensures that an address is well-aligned to its referent …","","","","","","","","","","","","","","","","","","","","","","","","Commits a bit into the proxied location.","Tests if a given bit-pointer is contained within the range.","Bit-wise <code>memcpy</code>","Copies <code>count</code> bits from the region starting at <code>src</code> to the …","Copies <code>count</code> bits from the region starting at <code>src</code> to the …","Bit-wise <code>memcpy</code>","Copies <code>count</code> bits from <code>self</code> to <code>dest</code>. The source and …","Copies <code>count</code> bits from <code>self</code> to <code>dest</code>. The source and …","","","","","","","","Remote Destructor","Runs the destructor of the referent value.","The higher, exclusive, bound of the range. The bit to …","","Bit-Pointer Equality","","","","","","","","","","","","","","","","","","","","","","","","","Freeze this type, wrapping it in a <code>const</code> marker that may …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Converts a bit-pointer into a proxy bit-reference.","Constructs a mutable <code>BitPtr</code> to the zeroth bit in a single …","Constructs a <code>BitPtr</code> to the zeroth bit in the zeroth …","Explicitly converts a <code>Range&lt;BitPtr&gt;</code> into a <code>BitPtrRange</code>.","Constructs a <code>BitPtr</code> to the zeroth bit in a single element.","Constructs a <code>BitPtr</code> to the zeroth bit in the zeroth …","Constructs a mutable <code>BitPtr</code> to the zeroth bit in the …","Bit-Pointer Hashing","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Decays the bit-reference to an ordinary bit-pointer.","","Explicitly converts a <code>BitPtrRange</code> into a <code>Range&lt;BitPtr&gt;</code>.","Tests if the range is empty (the distance between …","Tests if a bit-pointer is the null value.","","","Tries to construct a <code>BitPtr</code> from a memory location and a …","Constructs a <code>BitPtr</code> from an address and head index, …","","","","","","Bit-Pointer Sentinel Value","Bit-Pointer Sentinel Value","Creates a new bit-pointer at a specified offset from the …","Calculates the distance (in bits) between two bit-pointers.","","","","","","","","","","Gets a raw pointer to the memory location containing the …","Gets a raw pointer to the memory element containing the …","Decomposes a bit-pointer into its element address and bit …","Single-Bit Read","Reads the bit from <code>*self</code>.","Single-Bit Unaligned Read","Reads the bit from <code>*self</code> using an unaligned memory access.","Single-Bit Volatile Read","Reads the bit from <code>*self</code> using a volatile load.","Single-Bit Replacement","Moves <code>src</code> into the referenced bit, returning the previous …","Replaces the bit at <code>*self</code> with a new value, returning the …","Writes <code>value</code> into the proxy.","","Raw Bit-Slice Pointer Construction","Raw Bit-Slice Pointer Construction","The lower, inclusive, bound of the range. The bit to which …","","Adjusts a bit-pointer downwards in memory. This is …","Bit Swap","Swaps the bit values of two proxies.","Swaps the bits at two mutable locations.","Many-Bit Swap","Thaw a previously-frozen type, removing its <code>Frozen</code> marker …","Removes write permissions from a bit-pointer.","Adds write permissions to a bit-pointer.","","","","","","","","","Decomposes a bit-pointer into its address and head-index …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adjusts a bit-pointer upwards in memory, using wrapping …","Creates a new bit-pointer at a specified offset from the …","Adjusts a bit-pointer downwards in memory, using wrapping …","Single-Bit Write","Writes a new bit into the given location.","Bit-wise <code>memset</code>","Bit-wise <code>memset</code>","Single-Bit Unaligned Write","Writes a bit into memory, tolerating unaligned addresses.","Single-Bit Volatile Write","Writes a new bit using volatile I/O operations.","An iterator over <code>BitSlice</code> that yields <code>&amp;bool</code> directly.","Bit-Addressable Memory","Bit-Slice Indexing","An iterator over <code>BitSlice</code> that yields <code>bool</code> directly.","Shared Bit-Slice Chunking","Shared Bit-Slice Exact Chunking","Exclusive Bit-Slice Exact Chunking","Anti-Aliasing Iterator Adapter","Exclusive Bit-Slice Chunking","Anti-Aliasing Iterator Adapter","The output type of immutable access.","Shared Bit-Slice Iteration","Exclusive Bit-Slice Iteration","Anti-Aliasing Iterator Adapter","Bit Seeking","Bit Seeking","The inclusive maximum length of a <code>BitSlice&lt;_, T&gt;</code>.","The inclusive maximum length that a <code>[T]</code> slice can be for …","The output type of mutable access.","Shared Bit-Slice Reverse Chunking","Shared Bit-Slice Reverse Exact Chunking","Exclusive Bit-Slice Reverse Exact Chunking","Anti-Aliasing Iterator Adapter","Exclusive Bit-Slice Chunking","Anti-Aliasing Iterator Adapter","Shared Bit-Slice Reverse Splitting","Exclusive Bit-Slice Reverse Splitting","Anti-Aliasing Iterator Adapter","Shared Bit-Slice Reverse Splitting","Exclusive Bit-Slice Reverse Splitting","Anti-Aliasing Iterator Adapter","Shared Bit-Slice Splitting","Shared Bit-Slice Splitting","Exclusive Bit-Slice Splitting","Anti-Aliasing Iterator Adapter","Exclusive Bit-Slice Splitting","Anti-Aliasing Iterator Adapter","Shared Bit-Slice Splitting","Exclusive Bit-Slice Splitting","Anti-Aliasing Iterator Adapter","Bit-Slice Windowing","Produces bit-slice view(s) with different underlying …","Produces bit-slice view(s) with different underlying …","Tests if every bit is set to <code>1</code> in the bit-slice.","Tests if there is at least one bit set to <code>1</code> in the …","Gets a raw pointer to the zeroth bit of the bit-slice.","Views the bit-slice as a half-open range of bit-pointers, …","Views the currently unyielded bit-slice.","Views the remaining bit-slice that has not yet been …","","Gets a raw, write-capable pointer to the zeroth bit of the …","Views the bit-slice as a half-open range of write-capable …","","Produces a range of mutable bit-pointers to each bit in …","","Produces a range of bit-pointers to each bit in the …","","","","","","Partitions a bit-slice into maybe-contended and …","Partitions a mutable bit-slice into maybe-contended and …","Boolean Arithmetic","","","","","","","","Boolean Arithmetic","","","","","","Boolean Arithmetic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adapts the iterator to yield regular <code>&amp;bool</code> references …","Adapts the iterator to yield <code>bool</code> values rather than the …","Iterates over non-overlapping subslices of a bit-slice.","Iterates over non-overlapping subslices of a bit-slice.","Iterates over non-overlapping mutable subslices of a …","Iterates over non-overlapping mutable subslices of a …","","","","","","","","","","","","","","Copies the bits from <code>src</code> into <code>self</code>.","","","","","","","","","","","","","","","","","","Tests if the bit-slice contains the given sequence …","Yields <code>bool</code> values directly, rather than proxy references.","Copies all bits from <code>src</code> into <code>self</code>, using batched …","","Copies a span of bits to another location in the bit-slice.","Copies bits from one region of the bit-slice to another …","","","","","","","","","","","","","","","","","","","","","","","","","Counts the number of bits set to <code>1</code> in the bit-slice …","Counts the number of bits cleared to <code>0</code> in the bit-slice …","","","","","Views the underlying memory of a bit-slice, removing alias …","Views the underlying memory of a bit-slice, removing alias …","Produces an empty bit-slice with an arbitrary lifetime.","Produces an empty bit-slice with an arbitrary lifetime.","Tests if the bit-slice ends with the given sequence.","","","","","","","","","","","","","","","Fills the bit-slice with a given bit.","Fills the bit-slice with bits produced by a generator …","Gets a reference to the first bit of the bit-slice, or <code>None</code>…","Gets a mutable reference to the first bit of the …","Finds the index of the first bit in the bit-slice set to <code>1</code>.","Finds the index of the first bit in the bit-slice cleared …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a shared <code>&amp;BitSlice</code> reference over a shared …","Constructs an exclusive <code>&amp;mut BitSlice</code> reference over an …","","Raw Bit-Slice Construction","Raw Bit-Slice Construction","Raw Bit-Slice Construction","Raw Bit-Slice Construction","","Constructs a shared <code>&amp;BitSlice</code> reference over a slice of …","Constructs an exclusive <code>&amp;mut BitSlice</code> reference over a …","Constructs a shared <code>&amp;BitSlice</code> over an element slice, …","Constructs an exclusive <code>&amp;mut BitSlice</code> over an element …","Immutably indexes into a bit-slice, returning <code>None</code> if <code>self</code> …","Gets a reference to a single bit or a subsection of the …","Mutably indexes into a bit-slice, returning <code>None</code> if <code>self</code> …","Gets a mutable reference to a single bit or a subsection …","Immutably indexes into a bit-slice without doing any …","Gets a reference to a single bit or to a subsection of the …","Mutably indexes into a bit-slice without doing any bounds …","Gets a mutable reference to a single bit or a subsection …","","Immutably indexes into a bit-slice, panicking if <code>self</code> is …","","","","","Looks up a single bit by its semantic index.","","","Mutably indexes into a bit-slice, panicking if <code>self</code> is out …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Views the underlying bit-slice as a subslice of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consumes the iterator, returning the remnant bit-slice …","Consumes the iterator, returning the remnant bit-slice …","See <code>ChunksExactMut::into_remainder()</code>.","See <code>RChunksExactMut::into_remainder()</code>","","Tests if the bit-slice is empty (length zero).","Produces an iterator over each bit in the bit-slice.","Produces a mutable iterator over each bit in the bit-slice.","Enumerates the index of each bit in a bit-slice set to <code>1</code>.","Enumerates the index of each bit in a bit-slice cleared to …","","","","Gets a reference to the last bit of the bit-slice, or <code>None</code> …","","","","","","","","","","","","","","","","","","","","","","Gets a mutable reference to the last bit of the bit-slice, …","Finds the index of the last bit in the bit-slice set to <code>1</code>.","Finds the index of the last bit in the bit-slice cleared …","Counts the number of bits from the start of the bit-slice …","Counts the number of bits from the start of the bit-slice …","","","","Gets the number of bits in the bit-slice.","","","","","","","","","","","","","","","","","","","","","","<code>Msb0</code> Big-Endian Integer Loading","<code>Lsb0</code> Big-Endian Integer Loading","<code>Msb0</code> Little-Endian Integer Loading","<code>Lsb0</code> Little-Endian Integer Loading","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tests if at least one bit is cleared to <code>0</code> in the bit-slice.","Tests if every bit is cleared to <code>0</code> in the bit-slice.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Iterates over non-overlapping subslices of a bit-slice, …","Iterates over non-overlapping subslices of a bit-slice, …","Iterates over non-overlapping mutable subslices of a …","Iterates over non-overlapping mutable subslices of a …","","Gets the remnant bit-slice that the iterator will not …","Gets the remnant bit-slice that the iterator will not …","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Creates a bit-vector by repeating a bit-slice <code>n</code> times.","Writes a new value into a bit, and returns its previous …","Writes a new value into a bit, returning the previous …","Reverses the order of bits in a bit-slice.","Rotates the contents of a bit-slice to the left (towards …","Rotates the contents of a bit-slice to the right (away …","Iterates over subslices separated by bits that match a …","Iterates over mutable subslices separated by bits that …","Iterates over mutable subslices separated by bits that …","Iterates over mutable subslices separated by bits that …","Writes a new value into a single bit.","Writes a new value into a single bit, using alias-safe …","Writes a new value into a single bit, using alias-safe …","Writes a new value into a single bit, without bounds …","Shifts the contents of a bit-slice “left” (towards the …","Shifts the contents of a bit-slice “right” (away from …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tests if at least one bit is set to <code>1</code>, and at least one …","Iterates over subslices separated by bits that match a …","Splits a bit-slice in two parts at an index.","Splits a mutable bit-slice in two parts at an index.","Splits a bit-slice at an index, without bounds checking.","Splits a mutable bit-slice at an index, without bounds …","Splits the bit-slice into a reference to its first bit, …","Splits the bit-slice into mutable references of its first …","Iterates over subslices separated by bits that match a …","Iterates over mutable subslices separated by bits that …","Splits the bit-slice into a reference to its last bit, and …","Splits the bit-slice into mutable references to its last …","Iterates over mutable subslices separated by bits that …","Iterates over subslices separated by bits that match a …","Iterates over mutable subslices separated by bits that …","Tests if the bit-slice begins with the given sequence.","<code>Lsb0</code> Big-Endian Integer Storing","<code>Msb0</code> Big-Endian Integer Storing","<code>Lsb0</code> Little-Endian Integer Storing","<code>Msb0</code> Little-Endian Integer Storing","Removes a prefix bit-slice, if present.","Removes a suffix bit-slice, if present.","Exchanges the bit values at two indices.","Swaps two bits in a bit-slice, without bounds checking.","Swaps the contents of two bit-slices.","","Takes the remnant bit-slice out of the iterator.","Takes the remnant bit-slice out of the iterator.","See <code>ChunksExactMut::take_remainder()</code>","See <code>RChunksExactMut::take_remainder()</code>","Copies a bit-slice into an owned bit-vector.","","","","","","","","","","","","","","","","","Counts the number of bits from the end of the bit-slice to …","Counts the number of bits from the end of the bit-slice to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to construct a shared <code>&amp;BitSlice</code> reference over a …","Attempts to construct an exclusive <code>&amp;mut BitSlice</code> reference …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Iterates over consecutive windowing subslices in a …","","All implementors are required to have <code>Self</code> and <code>Self::Alias</code> …","All implementors are required to have their alignment …","A type that selects the appropriate load/store …","A sibling <code>BitStore</code> implementor that is known to be …","Bit Storage","The element type used in the memory region underlying a …","The inverse of <code>::Alias</code>. It is used when a <code>BitSlice</code> removes …","The zero constant.","Reads a single bit out of the memory system according to …","Loads a value out of the memory system according to the …","Wraps a raw memory value as a <code>BitStore</code> type.","Stores a value into the memory system. This is only called …","Bit-Precision Dynamic Array","Draining Iteration","An empty bit-vector with no backing allocation.","","Splicing Iteration","Moves all the bits out of <code>other</code> into the back of <code>self</code>.","Creates an unsafe shared bit-pointer to the start of the …","Views the unyielded bits remaining in the drain.","Explicitly views the bit-vector as a bit-slice.","","","Creates an unsafe writable bit-pointer to the start of the …","Explicitly views the bit-vector as a mutable bit-slice.","","","","Views the bit-vector as a mutable slice of its underlying …","Views the bit-vector as a slice of its underlying memory …","","","","","","","","","","","","","","","","","","","","Gets the allocation capacity, measured in bits.","Empties the bit-vector.","","","","","","","","","Iterates over a portion of the bit-vector, <em>removing</em> all …","","","","","","","","","","Appends the contents of a bit-slice to a bit-vector.","Appends a slice of <code>T</code> elements to a bit-vector.","","Extends <code>self</code> by copying an internal range of its bit-slice …","","","","","","","","","","","Ensures that the live region of the bit-vector’s …","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Copies the contents of a bit-slice into a new heap …","Constructs a new bit-vector from a single element.","","","","","","Constructs a bit-vector handle from its constituent fields.","Constructs a new bit-vector from a slice of memory …","Converts a regular vector in-place into a bit-vector.","","","","Inserts a bit at a given position, shifting all bits after …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts a bit-vector into a boxed bit-slice.","","","","","","","Decomposes a bit-vector into its constituent member fields.","Converts a bit-vector into a <code>Vec</code> of its underlying storage.","Tests if the bit-vector is empty.","","","Destroys the <code>BitVec</code> handle without destroying the …","","Gets the length of the bit-vector.","","","","Constructs a new, empty, bit-vector.","","","","","","","","","","Attempts to remove the trailing bit from the bit-vector.","Appends a single bit to the vector.","","Removes a bit at a given position, shifting all bits after …","Creates a new bit-vector by repeating a bit for the …","Ensures that the bit-vector has allocation capacity for <em>at </em>…","Ensures that the bit-vector has allocation capacity for <em>at </em>…","Resizes the bit-vector to a new length. New bits are …","Resizes the bit-vector to a new length, using a function …","Retains only the bits that the predicate allows.","Overwrites each element (visible in <code>.as_raw_mut_slice()</code>) …","Resizes a bit-vector to a new length.","Sets the uninitialized bits of a bit-vector to a known …","Releases excess capacity back to the allocator.","","","Modifies <code>self.drain()</code> so that the removed bit-slice is …","Splits the bit-vector in half at an index, moving …","","","Takes a bit out of the bit-vector.","","","Shortens the bit-vector, keeping the first <code>new_len</code> bits …","","","","","Fallibly constructs a new bit-vector from a slice of …","Attempts to convert a regular vector in-place into a …","","","","","","","Allocates a new, empty, bit-vector with space for at least …","","Immutable Bit View","Mutable Bit View","Bit View","Helper trait for scalars and arrays, but not slices.","The underlying element type.","The zero constant.","Views <code>self</code> as an immutable bit-slice region with the <code>O</code> …","Views <code>self</code> as a mutable bit-slice region with the <code>O</code> …","Views the type as a mutable slice of its elements.","Views the type as a slice of its elements.","Wraps <code>self</code> in a <code>BitArray</code>.","Attempts to view <code>self</code> as an immutable bit-slice region …","Attempts to view <code>self</code> as a mutable bit-slice region with …","Attempts to view a memory region as an immutable bit-slice.","Attempts to view a memory region as a mutable bit-slice.","Views a memory region as an immutable bit-slice.","Views a memory region as a mutable bit-slice."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,14,14,4,7,8,9,10,4,7,8,9,10,4,7,8,9,10,4,7,8,9,10,2,4,7,8,9,10,4,7,8,9,10,2,4,7,8,9,10,2,14,4,7,8,9,10,4,7,8,9,10,4,7,8,9,10,2,4,7,8,9,10,4,7,8,9,10,4,7,8,9,10,4,7,8,9,10,4,7,8,9,10,4,7,8,9,10,4,7,8,9,10,4,7,8,9,10,2,0,0,25,25,25,27,25,25,27,25,27,25,25,25,25,27,25,25,25,25,25,25,25,25,27,25,25,27,25,27,25,27,25,27,25,25,25,25,25,25,25,25,25,25,25,27,25,25,27,25,25,25,25,27,25,25,25,25,27,25,27,25,27,25,25,25,27,27,27,25,27,27,25,27,25,25,25,27,25,25,25,25,25,27,25,27,25,27,0,0,36,38,38,36,38,38,38,36,38,38,38,38,38,38,38,36,38,38,36,38,38,36,38,36,38,38,36,38,38,38,38,38,38,36,38,38,38,38,38,38,38,38,36,38,38,38,38,38,38,38,38,38,38,38,38,38,36,38,38,38,36,38,38,36,38,36,38,38,36,36,38,36,36,38,36,38,38,36,38,38,36,38,38,38,36,38,36,38,0,0,50,51,0,50,51,50,51,45,50,51,45,45,45,50,51,45,50,51,45,50,51,50,51,50,51,51,51,51,51,51,45,50,51,45,45,45,50,51,45,51,45,51,45,51,45,45,51,51,50,51,45,45,45,45,50,51,45,51,50,51,45,50,51,45,50,51,45,139,139,139,140,140,140,0,53,53,53,53,53,53,3,0,0,0,0,0,0,24,46,55,24,46,55,3,3,3,24,54,46,55,56,3,24,54,46,55,56,3,24,54,46,55,56,3,24,54,46,55,56,3,24,54,46,55,56,3,3,24,54,46,55,56,3,24,54,46,55,56,3,24,24,24,54,54,46,46,46,55,55,55,56,56,56,3,3,3,24,54,46,55,56,3,24,54,46,55,56,3,3,24,54,46,55,56,3,24,54,46,55,56,3,24,55,56,24,46,55,56,3,24,55,56,24,3,24,54,46,55,56,3,24,24,24,24,56,46,24,55,3,3,24,54,46,55,56,3,24,54,46,55,56,3,24,54,46,55,56,3,24,54,46,55,56,3,24,54,46,55,56,3,15,0,15,15,0,0,0,0,0,0,22,65,66,65,66,65,66,65,66,65,66,65,66,65,66,65,66,65,66,65,66,65,66,65,66,22,65,66,65,66,22,65,66,65,66,65,66,65,66,65,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,68,72,0,73,21,0,0,73,21,47,47,47,21,21,68,68,68,70,68,70,68,68,0,0,49,48,70,72,68,71,73,21,49,48,70,72,68,71,73,21,68,0,49,48,70,72,68,71,73,21,49,48,70,72,68,71,73,21,49,48,70,68,71,73,21,70,72,0,68,68,0,68,68,72,49,48,72,70,70,70,0,68,72,72,0,49,48,70,70,70,72,68,71,73,21,49,48,70,70,70,72,68,68,71,71,73,73,21,21,47,49,48,70,72,72,68,68,68,71,73,73,73,21,21,21,70,68,68,72,68,68,68,0,49,48,70,72,68,71,73,21,49,48,70,72,68,71,73,21,70,72,72,72,68,72,72,68,68,72,72,70,72,72,0,0,68,68,49,48,70,70,70,68,71,73,21,68,68,68,0,68,0,68,0,68,0,70,68,70,72,0,0,72,72,68,0,70,68,0,47,68,68,49,48,70,72,68,71,73,21,68,70,71,73,21,49,48,70,72,68,68,68,71,73,21,49,48,70,72,68,71,73,21,49,48,70,72,68,71,73,21,68,68,68,0,68,0,0,0,68,0,68,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,20,20,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,20,20,20,20,81,82,20,20,20,20,20,20,20,81,82,20,81,82,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,81,82,84,115,116,117,118,119,20,89,85,88,86,87,90,102,91,103,92,95,96,97,98,99,100,104,105,106,107,108,109,110,111,112,113,81,82,84,115,116,117,118,119,20,89,85,88,86,87,90,102,91,103,92,95,96,97,98,99,100,104,105,106,107,108,109,110,111,112,113,81,81,20,20,20,20,81,89,85,86,90,91,92,95,96,97,98,99,100,20,20,81,89,85,86,90,91,92,95,96,97,98,99,100,20,99,100,20,81,20,20,20,20,81,82,84,89,85,88,86,87,90,102,91,103,99,100,104,105,106,107,108,109,110,111,112,113,20,20,20,20,99,100,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,99,100,20,20,20,20,20,20,20,81,82,115,116,117,118,119,20,20,20,20,20,20,20,89,85,88,86,87,90,102,91,103,92,95,96,97,98,99,100,81,82,84,115,116,117,118,119,89,85,88,86,87,90,102,91,103,92,95,96,97,98,99,100,104,105,106,107,108,109,110,111,112,113,20,20,0,0,0,0,0,0,20,20,20,20,122,20,122,20,122,20,122,20,20,122,20,20,20,20,20,20,20,122,20,20,20,20,20,20,81,82,84,115,116,117,118,119,89,85,88,86,87,90,102,91,103,92,95,96,97,98,99,100,104,105,106,107,108,109,110,111,112,113,82,81,82,84,115,116,117,118,119,20,20,89,85,88,86,87,90,102,91,103,92,95,96,97,98,99,100,104,105,106,107,108,109,110,111,112,113,87,103,106,108,82,20,20,20,20,20,81,82,84,20,89,85,88,86,87,90,102,91,103,99,100,104,105,106,107,108,109,110,111,112,113,20,20,20,20,20,81,82,84,20,89,85,88,86,87,90,102,91,103,99,100,104,105,106,107,108,109,110,111,112,113,20,20,20,20,81,82,84,115,116,117,118,119,89,85,88,86,87,90,102,91,103,92,95,96,97,98,99,100,104,105,106,107,108,109,110,111,112,113,81,82,84,115,116,117,89,85,88,86,87,90,102,91,103,92,95,96,99,100,104,105,106,107,108,109,110,111,112,113,20,20,20,81,82,84,89,85,88,86,87,90,102,91,103,104,105,106,107,108,109,110,111,112,113,81,82,84,89,85,88,86,87,90,102,91,103,104,105,106,107,108,109,110,111,112,113,20,20,20,20,20,20,20,20,20,20,20,20,20,20,99,100,20,20,20,20,20,86,91,82,115,116,117,118,119,88,87,102,103,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,81,82,84,115,116,117,118,119,89,85,88,86,87,90,102,91,103,92,95,96,97,98,99,100,104,105,106,107,108,109,110,111,112,113,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,87,103,106,108,20,81,20,89,85,86,90,91,92,95,96,97,98,99,100,20,20,20,20,81,82,84,115,116,117,118,119,20,20,89,85,88,86,87,90,102,91,103,92,95,96,97,98,99,100,104,105,106,107,108,109,110,111,112,113,20,20,81,82,84,115,116,117,118,119,89,85,88,86,87,90,102,91,103,92,95,96,97,98,99,100,104,105,106,107,108,109,110,111,112,113,81,82,84,115,116,117,118,119,20,89,85,88,86,87,90,102,91,103,92,95,96,97,98,99,100,104,105,106,107,108,109,110,111,112,113,20,20,37,37,37,37,0,37,37,37,37,37,37,37,0,0,42,0,0,42,42,131,42,42,42,42,42,42,42,42,42,42,131,42,42,131,42,42,42,42,42,42,42,131,42,42,132,131,42,42,132,42,42,42,42,42,131,132,42,42,42,42,131,42,132,42,42,42,42,42,42,42,42,42,42,42,131,42,42,42,42,42,42,42,132,42,131,42,42,42,42,42,42,132,42,42,42,42,42,42,42,42,42,42,42,42,42,42,131,42,132,42,42,131,42,42,42,132,42,42,42,131,132,42,131,42,132,42,42,42,131,132,131,132,42,131,131,132,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,131,132,42,42,42,42,42,42,42,42,131,42,42,132,42,42,131,42,132,131,42,132,42,42,0,0,0,0,138,26,135,136,26,26,26,135,136,138,138,138,138],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[2,[3,[-1]]],-1,[]],[[4,5],6],[[7,5],6],[[8,5],6],[[9,5],6],[[10,5],6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[2,[3,[-1]]],-1,[]],[[[14,[],[[12,[-1]],[13,[-2]]]]],-1,15,[[17,[],[[16,[-1]]]]]],[4,-1,[]],[7,-1,[]],[8,-1,[]],[9,-1,[]],[10,-1,[]],[4,-1,[]],[7,-1,[]],[8,-1,[]],[9,-1,[]],[10,-1,[]],[-1,4,[]],[-1,7,[]],[-1,8,[]],[-1,9,[]],[-1,10,[]],[[2,[3,[-1]]],-1,[]],[[4,-1],18,[]],[[7,-1],18,[]],[[8,-1],18,[]],[[9,-1],18,[]],[[10,-1],18,[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[[20,[-2,-3]],[21,[-2]]]]],[],[],22],[-1,[[19,[[20,[-2,-3]],[21,[-2]]]]],[],[],22],[-1,[[19,[[20,[-2,-3]],[21,[-2]]]]],[],[],22],[-1,[[19,[[20,[-2,-3]],[21,[-2]]]]],[],[],22],[-1,[[19,[[20,[-2,-3]],[21,[-2]]]]],[],[],22],[-1,[[19,[[20,[-2,-3]],[21,[-2]]]]],[],[],22],[-1,[[19,[[20,[-2,-3]],[21,[-2]]]]],[],[],22],[-1,[[19,[[20,[-2,-3]],[21,[-2]]]]],[],[],22],[-1,[[19,[[20,[-2,-3]],[21,[-2]]]]],[],[],22],[-1,[[19,[[20,[-2,-3]],[21,[-2]]]]],[],[],22],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,[[20,[-2,-3]]],[],[],22],[-1,[[20,[-2,-3]]],[],[],22],[-1,[[20,[-2,-3]]],[],[],22],[-1,[[20,[-2,-3]]],[],[],22],[-1,[[20,[-2,-3]]],[],[],22],[-1,[[20,[-2,-3]]],[],[],22],[-1,[[20,[-2,-3]]],[],[],22],[-1,[[20,[-2,-3]]],[],[],22],[-1,[[20,[-2,-3]]],[],[],22],[-1,[[20,[-2,-3]]],[],[],22],[[2,[24,[-1]],11],11,[]],0,0,0,0,[[[25,[-1,-2]]],[[20,[-2]]],26,22],[[[27,[-1,-2]]],[[20,[-2]]],26,22],[[[25,[-1,-2]]],[[20,[-2]]],26,22],[[[25,[-1,-2]]],[[20,[-2]]],26,22],[[[27,[-1,-2]]],[[20,[-2]]],26,22],[[[25,[-1,-2]]],[[20,[-2]]],26,22],[[[27,[-1,-2]]],[[20,[-2]]],26,22],[[[25,[-1,-2]]],1,26,22],[[[25,[-1,-2]]],1,26,22],[[[25,[-1,-2]]],[[20,[-2]]],26,22],[[[25,[-1,-2]]],[[20,[-2]]],26,22],[[[27,[-1,-2]]],[[20,[-2]]],26,22],[[[25,[-1,-2]],-3],-4,26,22,[],[]],[[[25,[-1,-2]],-3],18,26,22,[]],[[[25,[-1,-2]],-3],-4,26,22,[],[]],[[[25,[-1,-2]],-3],18,26,22,[]],[[[25,[-1,-2]],-3],-4,26,22,[],[]],[[[25,[-1,-2]],-3],18,26,22,[]],[-1,-2,[],[]],[[[25,[-1,-2]]],[[20,[-2]]],26,22],[-1,-2,[],[]],[[[25,[-1,-2]]],[[20,[-2]]],26,22],[-1,-2,[],[]],[-1,-2,[],[]],[[[25,[-1,-2]]],[[25,[-1,-2]]],26,22],[[[27,[-1,-2]]],[[27,[-1,-2]]],[26,28],[22,28]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[[25,[-1,-2]],[25,[-1,-2]]],29,26,22],[[[27,[-1,-2]]],30,26,22],0,[[],[[25,[-1,-2]]],26,22],[[[25,[-1,-2]]],-3,26,22,[]],[[[25,[-1,-2]]],-3,26,22,[]],[[[25,[-1,-2]],-3],11,26,22,31],[[[25,[-1,-2]],5],6,26,22],[[[25,[-1,-2]],5],6,26,22],[[[25,[-1,-2]],5],6,26,22],[[[25,[-1,-2]],5],6,26,22],[[[25,[-1,-2]],5],6,26,22],[[[25,[-1,-2]],5],6,26,22],[[[27,[-1,-2]],5],6,26,22],[-1,[[25,[-1,-2]]],26,22],[-1,-1,[]],[-1,-1,[]],[[[25,[-1,-2]],-3],18,26,22,32],[[[25,[-1,-2]],-3],-4,26,22,[],[]],[[[25,[-1,-2]],-3],-4,26,22,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[25,[-1,-2]]],-1,26,22],[[[25,[-1,-2]]],-3,26,22,[]],[[[25,[-1,-2]]],-3,26,22,[]],[[[25,[-1,-2]]],-3,26,22,[]],[-1,-2,[],[]],[[[25,[-1,-2]]],11,26,22],[[[27,[-1,-2]]],[[33,[-3]]],26,22,[]],[[[25,[-1,-2]]],30,26,22],[[[27,[-1,-2]]],30,26,22],[[[25,[-1,-2]]],-3,26,22,34],[[[25,[-1,-2]]],-3,26,22,34],[-1,[[25,[-1,-2]]],26,22],[[[25,[-1,-2]]],[[27,[-1,-2]]],26,22],[[[27,[-1,-2]]],[[33,[-3]]],26,22,[]],[[[27,[-1,-2]]],[[33,[-3]]],26,22,[]],[[[25,[-1,-2]]],-3,26,22,[]],[[[27,[-1,-2]],30],[[33,[-3]]],26,22,[]],[[[27,[-1,-2]],30],[[33,[-3]]],26,22,[]],[[[25,[-1,-2]],-3],[[33,[29]]],26,22,31],[[[27,[-1,-2]]],[[18,[30,[33,[30]]]]],26,22],[[[25,[-1,-2]],-3],18,26,22,34],[[[25,[-1,-2]],-3],18,26,22,34],[-1,-2,[],[]],[-1,-2,[],[]],[-1,35,[]],[[[20,[-1]]],[[19,[[25,[-2,-1]],-3]]],22,26,[]],[-1,[[19,[-2]]],[],[]],[[[20,[-1]]],[[19,[[25,[-2,-1]],-3]]],22,26,[]],[[[20,[-1]]],[[19,[[25,[-2,-1]],-3]]],22,26,[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],0,0,[[[36,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[38,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[38,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[36,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[38,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[38,[-1,-2]]],[[1,[-1]]],37,22],[[[38,[-1,-2]]],[[1,[-1]]],37,22],[[[36,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[38,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[38,[-1,-2]],-3],-4,37,22,[],[]],[[[38,[-1,-2]],-3],18,37,22,[]],[[[38,[-1,-2]],-3],-4,37,22,[],[]],[[[38,[-1,-2]],-3],18,37,22,[]],[[[38,[-1,-2]],-3],-4,37,22,[],[]],[[[38,[-1,-2]],-3],18,37,22,[]],[-1,-2,[],[]],[[[38,[-1,-2]]],[[20,[-1,-2]]],37,22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[38,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[36,[-1,-2]]],[[36,[-1,-2]]],37,22],[[[38,[-1,-2]]],[[38,[-1,-2]]],37,22],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[[38,[-1,-2]],[38,[-1,-2]]],29,37,22],[[[36,[-1,-2]]],30,37,22],[[],[[38,[-1,-2]]],37,22],[[[38,[-1,-2]]],-3,37,22,[]],[[[38,[-1,-2]]],-3,37,22,[]],[[[38,[-1,-2]]],18,37,22],[[[38,[-1,-2]],-3],11,37,22,[31,[39,[[20,[-1,-2]]]]]],[[[38,[-1,-2]],11],18,37,22],[[[36,[-1,-2]],5],6,37,22],[[[38,[-1,-2]],5],6,37,22],[[[38,[-1,-2]],5],6,37,22],[[[38,[-1,-2]],5],6,37,22],[[[38,[-1,-2]],5],6,37,22],[[[38,[-1,-2]],5],6,37,22],[[[38,[-1,-2]],5],6,37,22],[[[38,[-1,-2]],5],6,37,22],[[[38,[-1,-2]]],18,37,22],[-1,-1,[]],[[[40,[-1]]],[[38,[-1,-2]]],37,22],[[[25,[-1,-2]]],[[38,[-2]]],26,22],[[[41,[[20,[-1,-2]]]]],[[38,[-1,-2]]],37,22],[-1,-1,[]],[[[42,[-1,-2]]],[[38,[-1,-2]]],37,22],[[[20,[-1,-2]]],[[38,[-1,-2]]],37,22],[[[20,[-1,-2]]],[[38,[-1,-2]]],37,22],[[[40,[[1,[-1]]]]],[[38,[-1,-2]]],37,22],[-2,[[38,[-3,-4]]],[],[[43,[],[[16,[-1]]]]],37,22],[20,[[38,[-1,-2]]],37,22],[[[38,[-1,-2]],-3],18,37,22,32],[[[38,[-1,-2]],-3],-4,37,22,[],[]],[[[38,[-1,-2]],-3],-4,37,22,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[38,[-1,-2]]],[[42,[-1,-2]]],37,22],[[[38,[-1,-2]]],[[40,[[1,[-1]]]]],37,22],[-1,-2,[],[]],[[[38,[-1,-2]]],-3,37,22,[]],[[[38,[-1,-2]]],20,37,22],[[[36,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[38,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[36,[-1,-2]]],30,37,22],[[[38,[-1,-2]]],-3,37,22,34],[[[38,[-1,-2]]],-3,37,22,34],[[[36,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[36,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[38,[-1,-2]]],-3,37,22,[]],[[[36,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[36,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[38,[-1,-2]],-3],[[33,[29]]],37,22,[31,[44,[[20,[-1,-2]]]]]],[[[36,[-1,-2]]],[[18,[30,[33,[30]]]]],37,22],[[[38,[-1,-2]],-3],18,37,22,34],[[[38,[-1,-2]],-3],18,37,22,34],[-1,-2,[],[]],[-1,-2,[],[]],[-1,35,[]],[-1,[[19,[-2]]],[],[]],[[[40,[[1,[-1]]]]],[[19,[[38,[-1,-2]],-3]]],37,22,[]],[-1,[[19,[-2]]],[],[]],[[[40,[[1,[-1]]]]],[[19,[[38,[-1,-2]],[40,[[1,[-1]]]]]]],37,22],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[45,[-1,-2,-3]]],[[18,[24,46]]],47,37,22],[[[45,[48,-1,-2]]],[],37,22],[[[50,[49,-1,-2]]],[[50,[49,-1,-2]]],37,22],[[[51,[49,-1,-2]]],[[51,[49,-1,-2]]],37,22],[[[45,[49,-1,-2]]],[[45,[49,-1,-2]]],37,22],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[],[[50,[-1,-2,-3]]],47,37,22],[[],[[51,[-1,-2,-3]]],47,37,22],[[[50,[-1,-2,-3]]],[[33,[[52,[-1,[20,[-2,-3]]]]]]],47,37,22],[[[51,[-1,-2,-3]]],[[33,[[45,[-1,-2,-3]]]]],47,37,22],[[[50,[-1,-2,-3]],5],6,47,37,22],[[[51,[49,-1,-2]],5],6,37,22],[[[51,[49,-1,-2]],5],6,37,22],[[[51,[-1,-2,-3]],5],6,47,37,22],[[[51,[49,-1,-2]],5],6,37,22],[[[51,[49,-1,-2]],5],6,37,22],[[[51,[49,-1,-2]],5],6,37,22],[[[45,[-1,-2,-3]],5],6,47,37,22],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[45,[-1,-2,-3]],-4],18,47,37,22,32],[[[45,[-1,-2,-3]]],24,47,37,22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[51,[-1,-2,-3]]],[[50,[-1,-2,-3]]],47,37,22],[[[45,[-1,-2,-3]]],[[52,[-1,[20,[-2,-3]]]]],47,37,22],[-1,-2,[],[]],[[[45,[48,-1,-2]]],[],37,22],[[[51,[49,-1,-2]]],30,37,22],[[[45,[-1,-2,-3]]],[],47,37,22],[[[45,[-1,-2,-3]]],3,47,37,22],[[[51,[49,-1,-2]]],[[33,[-3]]],37,22,[]],[[[51,[49,-1,-2]]],[[33,[-3]]],37,22,[]],[[[50,[-1,-2,-3]]],[[33,[[18,[[52,[-1,[20,[-2,-3]]]],[52,[-1,[20,[-3]]]],[52,[-1,[20,[-2,-3]]]]]]]]],47,37,22],[[[51,[-1,-2,-3]]],[[33,[[18,[[33,[[45,[-1,-2,-3]]]],[52,[-1,1]],[33,[[45,[-1,-2,-3]]]]]]]]],47,37,22],[[[45,[48,-1,-2]]],[],37,22],[[[45,[48,-1,-2]]],[],37,22],[[[45,[-1,-2,-3]]],[],47,[37,17],22],[[[45,[-1,-2,-3]]],46,47,37,22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,35,[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],0,0,0,0,0,0,0,[53,-1,34],[53,-1,34],[53,-1,34],[[53,-1],18,34],[[53,-1],18,34],[[53,-1],18,34],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[3,[-1]],-1],-2,15,[]],[[[3,[-1]],-1],-2,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[24,[-1]]],[[24,[-1]]],[15,28]],[[[54,[-1]]],[[54,[-1]]],[15,28]],[[[46,[-1]]],[[46,[-1]]],[15,28]],[[[55,[-1]]],[[55,[-1]]],[15,28]],[[[56,[-1]]],[[56,[-1]]],[15,28]],[[[3,[-1]]],[[3,[-1]]],[15,28]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[[24,[-1]],[24,[-1]]],29,[15,57]],[[[54,[-1]],[54,[-1]]],29,[15,57]],[[[46,[-1]],[46,[-1]]],29,[15,57]],[[[55,[-1]],[55,[-1]]],29,[15,57]],[[[56,[-1]],[56,[-1]]],29,[15,57]],[[[3,[-1]],[3,[-1]]],29,[15,57]],[[[3,[-1]],[56,[-1]]],[[3,[-1]]],15],[[],[[24,[-1]]],[15,58]],[[],[[54,[-1]]],[15,58]],[[],[[46,[-1]]],[15,58]],[[],[[55,[-1]]],[15,58]],[[],[[56,[-1]]],[15,58]],[[],[[3,[-1]]],[15,58]],[[[24,[-1]],[24,[-1]]],11,[15,39]],[[[54,[-1]],[54,[-1]]],11,[15,39]],[[[46,[-1]],[46,[-1]]],11,[15,39]],[[[55,[-1]],[55,[-1]]],11,[15,39]],[[[56,[-1]],[56,[-1]]],11,[15,39]],[[[3,[-1]],[3,[-1]]],11,[15,39]],[[[24,[-1]],5],6,15],[[[24,[-1]],5],6,15],[[[24,[-1]],5],6,15],[[[54,[-1]],5],6,15],[[[54,[-1]],5],6,15],[[[46,[-1]],5],6,15],[[[46,[-1]],5],6,15],[[[46,[-1]],5],6,15],[[[55,[-1]],5],6,15],[[[55,[-1]],5],6,15],[[[55,[-1]],5],6,15],[[[56,[-1]],5],6,15],[[[56,[-1]],5],6,15],[[[56,[-1]],5],6,15],[[[3,[-1]],5],6,15],[[[3,[-1]],5],6,15],[[[3,[-1]],5],6,15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[24,[-1]],-2],18,[15,59],32],[[[54,[-1]],-2],18,[15,59],32],[[[46,[-1]],-2],18,[15,59],32],[[[55,[-1]],-2],18,[15,59],32],[[[56,[-1]],-2],18,[15,59],32],[[[3,[-1]],-2],18,[15,59],32],[[[3,[-1]],[56,[-1]]],18,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[24,[-1]]],60,15],[[[54,[-1]]],60,15],[[[46,[-1]]],60,15],[[[55,[-1]]],60,15],[[[56,[-1]]],-1,15],[[[3,[-1]]],-1,15],[[[24,[-1]]],[[3,[-1]]],15],[[[55,[-1]]],[[3,[-1]]],15],[[[56,[-1]]],[[3,[-1]]],15],[60,[[19,[[24,[-1]],[54,[-1]]]]],15],[60,[[33,[[46,[-1]]]]],15],[60,[[33,[[55,[-1]]]]],15],[-1,[[33,[[56,[-1]]]]],15],[-1,[[3,[-1]]],15],[60,[[24,[-1]]],15],[60,[[55,[-1]]],15],[-1,[[56,[-1]]],15],[[[24,[-1]]],[[18,[[24,[-1]],11]]],15],[[[3,[-1]]],-2,15,[]],[[[24,[-1]],[24,[-1]]],[[33,[29]]],[15,44]],[[[54,[-1]],[54,[-1]]],[[33,[29]]],[15,44]],[[[46,[-1]],[46,[-1]]],[[33,[29]]],[15,44]],[[[55,[-1]],[55,[-1]]],[[33,[29]]],[15,44]],[[[56,[-1]],[56,[-1]]],[[33,[29]]],[15,44]],[[[3,[-1]],[3,[-1]]],[[33,[29]]],[15,44]],[[[24,[-1]]],[[55,[-1]]],15],[[[24,[-1]]],[[18,[[24,[-1]],11]]],15],[[[24,[-1]],[46,[-1]]],[[0,[[61,[],[[16,[[24,[-1]]]]]],62,63,64]]],15],[[],[[0,[[61,[],[[16,[[24,[-1]]]]]],62,63,64]]],15],[[],[[0,[[61,[],[[16,[[56,[-1]]]]]],62,63,64]]],15],[[[24,[-1]]],[[0,[[61,[],[[16,[[46,[-1]]]]]],62,63,64]]],15],[[[24,[-1]]],[[56,[-1]]],15],[[[55,[-1]]],[[56,[-1]]],15],[-2,[[3,[-1]]],15,[[61,[],[[16,[[56,[-1]]]]]]]],[[[3,[-1]],[56,[-1]]],11,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],0,0,0,0,[[],30],[30,30],0,0,0,0,[[[24,[-1]]],[[55,[-1]]],15],[[[24,[-1]]],[[55,[-1]]],15],[[[24,[-1]]],[[55,[-1]]],15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[65,65],[66,66],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[65,65],29],[[66,66],29],[[],65],[[],66],[[65,65],11],[[66,66],11],[[65,5],6],[[66,5],6],[-1,-1,[]],[-1,-1,[]],[[65,-1],18,32],[[66,-1],18,32],[-1,-2,[],[]],[-1,-2,[],[]],[[-2,-3],[[3,[-1]]],15,[[67,[[33,[[24,[-1]]]]]]],[[67,[[33,[[46,[-1]]]]]]]],[[-2,-3],[[3,[-1]]],15,[[67,[[33,[[24,[-1]]]]]]],[[67,[[33,[[46,[-1]]]]]]]],[[-2,-3],[[3,[-1]]],15,[[67,[[33,[[24,[-1]]]]]]],[[67,[[33,[[46,[-1]]]]]]]],[[65,65],[[33,[29]]]],[[66,66],[[33,[29]]]],[[[24,[-1]]],[[56,[-1]]],15],[[[24,[-1]]],[[56,[-1]]],15],[[[24,[-1]]],[[56,[-1]]],15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[11,18],[11,18],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[68,[-1,-2,-3]],30],[[68,[-1,-2,-3]]],47,37,22],[[[68,[-1,-2,-3]]],[[69,[-1,-2]]],47,37,22],[[[68,[-1,-2,-3]],30],30,47,37,22],[[[70,[48,-1,-2]]],11,37,22],[[[68,[48,-1,-2]]],[[33,[[70,[48,-1,-2]]]]],37,22],[[[70,[-1,-2,-3]]],11,47,37,22],[[[68,[-1,-2,-3]]],[[33,[[70,[49,-2,-3]]]]],47,37,22],[[[68,[-1,-2,-3]]],24,47,37,22],[[[68,[49,-1,-2]],30],20,37,22],[[[68,[48,-1,-2]],30],20,37,22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[68,[-1,-2,-3]]],[[68,[-1,-4,-3]]],47,37,22,37],[[[69,[-1,-2]]],[[19,[[69,[-1,-2]],[71,[-2]]]]],47,[]],[49,49],[48,48],[[[70,[49,-1,-2]]],[[70,[49,-1,-2]]],37,22],[[[72,[-1,-2,-3]]],[[72,[-1,-2,-3]]],47,37,22],[[[68,[-1,-2,-3]]],[[68,[-1,-2,-3]]],47,37,22],[[[71,[-1]]],[[71,[-1]]],28],[[[73,[-1]]],[[73,[-1]]],[37,28]],[[[21,[-1]]],[[21,[-1]]],[37,28]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[49,49],29],[[48,48],29],[[[70,[-1,-2,-3]],[70,[-1,-2,-3]]],29,47,37,22],[[[68,[-1,-2,-3]],[68,[-1,-2,-3]]],29,47,37,22],[[[71,[-1]],[71,[-1]]],29,57],[[[73,[-1]],[73,[-1]]],29,[37,57]],[[[21,[-1]],[21,[-1]]],29,[37,57]],[[[70,[48,-1,-2]],11],18,37,22],[[[72,[-1,-2,-3]],[68,[-4,-5,-3]]],11,47,37,22,47,37],[[[68,[49,-1,-2]],[68,[48,-3,-4]],30],18,37,22,37,22],[[[68,[48,-1,-2]],[68,[49,-3,-4]],30],18,37,22,37,22],[[[68,[48,-1,-2]],[68,[49,-3,-4]],30],18,37,22,37,22],[[[68,[49,-1,-2]],[68,[48,-3,-4]],30],18,37,22,37,22],[[[68,[-1,-2,-3]],[68,[48,-4,-5]],30],18,47,37,22,37,22],[[[68,[-1,-2,-3]],[68,[48,-4,-5]],30],18,47,37,22,37,22],[[[72,[-1,-2,-3]]],30,47,37,22],[[],49],[[],48],[[],[[72,[-1,-2,-3]]],47,37,22],[[[70,[-1,-2,-3]]],-4,47,37,22,[]],[[[70,[48,-1,-2]]],-3,37,22,[]],[[[70,[-1,-2,-3]]],18,47,37,22],[[[68,[48,-1,-2]]],18,37,22],[[[68,[48,-1,-2]]],18,37,22],0,[[[72,[-1,-2,-3]]],[[74,[[68,[-1,-2,-3]]]]],47,37,22],[[[68,[49,-1,-2]],[68,[49,-3,-2]]],11,37,22,37],[[49,49],11],[[48,48],11],[[[70,[-1,-2,-3]],11],11,47,37,22],[[[70,[-1,-2,-3]],[70,[-4,-5,-6]]],11,47,37,22,47,37,22],[[[70,[-1,-2,-3]],11],11,47,37,22],[[[72,[-1,-2,-3]],[72,[-4,-5,-3]]],11,47,37,22,47,37],[[[68,[-1,-2,-3]],[68,[-4,-5,-3]]],11,47,37,22,47,37],[[[71,[-1]],[71,[-1]]],11,39],[[[73,[-1]],[73,[-1]]],11,[37,39]],[[[21,[-1]],[21,[-1]]],11,[37,39]],[[49,5],[[19,[18,75]]]],[[48,5],[[19,[18,75]]]],[[[70,[-1,-2,-3]],5],6,47,37,22],[[[70,[-1,-2,-3]],5],6,47,37,22],[[[70,[-1,-2,-3]],5],6,47,37,22],[[[72,[-1,-2,-3]],5],6,47,37,22],[[[68,[-1,-2,-3]],5],6,47,37,22],[[[68,[-1,-2,-3]],5],6,47,37,22],[[[71,[-1]],5],6,[]],[[[71,[-1]],5],6,[]],[[[73,[-1]],5],6,[37,76]],[[[73,[-1]],5],6,37],[[[21,[-1]],5],6,37],[[[21,[-1]],5],6,37],[47,[[77,[47]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[78,[[68,[-1,-2,-3]]]]],[[72,[-1,-2,-3]]],47,37,22],[-1,-1,[]],[-1,[[68,[48,-1,-2]]],37,22],[-1,-1,[]],[-1,[[68,[49,-1,-2]]],37,22],[-1,-1,[]],[[[71,[-1]]],[[73,[-1]]],37],[79,[[73,[-1]]],37],[-1,-1,[]],[[[71,[-1]]],[[21,[-1]]],37],[[[73,[-1]]],[[21,[-1]]],37],[-1,-1,[]],[[[68,[-1,-2,-3]]],[[70,[-1,-2,-3]]],47,37,22],[-1,[[68,[48,-1,-2]]],37,22],[[[1,[-1]]],[[68,[48,-1,-2]]],37,22],[[[78,[[68,[-1,-2,-3]]]]],[[72,[-1,-2,-3]]],47,37,22],[-1,[[68,[49,-1,-2]]],37,22],[[[1,[-1]]],[[68,[49,-1,-2]]],37,22],[[[1,[-1]]],[[68,[48,-1,-2]]],37,22],[[[68,[49,-1,-2]],-3],18,37,22,32],[[49,-1],18,32],[[48,-1],18,32],[[[70,[-1,-2,-3]],-4],18,47,37,22,32],[[[72,[-1,-2,-3]],-4],18,47,37,22,32],[[[68,[-1,-2,-3]],-4],18,47,37,22,32],[[[71,[-1]],-2],18,59,32],[[[73,[-1]],-2],18,[37,59],32],[[[21,[-1]],-2],18,[37,59],32],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[70,[-1,-2,-3]]],[[68,[-1,-2,-3]]],47,37,22],[-1,-2,[],[]],[[[72,[-1,-2,-3]]],[[78,[[68,[-1,-2,-3]]]]],47,37,22],[[[72,[-1,-2,-3]]],11,47,37,22],[[[68,[-1,-2,-3]]],11,47,37,22],[[[72,[-1,-2,-3]]],[[33,[-4]]],47,37,22,[]],[[[72,[-1,-2,-3]]],30,47,37,22],[[[69,[-1,-2]],24],[[19,[[68,[-1,-2,-3]],[71,[-2]]]]],47,37,22],[[[69,[-1,-2]],24],[[68,[-1,-2,-3]]],47,37,22],[[[72,[-1,-2,-3]]],[[33,[-4]]],47,37,22,[]],[[[72,[-1,-2,-3]]],[[33,[-4]]],47,37,22,[]],[[[70,[-1,-2,-3]]],-4,47,37,22,[]],[[[72,[-1,-2,-3]],30],[[33,[-4]]],47,37,22,[]],[[[72,[-1,-2,-3]],30],[[33,[-4]]],47,37,22,[]],[[],[[68,[49,-1,-2]]],37,22],[[],[[68,[48,-1,-2]]],37,22],[[[68,[-1,-2,-3]],80],[[68,[-1,-2,-3]]],47,37,22],[[[68,[-1,-2,-3]],[68,[-1,-4,-3]]],80,47,37,22,[[37,[],[[12,[]]]]]],[[49,49],[[33,[29]]]],[[48,48],[[33,[29]]]],[[[70,[-1,-2,-3]],[70,[-4,-5,-6]]],[[33,[29]]],47,37,22,47,37,22],[[[70,[-1,-2,-3]],11],[[33,[29]]],47,37,22],[[[70,[-1,-2,-3]],11],[[33,[29]]],47,37,22],[[[68,[-1,-2,-3]],[68,[-4,-5,-3]]],[[33,[29]]],47,37,22,47,37],[[[71,[-1]],[71,[-1]]],[[33,[29]]],44],[[[73,[-1]],[73,[-1]]],[[33,[29]]],[37,44]],[[[21,[-1]],[21,[-1]]],[[33,[29]]],[37,44]],[[[68,[48,-1,-2]]],[],37,22],[[[68,[49,-1,-2]]],[],37,22],[[[68,[-1,-2,-3]]],[[18,[[69,[-1,-2]],24]]],47,37,22],[[[68,[49,-1,-2]]],11,37,22],[[[68,[-1,-2,-3]]],11,47,37,22],[[[68,[49,-1,-2]]],11,37,22],[[[68,[-1,-2,-3]]],11,47,37,22],[[[68,[49,-1,-2]]],11,37,22],[[[68,[-1,-2,-3]]],11,47,37,22],[[[68,[48,-1,-2]],11],11,37,22],[[[70,[48,-1,-2]],11],11,37,22],[[[68,[48,-1,-2]],11],11,37,22],[[[70,[48,-1,-2]],11],18,37,22],[[[72,[-1,-2,-3]]],[[18,[30,[33,[30]]]]],47,37,22],[[[68,[49,-1,-2]],30],20,37,22],[[[68,[48,-1,-2]],30],20,37,22],0,[[[72,[-1,-2,-3]]],[[74,[[68,[-1,-2,-3]]]]],47,37,22],[[[68,[-1,-2,-3]],30],[[68,[-1,-2,-3]]],47,37,22],[[[68,[48,-1,-2]],[68,[48,-3,-4]]],18,37,22,37,22],[[[70,[48,-1,-2]],[70,[48,-3,-4]]],18,37,22,37,22],[[[68,[48,-1,-2]],[68,[48,-3,-4]]],18,37,22,37,22],[[[68,[48,-1,-2]],[68,[48,-3,-4]],30],18,37,22,37,22],[[[77,[47]]],47],[[[68,[-1,-2,-3]]],[[68,[49,-2,-3]]],47,37,22],[[[68,[-1,-2,-3]]],[[68,[48,-2,-3]]],47,37,22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[68,[-1,-2,-3]]],[[18,[[69,[-1,-2]],24]]],47,37,22],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[[],[[19,[[68,[48,-1,-2]],-3]]],37,22,[]],[[],[[19,[[68,[49,-1,-2]],-3]]],37,22,[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[[[68,[-1,-2,-3]],30],[[68,[-1,-2,-3]]],47,37,22],[[[68,[-1,-2,-3]],80],[[68,[-1,-2,-3]]],47,37,22],[[[68,[-1,-2,-3]],30],[[68,[-1,-2,-3]]],47,37,22],[[[68,[48,-1,-2]],11],18,37,22],[[[68,[48,-1,-2]],11],18,37,22],[[[68,[48,-1,-2]],11,30],18,37,22],[[[68,[48,-1,-2]],11,30],18,37,22],[[[68,[48,-1,-2]],11],18,37,22],[[[68,[48,-1,-2]],11],18,37,22],[[[68,[48,-1,-2]],11],18,37,22],[[[68,[48,-1,-2]],11],18,37,22],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[20,[-1,-2]]],[[18,[[20,[-1,-2]],[20,[-3,-2]],[20,[-1,-2]]]]],37,22,37],[[[20,[-1,-2]]],[[18,[[20,[-1,-2]],[20,[-3,-2]],[20,[-1,-2]]]]],37,22,37],[[[20,[-1,-2]]],11,37,22],[[[20,[-1,-2]]],11,37,22],[[[20,[-1,-2]]],[[68,[49,-1,-2]]],37,22],[[[20,[-1,-2]]],[[72,[49,-1,-2]]],37,22],[[[81,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[82,[-1,-2]]],[[20,[-2]]],37,22],[[[20,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[20,[-1,-2]]],[[68,[48,-1,-2]]],37,22],[[[20,[-1,-2]]],[[72,[48,-1,-2]]],37,22],[[[20,[-1,-2]]],[[68,[48,-1,-2]]],37,22],[[[20,[-1,-2]]],[[78,[[68,[48,-1,-2]]]]],37,22],[[[20,[-1,-2]]],[[68,[49,-1,-2]]],37,22],[[[20,[-1,-2]]],[[78,[[68,[49,-1,-2]]]]],37,22],[[[81,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[82,[-1,-2]]],[[20,[-2]]],37,22],[[[20,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[81,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[82,[-1,-2]]],[[20,[-2]]],37,22],[[[20,[-1,-2]]],[[50,[49,-1,-2]]],37,22],[[[20,[-1,-2]]],[[50,[48,-1,-2]]],37,22],[[[20,[-1,-2]],[20,[-3,-4]]],18,37,22,37,22],[[[20,[-1]],[25,[-2,-1]]],18,22,26],[[[20,[-1,-2]],[38,[-1,-2]]],18,37,22],[[[20,[-1,-2]],[42,[-1,-2]]],18,37,22],[[[20,[-1]],[25,[-2,-1]]],18,22,26],[[[20,[-1,-2]],[42,[-1,-2]]],18,37,22],[[[20,[-1,-2]],[38,[-1,-2]]],18,37,22],[[[20,[-1,-2]],[38,[-1,-2]]],18,37,22],[[[20,[-1,-2]],[20,[-3,-4]]],18,37,22,37,22],[[[20,[-1]],[25,[-2,-1]]],18,22,26],[[[20,[-1,-2]],[42,[-1,-2]]],18,37,22],[[[20,[-1,-2]],[42,[-1,-2]]],18,37,22],[[[20,[-1,-2]],[38,[-1,-2]]],18,37,22],[[[20,[-1]],[25,[-2,-1]]],18,22,26],[[[20,[-1,-2]],[20,[-3,-4]]],18,37,22,37,22],[[[20,[-1,-2]],[42,[-1,-2]]],18,37,22],[[[20,[-1]],[25,[-2,-1]]],18,22,26],[[[20,[-1,-2]],[38,[-1,-2]]],18,37,22],[[[20,[-1]],[25,[-2,-1]]],18,22,26],[[[20,[-1,-2]],[42,[-1,-2]]],18,37,22],[[[20,[-1,-2]],[38,[-1,-2]]],18,37,22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[81,[-1,-2]]],[[83,[-1,-2]]],37,22],[[[81,[-1,-2]]],[[84,[-1,-2]]],37,22],[[[20,[-1,-2]],30],[[85,[-1,-2]]],37,22],[[[20,[-1,-2]],30],[[86,[-1,-2]]],37,22],[[[20,[-1,-2]],30],[[87,[-1,-2]]],37,22],[[[20,[-1,-2]],30],[[88,[-1,-2]]],37,22],[[[81,[-1,-2]]],[[81,[-1,-2]]],37,22],[[[89,[-1,-2]]],[[89,[-1,-2]]],[37,28],[22,28]],[[[85,[-1,-2]]],[[85,[-1,-2]]],[37,28],[22,28]],[[[86,[-1,-2]]],[[86,[-1,-2]]],[37,28],[22,28]],[[[90,[-1,-2]]],[[90,[-1,-2]]],[37,28],[22,28]],[[[91,[-1,-2]]],[[91,[-1,-2]]],[37,28],[22,28]],[[[92,[-1,-2,-3]]],[[92,[-1,-2,-3]]],[37,28],[22,28],[[94,[30,11],[[93,[11]]]],28]],[[[95,[-1,-2,-3]]],[[95,[-1,-2,-3]]],[37,28],[22,28],[[94,[30,11],[[93,[11]]]],28]],[[[96,[-1,-2,-3]]],[[96,[-1,-2,-3]]],[37,28],[22,28],[[94,[30,11],[[93,[11]]]],28]],[[[97,[-1,-2,-3]]],[[97,[-1,-2,-3]]],[37,28],[22,28],[[94,[30,11],[[93,[11]]]],28]],[[[98,[-1,-2,-3]]],[[98,[-1,-2,-3]]],[37,28],[22,28],[[94,[30,11],[[93,[11]]]],28]],[[[99,[-1,-2]]],[[99,[-1,-2]]],[37,28],[22,28]],[[[100,[-1,-2]]],[[100,[-1,-2]]],[37,28],[22,28]],[[[20,[-1,-2]],[20,[-3,-4]]],18,37,22,37,22],[[[20,[-1,-2]],[20,[-3,-4]]],18,37,22,37,22],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[[20,[-1,-2]],[20,[-1,-2]]],29,37,22],[[[99,[-1,-2]],[99,[-1,-2]]],29,[37,57],[22,57]],[[[100,[-1,-2]],[100,[-1,-2]]],29,[37,57],[22,57]],[[[20,[-1,-2]],[20,[-3,-4]]],11,37,22,37,22],[[[81,[-1,-2]]],[[84,[-1,-2]]],37,22],[[[20,[-1,-2]],[20,[-1,-2]]],18,37,22],[[[20,[-1,-2]],[20,[-1,-2]]],18,37,22],[[[20,[-1,-2]],-3,30],18,37,22,[[101,[30]]]],[[[20,[-1,-2]],-3,30],18,37,22,[[101,[30]]]],[[[81,[-1,-2]]],30,37,22],[[[82,[-1,-2]]],30,37,22],[[[84,[-1,-2]]],30,37,22],[[[89,[-1,-2]]],30,37,22],[[[85,[-1,-2]]],30,37,22],[[[88,[-1,-2]]],30,37,22],[[[86,[-1,-2]]],30,37,22],[[[87,[-1,-2]]],30,37,22],[[[90,[-1,-2]]],30,37,22],[[[102,[-1,-2]]],30,37,22],[[[91,[-1,-2]]],30,37,22],[[[103,[-1,-2]]],30,37,22],[[[99,[-1,-2]]],30,37,22],[[[100,[-1,-2]]],30,37,22],[[[104,[-1,-2]]],30,37,22],[[[105,[-1,-2]]],30,37,22],[[[106,[-1,-2]]],30,37,22],[[[107,[-1,-2]]],30,37,22],[[[108,[-1,-2]]],30,37,22],[[[109,[-1,-2,-3]]],30,37,22,[[94,[30,11],[[93,[11]]]]]],[[[110,[-1,-2,-3]]],30,37,22,[[94,[30,11],[[93,[11]]]]]],[[[111,[-1,-2,-3]]],30,37,22,[[94,[30,11],[[93,[11]]]]]],[[[112,[-1,-2,-3]]],30,37,22,[[94,[30,11],[[93,[11]]]]]],[[[113,[-1,-2,-3]]],30,37,22,[[94,[30,11],[[93,[11]]]]]],[[[20,[-1,-2]]],30,37,22],[[[20,[-1,-2]]],30,37,22],[[],[[20,[-1,-2]]],37,22],[[],[[20,[-1,-2]]],37,22],[[],[[99,[-1,-2]]],37,22],[[],[[100,[-1,-2]]],37,22],[[[20,[-1,-2]]],[[51,[49,-1,-2]]],37,22],[[[20,[-1,-2]]],[[51,[48,-1,-2]]],37,22],[[],[[20,[-1,-2]]],37,22],[[],[[20,[-1,-2]]],37,22],[[[20,[-1,-2]],[20,[-3,-4]]],11,37,22,37,22],[[[20,[-1,-2]],[42,[-3,-4]]],11,37,22,37,22],[[[20,[-1,-2]],[38,[-3,-4]]],11,37,22,37,22],[[[20,[-1,-2]],[38,[-3,-4]]],11,37,22,37,22],[[[20,[-1,-2]],[20,[-3,-4]]],11,37,22,37,22],[[[20,[-1,-2]],[38,[-3,-4]]],11,37,22,37,22],[[[20,[-1,-2]],[42,[-3,-4]]],11,37,22,37,22],[[[20,[-1,-2]],[20,[-3,-4]]],11,37,22,37,22],[[[20,[-1,-2]],[20,[-3,-4]]],11,37,22,37,22],[[[20,[-1,-2]],[42,[-3,-4]]],11,37,22,37,22],[[[20,[-1,-2]],[20,[-3,-4]]],11,37,22,37,22],[[[20,[-1,-2]],[20,[-3,-4]]],11,37,22,37,22],[[[20,[-1,-2]],[25,[-3,-4]]],11,37,22,26,22],[[[99,[-1,-2]],[99,[-1,-2]]],11,[37,39],[22,39]],[[[100,[-1,-2]],[100,[-1,-2]]],11,[37,39],[22,39]],[[[20,[-1,-2]],11],18,37,22],[[[20,[-1,-2]],-3],18,37,22,[[94,[30],[[93,[11]]]]]],[[[20,[-1,-2]]],[[33,[[70,[49,-1,-2]]]]],37,22],[[[20,[-1,-2]]],[[33,[[70,[48,-1,-2]]]]],37,22],[[[20,[-1,-2]]],[[33,[30]]],37,22],[[[20,[-1,-2]]],[[33,[30]]],37,22],[[[20,[-1,-2]]],[[114,[18]]],37,22],[[[81,[-1,-2]],5],6,37,22],[[[82,[-1,-2]],5],6,37,22],[[[115,[-1,-2,-3]],5],6,37,22,[[94,[30,11],[[93,[11]]]]]],[[[116,[-1,-2,-3]],5],6,37,22,[[94,[30,11],[[93,[11]]]]]],[[[117,[-1,-2,-3]],5],6,37,22,[[94,[30,11],[[93,[11]]]]]],[[[118,[-1,-2,-3]],5],6,37,22,[[94,[30,11],[[93,[11]]]]]],[[[119,[-1,-2,-3]],5],6,37,22,[[94,[30,11],[[93,[11]]]]]],[[[20,[-1,-2]],5],6,37,22],[[[20,[-1,-2]],5],6,37,22],[[[20,[-1,-2]],5],6,37,22],[[[20,[-1,-2]],5],6,37,22],[[[20,[-1,-2]],5],6,37,22],[[[20,[-1,-2]],5],6,37,22],[[[20,[-1,-2]],5],6,37,22],[[[89,[-1,-2]],5],6,[37,76],[22,76]],[[[85,[-1,-2]],5],6,[37,76],[22,76]],[[[88,[-1,-2]],5],6,[37,76],[22,76]],[[[86,[-1,-2]],5],6,[37,76],[22,76]],[[[87,[-1,-2]],5],6,[37,76],[22,76]],[[[90,[-1,-2]],5],6,[37,76],[22,76]],[[[102,[-1,-2]],5],6,[37,76],[22,76]],[[[91,[-1,-2]],5],6,[37,76],[22,76]],[[[103,[-1,-2]],5],6,[37,76],[22,76]],[[[92,[-1,-2,-3]],5],6,37,22,[[94,[30,11],[[93,[11]]]]]],[[[95,[-1,-2,-3]],5],6,37,22,[[94,[30,11],[[93,[11]]]]]],[[[96,[-1,-2,-3]],5],6,37,22,[[94,[30,11],[[93,[11]]]]]],[[[97,[-1,-2,-3]],5],6,37,22,[[94,[30,11],[[93,[11]]]]]],[[[98,[-1,-2,-3]],5],6,37,22,[[94,[30,11],[[93,[11]]]]]],[[[99,[-1,-2]],5],6,[37,76],[22,76]],[[[100,[-1,-2]],5],6,[37,76],[22,76]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[20,[-1,-2]]],37,22],[-1,[[20,[-1,-2]]],37,22],[-1,[[20,[-1,-2]]],37,22],[[[68,[49,-1,-2]],30],[[19,[[20,[-1,-2]],[21,[-1]]]]],37,22],[[[68,[48,-1,-2]],30],[[19,[[20,[-1,-2]],[21,[-1]]]]],37,22],[[[68,[49,-1,-2]],30],[[20,[-1,-2]]],37,22],[[[68,[48,-1,-2]],30],[[20,[-1,-2]]],37,22],[-1,[[20,[-1,-2]]],37,22],[[[1,[-1]]],[[20,[-1,-2]]],37,22],[[[1,[-1]]],[[20,[-1,-2]]],37,22],[[[1,[-1]]],[[20,[-1,-2]]],37,22],[[[1,[-1]]],[[20,[-1,-2]]],37,22],[[[122,[],[[120,[-1]],[121,[-2]]]],[20,[-3,-4]]],[[33,[-1]]],[],[],37,22],[[[20,[-1,-2]],-3],33,37,22,[[122,[-1,-2]]]],[[[122,[],[[120,[-1]],[121,[-2]]]],[20,[-3,-4]]],[[33,[-2]]],[],[],37,22],[[[20,[-1,-2]],-3],33,37,22,[[122,[-1,-2]]]],[[[122,[],[[120,[-1]],[121,[-2]]]],[20,[-3,-4]]],-1,[],[],37,22],[[[20,[-1,-2]],-3],[],37,22,[[122,[-1,-2]]]],[[[122,[],[[120,[-1]],[121,[-2]]]],[20,[-3,-4]]],-2,[],[],37,22],[[[20,[-1,-2]],-3],[],37,22,[[122,[-1,-2]]]],[[[20,[-1,-2]],-3],18,37,22,32],[[[122,[],[[120,[-1]],[121,[-2]]]],[20,[-3,-4]]],-1,[],[],37,22],[[[20,[-1,-2]],[123,[30]]],-3,37,22,[]],[[[20,[-1,-2]],[124,[30]]],-3,37,22,[]],[[[20,[-1,-2]],[125,[30]]],-3,37,22,[]],[[[20,[-1,-2]],[126,[30]]],-3,37,22,[]],[[[20,[-1,-2]],30],-3,37,22,[]],[[[20,[-1,-2]],127],-3,37,22,[]],[[[20,[-1,-2]],[78,[30]]],-3,37,22,[]],[[[122,[],[[120,[-1]],[121,[-2]]]],[20,[-3,-4]]],-2,[],[],37,22],[[[20,[-1,-2]],127],-3,37,22,[]],[[[20,[-1,-2]],[126,[30]]],-3,37,22,[]],[[[20,[-1,-2]],[124,[30]]],-3,37,22,[]],[[[20,[-1,-2]],[78,[30]]],-3,37,22,[]],[[[20,[-1,-2]],[123,[30]]],-3,37,22,[]],[[[20,[-1,-2]],[125,[30]]],-3,37,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[82,[-1,-2]]],[[20,[-2]]],37,22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[20,[-1,-2]]],-3,37,22,[]],[[[20,[-1,-2]]],-3,37,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[87,[-1,-2]]],[[20,[-2]]],37,22],[[[103,[-1,-2]]],[[20,[-2]]],37,22],[[[106,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[108,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[82,[-1,-2]]],[[20,[-2]]],37,22],[[[20,[-1,-2]]],11,37,22],[[[20,[-1,-2]]],[[81,[-1,-2]]],37,22],[[[20,[-1,-2]]],[[82,[-1,-2]]],37,22],[[[20,[-1,-2]]],[[99,[-1,-2]]],37,22],[[[20,[-1,-2]]],[[100,[-1,-2]]],37,22],[[[81,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[82,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[84,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[20,[-1,-2]]],[[33,[[70,[49,-1,-2]]]]],37,22],[[[89,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[85,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[88,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[86,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[87,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[90,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[102,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[91,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[103,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[99,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[100,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[104,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[105,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[106,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[107,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[108,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[109,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[110,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[111,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[112,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[113,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[20,[-1,-2]]],[[33,[[70,[48,-1,-2]]]]],37,22],[[[20,[-1,-2]]],[[33,[30]]],37,22],[[[20,[-1,-2]]],[[33,[30]]],37,22],[[[20,[-1,-2]]],30,37,22],[[[20,[-1,-2]]],30,37,22],[[[81,[-1,-2]]],30,37,22],[[[82,[-1,-2]]],30,37,22],[[[84,[-1,-2]]],30,37,22],[[[20,[-1,-2]]],30,37,22],[[[89,[-1,-2]]],30,37,22],[[[85,[-1,-2]]],30,37,22],[[[88,[-1,-2]]],30,37,22],[[[86,[-1,-2]]],30,37,22],[[[87,[-1,-2]]],30,37,22],[[[90,[-1,-2]]],30,37,22],[[[102,[-1,-2]]],30,37,22],[[[91,[-1,-2]]],30,37,22],[[[103,[-1,-2]]],30,37,22],[[[99,[-1,-2]]],30,37,22],[[[100,[-1,-2]]],30,37,22],[[[104,[-1,-2]]],30,37,22],[[[105,[-1,-2]]],30,37,22],[[[106,[-1,-2]]],30,37,22],[[[107,[-1,-2]]],30,37,22],[[[108,[-1,-2]]],30,37,22],[[[109,[-1,-2,-3]]],30,37,22,[[94,[30,11],[[93,[11]]]]]],[[[110,[-1,-2,-3]]],30,37,22,[[94,[30,11],[[93,[11]]]]]],[[[111,[-1,-2,-3]]],30,37,22,[[94,[30,11],[[93,[11]]]]]],[[[112,[-1,-2,-3]]],30,37,22,[[94,[30,11],[[93,[11]]]]]],[[[113,[-1,-2,-3]]],30,37,22,[[94,[30,11],[[93,[11]]]]]],[[[20,[-1,66]]],-2,37,34],[[[20,[-1,65]]],-2,37,34],[[[20,[-1,66]]],-2,37,34],[[[20,[-1,65]]],-2,37,34],[[[81,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[82,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[84,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[115,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[116,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[117,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[118,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[119,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[89,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[85,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[88,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[86,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[87,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[90,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[102,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[91,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[103,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[92,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[95,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[96,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[97,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[98,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[99,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[100,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[104,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[105,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[106,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[107,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[108,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[109,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[110,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[111,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[112,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[113,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[81,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[82,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[84,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[115,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[116,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[117,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[89,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[85,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[88,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[86,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[87,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[90,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[102,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[91,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[103,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[92,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[95,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[96,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[99,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[100,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[104,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[105,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[106,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[107,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[108,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[109,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[110,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[111,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[112,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[113,[-1,-2,-3]]],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[20,[-1,-2]]],-3,37,22,[]],[[[20,[-1,-2]]],11,37,22],[[[20,[-1,-2]]],11,37,22],[[[81,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[82,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[84,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[89,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[85,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[88,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[86,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[87,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[90,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[102,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[91,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[103,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[104,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[105,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[106,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[107,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[108,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[109,[-1,-2,-3]],30],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[110,[-1,-2,-3]],30],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[111,[-1,-2,-3]],30],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[112,[-1,-2,-3]],30],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[113,[-1,-2,-3]],30],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[81,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[82,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[84,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[89,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[85,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[88,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[86,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[87,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[90,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[102,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[91,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[103,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[104,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[105,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[106,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[107,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[108,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[109,[-1,-2,-3]],30],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[110,[-1,-2,-3]],30],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[111,[-1,-2,-3]],30],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[112,[-1,-2,-3]],30],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[113,[-1,-2,-3]],30],[[33,[-4]]],37,22,[[94,[30,11],[[93,[11]]]]],[]],[[[20,[-1,-2]],[20,[-3,-4]]],[[33,[29]]],37,22,37,22],[[[20,[-1,-2]],[20,[-3,-4]]],[[33,[29]]],37,22,37,22],[[[20,[-1,-2]],[42,[-3,-4]]],[[33,[29]]],37,22,37,22],[[[20,[-1,-2]],[42,[-3,-4]]],[[33,[29]]],37,22,37,22],[[[20,[-1,-2]],[38,[-3,-4]]],[[33,[29]]],37,22,37,22],[[[20,[-1,-2]],[20,[-3,-4]]],[[33,[29]]],37,22,37,22],[[[20,[-1,-2]],[38,[-3,-4]]],[[33,[29]]],37,22,37,22],[[[20,[-1,-2]],[38,[-3,-4]]],[[33,[29]]],37,22,37,22],[[[20,[-1,-2]],[20,[-3,-4]]],[[33,[29]]],37,22,37,22],[[[20,[-1,-2]],[20,[-3,-4]]],[[33,[29]]],37,22,37,22],[[[20,[-1,-2]],[42,[-3,-4]]],[[33,[29]]],37,22,37,22],[[[20,[-1,-2]],[20,[-3,-4]]],[[33,[29]]],37,22,37,22],[[[20,[-1,-2]],[25,[-3,-2]]],[[33,[29]]],37,22,26],[[[20,[-1,-2]],[20,[-3,-4]]],[[33,[29]]],37,22,37,22],[[[99,[-1,-2]],[99,[-1,-2]]],[[33,[29]]],[37,44],[22,44]],[[[100,[-1,-2]],[100,[-1,-2]]],[[33,[29]]],[37,44],[22,44]],[[[20,[-1,-2]],30],[[90,[-1,-2]]],37,22],[[[20,[-1,-2]],30],[[91,[-1,-2]]],37,22],[[[20,[-1,-2]],30],[[103,[-1,-2]]],37,22],[[[20,[-1,-2]],30],[[102,[-1,-2]]],37,22],[[[20,[-1,-2]],[1,[60]]],[[114,[30]]],37,22],[[[86,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[91,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[82,[-1,-2]]],[[104,[-1,-2]]],37,22],[[[115,[-1,-2,-3]]],[[109,[-1,-2,-3]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[116,[-1,-2,-3]]],[[110,[-1,-2,-3]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[117,[-1,-2,-3]]],[[111,[-1,-2,-3]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[118,[-1,-2,-3]]],[[112,[-1,-2,-3]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[119,[-1,-2,-3]]],[[113,[-1,-2,-3]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[88,[-1,-2]]],[[105,[-1,-2]]],37,22],[[[87,[-1,-2]]],[[106,[-1,-2]]],37,22],[[[102,[-1,-2]]],[[107,[-1,-2]]],37,22],[[[103,[-1,-2]]],[[108,[-1,-2]]],37,22],[[[20,[-1,-2]],30],[[42,[-2]]],37,22],[[[20,[-1,-2]],30,11],11,37,22],[[[20,[-1,-2]],30,11],11,37,22],[[[20,[-1,-2]]],18,37,22],[[[20,[-1,-2]],30],18,37,22],[[[20,[-1,-2]],30],18,37,22],[[[20,[-1,-2]],-3],[[96,[-1,-2,-3]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[20,[-1,-2]],-3],[[117,[-1,-2,-3]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[20,[-1,-2]],30,-3],[[98,[-1,-2,-3]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[20,[-1,-2]],30,-3],[[119,[-1,-2,-3]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[20,[-1,-2]],30,11],18,37,22],[[[20,[-1,-2]],30,11],18,[37,17],22],[[[20,[-1,-2]],30,11],18,[37,17],22],[[[20,[-1,-2]],30,11],18,37,22],[[[20,[-1,-2]],30],18,37,22],[[[20,[-1,-2]],30],18,37,22],[[[81,[-1,-2]]],[[18,[30,[33,[30]]]]],37,22],[[[82,[-1,-2]]],[[18,[30,[33,[30]]]]],37,22],[[[84,[-1,-2]]],[[18,[30,[33,[30]]]]],37,22],[[[115,[-1,-2,-3]]],[[18,[30,[33,[30]]]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[116,[-1,-2,-3]]],[[18,[30,[33,[30]]]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[117,[-1,-2,-3]]],[[18,[30,[33,[30]]]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[118,[-1,-2,-3]]],[[18,[30,[33,[30]]]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[119,[-1,-2,-3]]],[[18,[30,[33,[30]]]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[89,[-1,-2]]],[[18,[30,[33,[30]]]]],37,22],[[[85,[-1,-2]]],[[18,[30,[33,[30]]]]],37,22],[[[88,[-1,-2]]],[[18,[30,[33,[30]]]]],37,22],[[[86,[-1,-2]]],[[18,[30,[33,[30]]]]],37,22],[[[87,[-1,-2]]],[[18,[30,[33,[30]]]]],37,22],[[[90,[-1,-2]]],[[18,[30,[33,[30]]]]],37,22],[[[102,[-1,-2]]],[[18,[30,[33,[30]]]]],37,22],[[[91,[-1,-2]]],[[18,[30,[33,[30]]]]],37,22],[[[103,[-1,-2]]],[[18,[30,[33,[30]]]]],37,22],[[[92,[-1,-2,-3]]],[[18,[30,[33,[30]]]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[95,[-1,-2,-3]]],[[18,[30,[33,[30]]]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[96,[-1,-2,-3]]],[[18,[30,[33,[30]]]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[97,[-1,-2,-3]]],[[18,[30,[33,[30]]]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[98,[-1,-2,-3]]],[[18,[30,[33,[30]]]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[99,[-1,-2]]],[[18,[30,[33,[30]]]]],37,22],[[[100,[-1,-2]]],[[18,[30,[33,[30]]]]],37,22],[[[104,[-1,-2]]],[[18,[30,[33,[30]]]]],37,22],[[[105,[-1,-2]]],[[18,[30,[33,[30]]]]],37,22],[[[106,[-1,-2]]],[[18,[30,[33,[30]]]]],37,22],[[[107,[-1,-2]]],[[18,[30,[33,[30]]]]],37,22],[[[108,[-1,-2]]],[[18,[30,[33,[30]]]]],37,22],[[[109,[-1,-2,-3]]],[[18,[30,[33,[30]]]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[110,[-1,-2,-3]]],[[18,[30,[33,[30]]]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[111,[-1,-2,-3]]],[[18,[30,[33,[30]]]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[112,[-1,-2,-3]]],[[18,[30,[33,[30]]]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[113,[-1,-2,-3]]],[[18,[30,[33,[30]]]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[20,[-1,-2]]],11,37,22],[[[20,[-1,-2]],-3],[[92,[-1,-2,-3]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[20,[-1,-2]],30],[[18,[[20,[-1,-2]],[20,[-1,-2]]]]],37,22],[[[20,[-1,-2]],30],[[18,[[20,[-2]],[20,[-2]]]]],37,22],[[[20,[-1,-2]],30],[[18,[[20,[-1,-2]],[20,[-1,-2]]]]],37,22],[[[20,[-1,-2]],30],[[18,[[20,[-2]],[20,[-2]]]]],37,22],[[[20,[-1,-2]]],[[33,[[18,[[70,[49,-1,-2]],[20,[-1,-2]]]]]]],37,22],[[[20,[-1,-2]]],[[33,[[18,[[70,[48,-2]],[20,[-2]]]]]]],37,22],[[[20,[-1,-2]],-3],[[95,[-1,-2,-3]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[20,[-1,-2]],-3],[[116,[-1,-2,-3]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[20,[-1,-2]]],[[33,[[18,[[70,[49,-1,-2]],[20,[-1,-2]]]]]]],37,22],[[[20,[-1,-2]]],[[33,[[18,[[70,[48,-2]],[20,[-2]]]]]]],37,22],[[[20,[-1,-2]],-3],[[115,[-1,-2,-3]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[20,[-1,-2]],30,-3],[[97,[-1,-2,-3]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[20,[-1,-2]],30,-3],[[118,[-1,-2,-3]]],37,22,[[94,[30,11],[[93,[11]]]]]],[[[20,[-1,-2]],[20,[-3,-4]]],11,37,22,37,22],[[[20,[-1,65]],-2],18,37,34],[[[20,[-1,66]],-2],18,37,34],[[[20,[-1,65]],-2],18,37,34],[[[20,[-1,66]],-2],18,37,34],[[[20,[-1,-2]],[20,[-3,-4]]],[[33,[[20,[-1,-2]]]]],37,22,37,22],[[[20,[-1,-2]],[20,[-3,-4]]],[[33,[[20,[-1,-2]]]]],37,22,37,22],[[[20,[-1,-2]],30,30],18,37,22],[[[20,[-1,-2]],30,30],18,37,22],[[[20,[-1,-2]],[20,[-3,-4]]],18,37,22,37,22],[[[20,[-1,-2]],[20,[-3,-4]]],18,37,22,37,22],[[[87,[-1,-2]]],[[20,[-2]]],37,22],[[[103,[-1,-2]]],[[20,[-2]]],37,22],[[[106,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[108,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[20,[-1,-2]]],[[42,[-2]]],37,22],[-1,-2,[],[]],[[[20,[-1,-2]]],-3,37,22,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,35,[]],[[[20,[-1,-2]]],[[42,[-2]]],37,22],[[[20,[-1,-2]]],30,37,22],[[[20,[-1,-2]]],30,37,22],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[[[1,[-1]]],[[19,[[20,[-1,-2]],-3]]],37,22,[]],[[[1,[-1]]],[[19,[[20,[-1,-2]],-3]]],37,22,[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[[[1,[-1]]],[[19,[[20,[-1,-2]],[21,[-1]]]]],37,22],[[[1,[-1]]],[[19,[[20,[-1,-2]],[21,[-1]]]]],37,22],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[[[20,[-1,-2]],30],[[89,[-1,-2]]],37,22],[[[20,[-1,-2]],[1,[60]]],[[114,[30]]],37,22],0,0,0,0,0,0,0,0,[[[37,[],[[12,[-1]],[128,[-2]],[129,[-3]],[130,[-4]]]],[24,[-1]]],11,[15,[37,[],[[12,[-1]]]]],[[2,[],[[16,[-1]]]],[37,[],[[12,[-1]]]]],[[37,[],[[12,[-1]]]]],[[37,[],[[12,[-1]]]]]],[[[37,[],[[12,[-1]],[128,[-2]],[129,[-3]],[130,[-4]]]]],-1,[15,[37,[],[[12,[-1]]]]],[[2,[],[[16,[-1]]]],[37,[],[[12,[-1]]]]],[[37,[],[[12,[-1]]]]],[[37,[],[[12,[-1]]]]]],[-1,[[37,[],[[12,[-1]],[128,[-2]],[129,[-3]],[130,[-4]]]]],[15,[37,[],[[12,[-1]]]]],[[2,[],[[16,[-1]]]],[37,[],[[12,[-1]]]]],[[37,[],[[12,[-1]]]]],[[37,[],[[12,[-1]]]]]],[[[37,[],[[12,[-1]],[128,[-2]],[129,[-3]],[130,[-4]]]],-1],18,[15,[37,[],[[12,[-1]]]]],[[2,[],[[16,[-1]]]],[37,[],[[12,[-1]]]]],[[37,[],[[12,[-1]]]]],[[37,[],[[12,[-1]]]]]],0,0,0,0,0,[[[42,[-1,-2]],[42,[-3,-4]]],18,37,22,37,22],[[[42,[-1,-2]]],[[68,[49,-1,-2]]],37,22],[[[131,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[42,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[42,[-1,-2]]],[[42,[-1,-2]]],37,22],[[[42,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[42,[-1,-2]]],[[68,[48,-1,-2]]],37,22],[[[42,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[42,[-1,-2]]],[[68,[48,-1,-2]]],37,22],[[[42,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[42,[-1,-2]]],[[68,[49,-1,-2]]],37,22],[[[42,[-1,-2]]],[[1,[-1]]],37,22],[[[42,[-1,-2]]],[[1,[-1]]],37,22],[[[131,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[42,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[42,[-1,-2]]],[[42,[-1,-2]]],37,22],[[[131,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[42,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[42,[-1,-2]],-3],-4,37,22,[],[]],[[[42,[-1,-2]],-3],18,37,22,[]],[[[42,[-1,-2]],-3],-4,37,22,[],[]],[[[42,[-1,-2]],-3],18,37,22,[]],[[[42,[-1,-2]],-3],-4,37,22,[],[]],[[[42,[-1,-2]],-3],18,37,22,[]],[-1,-2,[],[]],[[[42,[-1,-2]]],[[20,[-1,-2]]],37,22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[42,[-1,-2]]],[[20,[-1,-2]]],37,22],[-1,-2,[],[]],[-1,-2,[],[]],[[[42,[-1,-2]]],30,37,22],[[[42,[-1,-2]]],18,37,22],[[[42,[-1,-2]]],[[42,[-1,-2]]],37,22],[[-1,-2],18,[],[]],[[[42,[-1,-2]],[42,[-1,-2]]],29,37,22],[[[131,[-1,-2]]],30,37,22],[[[132,[-1,-2,-3]]],30,37,22,[[61,[],[[16,[11]]]]]],[[],[[42,[-1,-2]]],37,22],[[[42,[-1,-2]]],-3,37,22,[]],[[[42,[-1,-2]]],-3,37,22,[]],[[[42,[-1,-2]],-3],[[131,[-1,-2]]],37,22,[[133,[30]]]],[[[131,[-1,-2]]],18,37,22],[[[42,[-1,-2]]],18,37,22],[[[132,[-1,-2,-3]]],18,37,22,[[61,[],[[16,[11]]]]]],[[[42,[-1,-2]],-3],11,37,22,[31,[39,[[20,[-1,-2]]]]]],[[[42,[-1,-2]],-3],18,37,22,[[43,[],[[16,[-1]]]]]],[[[42,[-1,-2]],-3],18,37,22,[[43,[],[[16,[-1]]]]]],[[[42,[-1,-2]],-3],18,37,22,[[43,[],[[16,[11]]]]]],[[[42,[-1,-2]],-3],18,37,22,[[43,[],[[16,[11]]]]]],[[[42,[-1,-2]],-6],18,37,22,47,37,22,[[43,[],[[16,[[70,[-3,-4,-5]]]]]]]],[[[42,[-1,-2]],[20,[-3,-4]]],18,37,22,37,22],[[[42,[-1,-2]],[1,[-1]]],18,37,22],[[[42,[-1,-2]],[20,[-3,-4]]],18,37,22,37,22],[[[42,[-1,-2]],-3],18,37,22,[[101,[30]]]],[[[42,[-1,-2]]],[[114,[18]]],37,22],[[[131,[-1,-2]],5],6,37,22],[[[42,[-1,-2]],5],6,37,22],[[[42,[-1,-2]],5],6,37,22],[[[42,[-1,-2]],5],6,37,22],[[[42,[-1,-2]],5],6,37,22],[[[42,[-1,-2]],5],6,37,22],[[[42,[-1,-2]],5],6,37,22],[[[42,[-1,-2]],5],6,37,22],[[[132,[-1,-2,-3]],5],6,[37,76],[22,76],[[61,[],[[16,[11]]]],76]],[[[42,[-1,-2]]],18,37,22],[-1,-1,[]],[-1,-1,[]],[[[25,[-1,-2]]],[[42,[-2]]],26,22],[[[41,[[20,[-1,-2]]]]],[[42,[-1,-2]]],37,22],[[[20,[-1,-2]]],[[42,[-1,-2]]],37,22],[[[38,[-1,-2]]],[[42,[-1,-2]]],37,22],[[[20,[-1,-2]]],[[42,[-1,-2]]],37,22],[-1,-1,[]],[[[20,[-1,-2]]],[[42,[-1,-2]]],37,22],[-1,[[42,[-1,-2]]],37,22],[-2,[[42,[-1,-3]]],37,[[43,[],[[16,[-1]]]]],22],[-1,[[42,[-2,-3]]],[[43,[],[[16,[11]]]]],37,22],[-4,[[42,[-5,-6]]],47,37,22,[[43,[],[[16,[[70,[-1,-2,-3]]]]]]],37,22],[-2,[[42,[-1,-3]]],37,[[43,[],[[16,[-1]]]]],22],[-1,[[42,[-2,-3]]],[[43,[],[[16,[11]]]]],37,22],[[[68,[48,-1,-2]],30,30],[[42,[-1,-2]]],37,22],[[[1,[-1]]],[[42,[-1,-2]]],37,22],[[[134,[-1]]],[[42,[-1,-2]]],37,22],[[[42,[-1,-2]],-3],18,37,22,32],[[[42,[-1,-2]],-3],-4,37,22,[],[]],[[[42,[-1,-2]],-3],-4,37,22,[],[]],[[[42,[-1,-2]],30,11],18,37,22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[42,[-1,-2]]],[[38,[-1,-2]]],37,22],[[[42,[-1,-2]]],[[38,[-1,-2]]],37,22],[-1,-2,[],[]],[[[42,[-1,-2]]],-3,37,22,[]],[[[42,[-1,-2]]],-3,37,22,[]],[[[42,[-1,-2]]],-3,37,22,[]],[-1,-2,[],[]],[[[42,[-1,-2]]],[[18,[[68,[48,-1,-2]],30,30]]],37,22],[[[42,[-1,-2]]],[[134,[-1]]],37,22],[[[42,[-1,-2]]],11,37,22],[[[131,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[132,[-1,-2,-3]]],[[33,[-4]]],37,22,[[61,[],[[16,[11]]]]],[]],[[[42,[-1,-2]]],[[20,[-1,-2]]],37,22],[[[131,[-1,-2]]],30,37,22],[[[42,[-1,-2]]],30,37,22],[[[132,[-1,-2,-3]]],30,37,22,[[61,[],[[16,[11]]]]]],[[[42,[-1,-2]]],-3,37,22,34],[[[42,[-1,-2]]],-3,37,22,34],[[],[[42,[-1,-2]]],37,22],[[[131,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[132,[-1,-2,-3]]],[[33,[-4]]],37,22,[[61,[],[[16,[11]]]]],[]],[[[131,[-1,-2]]],[[33,[-3]]],37,22,[]],[[[132,[-1,-2,-3]]],[[33,[-4]]],37,22,[[61,[],[[16,[11]]]]],[]],[[[42,[-1,-2]]],-3,37,22,[]],[[[131,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[131,[-1,-2]],30],[[33,[-3]]],37,22,[]],[[[132,[-1,-2,-3]],30],[[33,[-4]]],37,22,[[61,[],[[16,[11]]]]],[]],[[[42,[-1,-2]],-3],[[33,[29]]],37,22,[31,[44,[[20,[-1,-2]]]]]],[[[42,[-1,-2]]],[[33,[11]]],37,22],[[[42,[-1,-2]],11],18,37,22],[[[42,[-1,-2]],[1,[60]]],[[114,[30]]],37,22],[[[42,[-1,-2]],30],11,37,22],[[11,30],[[42,[-1,-2]]],37,22],[[[42,[-1,-2]],30],18,37,22],[[[42,[-1,-2]],30],18,37,22],[[[42,[-1,-2]],30,11],18,37,22],[[[42,[-1,-2]],30,-3],18,37,22,[[94,[30],[[93,[11]]]]]],[[[42,[-1,-2]],-3],18,37,22,[[94,[30,11],[[93,[11]]]]]],[[[42,[-1,-2]]],18,37,22],[[[42,[-1,-2]],30],18,37,22],[[[42,[-1,-2]],11],18,37,22],[[[42,[-1,-2]]],18,37,22],[[[131,[-1,-2]]],[[18,[30,[33,[30]]]]],37,22],[[[132,[-1,-2,-3]]],[[18,[30,[33,[30]]]]],37,22,[[61,[],[[16,[11]]]]]],[[[42,[-1,-2]],-3,-4],[[132,[-1,-2]]],37,22,[[133,[30]]],[[43,[],[[16,[11]]]]]],[[[42,[-1,-2]],30],[[42,[-1,-2]]],37,22],[[[42,[-1,-2]],-3],18,37,22,34],[[[42,[-1,-2]],-3],18,37,22,34],[[[42,[-1,-2]],30],11,37,22],[-1,-2,[],[]],[-1,35,[]],[[[42,[-1,-2]],30],18,37,22],[-1,[[19,[-2]]],[],[]],[[[134,[-1]]],[[19,[[42,[-1,-2]],-3]]],37,22,[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[[[1,[-1]]],[[19,[[42,[-1,-2]],[21,[-1]]]]],37,22],[[[134,[-1]]],[[19,[[42,[-1,-2]],[134,[-1]]]]],37,22],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[30,[[42,[-1,-2]]],37,22],[[[42,[-1,-2]],[1,[60]]],[[114,[30]]],37,22],0,0,0,0,0,0,[135,[[20,[-1,-2]]],37,22],[136,[[20,[-1,-2]]],37,22],[26,[[1,[-1]]],[]],[26,[[1,[-1]]],[]],[26,[[25,[26,-1]]],22],[135,[[19,[[20,[-1,-2]],[21,[-1]]]]],37,22],[136,[[19,[[20,[-1,-2]],[21,[-1]]]]],37,22],[[[138,[],[[137,[-1]]]]],[[19,[[20,[-1,-2]],[21,[-1]]]]],37,22],[[[138,[],[[137,[-1]]]]],[[19,[[20,[-1,-2]],[21,[-1]]]]],37,22],[[[138,[],[[137,[-1]]]]],[[20,[-1,-2]]],37,22],[[[138,[],[[137,[-1]]]]],[[20,[-1,-2]]],37,22]],"c":[135,136,140,141,708,709,781,809,810,875,876,877,932,934,939,940,1054,1072,1074,1199,1204,1308,1592,1613,1750,1751,1752,1758,1759,1796,1835],"p":[[1,"slice"],[10,"BitAccess",20],[5,"BitMask",386],[5,"BitSafeU8",20],[5,"Formatter",1917],[8,"Result",1917],[5,"BitSafeU16",20],[5,"BitSafeU32",20],[5,"BitSafeU64",20],[5,"BitSafeUsize",20],[1,"bool"],[17,"Mem"],[17,"Rad"],[10,"BitSafe",20],[10,"BitRegister",546],[17,"Item"],[10,"Radium",1918],[1,"tuple"],[6,"Result",1919],[5,"BitSlice",880],[6,"BitSpanError",621],[10,"BitOrder",552],[5,"TypeId",1920],[5,"BitIdx",386],[5,"BitArray",126],[10,"BitViewSized",1900],[5,"IntoIter",126],[10,"Clone",1921],[6,"Ordering",1922],[1,"usize"],[10,"Sized",1923],[10,"Hasher",1924],[6,"Option",1925],[10,"Integral",1926],[5,"String",1927],[5,"IntoIter",214],[10,"BitStore",1725],[5,"BitBox",214],[10,"PartialEq",1922],[5,"Box",1928],[6,"Cow",1929],[5,"BitVec",1737],[10,"IntoIterator",1930],[10,"PartialOrd",1922],[5,"PartialElement",304],[5,"BitEnd",386],[10,"Mutability",621],[5,"Mut",621],[5,"Const",621],[6,"BitDomain",304],[6,"Domain",304],[8,"Reference",1931],[10,"BitField",379],[5,"BitIdxError",386],[5,"BitPos",386],[5,"BitSel",386],[10,"Ord",1922],[10,"Default",1932],[10,"Hash",1924],[1,"u8"],[10,"Iterator",1933],[10,"DoubleEndedIterator",1934],[10,"ExactSizeIterator",1935],[10,"FusedIterator",1936],[5,"Lsb0",552],[5,"Msb0",552],[10,"Into",1937],[5,"BitPtr",621],[5,"Address",1931],[5,"BitRef",621],[5,"MisalignError",621],[5,"BitPtrRange",621],[6,"BitPtrError",621],[6,"Bound",1938],[5,"Error",1917],[10,"Debug",1917],[5,"Frozen",1931],[5,"Range",1938],[5,"NullPtrError",1931],[1,"isize"],[5,"Iter",880],[5,"IterMut",880],[8,"BitRefIter",880],[5,"BitValIter",880],[5,"Chunks",880],[5,"ChunksExact",880],[5,"ChunksExactMut",880],[5,"ChunksMut",880],[5,"Windows",880],[5,"RChunks",880],[5,"RChunksExact",880],[5,"Split",880],[17,"Output"],[10,"FnMut",1939],[5,"SplitInclusive",880],[5,"RSplit",880],[5,"SplitN",880],[5,"RSplitN",880],[5,"IterOnes",880],[5,"IterZeros",880],[10,"RangeExt",1940],[5,"RChunksMut",880],[5,"RChunksExactMut",880],[5,"IterMutNoAlias",880],[5,"ChunksMutNoAlias",880],[5,"ChunksExactMutNoAlias",880],[5,"RChunksMutNoAlias",880],[5,"RChunksExactMutNoAlias",880],[5,"SplitMutNoAlias",880],[5,"SplitInclusiveMutNoAlias",880],[5,"RSplitMutNoAlias",880],[5,"SplitNMutNoAlias",880],[5,"RSplitNMutNoAlias",880],[8,"Result",1941],[5,"SplitMut",880],[5,"SplitInclusiveMut",880],[5,"RSplitMut",880],[5,"SplitNMut",880],[5,"RSplitNMut",880],[17,"Immut"],[17,"Mut"],[10,"BitSliceIndex",880],[5,"RangeToInclusive",1938],[5,"RangeFrom",1938],[5,"RangeInclusive",1938],[5,"RangeTo",1938],[5,"RangeFull",1938],[17,"Access"],[17,"Alias"],[17,"Unalias"],[5,"Drain",1737],[5,"Splice",1737],[10,"RangeBounds",1938],[5,"Vec",1942],[10,"AsBits",1900],[10,"AsMutBits",1900],[17,"Store"],[10,"BitView",1900],[15,"Region",373],[15,"Region",376]],"b":[[165,"impl-Debug-for-BitArray%3CA,+O%3E"],[166,"impl-Display-for-BitArray%3CA,+O%3E"],[167,"impl-LowerHex-for-BitArray%3CA,+O%3E"],[168,"impl-Binary-for-BitArray%3CA,+O%3E"],[169,"impl-UpperHex-for-BitArray%3CA,+O%3E"],[170,"impl-Octal-for-BitArray%3CA,+O%3E"],[181,"impl-IntoIterator-for-%26mut+BitArray%3CA,+O%3E"],[182,"impl-IntoIterator-for-%26BitArray%3CA,+O%3E"],[183,"impl-IntoIterator-for-BitArray%3CA,+O%3E"],[205,"impl-TryFrom%3C%26mut+BitSlice%3C%3CA+as+BitView%3E::Store,+O%3E%3E-for-%26mut+BitArray%3CA,+O%3E"],[207,"impl-TryFrom%3C%26BitSlice%3C%3CA+as+BitView%3E::Store,+O%3E%3E-for-BitArray%3CA,+O%3E"],[208,"impl-TryFrom%3C%26BitSlice%3C%3CA+as+BitView%3E::Store,+O%3E%3E-for-%26BitArray%3CA,+O%3E"],[250,"impl-Octal-for-BitBox%3CT,+O%3E"],[251,"impl-Pointer-for-BitBox%3CT,+O%3E"],[252,"impl-Binary-for-BitBox%3CT,+O%3E"],[253,"impl-LowerHex-for-BitBox%3CT,+O%3E"],[254,"impl-Display-for-BitBox%3CT,+O%3E"],[255,"impl-Debug-for-BitBox%3CT,+O%3E"],[256,"impl-UpperHex-for-BitBox%3CT,+O%3E"],[259,"impl-From%3CBox%3CT%3E%3E-for-BitBox%3CT,+O%3E"],[260,"impl-From%3CBitArray%3CA,+O%3E%3E-for-BitBox%3C%3CA+as+BitView%3E::Store,+O%3E"],[261,"impl-From%3CCow%3C\'a,+BitSlice%3CT,+O%3E%3E%3E-for-BitBox%3CT,+O%3E"],[263,"impl-From%3CBitVec%3CT,+O%3E%3E-for-BitBox%3CT,+O%3E"],[264,"impl-From%3C%26BitSlice%3CT,+O%3E%3E-for-BitBox%3CT,+O%3E"],[330,"impl-Display-for-Domain%3C\'a,+Const,+T,+O%3E"],[331,"impl-Binary-for-Domain%3C\'a,+Const,+T,+O%3E"],[332,"impl-Debug-for-Domain%3C\'a,+M,+T,+O%3E"],[333,"impl-LowerHex-for-Domain%3C\'a,+Const,+T,+O%3E"],[334,"impl-Octal-for-Domain%3C\'a,+Const,+T,+O%3E"],[335,"impl-UpperHex-for-Domain%3C\'a,+Const,+T,+O%3E"],[445,"impl-Display-for-BitIdx%3CR%3E"],[446,"impl-Debug-for-BitIdx%3CR%3E"],[447,"impl-Binary-for-BitIdx%3CR%3E"],[448,"impl-Display-for-BitIdxError%3CR%3E"],[449,"impl-Debug-for-BitIdxError%3CR%3E"],[450,"impl-Debug-for-BitEnd%3CR%3E"],[451,"impl-Binary-for-BitEnd%3CR%3E"],[452,"impl-Display-for-BitEnd%3CR%3E"],[453,"impl-Debug-for-BitPos%3CR%3E"],[454,"impl-Binary-for-BitPos%3CR%3E"],[455,"impl-Display-for-BitPos%3CR%3E"],[456,"impl-Binary-for-BitSel%3CR%3E"],[457,"impl-Display-for-BitSel%3CR%3E"],[458,"impl-Debug-for-BitSel%3CR%3E"],[459,"impl-Display-for-BitMask%3CR%3E"],[460,"impl-Debug-for-BitMask%3CR%3E"],[461,"impl-Binary-for-BitMask%3CR%3E"],[715,"impl-PartialEq%3C%26bool%3E-for-BitRef%3C\'_,+M,+T,+O%3E"],[716,"impl-PartialEq%3CBitRef%3C\'_,+M2,+T2,+O2%3E%3E-for-BitRef%3C\'_,+M1,+T1,+O1%3E"],[717,"impl-PartialEq%3Cbool%3E-for-BitRef%3C\'_,+M,+T,+O%3E"],[725,"impl-Pointer-for-BitRef%3C\'_,+M,+T,+O%3E"],[726,"impl-Debug-for-BitRef%3C\'_,+M,+T,+O%3E"],[727,"impl-Display-for-BitRef%3C\'_,+M,+T,+O%3E"],[729,"impl-Pointer-for-BitPtr%3CM,+T,+O%3E"],[730,"impl-Debug-for-BitPtr%3CM,+T,+O%3E"],[731,"impl-Display-for-MisalignError%3CT%3E"],[732,"impl-Debug-for-MisalignError%3CT%3E"],[733,"impl-Debug-for-BitPtrError%3CT%3E"],[734,"impl-Display-for-BitPtrError%3CT%3E"],[735,"impl-Debug-for-BitSpanError%3CT%3E"],[736,"impl-Display-for-BitSpanError%3CT%3E"],[743,"impl-From%3C%26mut+T%3E-for-BitPtr%3CMut,+T,+O%3E"],[745,"impl-From%3C%26T%3E-for-BitPtr%3CConst,+T,+O%3E"],[747,"impl-From%3CMisalignError%3CT%3E%3E-for-BitPtrError%3CT%3E"],[748,"impl-From%3CNullPtrError%3E-for-BitPtrError%3CT%3E"],[750,"impl-From%3CMisalignError%3CT%3E%3E-for-BitSpanError%3CT%3E"],[751,"impl-From%3CBitPtrError%3CT%3E%3E-for-BitSpanError%3CT%3E"],[797,"impl-PartialOrd%3CBitRef%3C\'_,+M2,+T2,+O2%3E%3E-for-BitRef%3C\'_,+M1,+T1,+O1%3E"],[798,"impl-PartialOrd%3C%26bool%3E-for-BitRef%3C\'_,+M,+T,+O%3E"],[799,"impl-PartialOrd%3Cbool%3E-for-BitRef%3C\'_,+M,+T,+O%3E"],[804,"impl-BitPtr%3CMut,+T,+O%3E"],[805,"impl-BitPtr%3CConst,+T,+O%3E"],[847,"impl-TryFrom%3C*mut+T%3E-for-BitPtr%3CMut,+T,+O%3E"],[848,"impl-TryFrom%3C*const+T%3E-for-BitPtr%3CConst,+T,+O%3E"],[943,"impl-BitAndAssign%3C%26BitSlice%3CT2,+O2%3E%3E-for-BitSlice%3CT1,+O1%3E"],[944,"impl-BitAndAssign%3CBitArray%3CA,+O%3E%3E-for-BitSlice%3C%3CA+as+BitView%3E::Store,+O%3E"],[945,"impl-BitAndAssign%3CBitBox%3CT,+O%3E%3E-for-BitSlice%3CT,+O%3E"],[946,"impl-BitAndAssign%3C%26BitVec%3CT,+O%3E%3E-for-BitSlice%3CT,+O%3E"],[947,"impl-BitAndAssign%3C%26BitArray%3CA,+O%3E%3E-for-BitSlice%3C%3CA+as+BitView%3E::Store,+O%3E"],[948,"impl-BitAndAssign%3CBitVec%3CT,+O%3E%3E-for-BitSlice%3CT,+O%3E"],[949,"impl-BitAndAssign%3C%26BitBox%3CT,+O%3E%3E-for-BitSlice%3CT,+O%3E"],[950,"impl-BitOrAssign%3C%26BitBox%3CT,+O%3E%3E-for-BitSlice%3CT,+O%3E"],[951,"impl-BitOrAssign%3C%26BitSlice%3CT2,+O2%3E%3E-for-BitSlice%3CT1,+O1%3E"],[952,"impl-BitOrAssign%3C%26BitArray%3CA,+O%3E%3E-for-BitSlice%3C%3CA+as+BitView%3E::Store,+O%3E"],[953,"impl-BitOrAssign%3CBitVec%3CT,+O%3E%3E-for-BitSlice%3CT,+O%3E"],[954,"impl-BitOrAssign%3C%26BitVec%3CT,+O%3E%3E-for-BitSlice%3CT,+O%3E"],[955,"impl-BitOrAssign%3CBitBox%3CT,+O%3E%3E-for-BitSlice%3CT,+O%3E"],[956,"impl-BitOrAssign%3CBitArray%3CA,+O%3E%3E-for-BitSlice%3C%3CA+as+BitView%3E::Store,+O%3E"],[957,"impl-BitXorAssign%3C%26BitSlice%3CT2,+O2%3E%3E-for-BitSlice%3CT1,+O1%3E"],[958,"impl-BitXorAssign%3CBitVec%3CT,+O%3E%3E-for-BitSlice%3CT,+O%3E"],[959,"impl-BitXorAssign%3CBitArray%3CA,+O%3E%3E-for-BitSlice%3C%3CA+as+BitView%3E::Store,+O%3E"],[960,"impl-BitXorAssign%3C%26BitBox%3CT,+O%3E%3E-for-BitSlice%3CT,+O%3E"],[961,"impl-BitXorAssign%3C%26BitArray%3CA,+O%3E%3E-for-BitSlice%3C%3CA+as+BitView%3E::Store,+O%3E"],[962,"impl-BitXorAssign%3C%26BitVec%3CT,+O%3E%3E-for-BitSlice%3CT,+O%3E"],[963,"impl-BitXorAssign%3CBitBox%3CT,+O%3E%3E-for-BitSlice%3CT,+O%3E"],[1103,"impl-Default-for-%26mut+BitSlice%3CT,+O%3E"],[1104,"impl-Default-for-%26BitSlice%3CT,+O%3E"],[1112,"impl-PartialEq%3CBitVec%3CT2,+O2%3E%3E-for-%26BitSlice%3CT1,+O1%3E"],[1113,"impl-PartialEq%3CBitBox%3CT2,+O2%3E%3E-for-BitSlice%3CT1,+O1%3E"],[1114,"impl-PartialEq%3CBitBox%3CT2,+O2%3E%3E-for-%26BitSlice%3CT1,+O1%3E"],[1115,"impl-PartialEq%3C%26BitSlice%3CT2,+O2%3E%3E-for-BitSlice%3CT1,+O1%3E"],[1116,"impl-PartialEq%3CBitBox%3CT2,+O2%3E%3E-for-%26mut+BitSlice%3CT1,+O1%3E"],[1117,"impl-PartialEq%3CBitVec%3CT2,+O2%3E%3E-for-%26mut+BitSlice%3CT1,+O1%3E"],[1118,"impl-PartialEq%3CBitSlice%3CT2,+O2%3E%3E-for-BitSlice%3CT1,+O1%3E"],[1119,"impl-PartialEq%3CBitSlice%3CT2,+O2%3E%3E-for-%26mut+BitSlice%3CT1,+O1%3E"],[1120,"impl-PartialEq%3CBitVec%3CT2,+O2%3E%3E-for-BitSlice%3CT1,+O1%3E"],[1121,"impl-PartialEq%3C%26mut+BitSlice%3CT2,+O2%3E%3E-for-BitSlice%3CT1,+O1%3E"],[1122,"impl-PartialEq%3CBitSlice%3CT2,+O2%3E%3E-for-%26BitSlice%3CT1,+O1%3E"],[1123,"impl-PartialEq%3CBitArray%3CA,+O2%3E%3E-for-BitSlice%3CT,+O1%3E"],[1140,"impl-Pointer-for-BitSlice%3CT,+O%3E"],[1141,"impl-LowerHex-for-BitSlice%3CT,+O%3E"],[1142,"impl-UpperHex-for-BitSlice%3CT,+O%3E"],[1143,"impl-Debug-for-BitSlice%3CT,+O%3E"],[1144,"impl-Display-for-BitSlice%3CT,+O%3E"],[1145,"impl-Octal-for-BitSlice%3CT,+O%3E"],[1146,"impl-Binary-for-BitSlice%3CT,+O%3E"],[1219,"impl-Index%3CRangeToInclusive%3Cusize%3E%3E-for-BitSlice%3CT,+O%3E"],[1220,"impl-Index%3CRangeFrom%3Cusize%3E%3E-for-BitSlice%3CT,+O%3E"],[1221,"impl-Index%3CRangeInclusive%3Cusize%3E%3E-for-BitSlice%3CT,+O%3E"],[1222,"impl-Index%3CRangeTo%3Cusize%3E%3E-for-BitSlice%3CT,+O%3E"],[1223,"impl-Index%3Cusize%3E-for-BitSlice%3CT,+O%3E"],[1224,"impl-Index%3CRangeFull%3E-for-BitSlice%3CT,+O%3E"],[1225,"impl-Index%3CRange%3Cusize%3E%3E-for-BitSlice%3CT,+O%3E"],[1227,"impl-IndexMut%3CRangeFull%3E-for-BitSlice%3CT,+O%3E"],[1228,"impl-IndexMut%3CRangeTo%3Cusize%3E%3E-for-BitSlice%3CT,+O%3E"],[1229,"impl-IndexMut%3CRangeFrom%3Cusize%3E%3E-for-BitSlice%3CT,+O%3E"],[1230,"impl-IndexMut%3CRange%3Cusize%3E%3E-for-BitSlice%3CT,+O%3E"],[1231,"impl-IndexMut%3CRangeToInclusive%3Cusize%3E%3E-for-BitSlice%3CT,+O%3E"],[1232,"impl-IndexMut%3CRangeInclusive%3Cusize%3E%3E-for-BitSlice%3CT,+O%3E"],[1276,"impl-IntoIterator-for-%26BitSlice%3CT,+O%3E"],[1277,"impl-IntoIterator-for-%26mut+BitSlice%3CT,+O%3E"],[1369,"impl-BitField-for-BitSlice%3CT,+Msb0%3E"],[1370,"impl-BitField-for-BitSlice%3CT%3E"],[1371,"impl-BitField-for-BitSlice%3CT,+Msb0%3E"],[1372,"impl-BitField-for-BitSlice%3CT%3E"],[1484,"impl-PartialOrd%3C%26BitSlice%3CT2,+O2%3E%3E-for-BitSlice%3CT1,+O1%3E"],[1485,"impl-PartialOrd%3CBitSlice%3CT2,+O2%3E%3E-for-%26mut+BitSlice%3CT1,+O1%3E"],[1486,"impl-PartialOrd%3CBitVec%3CT2,+O2%3E%3E-for-%26BitSlice%3CT1,+O1%3E"],[1487,"impl-PartialOrd%3CBitVec%3CT2,+O2%3E%3E-for-%26mut+BitSlice%3CT1,+O1%3E"],[1488,"impl-PartialOrd%3CBitBox%3CT2,+O2%3E%3E-for-%26mut+BitSlice%3CT1,+O1%3E"],[1489,"impl-PartialOrd%3CBitSlice%3CT2,+O2%3E%3E-for-%26BitSlice%3CT1,+O1%3E"],[1490,"impl-PartialOrd%3CBitBox%3CT2,+O2%3E%3E-for-%26BitSlice%3CT1,+O1%3E"],[1491,"impl-PartialOrd%3CBitBox%3CT2,+O2%3E%3E-for-BitSlice%3CT1,+O1%3E"],[1492,"impl-PartialOrd%3CBitSlice%3CT2,+O2%3E%3E-for-BitSlice%3CT1,+O1%3E"],[1493,"impl-PartialOrd%3C%26mut+BitSlice%3CT2,+O2%3E%3E-for-%26BitSlice%3CT1,+O1%3E"],[1494,"impl-PartialOrd%3CBitVec%3CT2,+O2%3E%3E-for-BitSlice%3CT1,+O1%3E"],[1495,"impl-PartialOrd%3C%26BitSlice%3CT2,+O2%3E%3E-for-%26mut+BitSlice%3CT1,+O1%3E"],[1496,"impl-PartialOrd%3CBitArray%3CA,+O%3E%3E-for-BitSlice%3CT,+O%3E"],[1497,"impl-PartialOrd%3C%26mut+BitSlice%3CT2,+O2%3E%3E-for-BitSlice%3CT1,+O1%3E"],[1583,"impl-BitField-for-BitSlice%3CT%3E"],[1584,"impl-BitField-for-BitSlice%3CT,+Msb0%3E"],[1585,"impl-BitField-for-BitSlice%3CT%3E"],[1586,"impl-BitField-for-BitSlice%3CT,+Msb0%3E"],[1624,"impl-TryFrom%3C%26%5BT%5D%3E-for-%26BitSlice%3CT,+O%3E"],[1625,"impl-TryFrom%3C%26mut+%5BT%5D%3E-for-%26mut+BitSlice%3CT,+O%3E"],[1746,"impl-AsMut%3CBitVec%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E"],[1747,"impl-AsMut%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E"],[1756,"impl-AsRef%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E"],[1757,"impl-AsRef%3CBitVec%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E"],[1789,"impl-Extend%3CT%3E-for-BitVec%3CT,+O%3E"],[1790,"impl-Extend%3C%26T%3E-for-BitVec%3CT,+O%3E"],[1791,"impl-Extend%3Cbool%3E-for-BitVec%3CT,+O%3E"],[1792,"impl-Extend%3C%26bool%3E-for-BitVec%3CT,+O%3E"],[1793,"impl-Extend%3CBitRef%3C\'a,+M,+T2,+O2%3E%3E-for-BitVec%3CT1,+O1%3E"],[1800,"impl-Debug-for-BitVec%3CT,+O%3E"],[1801,"impl-UpperHex-for-BitVec%3CT,+O%3E"],[1802,"impl-Display-for-BitVec%3CT,+O%3E"],[1803,"impl-Pointer-for-BitVec%3CT,+O%3E"],[1804,"impl-LowerHex-for-BitVec%3CT,+O%3E"],[1805,"impl-Binary-for-BitVec%3CT,+O%3E"],[1806,"impl-Octal-for-BitVec%3CT,+O%3E"],[1811,"impl-From%3CBitArray%3CA,+O%3E%3E-for-BitVec%3C%3CA+as+BitView%3E::Store,+O%3E"],[1812,"impl-From%3CCow%3C\'a,+BitSlice%3CT,+O%3E%3E%3E-for-BitVec%3CT,+O%3E"],[1813,"impl-From%3C%26mut+BitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E"],[1814,"impl-From%3CBitBox%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E"],[1815,"impl-From%3C%26BitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E"],[1819,"impl-FromIterator%3CT%3E-for-BitVec%3CT,+O%3E"],[1820,"impl-FromIterator%3Cbool%3E-for-BitVec%3CT,+O%3E"],[1821,"impl-FromIterator%3CBitRef%3C\'a,+M,+T2,+O2%3E%3E-for-BitVec%3CT1,+O1%3E"],[1822,"impl-FromIterator%3C%26T%3E-for-BitVec%3CT,+O%3E"],[1823,"impl-FromIterator%3C%26bool%3E-for-BitVec%3CT,+O%3E"],[1837,"impl-IntoIterator-for-%26BitVec%3CT,+O%3E"],[1838,"impl-IntoIterator-for-BitVec%3CT,+O%3E"],[1839,"impl-IntoIterator-for-%26mut+BitVec%3CT,+O%3E"]]}],\
["bmp280",{"doc":"A simple library for using the Bosch BMP280 barometer and …","t":"FFPGPPPPINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Bmp280","Bmp280Builder","Err","Error","I2cError","IoError","Ok","Other","Result","address","altitude_m","altitude_m_relative","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","default","description","fmt","fmt","from","from","from","from","from","from","ground_pressure","into","into","into","new","path","pressure_kpa","temperature_celsius","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","zero"],"q":[[0,"bmp280"],[48,"core::fmt"],[49,"core::fmt"],[50,"std::io::error"],[51,"std::path"],[52,"core::convert"],[53,"alloc::string"],[54,"core::result"],[55,"core::any"]],"d":["A single BMP280 sensor","A builder for Bmp280 sensors.","Contains the error value","Errors that all functions could return. Errors will either …","","","Contains the success value","","Wrapper type for results","Set the address of the I2C device for the sensor. There is …","Reads the altitude from the sensor relative to the zeroed …","Reads the altitude from the sensor relative to the given …","","","","","","","Attempt to build a Bmp280 sensor from this builder.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Set the ground pressure for the sensor. If you do not …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Set the path of the I2C device for the sensor.  There is a …","","","","","","","","","","","","","Will set the relative pressure for ground level readings …"],"i":[0,0,5,0,6,6,5,6,0,1,3,3,3,1,6,3,1,6,1,1,6,6,6,3,1,6,6,6,6,1,3,1,6,1,1,3,3,6,3,1,6,3,1,6,3,1,6,3],"f":[0,0,0,0,0,0,0,0,0,[[1,2],1],[3,[[5,[4]]]],[[3,4],[[5,[4]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,[[5,[3]]]],[[],1],[6,7],[[6,8],9],[[6,8],9],[-1,-1,[]],[-1,-1,[]],[10,6],[-1,-1,[]],[11,6],[12,6],[[1,4],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[1,-1],1,[[14,[13]]]],[3,[[5,[4]]]],[3,[[5,[4]]]],[-1,15,[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[3,[[5,[4]]]]],"c":[],"p":[[5,"Bmp280Builder",0],[1,"u16"],[5,"Bmp280",0],[1,"f32"],[8,"Result",0],[6,"Error",0],[1,"str"],[5,"Formatter",48],[8,"Result",48],[6,"LinuxI2CError",49],[1,"tuple"],[5,"Error",50],[5,"PathBuf",51],[10,"Into",52],[5,"String",53],[6,"Result",54],[5,"TypeId",55]],"b":[[21,"impl-Debug-for-Error"],[22,"impl-Display-for-Error"],[25,"impl-From%3CLinuxI2CError%3E-for-Error"],[27,"impl-From%3C()%3E-for-Error"],[28,"impl-From%3CError%3E-for-Error"]]}],\
["byteorder",{"doc":"This crate provides convenience methods for encoding and …","t":"IGKIGIIKKNNNNNNNNNNNNNNNNNNMNNMNNNNNNMNNMNNMNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNMNNNNMNNNNMNNNNNNNMNNNNMNNNNNNNMNNNNMNNNNNNMNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNMNNMNNNNMNNNNNMNNNNMNNNNNMNNNNMNNNNMNNNNMNNNN","n":["BE","BigEndian","ByteOrder","LE","LittleEndian","NativeEndian","NetworkEndian","ReadBytesExt","WriteBytesExt","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","from_slice_f32","from_slice_f32","from_slice_f32","from_slice_f64","from_slice_f64","from_slice_f64","from_slice_i128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_u128","from_slice_u128","from_slice_u128","from_slice_u16","from_slice_u16","from_slice_u16","from_slice_u32","from_slice_u32","from_slice_u32","from_slice_u64","from_slice_u64","from_slice_u64","hash","hash","into","into","partial_cmp","partial_cmp","read_f32","read_f32","read_f32","read_f32_into","read_f32_into","read_f32_into","read_f32_into_unchecked","read_f32_into_unchecked","read_f32_into_unchecked","read_f64","read_f64","read_f64","read_f64_into","read_f64_into","read_f64_into","read_f64_into_unchecked","read_f64_into_unchecked","read_f64_into_unchecked","read_i128","read_i128","read_i128","read_i128_into","read_i128_into","read_i128_into","read_i16","read_i16","read_i16","read_i16_into","read_i16_into","read_i16_into","read_i24","read_i24","read_i24","read_i32","read_i32","read_i32","read_i32_into","read_i32_into","read_i32_into","read_i48","read_i48","read_i48","read_i64","read_i64","read_i64","read_i64_into","read_i64_into","read_i64_into","read_i8","read_i8","read_i8_into","read_i8_into","read_int","read_int","read_int","read_int128","read_int128","read_int128","read_u128","read_u128","read_u128","read_u128","read_u128","read_u128_into","read_u128_into","read_u128_into","read_u128_into","read_u128_into","read_u16","read_u16","read_u16","read_u16","read_u16","read_u16_into","read_u16_into","read_u16_into","read_u16_into","read_u16_into","read_u24","read_u24","read_u24","read_u32","read_u32","read_u32","read_u32","read_u32","read_u32_into","read_u32_into","read_u32_into","read_u32_into","read_u32_into","read_u48","read_u48","read_u48","read_u64","read_u64","read_u64","read_u64","read_u64","read_u64_into","read_u64_into","read_u64_into","read_u64_into","read_u64_into","read_u8","read_u8","read_uint","read_uint","read_uint","read_uint","read_uint","read_uint128","read_uint128","read_uint128","read_uint128","read_uint128","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write_f32","write_f32","write_f32","write_f32_into","write_f64","write_f64","write_f64","write_f64_into","write_i128","write_i128","write_i128","write_i128_into","write_i16","write_i16","write_i16","write_i16_into","write_i24","write_i24","write_i24","write_i32","write_i32","write_i32","write_i32_into","write_i48","write_i48","write_i48","write_i64","write_i64","write_i64","write_i64_into","write_i8","write_i8","write_i8_into","write_int","write_int","write_int","write_int128","write_int128","write_int128","write_u128","write_u128","write_u128","write_u128","write_u128","write_u128_into","write_u128_into","write_u128_into","write_u16","write_u16","write_u16","write_u16","write_u16","write_u16_into","write_u16_into","write_u16_into","write_u24","write_u24","write_u24","write_u32","write_u32","write_u32","write_u32","write_u32","write_u32_into","write_u32_into","write_u32_into","write_u48","write_u48","write_u48","write_u64","write_u64","write_u64","write_u64","write_u64","write_u64_into","write_u64_into","write_u64_into","write_u8","write_u8","write_uint","write_uint","write_uint","write_uint","write_uint","write_uint128","write_uint128","write_uint128","write_uint128","write_uint128"],"q":[[0,"byteorder"],[268,"core::cmp"],[269,"core::fmt"],[270,"core::fmt"],[271,"core::option"],[272,"std::io::error"],[273,"core::result"],[274,"core::any"]],"d":["A type alias for <code>BigEndian</code>.","Defines big-endian serialization.","<code>ByteOrder</code> describes types that can serialize integers as …","A type alias for <code>LittleEndian</code>.","Defines little-endian serialization.","Defines system native-endian serialization.","Defines network byte order serialization.","Extends <code>Read</code> with methods for reading numbers. (For <code>std::io</code>…","Extends <code>Write</code> with methods for writing numbers. (For …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts the given slice of IEEE754 single-precision (4 …","","","Converts the given slice of IEEE754 double-precision (8 …","","","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to a …","","","Converts the given slice of unsigned 16 bit integers to a …","","","Converts the given slice of unsigned 32 bit integers to a …","","","Converts the given slice of unsigned 64 bit integers to a …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a sequence of IEEE754 single-precision (4 bytes) …","Reads a sequence of IEEE754 single-precision (4 bytes) …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a sequence of IEEE754 double-precision (8 bytes) …","Reads a sequence of IEEE754 double-precision (8 bytes) …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","Reads a signed 128 bit integer from the underlying reader.","Reads a signed 128 bit integer from the underlying reader.","Reads a signed 128 bit integer from <code>buf</code>.","Reads a sequence of signed 128 bit integers from the …","Reads a sequence of signed 128 bit integers from the …","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 16 bit integer from the underlying reader.","Reads a signed 16 bit integer from the underlying reader.","Reads a signed 16 bit integer from <code>buf</code>.","Reads a sequence of signed 16 bit integers from the …","Reads a sequence of signed 16 bit integers from the …","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads a signed 24 bit integer from the underlying reader.","Reads a signed 24 bit integer from the underlying reader.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from the underlying reader.","Reads a signed 32 bit integer from the underlying reader.","Reads a signed 32 bit integer from <code>buf</code>.","Reads a sequence of signed 32 bit integers from the …","Reads a sequence of signed 32 bit integers from the …","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 48 bit integer from the underlying reader.","Reads a signed 48 bit integer from the underlying reader.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from the underlying reader.","Reads a signed 64 bit integer from the underlying reader.","Reads a signed 64 bit integer from <code>buf</code>.","Reads a sequence of signed 64 bit integers from the …","Reads a sequence of signed 64 bit integers from the …","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 8 bit integer from the underlying reader.","Reads a signed 8 bit integer from the underlying reader.","Reads a sequence of signed 8 bit integers from the …","Reads a sequence of signed 8 bit integers from the …","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","Reads an unsigned 128 bit integer from the underlying …","Reads an unsigned 128 bit integer from the underlying …","","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 128 bit integers from the …","Reads a sequence of unsigned 128 bit integers from the …","","","Reads an unsigned 16 bit integer from <code>buf</code>.","Reads an unsigned 16 bit integer from the underlying …","Reads an unsigned 16 bit integer from the underlying …","","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 16 bit integers from the …","Reads a sequence of unsigned 16 bit integers from the …","","","Reads an unsigned 24 bit integer from the underlying …","Reads an unsigned 24 bit integer from the underlying …","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","Reads an unsigned 32 bit integer from the underlying …","Reads an unsigned 32 bit integer from the underlying …","","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 32 bit integers from the …","Reads a sequence of unsigned 32 bit integers from the …","","","Reads an unsigned 48 bit integer from the underlying …","Reads an unsigned 48 bit integer from the underlying …","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","Reads an unsigned 64 bit integer from the underlying …","Reads an unsigned 64 bit integer from the underlying …","","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 64 bit integers from the …","Reads a sequence of unsigned 64 bit integers from the …","","","Reads an unsigned 8 bit integer from the underlying reader.","Reads an unsigned 8 bit integer from the underlying reader.","Reads an unsigned n-bytes integer from <code>buf</code>.","Reads an unsigned n-bytes integer from the underlying …","Reads an unsigned n-bytes integer from the underlying …","","","Reads an unsigned n-bytes integer from <code>buf</code>.","Reads an unsigned n-bytes integer from the underlying …","Reads an unsigned n-bytes integer from the underlying …","","","","","","","","","","","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes IEEE754 double-precision (8 bytes) floating point …","Writes a signed 128 bit integer to the underlying writer.","Writes a signed 128 bit integer to the underlying writer.","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 16 bit integer to the underlying writer.","Writes a signed 16 bit integer to the underlying writer.","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 24 bit integer to the underlying writer.","Writes a signed 24 bit integer to the underlying writer.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer to the underlying writer.","Writes a signed 32 bit integer to the underlying writer.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 48 bit integer to the underlying writer.","Writes a signed 48 bit integer to the underlying writer.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer to the underlying writer.","Writes a signed 64 bit integer to the underlying writer.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 8 bit integer to the underlying writer.","Writes a signed 8 bit integer to the underlying writer.","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 128 bit integer to the underlying …","Writes an unsigned 128 bit integer to the underlying …","","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 16 bit integer to the underlying writer.","Writes an unsigned 16 bit integer to the underlying writer.","","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 24 bit integer to the underlying writer.","Writes an unsigned 24 bit integer to the underlying writer.","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 32 bit integer to the underlying writer.","Writes an unsigned 32 bit integer to the underlying writer.","","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 48 bit integer to the underlying writer.","Writes an unsigned 48 bit integer to the underlying writer.","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 64 bit integer to the underlying writer.","Writes an unsigned 64 bit integer to the underlying writer.","","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 8 bit integer to the underlying writer.","Writes an unsigned 8 bit integer to the underlying writer.","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned n-bytes integer to the underlying …","Writes an unsigned n-bytes integer to the underlying …","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned n-bytes integer to the underlying …","Writes an unsigned n-bytes integer to the underlying …","",""],"i":[0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,29,1,2,29,1,2,29,29,29,29,29,1,2,29,1,2,29,1,2,29,1,2,1,2,1,2,1,2,21,21,29,21,21,29,21,21,29,21,21,29,21,21,29,21,21,29,21,21,29,21,21,29,21,21,29,21,21,29,21,21,29,21,21,29,21,21,29,21,21,29,21,21,29,21,21,29,21,21,21,21,21,21,29,21,21,29,29,21,21,1,2,29,21,21,1,2,29,21,21,1,2,29,21,21,1,2,21,21,29,29,21,21,1,2,29,21,21,1,2,21,21,29,29,21,21,1,2,29,21,21,1,2,21,21,29,21,21,1,2,29,21,21,1,2,1,2,1,2,1,2,1,2,28,28,29,29,28,28,29,29,28,28,29,29,28,28,29,29,28,28,29,28,28,29,29,28,28,29,28,28,29,29,28,28,29,28,28,29,28,28,29,29,28,28,1,2,29,1,2,29,28,28,1,2,29,1,2,28,28,29,29,28,28,1,2,29,1,2,28,28,29,29,28,28,1,2,29,1,2,28,28,29,28,28,1,2,29,28,28,1,2],"f":[0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[1,1],4],[[2,2],4],[[],1],[[],2],[[1,1],5],[[2,2],5],[[1,6],7],[[2,6],7],[-1,-1,[]],[-1,-1,[]],[[[9,[8]]],3],[[[9,[8]]],3],[[[9,[8]]],3],[[[9,[10]]],3],[[[9,[10]]],3],[[[9,[10]]],3],[[[9,[11]]],3],[[[9,[12]]],3],[[[9,[13]]],3],[[[9,[14]]],3],[[[9,[15]]],3],[[[9,[15]]],3],[[[9,[15]]],3],[[[9,[16]]],3],[[[9,[16]]],3],[[[9,[16]]],3],[[[9,[17]]],3],[[[9,[17]]],3],[[[9,[17]]],3],[[[9,[18]]],3],[[[9,[18]]],3],[[[9,[18]]],3],[[1,-1],3,19],[[2,-1],3,19],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],[[20,[4]]]],[[2,2],[[20,[4]]]],[21,[[22,[8]]]],[21,[[22,[8]]]],[[[9,[23]]],8],[[21,[9,[8]]],[[22,[3]]]],[[21,[9,[8]]],[[22,[3]]]],[[[9,[23]],[9,[8]]],3],[[21,[9,[8]]],[[22,[3]]]],[[21,[9,[8]]],[[22,[3]]]],[[[9,[23]],[9,[8]]],3],[21,[[22,[10]]]],[21,[[22,[10]]]],[[[9,[23]]],10],[[21,[9,[10]]],[[22,[3]]]],[[21,[9,[10]]],[[22,[3]]]],[[[9,[23]],[9,[10]]],3],[[21,[9,[10]]],[[22,[3]]]],[[21,[9,[10]]],[[22,[3]]]],[[[9,[23]],[9,[10]]],3],[21,[[22,[11]]]],[21,[[22,[11]]]],[[[9,[23]]],11],[[21,[9,[11]]],[[22,[3]]]],[[21,[9,[11]]],[[22,[3]]]],[[[9,[23]],[9,[11]]],3],[21,[[22,[12]]]],[21,[[22,[12]]]],[[[9,[23]]],12],[[21,[9,[12]]],[[22,[3]]]],[[21,[9,[12]]],[[22,[3]]]],[[[9,[23]],[9,[12]]],3],[21,[[22,[13]]]],[21,[[22,[13]]]],[[[9,[23]]],13],[21,[[22,[13]]]],[21,[[22,[13]]]],[[[9,[23]]],13],[[21,[9,[13]]],[[22,[3]]]],[[21,[9,[13]]],[[22,[3]]]],[[[9,[23]],[9,[13]]],3],[21,[[22,[14]]]],[21,[[22,[14]]]],[[[9,[23]]],14],[21,[[22,[14]]]],[21,[[22,[14]]]],[[[9,[23]]],14],[[21,[9,[14]]],[[22,[3]]]],[[21,[9,[14]]],[[22,[3]]]],[[[9,[23]],[9,[14]]],3],[21,[[22,[24]]]],[21,[[22,[24]]]],[[21,[9,[24]]],[[22,[3]]]],[[21,[9,[24]]],[[22,[3]]]],[[21,25],[[22,[14]]]],[[21,25],[[22,[14]]]],[[[9,[23]],25],14],[[21,25],[[22,[11]]]],[[21,25],[[22,[11]]]],[[[9,[23]],25],11],[[[9,[23]]],15],[21,[[22,[15]]]],[21,[[22,[15]]]],[[[9,[23]]],15],[[[9,[23]]],15],[[[9,[23]],[9,[15]]],3],[[21,[9,[15]]],[[22,[3]]]],[[21,[9,[15]]],[[22,[3]]]],[[[9,[23]],[9,[15]]],3],[[[9,[23]],[9,[15]]],3],[[[9,[23]]],16],[21,[[22,[16]]]],[21,[[22,[16]]]],[[[9,[23]]],16],[[[9,[23]]],16],[[[9,[23]],[9,[16]]],3],[[21,[9,[16]]],[[22,[3]]]],[[21,[9,[16]]],[[22,[3]]]],[[[9,[23]],[9,[16]]],3],[[[9,[23]],[9,[16]]],3],[21,[[22,[17]]]],[21,[[22,[17]]]],[[[9,[23]]],17],[[[9,[23]]],17],[21,[[22,[17]]]],[21,[[22,[17]]]],[[[9,[23]]],17],[[[9,[23]]],17],[[[9,[23]],[9,[17]]],3],[[21,[9,[17]]],[[22,[3]]]],[[21,[9,[17]]],[[22,[3]]]],[[[9,[23]],[9,[17]]],3],[[[9,[23]],[9,[17]]],3],[21,[[22,[18]]]],[21,[[22,[18]]]],[[[9,[23]]],18],[[[9,[23]]],18],[21,[[22,[18]]]],[21,[[22,[18]]]],[[[9,[23]]],18],[[[9,[23]]],18],[[[9,[23]],[9,[18]]],3],[[21,[9,[18]]],[[22,[3]]]],[[21,[9,[18]]],[[22,[3]]]],[[[9,[23]],[9,[18]]],3],[[[9,[23]],[9,[18]]],3],[21,[[22,[23]]]],[21,[[22,[23]]]],[[[9,[23]],25],18],[[21,25],[[22,[18]]]],[[21,25],[[22,[18]]]],[[[9,[23]],25],18],[[[9,[23]],25],18],[[[9,[23]],25],15],[[21,25],[[22,[15]]]],[[21,25],[[22,[15]]]],[[[9,[23]],25],15],[[[9,[23]],25],15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[[28,8],[[22,[3]]]],[[28,8],[[22,[3]]]],[[[9,[23]],8],3],[[[9,[8]],[9,[23]]],3],[[28,10],[[22,[3]]]],[[28,10],[[22,[3]]]],[[[9,[23]],10],3],[[[9,[10]],[9,[23]]],3],[[28,11],[[22,[3]]]],[[28,11],[[22,[3]]]],[[[9,[23]],11],3],[[[9,[11]],[9,[23]]],3],[[28,12],[[22,[3]]]],[[28,12],[[22,[3]]]],[[[9,[23]],12],3],[[[9,[12]],[9,[23]]],3],[[28,13],[[22,[3]]]],[[28,13],[[22,[3]]]],[[[9,[23]],13],3],[[28,13],[[22,[3]]]],[[28,13],[[22,[3]]]],[[[9,[23]],13],3],[[[9,[13]],[9,[23]]],3],[[28,14],[[22,[3]]]],[[28,14],[[22,[3]]]],[[[9,[23]],14],3],[[28,14],[[22,[3]]]],[[28,14],[[22,[3]]]],[[[9,[23]],14],3],[[[9,[14]],[9,[23]]],3],[[28,24],[[22,[3]]]],[[28,24],[[22,[3]]]],[[[9,[24]],[9,[23]]],3],[[28,14,25],[[22,[3]]]],[[28,14,25],[[22,[3]]]],[[[9,[23]],14,25],3],[[28,11,25],[[22,[3]]]],[[28,11,25],[[22,[3]]]],[[[9,[23]],11,25],3],[[[9,[23]],15],3],[[28,15],[[22,[3]]]],[[28,15],[[22,[3]]]],[[[9,[23]],15],3],[[[9,[23]],15],3],[[[9,[15]],[9,[23]]],3],[[[9,[15]],[9,[23]]],3],[[[9,[15]],[9,[23]]],3],[[[9,[23]],16],3],[[28,16],[[22,[3]]]],[[28,16],[[22,[3]]]],[[[9,[23]],16],3],[[[9,[23]],16],3],[[[9,[16]],[9,[23]]],3],[[[9,[16]],[9,[23]]],3],[[[9,[16]],[9,[23]]],3],[[28,17],[[22,[3]]]],[[28,17],[[22,[3]]]],[[[9,[23]],17],3],[[[9,[23]],17],3],[[28,17],[[22,[3]]]],[[28,17],[[22,[3]]]],[[[9,[23]],17],3],[[[9,[23]],17],3],[[[9,[17]],[9,[23]]],3],[[[9,[17]],[9,[23]]],3],[[[9,[17]],[9,[23]]],3],[[28,18],[[22,[3]]]],[[28,18],[[22,[3]]]],[[[9,[23]],18],3],[[[9,[23]],18],3],[[28,18],[[22,[3]]]],[[28,18],[[22,[3]]]],[[[9,[23]],18],3],[[[9,[23]],18],3],[[[9,[18]],[9,[23]]],3],[[[9,[18]],[9,[23]]],3],[[[9,[18]],[9,[23]]],3],[[28,23],[[22,[3]]]],[[28,23],[[22,[3]]]],[[[9,[23]],18,25],3],[[28,18,25],[[22,[3]]]],[[28,18,25],[[22,[3]]]],[[[9,[23]],18,25],3],[[[9,[23]],18,25],3],[[[9,[23]],15,25],3],[[28,15,25],[[22,[3]]]],[[28,15,25],[[22,[3]]]],[[[9,[23]],15,25],3],[[[9,[23]],15,25],3]],"c":[61,62,63,70,71,72],"p":[[6,"BigEndian",0],[6,"LittleEndian",0],[1,"tuple"],[6,"Ordering",268],[1,"bool"],[5,"Formatter",269],[8,"Result",269],[1,"f32"],[1,"slice"],[1,"f64"],[1,"i128"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"u128"],[1,"u16"],[1,"u32"],[1,"u64"],[10,"Hasher",270],[6,"Option",271],[10,"ReadBytesExt",0],[8,"Result",272],[1,"u8"],[1,"i8"],[1,"usize"],[6,"Result",273],[5,"TypeId",274],[10,"WriteBytesExt",0],[10,"ByteOrder",0]],"b":[]}],\
["cast",{"doc":"Ergonomic, checked cast functions for primitive types","t":"GKPPRPPNNMNNHHNNNHHHHHNHNNNHHHHHH","n":["Error","From","Infinite","NaN","Output","Overflow","Underflow","borrow","borrow_mut","cast","clone","eq","f32","f64","fmt","fmt","from","i128","i16","i32","i64","i8","into","isize","try_from","try_into","type_id","u128","u16","u32","u64","u8","usize"],"q":[[0,"cast"],[33,"core::fmt"],[34,"core::fmt"],[35,"core::any"]],"d":["Cast errors","The “cast from” operation","Infinite value casted to a type that can only represent …","NaN value casted to a type that can’t represent a NaN …","The result of the cast operation: either <code>Self</code> or …","Source value is greater than the maximum value that the …","Source value is smaller than the minimum value that the …","","","Checked cast from <code>Src</code> to <code>Self</code>","","","Checked cast function","Checked cast function","","","Returns the argument unchanged.","Checked cast function","Checked cast function","Checked cast function","Checked cast function","Checked cast function","Calls <code>U::from(self)</code>.","Checked cast function","","","","Checked cast function","Checked cast function","Checked cast function","Checked cast function","Checked cast function","Checked cast function"],"i":[0,0,1,1,7,1,1,1,1,7,1,1,0,0,1,1,1,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[1,1],2],[-1,[],[]],[-1,[],[]],[[1,3],4],[[1,3],4],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]]],"c":[],"p":[[6,"Error",0],[1,"bool"],[5,"Formatter",33],[8,"Result",33],[6,"Result",34],[5,"TypeId",35],[10,"From",0]],"b":[[14,"impl-Display-for-Error"],[15,"impl-Debug-for-Error"]]}],\
["cfg_if",{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":"Q","n":["cfg_if"],"q":[[0,"cfg_if"]],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"c":[],"p":[],"b":[]}],\
["embedded_hal",{"doc":"A Hardware Abstraction Layer (HAL) for embedded systems","t":"KRRRRGPRRRKKKRRPCCNNCMNNMCMMMMMMMNCNNMMMMMMNCCMMMMCCNNNNCKRRKMMCCCCCCKRRMMKKMMKRRRRRRRGKPIIKKKPKKKNNNMMNNNMNNNMMMMRKMRKMMCKRRRRGKKPKPKNNNMNNNCMNNNCMCMKKKPPPKGPFPKGTTPPPFPTTNNNNNNNNNNNNNNNNNNNMMNNNNNNNNNNNNNNNNMNNNNNMMNMNCMNNMNNNNNNNNNNNNNNNNNNNNNKRRMMCCCCKKKKMMMMMMMCKFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNRRRRPKKPKGKKNNNNNNNNNMMMMMMNMMNNMCNNNKEEEEEEEEEEEEEEEEEEEEEEEERRKKMMMNPPRKPPSSSSFGGNNNNNNNNNNNNNNNNNNNNNOOMMNNNNNNNNNNNNKKRKRMMMRKKKMMM","n":["Capture","Capture","Channel","Channel","Count","Direction","Downcounting","Duty","Duty","Error","Pwm","PwmPin","Qei","Time","Time","Upcounting","adc","blocking","borrow","borrow_mut","can","capture","clone","clone_into","count","digital","direction","disable","disable","disable","enable","enable","enable","eq","fmt","fmt","from","get_duty","get_duty","get_max_duty","get_max_duty","get_period","get_resolution","into","prelude","serial","set_duty","set_duty","set_period","set_resolution","spi","timer","to_owned","try_from","try_into","type_id","watchdog","Channel","Error","ID","OneShot","channel","read","can","delay","i2c","rng","serial","spi","Can","Error","Frame","receive","transmit","DelayMs","DelayUs","delay_ms","delay_us","AddressMode","Error","Error","Error","Error","Error","Error","Error","Operation","Read","Read","SevenBitAddress","TenBitAddress","Transactional","TransactionalIter","Write","Write","WriteIter","WriteIterRead","WriteRead","borrow","borrow_mut","eq","exec","exec_iter","fmt","from","into","read","try_from","try_into","type_id","write","write","write_iter_read","write_read","Error","Read","read","Error","Write","bflush","bwrite_all","write","Default","Error","Error","Error","Error","Operation","Transactional","Transfer","Transfer","Write","Write","WriteIter","borrow","borrow_mut","eq","exec","fmt","from","into","transfer","transfer","try_from","try_into","type_id","write","write","write_iter","write_iter","Default","Default","Default","Acknowledge","Bit","Crc","Error","ErrorKind","Extended","ExtendedId","Form","Frame","Id","MAX","MAX","Other","Overrun","Standard","StandardId","Stuff","ZERO","ZERO","as_raw","as_raw","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","data","dlc","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","id","into","into","into","into","is_data_frame","is_extended","is_remote_frame","is_standard","kind","kind","nb","new","new","new","new_remote","new_unchecked","new_unchecked","partial_cmp","standard_id","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Can","Error","Frame","receive","transmit","v1","v1_compat","v2","v2_compat","InputPin","OutputPin","StatefulOutputPin","ToggleableOutputPin","is_high","is_low","is_set_high","is_set_low","set_high","set_low","toggle","toggleable","Default","OldInputPin","OldOutputPin","borrow","borrow","borrow_mut","borrow_mut","from","from","from","from","into","into","is_high","is_high","is_low","is_low","is_set_high","is_set_high","is_set_low","is_set_low","new","new","set_high","set_high","set_low","set_low","try_from","try_from","try_into","try_into","type_id","type_id","Error","Error","Error","Error","High","InputPin","IoPin","Low","OutputPin","PinState","StatefulOutputPin","ToggleableOutputPin","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from","into","into_input_pin","into_output_pin","is_high","is_low","is_set_high","is_set_low","not","set_high","set_low","set_state","to_owned","toggle","toggleable","try_from","try_into","type_id","Default","_embedded_hal_Capture","_embedded_hal_Pwm","_embedded_hal_PwmPin","_embedded_hal_Qei","_embedded_hal_adc_OneShot","_embedded_hal_blocking_delay_DelayMs","_embedded_hal_blocking_delay_DelayUs","_embedded_hal_blocking_i2c_Read","_embedded_hal_blocking_i2c_Write","_embedded_hal_blocking_i2c_WriteRead","_embedded_hal_blocking_rng_Read","_embedded_hal_blocking_serial_Write","_embedded_hal_blocking_spi_Transfer","_embedded_hal_blocking_spi_Write","_embedded_hal_digital_InputPin","_embedded_hal_digital_OutputPin","_embedded_hal_digital_ToggleableOutputPin","_embedded_hal_serial_Read","_embedded_hal_serial_Write","_embedded_hal_spi_FullDuplex","_embedded_hal_timer_CountDown","_embedded_hal_watchdog_Watchdog","_embedded_hal_watchdog_WatchdogDisable","_embedded_hal_watchdog_WatchdogEnable","Error","Error","Read","Write","flush","read","write","write_str","CaptureOnFirstTransition","CaptureOnSecondTransition","Error","FullDuplex","IdleHigh","IdleLow","MODE_0","MODE_1","MODE_2","MODE_3","Mode","Phase","Polarity","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","from","from","from","into","into","into","phase","polarity","read","send","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Cancel","CountDown","Error","Periodic","Time","cancel","start","wait","Time","Watchdog","WatchdogDisable","WatchdogEnable","disable","feed","start"],"q":[[0,"embedded_hal"],[57,"embedded_hal::adc"],[63,"embedded_hal::blocking"],[69,"embedded_hal::blocking::can"],[74,"embedded_hal::blocking::delay"],[78,"embedded_hal::blocking::i2c"],[114,"embedded_hal::blocking::rng"],[117,"embedded_hal::blocking::serial"],[122,"embedded_hal::blocking::serial::write"],[123,"embedded_hal::blocking::spi"],[150,"embedded_hal::blocking::spi::transfer"],[151,"embedded_hal::blocking::spi::write"],[152,"embedded_hal::blocking::spi::write_iter"],[153,"embedded_hal::can"],[246,"embedded_hal::can::nb"],[251,"embedded_hal::digital"],[255,"embedded_hal::digital::v1"],[267,"embedded_hal::digital::v1::toggleable"],[268,"embedded_hal::digital::v1_compat"],[300,"embedded_hal::digital::v2"],[337,"embedded_hal::digital::v2::toggleable"],[338,"embedded_hal::prelude"],[362,"embedded_hal::serial"],[370,"embedded_hal::spi"],[420,"embedded_hal::timer"],[428,"embedded_hal::watchdog"],[435,"nb"],[436,"core::fmt"],[437,"core::fmt"],[438,"core::result"],[439,"core::any"],[440,"core::iter::traits::collect"],[441,"core::cmp"],[442,"core::fmt"],[443,"core::option"],[444,"alloc::string"],[445,"void"]],"d":["Input capture","The type of the value returned by <code>capture</code>","Enumeration of channels that can be used with this <code>Capture</code> …","Enumeration of channels that can be used with this <code>Pwm</code> …","The type of the value returned by <code>count</code>","Count direction","3, 2, 1","Type for the <code>duty</code> methods","Type for the <code>duty</code> methods","Enumeration of <code>Capture</code> errors","Pulse Width Modulation","A single PWM channel / pin","Quadrature encoder interface","A time unit that can be converted into a human time unit …","A time unit that can be converted into a human time unit …","1, 2, 3","Analog-digital conversion traits","Blocking API","","","Controller Area Network","“Waits” for a transition in the capture <code>channel</code> and …","","","Returns the current pulse count of the encoder","Digital I/O","Returns the count direction","Disables a capture <code>channel</code>","Disables a PWM <code>channel</code>","Disables a PWM <code>channel</code>","Enables a capture <code>channel</code>","Enables a PWM <code>channel</code>","Enables a PWM <code>channel</code>","","Implementation of <code>core::fmt::Write</code> for the HAL’s …","","Returns the argument unchanged.","Returns the current duty cycle","Returns the current duty cycle","Returns the maximum duty cycle value","Returns the maximum duty cycle value","Returns the current PWM period","Returns the current resolution","Calls <code>U::from(self)</code>.","The prelude is a collection of all the traits in this crate","Serial interface","Sets a new duty cycle","Sets a new duty cycle","Sets a new PWM period","Sets the resolution of the capture timer","Serial Peripheral Interface","Timers","","","","","Traits for interactions with a processors watchdog timer.","A marker trait to identify MCU pins that can be used as …","Error type returned by ADC methods","Channel ID type","ADCs that sample on single channels per request, and do so …","Get the specific ID that identifies this channel, for …","Request that the ADC begin a conversion on the specified …","Blocking CAN API","Delays","Blocking I2C API","Blocking hardware random number generator","Blocking serial API","Blocking SPI API","A blocking CAN interface that is able to transmit and …","Associated error type.","Associated frame type.","Blocks until a frame was received or an error occured.","Puts a frame in the transmit buffer. Blocks until space is …","Millisecond delay","Microsecond delay","Pauses execution for <code>ms</code> milliseconds","Pauses execution for <code>us</code> microseconds","Address mode (7-bit / 10-bit)","Error type","Error type","Error type","Error type","Error type","Error type","Error type","Transactional I2C operation.","Blocking read","Read data into the provided buffer","7-bit address mode type","10-bit address mode type","Transactional I2C interface.","Transactional I2C interface (iterator version).","Blocking write","Write data from the provided buffer","Blocking write (iterator version)","Blocking write (iterator version) + read","Blocking write + read","","","","Execute the provided operations on the I2C bus.","Execute the provided operations on the I2C bus (iterator …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Reads enough bytes from slave with <code>address</code> to fill <code>buffer</code>","","","","Writes bytes to slave with address <code>address</code>","Writes bytes to slave with address <code>address</code>","Writes bytes to slave with address <code>address</code> and then reads …","Writes bytes to slave with address <code>address</code> and then reads …","Error type","Blocking read","Reads enough bytes from hardware random number generator …","The type of error that can occur when writing","Write half of a serial interface (blocking variant)","Block until the serial interface has sent all buffered …","Writes a slice, blocking until everything has been written","Blocking serial write","Marker trait to opt into default blocking write …","Error type","Error type","Error type","Associated error type","Operation for transactional SPI trait","Transactional trait allows multiple actions to be executed …","Blocking transfer","Write data out while reading data into the provided buffer","Blocking write","Write data from the provided buffer, discarding read data","Blocking write (iterator version)","","","","Execute the provided transactions","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Blocking transfer","Sends <code>words</code> to the slave. Returns the <code>words</code> received from …","","","","Blocking write","Sends <code>words</code> to the slave, ignoring all the incoming words","Blocking write (iterator version)","Sends <code>words</code> to the slave, ignoring all the incoming words","Default implementation of <code>blocking::spi::Transfer&lt;W&gt;</code> for …","Default implementation of <code>blocking::spi::Write&lt;W&gt;</code> for …","Default implementation of <code>blocking::spi::WriteIter&lt;W&gt;</code> for …","An ACK  error shall be detected by a transmitter whenever …","A bit error is detected at that bit time when the bit …","Calculated CRC sequence does not equal the received one.","CAN error","CAN error kind","Extended 29-bit Identifier (<code>0..=0x1FFF_FFFF</code>).","Extended 29-bit CAN Identifier (<code>0..=1FFF_FFFF</code>).","A form error shall be detected when a fixed-form bit field …","A CAN2.0 Frame","A CAN Identifier (standard or extended).","CAN ID <code>0x7FF</code>, the lowest priority.","CAN ID <code>0x1FFFFFFF</code>, the lowest priority.","A different error occurred. The original error may contain …","The peripheral receive buffer was overrun.","Standard 11-bit Identifier (<code>0..=0x7FF</code>).","Standard 11-bit CAN Identifier (<code>0..=0x7FF</code>).","A stuff error is detected at the bit time of the sixth …","CAN ID <code>0</code>, the highest priority.","CAN ID <code>0</code>, the highest priority.","Returns this CAN Identifier as a raw 16-bit integer.","Returns this CAN Identifier as a raw 32-bit integer.","","","","","","","","","","","","","","","","","","Returns the frame data (0..8 bytes in length).","Returns the data length code (DLC) which is in the range …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the frame identifier.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if this frame is a data frame.","Returns true if this frame is a extended frame.","Returns true if this frame is a remote frame.","Returns true if this frame is a standard frame.","Convert error to a generic CAN error kind","","Non-blocking CAN API","Creates a new frame.","Tries to create a <code>StandardId</code> from a raw 16-bit integer.","Tries to create a <code>ExtendedId</code> from a raw 32-bit integer.","Creates a new remote frame (RTR bit set).","Creates a new <code>StandardId</code> without checking if it is inside …","Creates a new <code>ExtendedId</code> without checking if it is inside …","","Returns the Base ID part of this extended identifier.","","","","","","","","","","","","","","","","","","A CAN interface that is able to transmit and receive …","Associated error type.","Associated frame type.","Returns a received frame if available.","Puts a frame in the transmit buffer to be sent on the bus.","Digital I/O","v1 compatibility wrappers","Digital I/O","v2 compatibility shims","Single digital input pin","Single digital push-pull output pin","Push-pull output pin that can read its output state","Output pin that can be toggled","Is the input pin high?","Is the input pin low?","Is the pin in drive high mode?","Is the pin in drive low mode?","Drives the pin high","Drives the pin low","Toggle pin output.","If you can read <strong>and</strong> write the output state, a pin is …","Software-driven <code>toggle()</code> implementation.","Wrapper to allow fallible <code>v2::InputPin</code> traits to be …","Wrapper to allow fallible <code>v2::OutputPin</code> traits to be …","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Create a new OldOutputPin wrapper around a <code>v2::OutputPin</code>","Create an <code>OldInputPin</code> wrapper around a <code>v2::InputPin</code>.","","","","","","","","","","","Error type","Error type","Error type","Error type.","High pin state","Single digital input pin","Single pin that can switch from input to output mode, and …","Low pin state","Single digital push-pull output pin","Digital output pin state","Push-pull output pin that can read its output state","Output pin that can be toggled","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Tries to convert this pin to input mode.","Tries to convert this pin to output mode with the given …","Is the input pin high?","Is the input pin low?","Is the pin in drive high mode?","Is the pin in drive low mode?","","Drives the pin high","Drives the pin low","Drives the pin high or low depending on the provided value","","Toggle pin output.","If you can read <strong>and</strong> write the output state, a pin is …","","","","Software-driven <code>toggle()</code> implementation.","","","","","","","","","","","","","","","","","","","","","","","","","Read error","Write error","Read half of a serial interface","Write half of a serial interface","Ensures that none of the previously written words are …","Reads a single word from the serial interface","Writes a single word to the serial interface","","Data in “captured” on the first clock transition","Data in “captured” on the second clock transition","An enumeration of SPI errors","Full duplex (master mode)","Clock signal high when idle","Clock signal low when idle","Helper for CPOL = 0, CPHA = 0","Helper for CPOL = 0, CPHA = 1","Helper for CPOL = 1, CPHA = 0","Helper for CPOL = 1, CPHA = 1","SPI mode","Clock phase","Clock polarity","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Clock phase","Clock polarity","Reads the word stored in the shift register","Sends a word to the slave","","","","","","","","","","","","","Trait for cancelable countdowns.","A count down timer","Error returned when a countdown can’t be canceled.","Marker trait that indicates that a timer is periodic","The unit of time used by this timer","Tries to cancel this countdown.","Starts a new count down","Non-blockingly “waits” until the count down finishes","Unit of time used by the watchdog","Feeds an existing watchdog to ensure the processor isn’t …","Disables a running watchdog timer so the processor won’t …","Enables A watchdog timer to reset the processor if …","Disables the watchdog","Triggers the watchdog. This must be done once the watchdog …","Starts the watchdog with a given period, typically once …"],"i":[0,5,5,12,10,0,7,12,13,5,0,0,0,5,12,7,0,0,7,7,0,5,7,7,10,0,10,5,12,13,5,12,13,7,0,7,7,12,13,12,13,12,5,7,0,0,12,13,12,5,0,0,7,7,7,7,0,0,20,21,0,21,20,0,0,0,0,0,0,0,23,23,23,23,0,0,26,27,0,35,37,38,40,39,29,32,0,0,28,0,0,0,0,0,28,0,0,0,28,28,28,29,32,28,28,28,35,28,28,28,37,38,39,40,41,0,41,42,0,42,42,0,0,47,48,49,45,0,0,0,43,0,43,0,43,43,43,45,43,43,43,0,47,43,43,43,0,48,0,49,0,0,0,55,55,55,0,0,54,0,55,0,0,50,52,55,55,54,0,55,50,52,50,52,50,52,54,55,50,52,54,55,50,52,54,55,50,52,54,55,55,24,24,50,52,54,55,50,52,54,55,55,50,52,54,54,54,55,55,24,50,52,54,55,24,24,24,24,25,55,0,24,50,52,24,50,52,55,52,50,52,54,55,55,50,52,54,55,50,52,54,55,50,52,54,55,0,61,61,61,61,0,0,0,0,0,0,0,0,62,62,63,63,64,64,65,0,0,0,0,66,68,66,68,66,66,68,68,66,68,68,68,68,68,66,66,66,66,66,68,66,66,66,66,66,68,66,68,66,68,67,73,69,72,71,0,0,71,0,0,0,0,71,71,71,71,71,71,71,71,71,72,72,69,69,70,70,71,67,67,67,71,73,0,71,71,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,74,0,0,74,75,74,74,78,78,80,0,77,77,0,0,0,0,0,0,0,77,78,79,77,78,79,77,78,79,77,78,79,77,78,79,77,78,79,77,78,79,79,79,80,80,77,78,79,77,78,79,77,78,79,77,78,79,0,0,81,0,82,81,82,82,86,0,0,0,84,85,86],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[[5,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]]]],-2],[[6,[-4,-1]]],[],[],[],[]],[7,7],[[-1,-2],8,[],[]],[[[10,[],[[9,[-1]]]]],-1,[]],0,[[[10,[],[[9,[-1]]]]],7,[]],[[[5,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]]]],-2],8,[],[],[],[]],[[[12,[],[[2,[-1]],[3,[-2]],[11,[-3]]]],-1],8,[],[],[]],[[[13,[],[[11,[-1]]]]],8,[]],[[[5,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]]]],-2],8,[],[],[],[]],[[[12,[],[[2,[-1]],[3,[-2]],[11,[-3]]]],-1],8,[],[],[]],[[[13,[],[[11,[-1]]]]],8,[]],[[7,7],14],0,[[7,15],16],[-1,-1,[]],[[[12,[],[[2,[-1]],[3,[-2]],[11,[-3]]]],-1],-3,[],[],[]],[[[13,[],[[11,[-1]]]]],-1,[]],[[[12,[],[[2,[-1]],[3,[-2]],[11,[-3]]]]],-3,[],[],[]],[[[13,[],[[11,[-1]]]]],-1,[]],[[[12,[],[[2,[-1]],[3,[-2]],[11,[-3]]]]],-2,[],[],[]],[[[5,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]]]]],-3,[],[],[],[]],[-1,-2,[],[]],0,0,[[[12,[],[[2,[-1]],[3,[-2]],[11,[-3]]]],-1,-3],8,[],[],[]],[[[13,[],[[11,[-1]]]],-1],8,[]],[[[12,[],[[2,[-1]],[3,[-2]],[11,[-3]]]],-4],8,[],[],[],[[17,[-2]]]],[[[5,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]]]],-5],8,[],[],[],[],[[17,[-3]]]],0,0,[-1,-2,[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,19,[]],0,0,0,0,0,[[],-1,[]],[[[20,[],[[1,[-1]]]],-3],[[6,[-4,-1]]],[],[],[[21,[-2]]],[]],0,0,0,0,0,0,0,0,0,[[[23,[],[[22,[-1]],[1,[-2]]]]],[[18,[-1,-2]]],24,25],[[[23,[],[[22,[-1]],[1,[-2]]]],-1],[[18,[8,-2]]],24,25],0,0,[[26,-1],8,[]],[[27,-1],8,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[28,28],14],[[[29,[],[[1,[-1]]]],-2,[30,[28]]],[[18,[8,-1]]],[],31],[[[32,[],[[1,[-1]]]],-2,-3],[[18,[8,-1]]],[],31,[[34,[],[[33,[28]]]]]],[[28,15],16],[-1,-1,[]],[-1,-2,[],[]],[[[35,[],[[1,[-1]]]],-2,[30,[36]]],[[18,[8,-1]]],[],31],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,19,[]],[[[37,[],[[1,[-1]]]],-2,[30,[36]]],[[18,[8,-1]]],[],31],[[[38,[],[[1,[-1]]]],-2,-3],[[18,[8,-1]]],[],31,[[34,[],[[33,[36]]]]]],[[[39,[],[[1,[-1]]]],-2,-3,[30,[36]]],[[18,[8,-1]]],[],31,[[34,[],[[33,[36]]]]]],[[[40,[],[[1,[-1]]]],-2,[30,[36]],[30,[36]]],[[18,[8,-1]]],[],31],0,0,[[[41,[],[[1,[-1]]]],[30,[36]]],[[18,[8,-1]]],[]],0,0,[[[42,[],[[1,[-1]]]]],[[18,[8,-1]]],[]],[[[42,[],[[1,[-1]]]],[30,[-2]]],[[18,[8,-1]]],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[43,[-1]],[43,[-1]]],14,44],[[[45,[],[[1,[-1]]]],[30,[[43,[-2]]]]],[[18,[8,-1]]],[],[]],[[[43,[-1]],15],16,46],[-1,-1,[]],[-1,-2,[],[]],0,[[[47,[],[[1,[-1]]]],[30,[-2]]],[[18,[[30,[-2]],-1]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,19,[]],0,[[[48,[],[[1,[-1]]]],[30,[-2]]],[[18,[8,-1]]],[],[]],0,[[[49,[],[[1,[-1]]]],-3],[[18,[8,-1]]],[],[],[[34,[],[[33,[-2]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[50,51],[52,53],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[50,50],[52,52],[54,54],[55,55],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[55,55],56],[24,[[30,[36]]]],[24,57],[[50,50],14],[[52,52],14],[[54,54],14],[[55,55],14],[[50,15],16],[[52,15],16],[[54,15],16],[[55,15],16],[[55,15],16],[-1,-1,[]],[-1,-1,[]],[50,54],[52,54],[-1,-1,[]],[-1,-1,[]],[[55,-1],8,58],[24,54],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[24,14],[24,14],[24,14],[24,14],[25,55],[55,55],0,[[-1,[30,[36]]],[[59,[24]]],[[17,[54]]]],[51,[[59,[50]]]],[53,[[59,[52]]]],[[-1,57],[[59,[24]]],[[17,[54]]]],[51,50],[53,52],[[55,55],[[59,[56]]]],[52,50],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,60,[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],0,0,0,[[[61,[],[[22,[-1]],[1,[-2]]]]],[[6,[-1,-2]]],24,25],[[[61,[],[[22,[-1]],[1,[-2]]]],-1],[[6,[[59,[-1]],-2]]],24,25],0,0,0,0,0,0,0,0,[62,14],[62,14],[63,14],[63,14],[64,8],[64,8],[65,8],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-2,[[66,[-2]]],46,[[67,[],[[1,[-1]]]]]],[-2,[[68,[-2]]],46,[[69,[],[[1,[-1]]]]]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[68,[-2]]],14,46,[[69,[],[[1,[-1]]]]]],[-1,[[18,[14]]],[]],[-1,[[18,[14]]],[]],[[[68,[-2]]],14,46,[[69,[],[[1,[-1]]]]]],[[[66,[-2]]],14,46,[[70,[],[[1,[-1]]]]]],[-1,[[18,[14]]],[]],[[[66,[-2]]],14,46,[[70,[],[[1,[-1]]]]]],[-1,[[18,[14]]],[]],[-2,[[66,[-2]]],46,[[67,[],[[1,[-1]]]]]],[-2,[[68,[-2]]],46,[[69,[],[[1,[-1]]]]]],[-1,[[18,[8]]],[]],[[[66,[-2]]],8,46,[[67,[],[[1,[-1]]]]]],[-1,[[18,[8]]],[]],[[[66,[-2]]],8,46,[[67,[],[[1,[-1]]]]]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[71,71],[[-1,-2],8,[],[]],[[71,71],14],[[71,15],16],[-1,-1,[]],[14,71],[-1,-2,[],[]],[[[72,[],[[1,[-1]]]]],[[18,[-2,-1]]],[],[],[]],[[[72,[],[[1,[-1]]]],71],[[18,[-3,-1]]],[],[],[]],[[[69,[],[[1,[-1]]]]],[[18,[14,-1]]],[]],[[[69,[],[[1,[-1]]]]],[[18,[14,-1]]],[]],[70,[[18,[14,-1]]],[]],[70,[[18,[14,-1]]],[]],[71,-1,[]],[[[67,[],[[1,[-1]]]]],[[18,[8,-1]]],[]],[[[67,[],[[1,[-1]]]]],[[18,[8,-1]]],[]],[[[67,[],[[1,[-1]]]],71],[[18,[8,-1]]],[]],[-1,-2,[],[]],[[[73,[],[[1,[-1]]]]],[[18,[8,-1]]],[]],0,[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,19,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[74,[],[[1,[-1]]]]],[[6,[8,-1]]],[]],[[[75,[],[[1,[-1]]]]],[[6,[-2,-1]]],[],[]],[[[74,[],[[1,[-1]]]],-2],[[6,[8,-1]]],[],[]],[[74,76],16],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[77,77],[78,78],[79,79],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[77,77],14],[[78,78],14],[[79,79],14],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[80,[],[[1,[-1]]]]],[[6,[-2,-1]]],[],[]],[[[80,[],[[1,[-1]]]],-2],[[6,[8,-1]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],0,0,0,0,0,[[[81,[],[[1,[-1]]]]],[[18,[8,-1]]],[]],[[[82,[],[[3,[-1]]]],-2],8,[],[[17,[-1]]]],[[[82,[],[[3,[-1]]]]],[[6,[8,83]]],[]],0,0,0,0,[84,8],[85,8],[[[86,[],[[3,[-1]]]],-2],8,[],[[17,[-1]]]]],"c":[251,255,256,257,258,259,260,261,262,263,264,265,266,267],"p":[[17,"Error"],[17,"Channel"],[17,"Time"],[17,"Capture"],[10,"Capture",0],[8,"Result",435],[6,"Direction",0],[1,"tuple"],[17,"Count"],[10,"Qei",0],[17,"Duty"],[10,"Pwm",0],[10,"PwmPin",0],[1,"bool"],[5,"Formatter",436],[8,"Result",436],[10,"Into",437],[6,"Result",438],[5,"TypeId",439],[10,"OneShot",57],[10,"Channel",57],[17,"Frame"],[10,"Can",69],[10,"Frame",153],[10,"Error",153],[10,"DelayMs",74],[10,"DelayUs",74],[6,"Operation",78],[10,"Transactional",78],[1,"slice"],[10,"AddressMode",78],[10,"TransactionalIter",78],[17,"Item"],[10,"IntoIterator",440],[10,"Read",78],[1,"u8"],[10,"Write",78],[10,"WriteIter",78],[10,"WriteIterRead",78],[10,"WriteRead",78],[10,"Read",114],[10,"Write",117],[6,"Operation",123],[10,"PartialEq",441],[10,"Transactional",123],[10,"Debug",436],[10,"Transfer",123],[10,"Write",123],[10,"WriteIter",123],[5,"StandardId",153],[1,"u16"],[5,"ExtendedId",153],[1,"u32"],[6,"Id",153],[6,"ErrorKind",153],[6,"Ordering",441],[1,"usize"],[10,"Hasher",442],[6,"Option",443],[5,"String",444],[10,"Can",246],[10,"InputPin",255],[10,"StatefulOutputPin",255],[10,"OutputPin",255],[10,"ToggleableOutputPin",255],[5,"OldOutputPin",268],[10,"OutputPin",300],[5,"OldInputPin",268],[10,"InputPin",300],[10,"StatefulOutputPin",300],[6,"PinState",300],[10,"IoPin",300],[10,"ToggleableOutputPin",300],[10,"Write",362],[10,"Read",362],[1,"str"],[6,"Polarity",370],[6,"Phase",370],[5,"Mode",370],[10,"FullDuplex",370],[10,"Cancel",420],[10,"CountDown",420],[6,"Void",445],[10,"WatchdogDisable",428],[10,"Watchdog",428],[10,"WatchdogEnable",428]],"b":[[200,"impl-Display-for-ErrorKind"],[201,"impl-Debug-for-ErrorKind"],[204,"impl-From%3CStandardId%3E-for-Id"],[205,"impl-From%3CExtendedId%3E-for-Id"]]}],\
["find_crate",{"doc":"Find the crate name from the current <code>Cargo.toml</code>.","t":"PPPGPGPPFPPFPPNNNNNNNNNNNNNNNNONNNNHNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNO","n":["All","Build","Default","Dependencies","Dev","Error","InvalidManifest","Io","Manifest","NotFound","NotFoundManifestDir","Package","Release","Toml","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","crate_package","default","dependencies","eq","eq","find","find2","find_crate","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_toml","into","into","into","into","is_original","name","new","original_name","source","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","version"],"q":[[0,"find_crate"],[74,"core::result"],[75,"core::option"],[76,"core::ops::function"],[77,"core::fmt"],[78,"core::fmt"],[79,"std::io::error"],[80,"toml::value"],[81,"core::error"],[82,"alloc::string"],[83,"core::any"]],"d":["Search from <code>dependencies</code>, <code>dev-dependencies</code> and …","Search from <code>build-dependencies</code>.","Search from <code>dependencies</code> and <code>dev-dependencies</code>.","The kind of dependencies to be searched.","Search from <code>dev-dependencies</code>.","An error that occurred when getting manifest.","The manifest is invalid for the following reason.","An error occurred while to open or to read the manifest …","The manifest of cargo.","The crate with the specified name not found. This error …","The <code>CARGO_MANIFEST_DIR</code> environment variable not found.","The package data. This has information on the current …","Search from <code>dependencies</code>.","An error occurred while to parse the manifest file.","","","","","","","","","","","","","","","The package for the crate that this manifest represents.","","The kind of dependencies to be searched.","","","Find the crate.","Find the crate.","Find the crate name from the current <code>Cargo.toml</code>.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new <code>Manifest</code> from a toml table.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the value of the <code>name</code> field is the …","The current name of the package. This is always a valid …","Creates a new <code>Manifest</code> from the current <code>Cargo.toml</code>.","Returns the original package name.","","","","","","","","","","","","","","","","","","The version requirement of the package. Returns <code>*</code> if no …"],"i":[1,1,1,0,1,0,5,5,0,5,5,0,1,5,5,1,2,3,5,1,2,3,1,2,3,1,2,3,3,1,3,1,2,3,3,0,5,5,1,2,3,5,5,5,1,2,3,3,5,1,2,3,2,2,3,2,5,1,2,3,5,5,1,2,3,5,1,2,3,5,1,2,3,2],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[3,[[6,[2,5]]]],[[],1],0,[[1,1],7],[[2,2],7],[[3,-1],[[8,[2]]],[[11,[9],[[10,[7]]]]]],[[3,-1],[[8,[2]]],[[11,[9,9],[[10,[7]]]]]],[-1,[[6,[2,5]]],[[11,[9],[[10,[7]]]]]],[[5,12],13],[[5,12],13],[[1,12],13],[[2,12],13],[[3,12],13],[14,5],[15,5],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[16,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,7],0,[[],[[6,[3,5]]]],[2,9],[5,[[8,[17]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,18,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],0],"c":[],"p":[[6,"Dependencies",0],[5,"Package",0],[5,"Manifest",0],[1,"tuple"],[6,"Error",0],[6,"Result",74],[1,"bool"],[6,"Option",75],[1,"str"],[17,"Output"],[10,"FnMut",76],[5,"Formatter",77],[8,"Result",77],[5,"Error",78],[5,"Error",79],[8,"Table",80],[10,"Error",81],[5,"String",82],[5,"TypeId",83]],"b":[[36,"impl-Display-for-Error"],[37,"impl-Debug-for-Error"],[41,"impl-From%3CError%3E-for-Error"],[42,"impl-From%3CError%3E-for-Error"]]}],\
["funty",{"doc":"<code>fun</code>damental <code>ty</code>pes","t":"KKKKKKKKKKTRTTTTTTTTTTTTKKTKKKKKKTTTTTTTTTTTTTTTTKTTTRTKKTMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM","n":["AtLeast128","AtLeast16","AtLeast32","AtLeast64","AtLeast8","AtMost128","AtMost16","AtMost32","AtMost64","AtMost8","BITS","Bytes","DIGITS","E","EPSILON","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Floating","Fundamental","INFINITY","Integral","Is128","Is16","Is32","Is64","Is8","LN_10","LN_2","LOG10_E","LOG2_E","MANTISSA_DIGITS","MAX","MAX","MAX_10_EXP","MAX_EXP","MIN","MIN","MIN_10_EXP","MIN_EXP","MIN_POSITIVE","NAN","NEG_INFINITY","Numeric","ONE","PI","RADIX","Raw","SQRT_2","Signed","Unsigned","ZERO","abs","as_bool","as_char","as_f32","as_f64","as_i128","as_i16","as_i32","as_i64","as_i8","as_isize","as_u128","as_u16","as_u32","as_u64","as_u8","as_usize","checked_abs","checked_add","checked_div","checked_div_euclid","checked_mul","checked_neg","checked_next_power_of_two","checked_pow","checked_rem","checked_rem_euclid","checked_shl","checked_shr","checked_sub","classify","count_ones","count_zeros","div_euclid","from_be","from_be_bytes","from_bits","from_le","from_le_bytes","from_ne_bytes","from_str_radix","is_finite","is_infinite","is_nan","is_negative","is_normal","is_positive","is_power_of_two","is_sign_negative","is_sign_positive","leading_ones","leading_zeros","max","max_value","min","min_value","next_power_of_two","overflowing_abs","overflowing_add","overflowing_div","overflowing_div_euclid","overflowing_mul","overflowing_neg","overflowing_pow","overflowing_rem","overflowing_rem_euclid","overflowing_shl","overflowing_shr","overflowing_sub","pow","recip","rem_euclid","reverse_bits","rotate_left","rotate_right","saturating_add","saturating_mul","saturating_pow","saturating_sub","signum","swap_bytes","to_be","to_be_bytes","to_bits","to_degrees","to_le","to_le_bytes","to_ne_bytes","to_radians","trailing_ones","trailing_zeros","wrapping_abs","wrapping_add","wrapping_div","wrapping_div_euclid","wrapping_mul","wrapping_neg","wrapping_pow","wrapping_rem","wrapping_rem_euclid","wrapping_shl","wrapping_shr","wrapping_sub"],"q":[[0,"funty"],[161,"core::option"],[162,"core::num"],[163,"core::num::error"],[164,"core::result"]],"d":["Declare that a type is one hundred twenty-eight or more …","Declare that a type is sixteen or more bits wide.","Declare that a type is thirty-two or more bits wide.","Declare that a type is sixty-four or more bits wide.","Declare that a type is eight or more bits wide.","Declare that a type is one hundred twenty-eight or fewer …","Declare that a type is sixteen or fewer bits wide.","Declare that a type is thirty-two or fewer bits wide.","Declare that a type is sixty-four or fewer bits wide.","Declare that a type is eight or fewer bits wide.","The size of this type in bits.","The <code>[u8; N]</code> byte array that stores values of <code>Self</code>.","Approximate number of significant digits in base 10.","Euler’s number (e)","Machine epsilon value for <code>f32</code>.","1/π","1/sqrt(2)","2/π","2/sqrt(π)","π/2","π/3","π/4","π/6","π/8","Declare that a type is a floating-point number.","Declare that a type is one of the language fundamental …","Infinity (∞).","Declare that a type is a fixed-point integer.","Declare that a type is exactly one hundred twenty-eight …","Declare that a type is exactly sixteen bits wide.","Declare that a type is exactly thirty-two bits wide.","Declare that a type is exactly sixty-four bits wide.","Declare that a type is exactly eight bits wide.","ln(10)","ln(2)","log10(e)","log2(e)","Number of significant digits in base 2.","The type’s maximum value.","Largest finite <code>f32</code> value.","Maximum possible power of 10 exponent.","Maximum possible power of 2 exponent.","The type’s minimum value. This is zero for unsigned …","Smallest finite <code>f32</code> value.","Minimum possible normal power of 10 exponent.","One greater than the minimum possible normal power of 2 …","Smallest positive normal <code>f32</code> value.","Not a Number (NaN).","Negative infinity (−∞).","Declare that a type is an abstract number.","The type’s step value.","Archimedes’ constant (π)","The radix or base of the internal representation of <code>f32</code>.","The unsigned integer type of the same width as <code>Self</code>.","sqrt(2)","Declare that a type is a signed integer.","Declare that a type is an unsigned integer.","The type’s zero value.","Overflow behavior","Tests <code>self != 0</code>.","Represents <code>self</code> as a Unicode Scalar Value, if possible.","Performs <code>self as f32</code>.","Performs <code>self as f64</code>.","Performs <code>self as i128</code>.","Performs <code>self as i16</code>.","Performs <code>self as i32</code>.","Performs <code>self as i64</code>.","Performs <code>self as i8</code>.","Performs <code>self as isize</code>.","Performs <code>self as u128</code>.","Performs <code>self as u16</code>.","Performs <code>self as u32</code>.","Performs <code>self as u64</code>.","Performs <code>self as u8</code>.","Performs <code>self as usize</code>.","Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer division. Computes <code>self / rhs</code>, returning …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked integer multiplication. Computes <code>self * rhs</code>, …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …","Returns the smallest power of two greater than or equal to …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked integer subtraction. Computes <code>self - rhs</code>, …","Returns the floating point category of the number. If only …","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Calculates the quotient of Euclidean division of self by …","Converts an integer from big endian to the target’s …","Create a numeric value from its representation as a byte …","Raw transmutation from <code>u32</code>.","Converts an integer frm little endian to the target’s …","Create a numeric value from its representation as a byte …","Create a numeric value from its memory representation as a …","Converts a string slice in a given base to an integer.","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this value is <code>NaN</code>.","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if <code>self</code> has a negative sign, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> has a positive sign, including <code>+0.0</code>, …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Returns the maximum of the two numbers.","Returns the largest value that can be represented by this …","Returns the minimum of the two numbers.","Returns the smallest value that can be represented by this …","Returns the smallest power of two greater than or equal to …","Computes the absolute value of <code>self</code>.","Calculates <code>self + rhs</code>","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.","Calculates the quotient of Euclidean division …","Calculates the multiplication of <code>self</code> and <code>rhs</code>.","Negates self, overflowing if this is equal to the minimum …","Raises self to the power of <code>exp</code>, using exponentiation by …","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.","Overflowing Euclidean remainder. Calculates …","Shifts self left by <code>rhs</code> bits.","Shifts self right by <code>rhs</code> bits.","Calculates <code>self - rhs</code>","Raises self to the power of <code>exp</code>, using exponentiation by …","Takes the reciprocal (inverse) of a number, <code>1/x</code>.","Calculates the least nonnegative remainder of …","Reverses the bit pattern of the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Returns a number representing sign of <code>self</code>.","Reverses the byte order of the integer.","Converts <code>self</code> to big endian from the target’s endianness.","Return the memory representation of this number as a byte …","Raw transmutation to <code>u32</code>.","Converts radians to degrees.","Converts <code>self</code> to little endian from the target’s …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Converts degrees to radians.","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Wrapping (modular) absolute value. Computes <code>self.abs()</code>, …","Wrapping (modular) addition. Computes <code>self + rhs</code>, wrapping …","Wrapping (modular) division. Computes <code>self / rhs</code>, wrapping …","Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>, …","Wrapping (modular) remainder. Computes <code>self % rhs</code>, …","Wrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …"],"i":[0,0,0,0,0,0,0,0,0,0,20,26,23,23,23,23,23,23,23,23,23,23,23,23,0,0,23,0,0,0,0,0,0,23,23,23,23,23,20,23,23,23,20,23,23,23,23,23,23,0,20,23,23,23,23,0,0,20,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,20,20,20,20,20,21,20,20,20,20,20,20,23,20,20,20,20,26,23,20,26,26,20,23,23,23,1,23,1,21,23,23,20,20,23,20,23,20,21,1,20,20,20,20,20,20,20,20,20,20,20,20,23,20,20,20,20,20,20,20,20,1,20,20,26,23,23,20,26,26,23,20,20,1,20,20,20,20,20,20,20,20,20,20,20],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[2,3],[2,[[5,[4]]]],[2,6],[2,7],[2,8],[2,9],[2,10],[2,11],[2,12],[2,13],[2,14],[2,15],[2,16],[2,17],[2,18],[2,19],[1,[[5,[1]]]],[[20,20],[[5,[20]]]],[[20,20],[[5,[20]]]],[[20,20],[[5,[20]]]],[[20,20],[[5,[20]]]],[20,[[5,[20]]]],[21,[[5,[21]]]],[[20,16],[[5,[20]]]],[[20,20],[[5,[20]]]],[[20,20],[[5,[20]]]],[[20,16],[[5,[20]]]],[[20,16],[[5,[20]]]],[[20,20],[[5,[20]]]],[[[23,[],[[22,[-1]]]]],24,21],[20,16],[20,16],[[20,20],20],[20,20],[-1,[[26,[],[[25,[-1]]]]],[]],[-1,[[23,[],[[22,[-1]]]]],21],[20,20],[-1,[[26,[],[[25,[-1]]]]],[]],[-1,[[26,[],[[25,[-1]]]]],[]],[[27,16],[[29,[20,28]]]],[[[23,[],[[22,[-1]]]]],3,21],[[[23,[],[[22,[-1]]]]],3,21],[[[23,[],[[22,[-1]]]]],3,21],[1,3],[[[23,[],[[22,[-1]]]]],3,21],[1,3],[21,3],[[[23,[],[[22,[-1]]]]],3,21],[[[23,[],[[22,[-1]]]]],3,21],[20,16],[20,16],[[[23,[],[[22,[-1]]]],[23,[],[[22,[-1]]]]],[[23,[],[[22,[-1]]]]],21],[[],20],[[[23,[],[[22,[-1]]]],[23,[],[[22,[-1]]]]],[[23,[],[[22,[-1]]]]],21],[[],20],[21,21],[1,[[30,[1,3]]]],[[20,20],[[30,[20,3]]]],[[20,20],[[30,[20,3]]]],[[20,20],[[30,[20,3]]]],[[20,20],[[30,[20,3]]]],[20,[[30,[20,3]]]],[[20,16],[[30,[20,3]]]],[[20,20],[[30,[20,3]]]],[[20,20],[[30,[20,3]]]],[[20,16],[[30,[20,3]]]],[[20,16],[[30,[20,3]]]],[[20,20],[[30,[20,3]]]],[[20,16],20],[[[23,[],[[22,[-1]]]]],[[23,[],[[22,[-1]]]]],21],[[20,20],20],[20,20],[[20,16],20],[[20,16],20],[[20,20],20],[[20,20],20],[[20,16],20],[[20,20],20],[1,1],[20,20],[20,20],[[[26,[],[[25,[-1]]]]],-1,[]],[[[23,[],[[22,[-1]]]]],-1,21],[[[23,[],[[22,[-1]]]]],[[23,[],[[22,[-1]]]]],21],[20,20],[[[26,[],[[25,[-1]]]]],-1,[]],[[[26,[],[[25,[-1]]]]],-1,[]],[[[23,[],[[22,[-1]]]]],[[23,[],[[22,[-1]]]]],21],[20,16],[20,16],[1,1],[[20,20],20],[[20,20],20],[[20,20],20],[[20,20],20],[20,20],[[20,16],20],[[20,20],20],[[20,20],20],[[20,16],20],[[20,16],20],[[20,20],20]],"c":[],"p":[[10,"Signed",0],[10,"Fundamental",0],[1,"bool"],[1,"char"],[6,"Option",161],[1,"f32"],[1,"f64"],[1,"i128"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"i8"],[1,"isize"],[1,"u128"],[1,"u16"],[1,"u32"],[1,"u64"],[1,"u8"],[1,"usize"],[10,"Integral",0],[10,"Unsigned",0],[17,"Raw"],[10,"Floating",0],[6,"FpCategory",162],[17,"Bytes"],[10,"Numeric",0],[1,"str"],[5,"ParseIntError",163],[6,"Result",164],[1,"tuple"]],"b":[]}],\
["gpio_cdev",{"doc":"The <code>gpio-cdev</code> crate provides access to the GPIO character …","t":"TTTFPFFGTPPTTPGTFGFPFFFPFPFFFFTTTTTPTPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFGPPPPPNNNNNNNNNNNNNNNNNNNNOO","n":["ACTIVE_LOW","ACTIVE_LOW","BOTH_EDGES","Chip","ChipInfo","ChipIterator","EventRequestFlags","EventType","FALLING_EDGE","FallingEdge","GetLine","INPUT","IS_OUT","In","IoctlKind","KERNEL","Line","LineDirection","LineEvent","LineEvent","LineEventHandle","LineFlags","LineHandle","LineHandle","LineInfo","LineInfo","LineIterator","LineRequestFlags","Lines","MultiLineHandle","OPEN_DRAIN","OPEN_DRAIN","OPEN_SOURCE","OPEN_SOURCE","OUTPUT","Out","RISING_EDGE","RisingEdge","SetLine","all","all","all","as_raw_fd","as_raw_fd","as_raw_fd","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chip","chip","chips","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","complement","complement","complement","consumer","contains","contains","contains","difference","difference","difference","direction","empty","empty","empty","eq","eq","eq","eq","eq","eq","errors","event_type","events","extend","extend","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_iter","get_all_lines","get_event","get_line","get_lines","get_value","get_value","get_values","hash","hash","hash","index","info","insert","insert","insert","intersection","intersection","intersection","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_active_low","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_empty","is_kernel","is_open_drain","is_open_source","is_used","label","len","line","line","line","lines","lines","name","name","new","next","next","next","not","not","not","num_lines","num_lines","offset","partial_cmp","partial_cmp","partial_cmp","path","remove","remove","remove","request","request","set","set","set","set_value","set_values","sub","sub","sub","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","timestamp","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","Error","ErrorKind","Event","InvalidRequest","Io","Ioctl","Offset","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","fmt","from","from","from","into","into","source","to_string","try_from","try_from","try_into","try_into","type_id","type_id","cause","kind"],"q":[[0,"gpio_cdev"],[362,"gpio_cdev::errors"],[389,"gpio_cdev::errors::ErrorKind"],[391,"std::os::fd::raw"],[392,"core::result"],[393,"core::cmp"],[394,"core::option"],[395,"core::iter::traits::collect"],[396,"core::fmt"],[397,"core::fmt"],[398,"core::hash"],[399,"std::path"],[400,"core::convert"],[401,"alloc::string"],[402,"core::any"],[403,"std::io::error"],[404,"core::error"]],"d":["","","","A GPIO Chip maps to the actual device driver instance in …","","Iterator over chips","Event request flags","Did the Line rise (go active) or fall (go inactive)?","","","","","","","","","Access to a specific GPIO Line","In or Out","Information about a change to the state of a Line","","Handle for retrieving events from the kernel for a line","Informational Flags","Handle for interacting with a “requested” line","","Information about a specific GPIO Line","","Iterator over GPIO Lines for a given chip.","Line Request Flags","A collection of lines that can be accesses simultaneously","Handle for interacting with a “requested” line","","","","","","","","","","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Gets the raw file descriptor for the LineHandle.","Gets the raw file descriptor for the LineHandle.","Gets the raw file descriptor for the LineEventHandle.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a handle to this chip’s parent","Get a handle to the parent chip for the lines","Iterate over all GPIO chips currently present on this …","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","The name of this GPIO line, such as the output pin of the …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Get the direction of this GPIO if configured","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","This module is deprecated and types are exported from the …","Was this a rising or a falling edge?","Get an event handle that can be used as a blocking …","","","","Get the flags with which this handle was created","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","Get a handle to all the GPIO lines on the chip","Retrieve the next event from the kernel for this line","Get a handle to the GPIO line at a given offset","Get a handle to multiple GPIO line at a given offsets","Request the current state of this Line from the kernel","Request the current state of this Line from the kernel","Request the current state of this Line from the kernel","","","","","Get info about the line from the kernel.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","True if this line is marked as active low in the kernel","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Get the number of lines in the collection","True if this line is being used by something else in the …","True if this line is marked as open drain in the kernel","True if this line is marked as open source in the kernel","True if the any flags for the device are set (input or …","A functional name for this GPIO chip, such as a product …","Get the number of lines in the collection","Get a handle to the line that this info represents","Get the Line information associated with this handle.","Get the Line information associated with this handle.","Get an interator over all lines that can be potentially …","Get the Line information associated with this handle.","The name of the device driving this GPIO chip in the kernel","Name assigned to this chip if assigned","Open the GPIO Chip at the provided path (e.g. …","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","The number of lines/pins indexable through this chip","Get the number of lines associated with this handle","Offset of this line within its parent chip","","","","Get the fs path of this character device (e.g. …","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Request access to interact with this line from the kernel","Request access to interact with these lines from the kernel","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Request that the line be driven to the specified value","Request that the line be driven to the specified value","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Best estimate of event occurrence time, in nanoseconds","","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[1,3,2,0,16,0,0,0,2,19,16,1,3,18,0,3,0,0,0,16,0,0,0,16,0,16,0,0,0,0,1,3,1,3,1,18,2,19,16,1,2,3,4,6,7,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,24,16,11,13,29,10,17,1,2,3,18,4,12,6,19,7,24,16,11,13,29,10,17,1,2,3,18,4,12,6,19,7,10,12,0,16,10,17,1,2,3,18,19,16,10,17,1,2,3,18,19,1,2,3,1,2,3,17,1,2,3,1,2,3,17,1,2,3,16,1,2,3,18,19,0,24,10,1,2,3,4,24,16,16,11,13,29,10,17,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,18,4,12,6,19,7,24,16,11,13,29,10,17,1,2,3,18,4,12,6,19,7,1,2,3,1,2,3,1,2,3,1,2,3,11,7,11,11,4,7,6,1,2,3,12,10,1,2,3,1,2,3,1,2,3,24,16,11,13,29,10,17,1,2,3,18,4,12,6,19,7,13,29,7,17,1,2,3,1,2,3,12,17,17,17,17,11,12,17,4,7,11,6,11,17,11,13,29,7,1,2,3,11,6,10,1,2,3,11,1,2,3,10,12,1,2,3,4,6,1,2,3,1,2,3,1,2,3,24,16,10,17,1,2,3,18,19,16,1,2,3,24,16,11,13,29,10,17,1,2,3,18,4,12,6,19,7,24,16,11,13,29,10,17,1,2,3,18,4,12,6,19,7,24,16,11,13,29,10,17,1,2,3,18,4,12,6,19,7,1,2,3,0,0,40,40,40,40,40,14,40,14,40,14,14,40,14,14,40,14,40,14,14,14,40,14,40,14,40,43,43],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],2],[[],3],[4,5],[6,5],[7,5],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],8],[[2,2],8],[[3,3],8],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],8],[[2,2],8],[[3,3],8],[1,9],[2,9],[3,9],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],8],[[2,2],8],[[3,3],8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[10,11],[12,11],[[],[[15,[13,14]]]],[16,16],[10,10],[17,17],[1,1],[2,2],[3,3],[18,18],[19,19],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[1,1],20],[[2,2],20],[[3,3],20],[1,1],[2,2],[3,3],[17,[[22,[21]]]],[[1,1],23],[[2,2],23],[[3,3],23],[[1,1],1],[[2,2],2],[[3,3],3],[17,18],[[],1],[[],2],[[],3],[[16,16],23],[[1,1],23],[[2,2],23],[[3,3],23],[[18,18],23],[[19,19],23],0,[24,19],[[10,1,2,21],[[15,[7,14]]]],[[1,-1],8,[[26,[],[[25,[1]]]]]],[[2,-1],8,[[26,[],[[25,[2]]]]]],[[3,-1],8,[[26,[],[[25,[3]]]]]],[4,1],[[24,27],28],[[16,27],28],[[16,27],28],[[11,27],28],[[13,27],28],[[29,27],28],[[10,27],28],[[17,27],28],[[1,27],28],[[1,27],28],[[1,27],28],[[1,27],28],[[1,27],28],[[2,27],28],[[2,27],28],[[2,27],28],[[2,27],28],[[2,27],28],[[3,27],28],[[3,27],28],[[3,27],28],[[3,27],28],[[3,27],28],[[18,27],28],[[4,27],28],[[12,27],28],[[6,27],28],[[19,27],28],[[7,27],28],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[9,[[22,[1]]]],[9,[[22,[2]]]],[9,[[22,[3]]]],[9,1],[9,2],[9,3],[9,1],[9,2],[9,3],[-1,1,[[26,[],[[25,[1]]]]]],[-1,2,[[26,[],[[25,[2]]]]]],[-1,3,[[26,[],[[25,[3]]]]]],[11,[[15,[12,14]]]],[7,[[15,[24,14]]]],[[11,9],[[15,[10,14]]]],[[11,[30,[9]]],[[15,[12,14]]]],[4,[[15,[31,14]]]],[7,[[15,[31,14]]]],[6,[[15,[[32,[31]],14]]]],[[1,-1],8,33],[[2,-1],8,33],[[3,-1],8,33],[[12,34],10],[10,[[15,[17,14]]]],[[1,1],8],[[2,2],8],[[3,3],8],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],23],[[2,2],23],[[3,3],23],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[17,23],[1,23],[2,23],[3,23],[1,23],[2,23],[3,23],[12,23],[17,23],[17,23],[17,23],[17,23],[11,21],[12,34],[17,10],[4,10],[7,10],[11,29],[6,12],[11,21],[17,[[22,[21]]]],[-1,[[15,[11,14]]],[[36,[35]]]],[13,[[22,[[15,[11,14]]]]]],[29,[[22,[10]]]],[7,[[22,[[15,[24,14]]]]]],[1,1],[2,2],[3,3],[11,9],[6,34],[10,9],[[1,1],[[22,[20]]]],[[2,2],[[22,[20]]]],[[3,3],[[22,[20]]]],[11,35],[[1,1],8],[[2,2],8],[[3,3],8],[[10,1,31,21],[[15,[4,14]]]],[[12,1,[30,[31]],21],[[15,[6,14]]]],[[1,1,23],8],[[2,2,23],8],[[3,3,23],8],[[4,31],[[15,[8,14]]]],[[6,[30,[31]]],[[15,[8,14]]]],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],8],[[2,2],8],[[3,3],8],[[1,1],1],[[2,2],2],[[3,3],3],[24,37],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,38,[]],[[1,1],8],[[2,2],8],[[3,3],8],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[[1,1],1],[[2,2],2],[[3,3],3],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[14,27],28],[[14,27],28],[[40,27],28],[41,14],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,[[22,[42]]]],[-1,38,[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,39,[]],[-1,39,[]],0,0],"c":[],"p":[[5,"LineRequestFlags",0],[5,"EventRequestFlags",0],[5,"LineFlags",0],[5,"LineHandle",0],[8,"RawFd",391],[5,"MultiLineHandle",0],[5,"LineEventHandle",0],[1,"tuple"],[1,"u32"],[5,"Line",0],[5,"Chip",0],[5,"Lines",0],[5,"ChipIterator",0],[5,"Error",362],[6,"Result",392],[6,"IoctlKind",0],[5,"LineInfo",0],[6,"LineDirection",0],[6,"EventType",0],[6,"Ordering",393],[1,"str"],[6,"Option",394],[1,"bool"],[5,"LineEvent",0],[17,"Item"],[10,"IntoIterator",395],[5,"Formatter",396],[8,"Result",396],[5,"LineIterator",0],[1,"slice"],[1,"u8"],[5,"Vec",397],[10,"Hasher",398],[1,"usize"],[5,"Path",399],[10,"AsRef",400],[1,"u64"],[5,"String",401],[5,"TypeId",402],[6,"ErrorKind",362],[5,"Error",403],[10,"Error",404],[15,"Ioctl",389]],"b":[[148,"impl-Debug-for-IoctlKind"],[149,"impl-Display-for-IoctlKind"],[155,"impl-Debug-for-LineRequestFlags"],[156,"impl-LowerHex-for-LineRequestFlags"],[157,"impl-Binary-for-LineRequestFlags"],[158,"impl-UpperHex-for-LineRequestFlags"],[159,"impl-Octal-for-LineRequestFlags"],[160,"impl-Binary-for-EventRequestFlags"],[161,"impl-Debug-for-EventRequestFlags"],[162,"impl-Octal-for-EventRequestFlags"],[163,"impl-LowerHex-for-EventRequestFlags"],[164,"impl-UpperHex-for-EventRequestFlags"],[165,"impl-Binary-for-LineFlags"],[166,"impl-UpperHex-for-LineFlags"],[167,"impl-Debug-for-LineFlags"],[168,"impl-LowerHex-for-LineFlags"],[169,"impl-Octal-for-LineFlags"],[373,"impl-Debug-for-Error"],[374,"impl-Display-for-Error"]]}],\
["i2cdev",{"doc":"i2cdev","t":"CCCRRKKKRMMMNMNNMNMNNMMNMMMEFTTTPFFGITPTTTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPFIFFPNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNN","n":["core","linux","mock","Error","Error","I2CDevice","I2CMessage","I2CTransfer","Message","read","read","smbus_process_block","smbus_process_word","smbus_read_block_data","smbus_read_byte","smbus_read_byte_data","smbus_read_i2c_block_data","smbus_read_word_data","smbus_write_block_data","smbus_write_byte","smbus_write_byte_data","smbus_write_i2c_block_data","smbus_write_quick","smbus_write_word_data","transfer","write","write","I2CMessage","I2CMessageFlags","IGNORE_ACK","IGNORE_NACK","INVERT_COMMAND","Io","LinuxI2CBus","LinuxI2CDevice","LinuxI2CError","LinuxI2CMessage","NO_START","Nix","READ","STOP","TEN_BIT_ADDRESS","USE_RECEIVE_LENGTH","all","as_raw_fd","as_raw_fd","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone_into","cmp","complement","contains","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_new","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","into","into","into","is_all","is_empty","new","new","not","partial_cmp","read","read","remove","set","set_slave_address","set_smbus_pec","smbus_process_block","smbus_process_word","smbus_read_block_data","smbus_read_byte","smbus_read_byte_data","smbus_read_i2c_block_data","smbus_read_word_data","smbus_write_block_data","smbus_write_byte","smbus_write_byte_data","smbus_write_i2c_block_data","smbus_write_quick","smbus_write_word_data","sub","sub_assign","symmetric_difference","to_owned","to_string","toggle","transfer","transfer","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","write","write","Err","I2CRegisterMap","I2CResult","MockI2CDevice","MockI2CMessage","Ok","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","default","from","from","from","into","into","into","new","new","read","read","regmap","smbus_process_block","smbus_read_block_data","smbus_read_i2c_block_data","smbus_write_block_data","smbus_write_i2c_block_data","smbus_write_quick","transfer","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write","write_regs"],"q":[[0,"i2cdev"],[3,"i2cdev::core"],[27,"i2cdev::linux"],[145,"i2cdev::mock"],[189,"core::result"],[190,"core::error"],[191,"alloc::vec"],[192,"std::os::fd::raw"],[193,"core::option"],[194,"core::cmp"],[195,"core::iter::traits::collect"],[196,"core::fmt"],[197,"core::fmt"],[198,"core::convert"],[199,"nix"],[200,"std::io::error"],[201,"core::hash"],[202,"alloc::string"],[203,"core::any"]],"d":["Core I2C abstractions","Linux I2C device support","Mock I2C device","Error type","I2C transfer error type","Interface to an I2C Slave Device from an I2C Master","Read/Write I2C message","Interface to an I2C Bus from an I2C Master","I2C transfer message type","Read data from the device to fill the provided slice","Read data from device","Select a register, send 1 to 31 bytes of data to it, and …","Select a register, send 16 bits of data to it, and read 16 …","Read a block of up to 32 bytes from a device","Read a single byte from a device, without specifying a …","Read a single byte from a device, from a designated …","Read a block of up to 32 bytes from a device","Read 2 bytes from a given register on a device (lsb first)","Write a block of up to 32 bytes to a device","Write a single byte to a device, without specifying a …","Write a single byte to a specific register on a device","Write a block of up to 32 bytes from a device","This sends a single bit to the device, at the place of the …","Write 2 bytes to a given register on a device (lsb first)","Performs multiple serially chained I2C read/write …","Write the provided buffer to the device","Write data to device","","Various flags used by the i2c_rdwr ioctl on Linux. For …","Force message to ignore acknowledgement","Force this message to ignore I2C negative acknowlegements","If you need to invert a ‘read’ command bit to a ‘…","Input/output error","Linux I2C bus","Concrete linux I2C device","Linux I2C errors","Linux I2C message","Avoid sending an I2C start condition on this message","OS error","Read data, from slave to master","Force an I2C stop condition on this message","Use ten bit addressing on this message","Allow the client to specify how many bytes it will send","Returns the set containing all flags.","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","Create a new I2CDevice for the specified path, without …","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Create a new I2CDevice for the specified path","Create a new LinuxI2CBus for the specified path","Returns the complement of this set of flags.","","Read data from the device to fill the provided slice","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Set the slave address for this device","Enable/Disable PEC support for this device","Select a register, send 1 to 31 bytes of data to it, and …","Select a register, send 16 bits of data to it, and read 16 …","Read a block of up to 32 bytes from a device","Read a single byte from a device, without specifying a …","Read a single byte from a device, from a designated …","Read a block of up to 32 bytes from a device via …","Read 2 bytes form a given register on a device","Write a block of up to 32 bytes to a device","Write a single byte to a sdevice, without specifying a …","Write a single byte to a specific register on a device","Write a block of up to 32 bytes from a device via …","This sends a single bit to the device, at the place of the …","Write 2 bytes to a given register on a device","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","Issue the provided sequence of I2C transactions","Issue the provided sequence of I2C transactions","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Write the provided buffer to the device","","Contains the error value","Mock I2C device register map","I2C mock result type","Mock I2C device exposing a register map","Mock I2C message","Contains the success value","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create new mock I2C register map","Create a new mock I2C device","","","I2C register map","","","","","","","Issue the provided sequence of I2C transactions","","","","","","","","","","Write data to device","","Set several registers starting at the given offset"],"i":[0,0,0,2,13,0,0,0,13,2,8,2,2,2,2,2,2,2,2,2,2,2,2,2,13,2,8,0,0,15,15,15,19,0,0,0,0,15,19,15,15,15,15,15,16,18,15,15,15,15,15,15,15,16,18,19,15,16,18,19,15,19,15,15,15,15,15,15,15,15,15,19,19,15,15,15,15,15,16,16,18,19,19,19,15,15,15,15,15,15,15,15,15,16,18,19,15,15,15,16,18,15,15,16,31,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,15,15,15,19,15,16,18,16,18,19,15,16,18,19,15,16,18,19,15,15,16,31,37,0,0,0,0,37,34,36,35,34,36,35,34,35,34,36,35,34,36,35,34,35,36,35,35,35,35,35,35,35,35,35,34,36,35,34,36,35,34,36,35,36,35,34],"f":[0,0,0,0,0,0,0,0,0,[[[2,[],[[1,[-1]]]],[4,[3]]],[[6,[5,-1]]],7],[[[4,[3]]],8],[[[2,[],[[1,[-1]]]],3,[4,[3]]],[[6,[[9,[3]],-1]]],7],[[[2,[],[[1,[-1]]]],3,10],[[6,[10,-1]]],7],[[[2,[],[[1,[-1]]]],3],[[6,[[9,[3]],-1]]],7],[[[2,[],[[1,[-1]]]]],[[6,[3,-1]]],7],[[[2,[],[[1,[-1]]]],3],[[6,[3,-1]]],7],[[[2,[],[[1,[-1]]]],3,3],[[6,[[9,[3]],-1]]],7],[[[2,[],[[1,[-1]]]],3],[[6,[10,-1]]],7],[[[2,[],[[1,[-1]]]],3,[4,[3]]],[[6,[5,-1]]],7],[[[2,[],[[1,[-1]]]],3],[[6,[5,-1]]],7],[[[2,[],[[1,[-1]]]],3,3],[[6,[5,-1]]],7],[[[2,[],[[1,[-1]]]],3,[4,[3]]],[[6,[5,-1]]],7],[[[2,[],[[1,[-1]]]],11],[[6,[5,-1]]],7],[[[2,[],[[1,[-1]]]],3,10],[[6,[5,-1]]],7],[[[13,[],[[1,[-1]],[12,[-2]]]],[4,[-2]]],[[6,[14,-1]]],7,8],[[[2,[],[[1,[-1]]]],[4,[3]]],[[6,[5,-1]]],7],[[[4,[3]]],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],15],[16,17],[18,17],[[15,15],15],[[15,15],5],[[15,15],15],[[15,15],5],[15,10],[[15,15],15],[[15,15],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[19,[[20,[7]]]],[15,15],[[-1,-2],5,[],[]],[[15,15],21],[15,15],[[15,15],11],[[15,15],15],[[],15],[[15,15],11],[[15,-1],5,[[23,[],[[22,[15]]]]]],[[19,24],25],[[19,24],25],[[15,24],25],[[15,24],25],[[15,24],25],[[15,24],25],[[15,24],25],[[-1,10],[[6,[16,19]]],[[27,[26]]]],[-1,-1,[]],[-1,-1,[]],[28,19],[-1,-1,[]],[29,19],[-1,-1,[]],[10,[[20,[15]]]],[10,15],[10,15],[-1,15,[[23,[],[[22,[15]]]]]],[[15,-1],5,30],[[15,15],5],[[15,15],15],[[15,15],11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[15,11],[15,11],[[-1,10],[[6,[16,19]]],[[27,[26]]]],[-1,[[6,[18,19]]],[[27,[26]]]],[15,15],[[15,15],[[20,[21]]]],[[16,[4,[3]]],[[6,[5,19]]]],[[[4,[3]]],31],[[15,15],5],[[15,15,11],5],[[16,10],[[6,[5,19]]]],[[16,11],[[6,[5,19]]]],[[16,3,[4,[3]]],[[6,[[9,[3]],19]]]],[[16,3,10],[[6,[10,19]]]],[[16,3],[[6,[[9,[3]],19]]]],[16,[[6,[3,19]]]],[[16,3],[[6,[3,19]]]],[[16,3,3],[[6,[[9,[3]],19]]]],[[16,3],[[6,[10,19]]]],[[16,3,[4,[3]]],[[6,[5,19]]]],[[16,3],[[6,[5,19]]]],[[16,3,3],[[6,[5,19]]]],[[16,3,[4,[3]]],[[6,[5,19]]]],[[16,11],[[6,[5,19]]]],[[16,3,10],[[6,[5,19]]]],[[15,15],15],[[15,15],5],[[15,15],15],[-1,-2,[],[]],[-1,32,[]],[[15,15],5],[[16,[4,[-1]]],[[6,[14,19]]],[]],[[18,[4,[-1]]],[[6,[14,19]]],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[15,15],15],[[16,[4,[3]]],[[6,[5,19]]]],[[[4,[3]]],31],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],34],[[],35],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],34],[[],35],[[[4,[3]]],36],[[35,[4,[3]]],[[37,[5]]]],0,[[35,3,[4,[3]]],[[37,[[9,[3]]]]]],[[35,3],[[37,[[9,[3]]]]]],[[35,3,3],[[37,[[9,[3]]]]]],[[35,3,[4,[3]]],[[37,[5]]]],[[35,3,[4,[3]]],[[37,[5]]]],[[35,11],[[37,[5]]]],[[35,[4,[-1]]],[[6,[14,-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[4,[3]]],36],[[35,[4,[3]]],[[37,[5]]]],[[34,38,[4,[3]]],5]],"c":[],"p":[[17,"Error"],[10,"I2CDevice",3],[1,"u8"],[1,"slice"],[1,"tuple"],[6,"Result",189],[10,"Error",190],[10,"I2CMessage",3],[5,"Vec",191],[1,"u16"],[1,"bool"],[17,"Message"],[10,"I2CTransfer",3],[1,"u32"],[5,"I2CMessageFlags",27],[5,"LinuxI2CDevice",27],[8,"RawFd",192],[5,"LinuxI2CBus",27],[6,"LinuxI2CError",27],[6,"Option",193],[6,"Ordering",194],[17,"Item"],[10,"IntoIterator",195],[5,"Formatter",196],[8,"Result",196],[5,"Path",197],[10,"AsRef",198],[8,"Error",199],[5,"Error",200],[10,"Hasher",201],[8,"LinuxI2CMessage",27],[5,"String",202],[5,"TypeId",203],[5,"I2CRegisterMap",145],[5,"MockI2CDevice",145],[5,"MockI2CMessage",145],[8,"I2CResult",145],[1,"usize"]],"b":[[71,"impl-Display-for-LinuxI2CError"],[72,"impl-Debug-for-LinuxI2CError"],[73,"impl-LowerHex-for-I2CMessageFlags"],[74,"impl-Binary-for-I2CMessageFlags"],[75,"impl-Octal-for-I2CMessageFlags"],[76,"impl-UpperHex-for-I2CMessageFlags"],[77,"impl-Debug-for-I2CMessageFlags"],[81,"impl-From%3CErrno%3E-for-LinuxI2CError"],[83,"impl-From%3CError%3E-for-LinuxI2CError"]]}],\
["icm20689",{"doc":"","t":"GFPGGFFRPPPPPPPPPKFPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNMNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNN","n":["AccelRange","Builder","Comm","Error","GyroRange","I2cInterface","ICM20689","InterfaceError","Pin","Range_1000dps","Range_16g","Range_2000dps","Range_250dps","Range_2g","Range_4g","Range_500dps","Range_8g","SensorInterface","SpiInterface","UnknownChipId","Unresponsive","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_identity","clone","clone","clone_into","clone_into","default","default","fmt","fmt","fmt","from","from","from","from","from","from","from","get_raw_accel","get_raw_gyro","get_scaled_accel","get_scaled_gyro","into","into","into","into","into","into","into","new","new","new_i2c","new_spi","read_vec3_i16","read_vec3_i16","read_vec3_i16","register_read","register_read","register_read","register_write","register_write","register_write","release","set_accel_range","set_gyro_range","setup","soft_reset","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","using_spi","using_spi","using_spi"],"q":[[0,"icm20689"],[107,"core::result"],[108,"embedded_hal::blocking::delay"],[109,"core::fmt"],[110,"core::fmt"],[111,"embedded_hal::blocking::i2c"],[112,"embedded_hal::blocking::spi"],[113,"core::any"]],"d":["The accelerometer has a user-programmable accelerometer …","","Sensor communication error","Errors in this crate","The gyroscope has a programmable full-scale range of …","","","Interface associated error type","Pin setting error","±1000","±16g","±2000","±250","±2g","±4g","±500","±8g","A method of communicating with the sensor","This combines the SPI peripheral and associated control …","Unrecognized chip ID","Sensor not responding","","","","","","","","","","","","","","","Read the sensor identifier and return true if they match a …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create a new driver using I2C interface","Create a new driver using SPI interface","read a vector of three i16 from the given register address","","","Read a single byte from a register address","","","Write a single byte to a register address","","","Release owned resources","Set the full scale range of the accelerometer","Set the full scale range of the gyroscope","give the sensor interface a chance to set up","Perform a soft reset on the sensor","","","","","","","","","","","","","","","","","","","","","","","","some features are enabled for SPI only","",""],"i":[0,0,5,0,0,0,0,6,5,9,10,9,9,10,10,9,10,0,0,5,5,18,23,27,1,5,9,10,18,23,27,1,5,9,10,1,9,10,9,10,9,10,5,9,10,18,23,27,1,5,9,10,1,1,1,1,18,23,27,1,5,9,10,18,23,27,27,6,18,23,6,18,23,6,18,23,23,1,1,1,1,9,10,18,23,27,1,5,9,10,18,23,27,1,5,9,10,18,23,27,1,5,9,10,6,18,23],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-3]],-4],[[3,[2]]],[],[],[[6,[],[[4,[[5,[-1,-2]]]]]]],[[8,[7]]]],[9,9],[10,10],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[],9],[[],10],[[[5,[-1,-2]],12],13,14,14],[[9,12],13],[[10,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[1,[-3]]],[[3,[[16,[15]]]]],[],[],[[6,[],[[4,[[5,[-1,-2]]]]]]]],[[[1,[-3]]],[[3,[[16,[15]]]]],[],[],[[6,[],[[4,[[5,[-1,-2]]]]]]]],[[[1,[-3]]],[[3,[[16,[17]]]]],[],[],[[6,[],[[4,[[5,[-1,-2]]]]]]]],[[[1,[-3]]],[[3,[[16,[17]]]]],[],[],[[6,[],[[4,[[5,[-1,-2]]]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-2,7],[[18,[-2]]],[],[[20,[],[[19,[-1]]]],[21,[],[[19,[-1]]]],[22,[],[[19,[-1]]]]]],[[-2,-4],[[23,[-2,-4]]],[],[[24,[7],[[19,[-1]]]],[25,[7],[[19,[-1]]]]],[],[[26,[],[[19,[-3]]]]]],[[27,-2,7],[[1,[[18,[-2]]]]],14,[[21,[],[[19,[-1]]]],[20,[],[[19,[-1]]]],[22,[],[[19,[-1]]]]]],[[-2,-4],[[1,[[23,[-2,-4]]]]],14,[[25,[7],[[19,[-1]]]],[24,[7],[[19,[-1]]]]],14,[[26,[],[[19,[-3]]]]]],[[[6,[],[[4,[-1]]]],7],[[3,[[16,[15]],-1]]],[]],[[[18,[-2]],7],[[3,[[16,[15]],-3]]],[],[[20,[],[[19,[-1]]]],[21,[],[[19,[-1]]]],[22,[],[[19,[-1]]]]],[]],[[[23,[-2,-4]],7],[[3,[[16,[15]],-5]]],[],[[24,[7],[[19,[-1]]]],[25,[7],[[19,[-1]]]]],[],[[26,[],[[19,[-3]]]]],[]],[[[6,[],[[4,[-1]]]],7],[[3,[7,-1]]],[]],[[[18,[-2]],7],[[3,[7,-3]]],[],[[20,[],[[19,[-1]]]],[21,[],[[19,[-1]]]],[22,[],[[19,[-1]]]]],[]],[[[23,[-2,-4]],7],[[3,[7,-5]]],[],[[24,[7],[[19,[-1]]]],[25,[7],[[19,[-1]]]]],[],[[26,[],[[19,[-3]]]]],[]],[[[6,[],[[4,[-1]]]],7,7],[[3,[11,-1]]],[]],[[[18,[-2]],7,7],[[3,[11,-3]]],[],[[20,[],[[19,[-1]]]],[21,[],[[19,[-1]]]],[22,[],[[19,[-1]]]]],[]],[[[23,[-2,-4]],7,7],[[3,[11,-5]]],[],[[24,[7],[[19,[-1]]]],[25,[7],[[19,[-1]]]]],[],[[26,[],[[19,[-3]]]]],[]],[[[23,[-2,-4]]],[[11,[-2,-4]]],[],[[24,[7],[[19,[-1]]]],[25,[7],[[19,[-1]]]]],[],[[26,[],[[19,[-3]]]]]],[[[1,[-3]],10],[[3,[11]]],[],[],[[6,[],[[4,[[5,[-1,-2]]]]]]]],[[[1,[-3]],9],[[3,[11]]],[],[],[[6,[],[[4,[[5,[-1,-2]]]]]]]],[[[1,[-3]],-4],[[3,[11]]],[],[],[[6,[],[[4,[[5,[-1,-2]]]]]]],[[8,[7]]]],[[[1,[-3]],-4],[[3,[11]]],[],[],[[6,[],[[4,[[5,[-1,-2]]]]]]],[[8,[7]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[[[6,[],[[4,[-1]]]]],2,[]],[[[18,[-2]]],2,[],[[20,[],[[19,[-1]]]],[21,[],[[19,[-1]]]],[22,[],[[19,[-1]]]]]],[[[23,[-2,-4]]],2,[],[[24,[7],[[19,[-1]]]],[25,[7],[[19,[-1]]]]],[],[[26,[],[[19,[-3]]]]]]],"c":[],"p":[[5,"ICM20689",0],[1,"bool"],[6,"Result",107],[17,"InterfaceError"],[6,"Error",0],[10,"SensorInterface",0],[1,"u8"],[10,"DelayMs",108],[6,"GyroRange",0],[6,"AccelRange",0],[1,"tuple"],[5,"Formatter",109],[8,"Result",109],[10,"Debug",109],[1,"i16"],[1,"array"],[1,"f32"],[5,"I2cInterface",0],[17,"Error"],[10,"Read",110],[10,"Write",110],[10,"WriteRead",110],[5,"SpiInterface",0],[10,"Write",111],[10,"Transfer",111],[10,"OutputPin",112],[5,"Builder",0],[5,"TypeId",113]],"b":[]}],\
["ioctl_rs",{"doc":"","t":"SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSHHHHHHH","n":["FIOASYNC","FIOCLEX","FIOGETOWN","FIONBIO","FIONCLEX","FIONREAD","FIOSETOWN","SIOCADDMULTI","SIOCADDRT","SIOCDARP","SIOCDELMULTI","SIOCDELRT","SIOCDRARP","SIOCGARP","SIOCGIFADDR","SIOCGIFBRDADDR","SIOCGIFCONF","SIOCGIFDSTADDR","SIOCGIFENCAP","SIOCGIFFLAGS","SIOCGIFHWADDR","SIOCGIFMAP","SIOCGIFMEM","SIOCGIFMETRIC","SIOCGIFMTU","SIOCGIFNAME","SIOCGIFNETMASK","SIOCGIFSLAVE","SIOCGPGRP","SIOCGRARP","SIOCGSTAMP","SIOCSARP","SIOCSIFADDR","SIOCSIFBRDADDR","SIOCSIFDSTADDR","SIOCSIFENCAP","SIOCSIFFLAGS","SIOCSIFHWADDR","SIOCSIFLINK","SIOCSIFMAP","SIOCSIFMEM","SIOCSIFMETRIC","SIOCSIFMTU","SIOCSIFNETMASK","SIOCSIFSLAVE","SIOCSPGRP","SIOCSRARP","TCFLSH","TCGETA","TCGETS","TCSBRK","TCSBRKP","TCSETA","TCSETAF","TCSETAW","TCSETS","TCSETSF","TCSETSW","TCXONC","TIOCCONS","TIOCEXCL","TIOCGETD","TIOCGLCKTRMIOS","TIOCGPGRP","TIOCGSERIAL","TIOCGSOFTCAR","TIOCGWINSZ","TIOCINQ","TIOCLINUX","TIOCMBIC","TIOCMBIS","TIOCMGET","TIOCMSET","TIOCM_CAR","TIOCM_CD","TIOCM_CTS","TIOCM_DSR","TIOCM_DTR","TIOCM_LE","TIOCM_RI","TIOCM_RNG","TIOCM_RTS","TIOCM_SR","TIOCM_ST","TIOCNOTTY","TIOCNXCL","TIOCOUTQ","TIOCPKT","TIOCSCTTY","TIOCSERCONFIG","TIOCSERGETLSR","TIOCSERGETMULTI","TIOCSERGSTRUCT","TIOCSERGWILD","TIOCSERSETMULTI","TIOCSERSWILD","TIOCSETD","TIOCSLCKTRMIOS","TIOCSPGRP","TIOCSSERIAL","TIOCSSOFTCAR","TIOCSTI","TIOCSWINSZ","ioctl","tiocexcl","tiocmbic","tiocmbis","tiocmget","tiocmset","tiocnxcl"],"q":[[0,"ioctl_rs"],[110,"std::os::fd::raw"],[111,"std::io::error"],[112,"libc::unix"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Put the terminal in exclusive mode.","Clear the indicated modem bits.","Set the indicated modem bits.","Get the status of modem bits.","Set the status of modem bits.","Disable exclusive mode."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[3,[2]]]],[[1,4],[[3,[2]]]],[[1,4],[[3,[2]]]],[1,[[3,[4]]]],[[1,4],[[3,[2]]]],[1,[[3,[2]]]]],"c":[],"p":[[8,"RawFd",110],[1,"tuple"],[8,"Result",111],[8,"c_int",112]],"b":[]}],\
["lazy_static",{"doc":"A macro for declaring lazily evaluated statics.","t":"KHQ","n":["LazyStatic","initialize","lazy_static"],"q":[[0,"lazy_static"]],"d":["Support trait for enabling a few common operation on lazy …","Takes a shared reference to a lazy static and initializes …",""],"i":[0,0,0],"f":[0,[-1,1,2],0],"c":[],"p":[[1,"tuple"],[10,"LazyStatic",0]],"b":[]}],\
["libc",{"doc":"libc - Raw FFI bindings to platforms’ system libraries","t":"","n":["ABDAY_1","ABDAY_2","ABDAY_3","ABDAY_4","ABDAY_5","ABDAY_6","ABDAY_7","ABMON_1","ABMON_10","ABMON_11","ABMON_12","ABMON_2","ABMON_3","ABMON_4","ABMON_5","ABMON_6","ABMON_7","ABMON_8","ABMON_9","ABS_CNT","ABS_MAX","ACCOUNTING","ADDR_COMPAT_LAYOUT","ADDR_LIMIT_32BIT","ADDR_LIMIT_3GB","ADDR_NO_RANDOMIZE","ADFS_SUPER_MAGIC","ADJ_ESTERROR","ADJ_FREQUENCY","ADJ_MAXERROR","ADJ_MICRO","ADJ_NANO","ADJ_OFFSET","ADJ_OFFSET_SINGLESHOT","ADJ_OFFSET_SS_READ","ADJ_SETOFFSET","ADJ_STATUS","ADJ_TAI","ADJ_TICK","ADJ_TIMECONST","AFFS_SUPER_MAGIC","AFS_SUPER_MAGIC","AF_ALG","AF_APPLETALK","AF_ASH","AF_ATMPVC","AF_ATMSVC","AF_AX25","AF_BLUETOOTH","AF_BRIDGE","AF_CAIF","AF_CAN","AF_DECnet","AF_ECONET","AF_IB","AF_IEEE802154","AF_INET","AF_INET6","AF_IPX","AF_IRDA","AF_ISDN","AF_IUCV","AF_KEY","AF_LLC","AF_LOCAL","AF_MPLS","AF_NETBEUI","AF_NETLINK","AF_NETROM","AF_NFC","AF_PACKET","AF_PHONET","AF_PPPOX","AF_RDS","AF_ROSE","AF_ROUTE","AF_RXRPC","AF_SECURITY","AF_SNA","AF_TIPC","AF_UNIX","AF_UNSPEC","AF_VSOCK","AF_WANPIPE","AF_X25","AF_XDP","AIO_ALLDONE","AIO_CANCELED","AIO_NOTCANCELED","AI_ADDRCONFIG","AI_ALL","AI_CANONNAME","AI_NUMERICHOST","AI_NUMERICSERV","AI_PASSIVE","AI_V4MAPPED","ALG_OP_DECRYPT","ALG_OP_ENCRYPT","ALG_SET_AEAD_ASSOCLEN","ALG_SET_AEAD_AUTHSIZE","ALG_SET_DRBG_ENTROPY","ALG_SET_IV","ALG_SET_KEY","ALG_SET_KEY_BY_KEY_SERIAL","ALG_SET_OP","ALT_DIGITS","AM_STR","ARPD_FLUSH","ARPD_LOOKUP","ARPD_UPDATE","ARPHRD_ADAPT","ARPHRD_APPLETLK","ARPHRD_ARCNET","ARPHRD_ASH","ARPHRD_ATM","ARPHRD_AX25","ARPHRD_BIF","ARPHRD_CAN","ARPHRD_CHAOS","ARPHRD_CISCO","ARPHRD_CSLIP","ARPHRD_CSLIP6","ARPHRD_DDCMP","ARPHRD_DLCI","ARPHRD_ECONET","ARPHRD_EETHER","ARPHRD_ETHER","ARPHRD_EUI64","ARPHRD_FCAL","ARPHRD_FCFABRIC","ARPHRD_FCPL","ARPHRD_FCPP","ARPHRD_FDDI","ARPHRD_FRAD","ARPHRD_HDLC","ARPHRD_HIPPI","ARPHRD_HWX25","ARPHRD_IEEE1394","ARPHRD_IEEE802","ARPHRD_IEEE80211","ARPHRD_IEEE80211_PRISM","ARPHRD_IEEE80211_RADIOTAP","ARPHRD_IEEE802154","ARPHRD_IEEE802_TR","ARPHRD_INFINIBAND","ARPHRD_IPDDP","ARPHRD_IPGRE","ARPHRD_IRDA","ARPHRD_LAPB","ARPHRD_LOCALTLK","ARPHRD_LOOPBACK","ARPHRD_METRICOM","ARPHRD_NETROM","ARPHRD_NONE","ARPHRD_PIMREG","ARPHRD_PPP","ARPHRD_PRONET","ARPHRD_RAWHDLC","ARPHRD_ROSE","ARPHRD_RSRVD","ARPHRD_SIT","ARPHRD_SKIP","ARPHRD_SLIP","ARPHRD_SLIP6","ARPHRD_TUNNEL","ARPHRD_TUNNEL6","ARPHRD_VOID","ARPHRD_X25","ARPOP_InREPLY","ARPOP_InREQUEST","ARPOP_NAK","ARPOP_REPLY","ARPOP_REQUEST","ARPOP_RREPLY","ARPOP_RREQUEST","ATF_COM","ATF_DONTPUB","ATF_MAGIC","ATF_NETMASK","ATF_PERM","ATF_PUBL","ATF_USETRAILERS","AT_BASE","AT_BASE_PLATFORM","AT_CLKTCK","AT_EACCESS","AT_EGID","AT_EMPTY_PATH","AT_ENTRY","AT_EUID","AT_EXECFD","AT_EXECFN","AT_FDCWD","AT_FLAGS","AT_GID","AT_HWCAP","AT_HWCAP2","AT_IGNORE","AT_NOTELF","AT_NO_AUTOMOUNT","AT_NULL","AT_PAGESZ","AT_PHDR","AT_PHENT","AT_PHNUM","AT_PLATFORM","AT_RANDOM","AT_RECURSIVE","AT_REMOVEDIR","AT_SECURE","AT_STATX_DONT_SYNC","AT_STATX_FORCE_SYNC","AT_STATX_SYNC_AS_STAT","AT_STATX_SYNC_TYPE","AT_SYMLINK_FOLLOW","AT_SYMLINK_NOFOLLOW","AT_SYSINFO_EHDR","AT_UID","AUTOFS_SUPER_MAGIC","B0","B1000000","B110","B115200","B1152000","B1200","B134","B150","B1500000","B1800","B19200","B200","B2000000","B230400","B2400","B2500000","B300","B3000000","B3500000","B38400","B4000000","B460800","B4800","B50","B500000","B57600","B576000","B600","B75","B921600","B9600","BINDERFS_SUPER_MAGIC","BLKIOMIN","BLKIOOPT","BLKPBSZGET","BLKSSZGET","BOOT_TIME","BOTHER","BPF_ABS","BPF_ADD","BPF_ALU","BPF_AND","BPF_B","BPF_DIV","BPF_FS_MAGIC","BPF_H","BPF_IMM","BPF_IND","BPF_JA","BPF_JEQ","BPF_JGE","BPF_JGT","BPF_JMP","BPF_JSET","BPF_JUMP","BPF_K","BPF_LD","BPF_LDX","BPF_LEN","BPF_LL_OFF","BPF_LSH","BPF_MAXINSNS","BPF_MEM","BPF_MEMWORDS","BPF_MISC","BPF_MISCOP","BPF_MOD","BPF_MSH","BPF_MUL","BPF_NEG","BPF_NET_OFF","BPF_OR","BPF_RET","BPF_RSH","BPF_RVAL","BPF_ST","BPF_STMT","BPF_STX","BPF_SUB","BPF_W","BPF_X","BPF_XOR","BRKINT","BS0","BS1","BSDLY","BTRFS_SUPER_MAGIC","BUFSIZ","BUS_ADRALN","BUS_ADRERR","BUS_MCEERR_AO","BUS_MCEERR_AR","BUS_OBJERR","CANFD_BRS","CANFD_ESI","CANFD_MAX_DLC","CANFD_MAX_DLEN","CANFD_MTU","CANXL_HDR_SIZE","CANXL_MAX_DLC","CANXL_MAX_DLC_MASK","CANXL_MAX_DLEN","CANXL_MAX_MTU","CANXL_MIN_DLC","CANXL_MIN_DLEN","CANXL_MIN_MTU","CANXL_MTU","CANXL_PRIO_BITS","CANXL_PRIO_MASK","CANXL_SEC","CANXL_XLF","CAN_BCM","CAN_EFF_FLAG","CAN_EFF_ID_BITS","CAN_EFF_MASK","CAN_ERR_FLAG","CAN_ERR_MASK","CAN_INV_FILTER","CAN_ISOTP","CAN_J1939","CAN_MAX_DLC","CAN_MAX_DLEN","CAN_MCNET","CAN_MTU","CAN_NPROTO","CAN_RAW","CAN_RAW_ERR_FILTER","CAN_RAW_FD_FRAMES","CAN_RAW_FILTER","CAN_RAW_FILTER_MAX","CAN_RAW_JOIN_FILTERS","CAN_RAW_LOOPBACK","CAN_RAW_RECV_OWN_MSGS","CAN_RAW_XL_FRAMES","CAN_RTR_FLAG","CAN_SFF_ID_BITS","CAN_SFF_MASK","CAN_TP16","CAN_TP20","CBAUD","CBAUDEX","CGROUP2_SUPER_MAGIC","CGROUP_SUPER_MAGIC","CIBAUD","CLD_CONTINUED","CLD_DUMPED","CLD_EXITED","CLD_KILLED","CLD_STOPPED","CLD_TRAPPED","CLOCAL","CLOCK_BOOTTIME","CLOCK_BOOTTIME_ALARM","CLOCK_MONOTONIC","CLOCK_MONOTONIC_COARSE","CLOCK_MONOTONIC_RAW","CLOCK_PROCESS_CPUTIME_ID","CLOCK_REALTIME","CLOCK_REALTIME_ALARM","CLOCK_REALTIME_COARSE","CLOCK_TAI","CLOCK_THREAD_CPUTIME_ID","CLONE_CHILD_CLEARTID","CLONE_CHILD_SETTID","CLONE_CLEAR_SIGHAND","CLONE_DETACHED","CLONE_FILES","CLONE_FS","CLONE_INTO_CGROUP","CLONE_IO","CLONE_NEWCGROUP","CLONE_NEWIPC","CLONE_NEWNET","CLONE_NEWNS","CLONE_NEWPID","CLONE_NEWTIME","CLONE_NEWUSER","CLONE_NEWUTS","CLONE_PARENT","CLONE_PARENT_SETTID","CLONE_PIDFD","CLONE_PTRACE","CLONE_SETTLS","CLONE_SIGHAND","CLONE_SYSVSEM","CLONE_THREAD","CLONE_UNTRACED","CLONE_VFORK","CLONE_VM","CLOSE_RANGE_CLOEXEC","CLOSE_RANGE_UNSHARE","CMSG_DATA","CMSG_FIRSTHDR","CMSG_LEN","CMSG_NXTHDR","CMSG_SPACE","CMSPAR","CODA_SUPER_MAGIC","CODESET","CPU_ALLOC_SIZE","CPU_CLR","CPU_COUNT","CPU_COUNT_S","CPU_EQUAL","CPU_ISSET","CPU_SET","CPU_SETSIZE","CPU_ZERO","CR0","CR1","CR2","CR3","CRAMFS_MAGIC","CRDLY","CREAD","CRNCYSTR","CRTSCTS","CS","CS5","CS6","CS7","CS8","CSIGNAL","CSIZE","CSTOPB","CTL_ABI","CTL_BUS","CTL_BUS_ISA","CTL_CPU","CTL_DEBUG","CTL_DEV","CTL_FS","CTL_KERN","CTL_NET","CTL_VM","CTRL_ATTR_FAMILY_ID","CTRL_ATTR_FAMILY_NAME","CTRL_ATTR_HDRSIZE","CTRL_ATTR_MAXATTR","CTRL_ATTR_MCAST_GROUPS","CTRL_ATTR_MCAST_GRP_ID","CTRL_ATTR_MCAST_GRP_NAME","CTRL_ATTR_MCAST_GRP_UNSPEC","CTRL_ATTR_OPS","CTRL_ATTR_OP_FLAGS","CTRL_ATTR_OP_ID","CTRL_ATTR_OP_UNSPEC","CTRL_ATTR_UNSPEC","CTRL_ATTR_VERSION","CTRL_CMD_DELFAMILY","CTRL_CMD_DELMCAST_GRP","CTRL_CMD_DELOPS","CTRL_CMD_GETFAMILY","CTRL_CMD_GETMCAST_GRP","CTRL_CMD_GETOPS","CTRL_CMD_NEWFAMILY","CTRL_CMD_NEWMCAST_GRP","CTRL_CMD_NEWOPS","CTRL_CMD_UNSPEC","DAY_1","DAY_2","DAY_3","DAY_4","DAY_5","DAY_6","DAY_7","DCCP_SERVICE_LIST_MAX_LEN","DCCP_SOCKOPT_AVAILABLE_CCIDS","DCCP_SOCKOPT_CCID","DCCP_SOCKOPT_CCID_RX_INFO","DCCP_SOCKOPT_CCID_TX_INFO","DCCP_SOCKOPT_CHANGE_L","DCCP_SOCKOPT_CHANGE_R","DCCP_SOCKOPT_GET_CUR_MPS","DCCP_SOCKOPT_PACKET_SIZE","DCCP_SOCKOPT_QPOLICY_ID","DCCP_SOCKOPT_QPOLICY_TXQLEN","DCCP_SOCKOPT_RECV_CSCOV","DCCP_SOCKOPT_RX_CCID","DCCP_SOCKOPT_SEND_CSCOV","DCCP_SOCKOPT_SERVER_TIMEWAIT","DCCP_SOCKOPT_SERVICE","DCCP_SOCKOPT_TX_CCID","DEAD_PROCESS","DEBUGFS_MAGIC","DEVPTS_SUPER_MAGIC","DIR","DS","DT_BLK","DT_CHR","DT_DIR","DT_FIFO","DT_LNK","DT_REG","DT_SOCK","DT_UNKNOWN","D_FMT","D_T_FMT","Dl_info","E2BIG","EACCES","EADDRINUSE","EADDRNOTAVAIL","EADV","EAFNOSUPPORT","EAGAIN","EAI_AGAIN","EAI_BADFLAGS","EAI_FAIL","EAI_FAMILY","EAI_MEMORY","EAI_NODATA","EAI_NONAME","EAI_OVERFLOW","EAI_SERVICE","EAI_SOCKTYPE","EAI_SYSTEM","EALREADY","EBADE","EBADF","EBADFD","EBADMSG","EBADR","EBADRQC","EBADSLT","EBFONT","EBUSY","ECANCELED","ECHILD","ECHO","ECHOCTL","ECHOE","ECHOK","ECHOKE","ECHONL","ECHOPRT","ECHRNG","ECOMM","ECONNABORTED","ECONNREFUSED","ECONNRESET","ECRYPTFS_SUPER_MAGIC","EDEADLK","EDEADLOCK","EDESTADDRREQ","EDOM","EDOTDOT","EDQUOT","EEXIST","EFAULT","EFBIG","EFD_CLOEXEC","EFD_NONBLOCK","EFD_SEMAPHORE","EFLAGS","EFS_SUPER_MAGIC","EHOSTDOWN","EHOSTUNREACH","EHWPOISON","EIDRM","EILSEQ","EINPROGRESS","EINTR","EINVAL","EIO","EISCONN","EISDIR","EISNAM","EI_ABIVERSION","EI_CLASS","EI_DATA","EI_MAG0","EI_MAG1","EI_MAG2","EI_MAG3","EI_NIDENT","EI_OSABI","EI_PAD","EI_VERSION","EKEYEXPIRED","EKEYREJECTED","EKEYREVOKED","EL2HLT","EL2NSYNC","EL3HLT","EL3RST","ELFCLASS32","ELFCLASS64","ELFCLASSNONE","ELFCLASSNUM","ELFDATA2LSB","ELFDATA2MSB","ELFDATANONE","ELFDATANUM","ELFMAG0","ELFMAG1","ELFMAG2","ELFMAG3","ELFOSABI_AIX","ELFOSABI_ARM","ELFOSABI_ARM_AEABI","ELFOSABI_FREEBSD","ELFOSABI_GNU","ELFOSABI_HPUX","ELFOSABI_IRIX","ELFOSABI_LINUX","ELFOSABI_MODESTO","ELFOSABI_NETBSD","ELFOSABI_NONE","ELFOSABI_OPENBSD","ELFOSABI_SOLARIS","ELFOSABI_STANDALONE","ELFOSABI_SYSV","ELFOSABI_TRU64","ELIBACC","ELIBBAD","ELIBEXEC","ELIBMAX","ELIBSCN","ELNRNG","ELOOP","EMEDIUMTYPE","EMFILE","EMLINK","EMPTY","EMSGSIZE","EMULTIHOP","EM_386","EM_68HC05","EM_68HC08","EM_68HC11","EM_68HC12","EM_68HC16","EM_68K","EM_860","EM_88K","EM_960","EM_AARCH64","EM_ALPHA","EM_ARC","EM_ARC_A5","EM_ARM","EM_AVR","EM_COLDFIRE","EM_CRIS","EM_D10V","EM_D30V","EM_FAKE_ALPHA","EM_FIREPATH","EM_FR20","EM_FR30","EM_FX66","EM_H8S","EM_H8_300","EM_H8_300H","EM_H8_500","EM_HUANY","EM_IA_64","EM_JAVELIN","EM_M32","EM_M32R","EM_ME16","EM_MIPS","EM_MIPS_RS3_LE","EM_MIPS_X","EM_MMA","EM_MMIX","EM_MN10200","EM_MN10300","EM_NCPU","EM_NDR1","EM_NONE","EM_OPENRISC","EM_PARISC","EM_PCP","EM_PDSP","EM_PJ","EM_PPC","EM_PPC64","EM_PRISM","EM_RCE","EM_RH32","EM_S370","EM_S390","EM_SH","EM_SPARC","EM_SPARC32PLUS","EM_SPARCV9","EM_ST100","EM_ST19","EM_ST7","EM_ST9PLUS","EM_STARCORE","EM_SVX","EM_TILEGX","EM_TILEPRO","EM_TINYJ","EM_TRICORE","EM_V800","EM_V850","EM_VAX","EM_VPP500","EM_X86_64","EM_XTENSA","EM_ZSP","ENAMETOOLONG","ENAVAIL","ENETDOWN","ENETRESET","ENETUNREACH","ENFILE","ENOANO","ENOATTR","ENOBUFS","ENOCSI","ENODATA","ENODEV","ENOENT","ENOEXEC","ENOKEY","ENOLCK","ENOLINK","ENOMEDIUM","ENOMEM","ENOMSG","ENONET","ENOPKG","ENOPROTOOPT","ENOSPC","ENOSR","ENOSTR","ENOSYS","ENOTBLK","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTNAM","ENOTRECOVERABLE","ENOTSOCK","ENOTSUP","ENOTTY","ENOTUNIQ","ENXIO","EOF","EOPNOTSUPP","EOVERFLOW","EOWNERDEAD","EPERM","EPFNOSUPPORT","EPIPE","EPOLLERR","EPOLLET","EPOLLEXCLUSIVE","EPOLLHUP","EPOLLIN","EPOLLMSG","EPOLLONESHOT","EPOLLOUT","EPOLLPRI","EPOLLRDBAND","EPOLLRDHUP","EPOLLRDNORM","EPOLLWAKEUP","EPOLLWRBAND","EPOLLWRNORM","EPOLL_CLOEXEC","EPOLL_CTL_ADD","EPOLL_CTL_DEL","EPOLL_CTL_MOD","EPROTO","EPROTONOSUPPORT","EPROTOTYPE","ERA","ERANGE","ERA_D_FMT","ERA_D_T_FMT","ERA_T_FMT","EREMCHG","EREMOTE","EREMOTEIO","ERESTART","ERFKILL","EROFS","ES","ESHUTDOWN","ESOCKTNOSUPPORT","ESPIPE","ESRCH","ESRMNT","ESTALE","ESTRPIPE","ETH_ALEN","ETH_DATA_LEN","ETH_FCS_LEN","ETH_FRAME_LEN","ETH_HLEN","ETH_P_1588","ETH_P_8021AD","ETH_P_8021AH","ETH_P_8021Q","ETH_P_80221","ETH_P_802_2","ETH_P_802_3","ETH_P_802_3_MIN","ETH_P_802_EX1","ETH_P_AARP","ETH_P_AF_IUCV","ETH_P_ALL","ETH_P_AOE","ETH_P_ARCNET","ETH_P_ARP","ETH_P_ATALK","ETH_P_ATMFATE","ETH_P_ATMMPOA","ETH_P_AX25","ETH_P_BATMAN","ETH_P_BPQ","ETH_P_CAIF","ETH_P_CANFD","ETH_P_CONTROL","ETH_P_CUST","ETH_P_DDCMP","ETH_P_DEC","ETH_P_DIAG","ETH_P_DNA_DL","ETH_P_DNA_RC","ETH_P_DNA_RT","ETH_P_DSA","ETH_P_ECONET","ETH_P_EDSA","ETH_P_FCOE","ETH_P_FIP","ETH_P_HDLC","ETH_P_IEEE802154","ETH_P_IEEEPUP","ETH_P_IEEEPUPAT","ETH_P_IP","ETH_P_IPV6","ETH_P_IPX","ETH_P_IRDA","ETH_P_LAT","ETH_P_LINK_CTL","ETH_P_LOCALTALK","ETH_P_LOOP","ETH_P_LOOPBACK","ETH_P_MACSEC","ETH_P_MOBITEX","ETH_P_MPLS_MC","ETH_P_MPLS_UC","ETH_P_MVRP","ETH_P_PAE","ETH_P_PAUSE","ETH_P_PHONET","ETH_P_PPPTALK","ETH_P_PPP_DISC","ETH_P_PPP_MP","ETH_P_PPP_SES","ETH_P_PRP","ETH_P_PUP","ETH_P_PUPAT","ETH_P_QINQ1","ETH_P_QINQ2","ETH_P_QINQ3","ETH_P_RARP","ETH_P_SCA","ETH_P_SLOW","ETH_P_SNAP","ETH_P_TDLS","ETH_P_TEB","ETH_P_TIPC","ETH_P_TRAILER","ETH_P_TR_802_2","ETH_P_WAN_PPP","ETH_P_WCCP","ETH_P_X25","ETH_ZLEN","ETIME","ETIMEDOUT","ETOOMANYREFS","ETXTBSY","ET_CORE","ET_DYN","ET_EXEC","ET_HIOS","ET_HIPROC","ET_LOOS","ET_LOPROC","ET_NONE","ET_NUM","ET_REL","EUCLEAN","EUNATCH","EUSERS","EV_CNT","EV_CURRENT","EV_MAX","EV_NONE","EV_NUM","EWOULDBLOCK","EXDEV","EXFULL","EXIT_FAILURE","EXIT_SUCCESS","EXT2_SUPER_MAGIC","EXT3_SUPER_MAGIC","EXT4_SUPER_MAGIC","EXTA","EXTB","EXTPROC","Elf32_Addr","Elf32_Chdr","Elf32_Ehdr","Elf32_Half","Elf32_Off","Elf32_Phdr","Elf32_Section","Elf32_Shdr","Elf32_Sym","Elf32_Word","Elf64_Addr","Elf64_Chdr","Elf64_Ehdr","Elf64_Half","Elf64_Off","Elf64_Phdr","Elf64_Section","Elf64_Shdr","Elf64_Sxword","Elf64_Sym","Elf64_Word","Elf64_Xword","F2FS_SUPER_MAGIC","FALLOC_FL_COLLAPSE_RANGE","FALLOC_FL_INSERT_RANGE","FALLOC_FL_KEEP_SIZE","FALLOC_FL_PUNCH_HOLE","FALLOC_FL_UNSHARE_RANGE","FALLOC_FL_ZERO_RANGE","FANOTIFY_METADATA_VERSION","FAN_ACCESS","FAN_ACCESS_PERM","FAN_ALLOW","FAN_ATTRIB","FAN_AUDIT","FAN_CLASS_CONTENT","FAN_CLASS_NOTIF","FAN_CLASS_PRE_CONTENT","FAN_CLOEXEC","FAN_CLOSE","FAN_CLOSE_NOWRITE","FAN_CLOSE_WRITE","FAN_CREATE","FAN_DELETE","FAN_DELETE_SELF","FAN_DENY","FAN_ENABLE_AUDIT","FAN_EPIDFD","FAN_EVENT_INFO_TYPE_DFID","FAN_EVENT_INFO_TYPE_DFID_NAME","FAN_EVENT_INFO_TYPE_ERROR","FAN_EVENT_INFO_TYPE_FID","FAN_EVENT_INFO_TYPE_NEW_DFID_NAME","FAN_EVENT_INFO_TYPE_OLD_DFID_NAME","FAN_EVENT_INFO_TYPE_PIDFD","FAN_EVENT_ON_CHILD","FAN_FS_ERROR","FAN_INFO","FAN_MARK_ADD","FAN_MARK_DONT_FOLLOW","FAN_MARK_EVICTABLE","FAN_MARK_FILESYSTEM","FAN_MARK_FLUSH","FAN_MARK_IGNORE","FAN_MARK_IGNORED_MASK","FAN_MARK_IGNORED_SURV_MODIFY","FAN_MARK_IGNORE_SURV","FAN_MARK_INODE","FAN_MARK_MOUNT","FAN_MARK_ONLYDIR","FAN_MARK_REMOVE","FAN_MODIFY","FAN_MOVE","FAN_MOVED_FROM","FAN_MOVED_TO","FAN_MOVE_SELF","FAN_NOFD","FAN_NONBLOCK","FAN_NOPIDFD","FAN_ONDIR","FAN_OPEN","FAN_OPEN_EXEC","FAN_OPEN_EXEC_PERM","FAN_OPEN_PERM","FAN_Q_OVERFLOW","FAN_RENAME","FAN_REPORT_DFID_NAME","FAN_REPORT_DFID_NAME_TARGET","FAN_REPORT_DIR_FID","FAN_REPORT_FID","FAN_REPORT_NAME","FAN_REPORT_PIDFD","FAN_REPORT_TARGET_FID","FAN_REPORT_TID","FAN_RESPONSE_INFO_AUDIT_RULE","FAN_RESPONSE_INFO_NONE","FAN_UNLIMITED_MARKS","FAN_UNLIMITED_QUEUE","FDPIC_FUNCPTRS","FD_CLOEXEC","FD_CLR","FD_ISSET","FD_SET","FD_SETSIZE","FD_ZERO","FF0","FF1","FFDLY","FF_CNT","FF_MAX","FICLONE","FICLONERANGE","FILE","FILENAME_MAX","FIOASYNC","FIOCLEX","FIONBIO","FIONCLEX","FIONREAD","FIOQSIZE","FLUSHO","FOPEN_MAX","FS","FS_BASE","FS_IOC32_GETFLAGS","FS_IOC32_GETVERSION","FS_IOC32_SETFLAGS","FS_IOC32_SETVERSION","FS_IOC_GETFLAGS","FS_IOC_GETVERSION","FS_IOC_SETFLAGS","FS_IOC_SETVERSION","FUSE_SUPER_MAGIC","FUTEXFS_SUPER_MAGIC","FUTEX_BITSET_MATCH_ANY","FUTEX_CLOCK_REALTIME","FUTEX_CMD_MASK","FUTEX_CMP_REQUEUE","FUTEX_CMP_REQUEUE_PI","FUTEX_FD","FUTEX_LOCK_PI","FUTEX_LOCK_PI2","FUTEX_OP","FUTEX_OP_ADD","FUTEX_OP_ANDN","FUTEX_OP_CMP_EQ","FUTEX_OP_CMP_GE","FUTEX_OP_CMP_GT","FUTEX_OP_CMP_LE","FUTEX_OP_CMP_LT","FUTEX_OP_CMP_NE","FUTEX_OP_OPARG_SHIFT","FUTEX_OP_OR","FUTEX_OP_SET","FUTEX_OP_XOR","FUTEX_PRIVATE_FLAG","FUTEX_REQUEUE","FUTEX_TRYLOCK_PI","FUTEX_UNLOCK_PI","FUTEX_WAIT","FUTEX_WAIT_BITSET","FUTEX_WAIT_REQUEUE_PI","FUTEX_WAKE","FUTEX_WAKE_BITSET","FUTEX_WAKE_OP","F_ADD_SEALS","F_CANCELLK","F_DUPFD","F_DUPFD_CLOEXEC","F_GETFD","F_GETFL","F_GETLEASE","F_GETLK","F_GETOWN","F_GETPIPE_SZ","F_GET_SEALS","F_LOCK","F_NOTIFY","F_OFD_GETLK","F_OFD_SETLK","F_OFD_SETLKW","F_OK","F_RDLCK","F_SEAL_FUTURE_WRITE","F_SEAL_GROW","F_SEAL_SEAL","F_SEAL_SHRINK","F_SEAL_WRITE","F_SETFD","F_SETFL","F_SETLEASE","F_SETLK","F_SETLKW","F_SETOWN","F_SETPIPE_SZ","F_TEST","F_TLOCK","F_ULOCK","F_UNLCK","F_WRLCK","GENL_ADMIN_PERM","GENL_CMD_CAP_DO","GENL_CMD_CAP_DUMP","GENL_CMD_CAP_HASPOL","GENL_ID_CTRL","GENL_ID_PMCRAID","GENL_ID_VFS_DQUOT","GENL_MAX_ID","GENL_MIN_ID","GENL_NAMSIZ","GENL_UNS_ADMIN_PERM","GLOB_ABORTED","GLOB_ALTDIRFUNC","GLOB_APPEND","GLOB_BRACE","GLOB_DOOFFS","GLOB_ERR","GLOB_MARK","GLOB_NOCHECK","GLOB_NOESCAPE","GLOB_NOMAGIC","GLOB_NOMATCH","GLOB_NOSORT","GLOB_NOSPACE","GLOB_ONLYDIR","GLOB_PERIOD","GLOB_TILDE","GLOB_TILDE_CHECK","GRND_INSECURE","GRND_NONBLOCK","GRND_RANDOM","GRPQUOTA","GS","GS_BASE","HOSTFS_SUPER_MAGIC","HPFS_SUPER_MAGIC","HUGETLBFS_MAGIC","HUGETLB_FLAG_ENCODE_16GB","HUGETLB_FLAG_ENCODE_16MB","HUGETLB_FLAG_ENCODE_1GB","HUGETLB_FLAG_ENCODE_1MB","HUGETLB_FLAG_ENCODE_256MB","HUGETLB_FLAG_ENCODE_2GB","HUGETLB_FLAG_ENCODE_2MB","HUGETLB_FLAG_ENCODE_32MB","HUGETLB_FLAG_ENCODE_512KB","HUGETLB_FLAG_ENCODE_512MB","HUGETLB_FLAG_ENCODE_64KB","HUGETLB_FLAG_ENCODE_8MB","HUGETLB_FLAG_ENCODE_MASK","HUGETLB_FLAG_ENCODE_SHIFT","HUPCL","HWTSTAMP_FILTER_ALL","HWTSTAMP_FILTER_NONE","HWTSTAMP_FILTER_NTP_ALL","HWTSTAMP_FILTER_PTP_V1_L4_DELAY_REQ","HWTSTAMP_FILTER_PTP_V1_L4_EVENT","HWTSTAMP_FILTER_PTP_V1_L4_SYNC","HWTSTAMP_FILTER_PTP_V2_DELAY_REQ","HWTSTAMP_FILTER_PTP_V2_EVENT","HWTSTAMP_FILTER_PTP_V2_L2_DELAY_REQ","HWTSTAMP_FILTER_PTP_V2_L2_EVENT","HWTSTAMP_FILTER_PTP_V2_L2_SYNC","HWTSTAMP_FILTER_PTP_V2_L4_DELAY_REQ","HWTSTAMP_FILTER_PTP_V2_L4_EVENT","HWTSTAMP_FILTER_PTP_V2_L4_SYNC","HWTSTAMP_FILTER_PTP_V2_SYNC","HWTSTAMP_FILTER_SOME","HWTSTAMP_TX_OFF","HWTSTAMP_TX_ON","HWTSTAMP_TX_ONESTEP_P2P","HWTSTAMP_TX_ONESTEP_SYNC","IBSHIFT","ICANON","ICRNL","IEXTEN","IFA_ADDRESS","IFA_ANYCAST","IFA_BROADCAST","IFA_CACHEINFO","IFA_FLAGS","IFA_F_DADFAILED","IFA_F_DEPRECATED","IFA_F_HOMEADDRESS","IFA_F_MANAGETEMPADDR","IFA_F_MCAUTOJOIN","IFA_F_NODAD","IFA_F_NOPREFIXROUTE","IFA_F_OPTIMISTIC","IFA_F_PERMANENT","IFA_F_SECONDARY","IFA_F_STABLE_PRIVACY","IFA_F_TEMPORARY","IFA_F_TENTATIVE","IFA_LABEL","IFA_LOCAL","IFA_MULTICAST","IFA_UNSPEC","IFF_ALLMULTI","IFF_ATTACH_QUEUE","IFF_AUTOMEDIA","IFF_BROADCAST","IFF_DEBUG","IFF_DETACH_QUEUE","IFF_DORMANT","IFF_DYNAMIC","IFF_ECHO","IFF_LOOPBACK","IFF_LOWER_UP","IFF_MASTER","IFF_MULTICAST","IFF_MULTI_QUEUE","IFF_NAPI","IFF_NAPI_FRAGS","IFF_NOARP","IFF_NOFILTER","IFF_NOTRAILERS","IFF_NO_CARRIER","IFF_NO_PI","IFF_ONE_QUEUE","IFF_PERSIST","IFF_POINTOPOINT","IFF_PORTSEL","IFF_PROMISC","IFF_RUNNING","IFF_SLAVE","IFF_TAP","IFF_TUN","IFF_TUN_EXCL","IFF_UP","IFF_VNET_HDR","IFLA_ADDRESS","IFLA_AF_SPEC","IFLA_ALLMULTI","IFLA_ALT_IFNAME","IFLA_BROADCAST","IFLA_CARRIER","IFLA_CARRIER_CHANGES","IFLA_CARRIER_DOWN_COUNT","IFLA_CARRIER_UP_COUNT","IFLA_COST","IFLA_EVENT","IFLA_EXT_MASK","IFLA_GROUP","IFLA_GRO_MAX_SIZE","IFLA_GSO_MAX_SEGS","IFLA_GSO_MAX_SIZE","IFLA_IFALIAS","IFLA_IFNAME","IFLA_IF_NETNSID","IFLA_INFO_DATA","IFLA_INFO_KIND","IFLA_INFO_SLAVE_DATA","IFLA_INFO_SLAVE_KIND","IFLA_INFO_UNSPEC","IFLA_INFO_XSTATS","IFLA_LINK","IFLA_LINKINFO","IFLA_LINKMODE","IFLA_LINK_NETNSID","IFLA_MAP","IFLA_MASTER","IFLA_MAX_MTU","IFLA_MIN_MTU","IFLA_MTU","IFLA_NET_NS_FD","IFLA_NET_NS_PID","IFLA_NEW_IFINDEX","IFLA_NEW_NETNSID","IFLA_NUM_RX_QUEUES","IFLA_NUM_TX_QUEUES","IFLA_NUM_VF","IFLA_OPERSTATE","IFLA_PAD","IFLA_PARENT_DEV_BUS_NAME","IFLA_PARENT_DEV_NAME","IFLA_PERM_ADDRESS","IFLA_PHYS_PORT_ID","IFLA_PHYS_PORT_NAME","IFLA_PHYS_SWITCH_ID","IFLA_PORT_SELF","IFLA_PRIORITY","IFLA_PROMISCUITY","IFLA_PROP_LIST","IFLA_PROTINFO","IFLA_PROTO_DOWN","IFLA_PROTO_DOWN_REASON","IFLA_QDISC","IFLA_STATS","IFLA_STATS64","IFLA_TARGET_NETNSID","IFLA_TSO_MAX_SEGS","IFLA_TSO_MAX_SIZE","IFLA_TXQLEN","IFLA_UNSPEC","IFLA_VFINFO_LIST","IFLA_VF_PORTS","IFLA_WEIGHT","IFLA_WIRELESS","IFLA_XDP","IFNAMSIZ","IF_LINK_MODE_DEFAULT","IF_LINK_MODE_DORMANT","IF_LINK_MODE_TESTING","IF_NAMESIZE","IF_OPER_DORMANT","IF_OPER_DOWN","IF_OPER_LOWERLAYERDOWN","IF_OPER_NOTPRESENT","IF_OPER_TESTING","IF_OPER_UNKNOWN","IF_OPER_UP","IGNBRK","IGNCR","IGNPAR","IMAXBEL","INADDR_ANY","INADDR_BROADCAST","INADDR_LOOPBACK","INADDR_NONE","INIT_PROCESS","INLCR","INOTIFY_MAX_QUEUED_EVENTS","INOTIFY_MAX_USER_INSTANCES","INOTIFY_MAX_USER_WATCHES","INPCK","INPUT_PROP_CNT","INPUT_PROP_MAX","INT_MAX","INT_MIN","IN_ACCESS","IN_ALL_EVENTS","IN_ATTRIB","IN_CLOEXEC","IN_CLOSE","IN_CLOSE_NOWRITE","IN_CLOSE_WRITE","IN_CREATE","IN_DELETE","IN_DELETE_SELF","IN_DONT_FOLLOW","IN_EXCL_UNLINK","IN_IGNORED","IN_ISDIR","IN_MASK_ADD","IN_MASK_CREATE","IN_MODIFY","IN_MOVE","IN_MOVED_FROM","IN_MOVED_TO","IN_MOVE_SELF","IN_NONBLOCK","IN_ONESHOT","IN_ONLYDIR","IN_OPEN","IN_Q_OVERFLOW","IN_UNMOUNT","IP6T_SO_ORIGINAL_DST","IPC_CREAT","IPC_EXCL","IPC_INFO","IPC_NOWAIT","IPC_PRIVATE","IPC_RMID","IPC_SET","IPC_STAT","IPDEFTTL","IPOPT_CLASS","IPOPT_CLASS_MASK","IPOPT_CONTROL","IPOPT_COPIED","IPOPT_COPY","IPOPT_END","IPOPT_EOL","IPOPT_LSRR","IPOPT_MEASUREMENT","IPOPT_MINOFF","IPOPT_NOOP","IPOPT_NOP","IPOPT_NUMBER","IPOPT_NUMBER_MASK","IPOPT_OFFSET","IPOPT_OLEN","IPOPT_OPTVAL","IPOPT_RA","IPOPT_RESERVED1","IPOPT_RESERVED2","IPOPT_RR","IPOPT_SEC","IPOPT_SID","IPOPT_SSRR","IPOPT_TIMESTAMP","IPOPT_TS","IPOPT_TS_PRESPEC","IPOPT_TS_TSANDADDR","IPOPT_TS_TSONLY","IPPROTO_AH","IPPROTO_BEETPH","IPPROTO_COMP","IPPROTO_DCCP","IPPROTO_DSTOPTS","IPPROTO_EGP","IPPROTO_ENCAP","IPPROTO_ESP","IPPROTO_ETHERNET","IPPROTO_FRAGMENT","IPPROTO_GRE","IPPROTO_HOPOPTS","IPPROTO_ICMP","IPPROTO_ICMPV6","IPPROTO_IDP","IPPROTO_IGMP","IPPROTO_IP","IPPROTO_IPIP","IPPROTO_IPV6","IPPROTO_MAX","IPPROTO_MH","IPPROTO_MPLS","IPPROTO_MPTCP","IPPROTO_MTP","IPPROTO_NONE","IPPROTO_PIM","IPPROTO_PUP","IPPROTO_RAW","IPPROTO_ROUTING","IPPROTO_RSVP","IPPROTO_SCTP","IPPROTO_TCP","IPPROTO_TP","IPPROTO_UDP","IPPROTO_UDPLITE","IPTOS_ECN","IPTOS_ECN_CE","IPTOS_ECN_ECT0","IPTOS_ECN_ECT1","IPTOS_ECN_MASK","IPTOS_ECN_NOT_ECT","IPTOS_LOWDELAY","IPTOS_MINCOST","IPTOS_PREC","IPTOS_PREC_CRITIC_ECP","IPTOS_PREC_FLASH","IPTOS_PREC_FLASHOVERRIDE","IPTOS_PREC_IMMEDIATE","IPTOS_PREC_INTERNETCONTROL","IPTOS_PREC_MASK","IPTOS_PREC_NETCONTROL","IPTOS_PREC_PRIORITY","IPTOS_PREC_ROUTINE","IPTOS_RELIABILITY","IPTOS_THROUGHPUT","IPTOS_TOS","IPTOS_TOS_MASK","IPV6_2292DSTOPTS","IPV6_2292HOPLIMIT","IPV6_2292HOPOPTS","IPV6_2292PKTINFO","IPV6_2292PKTOPTIONS","IPV6_2292RTHDR","IPV6_ADDRFORM","IPV6_ADDR_PREFERENCES","IPV6_ADD_MEMBERSHIP","IPV6_AUTHHDR","IPV6_AUTOFLOWLABEL","IPV6_CHECKSUM","IPV6_DONTFRAG","IPV6_DROP_MEMBERSHIP","IPV6_DSTOPTS","IPV6_FLOWINFO","IPV6_FLOWINFO_FLOWLABEL","IPV6_FLOWINFO_PRIORITY","IPV6_FLOWINFO_SEND","IPV6_FLOWLABEL_MGR","IPV6_FREEBIND","IPV6_HDRINCL","IPV6_HOPLIMIT","IPV6_HOPOPTS","IPV6_IPSEC_POLICY","IPV6_JOIN_ANYCAST","IPV6_LEAVE_ANYCAST","IPV6_MINHOPCOUNT","IPV6_MTU","IPV6_MTU_DISCOVER","IPV6_MULTICAST_ALL","IPV6_MULTICAST_HOPS","IPV6_MULTICAST_IF","IPV6_MULTICAST_LOOP","IPV6_NEXTHOP","IPV6_ORIGDSTADDR","IPV6_PATHMTU","IPV6_PKTINFO","IPV6_PMTUDISC_DO","IPV6_PMTUDISC_DONT","IPV6_PMTUDISC_INTERFACE","IPV6_PMTUDISC_OMIT","IPV6_PMTUDISC_PROBE","IPV6_PMTUDISC_WANT","IPV6_PREFER_SRC_CGA","IPV6_PREFER_SRC_COA","IPV6_PREFER_SRC_HOME","IPV6_PREFER_SRC_NONCGA","IPV6_PREFER_SRC_PUBLIC","IPV6_PREFER_SRC_PUBTMP_DEFAULT","IPV6_PREFER_SRC_TMP","IPV6_RECVDSTOPTS","IPV6_RECVERR","IPV6_RECVFRAGSIZE","IPV6_RECVHOPLIMIT","IPV6_RECVHOPOPTS","IPV6_RECVORIGDSTADDR","IPV6_RECVPATHMTU","IPV6_RECVPKTINFO","IPV6_RECVRTHDR","IPV6_RECVTCLASS","IPV6_ROUTER_ALERT","IPV6_ROUTER_ALERT_ISOLATE","IPV6_RTHDR","IPV6_RTHDRDSTOPTS","IPV6_RTHDR_LOOSE","IPV6_RTHDR_STRICT","IPV6_TCLASS","IPV6_TRANSPARENT","IPV6_UNICAST_HOPS","IPV6_UNICAST_IF","IPV6_V6ONLY","IPV6_XFRM_POLICY","IPVERSION","IP_ADD_MEMBERSHIP","IP_ADD_SOURCE_MEMBERSHIP","IP_BIND_ADDRESS_NO_PORT","IP_BLOCK_SOURCE","IP_CHECKSUM","IP_DEFAULT_MULTICAST_LOOP","IP_DEFAULT_MULTICAST_TTL","IP_DROP_MEMBERSHIP","IP_DROP_SOURCE_MEMBERSHIP","IP_FREEBIND","IP_HDRINCL","IP_IPSEC_POLICY","IP_MINTTL","IP_MSFILTER","IP_MTU","IP_MTU_DISCOVER","IP_MULTICAST_ALL","IP_MULTICAST_IF","IP_MULTICAST_LOOP","IP_MULTICAST_TTL","IP_NODEFRAG","IP_OPTIONS","IP_ORIGDSTADDR","IP_PASSSEC","IP_PKTINFO","IP_PKTOPTIONS","IP_PMTUDISC_DO","IP_PMTUDISC_DONT","IP_PMTUDISC_INTERFACE","IP_PMTUDISC_OMIT","IP_PMTUDISC_PROBE","IP_PMTUDISC_WANT","IP_RECVERR","IP_RECVFRAGSIZE","IP_RECVOPTS","IP_RECVORIGDSTADDR","IP_RECVTOS","IP_RECVTTL","IP_RETOPTS","IP_ROUTER_ALERT","IP_TOS","IP_TRANSPARENT","IP_TTL","IP_UNBLOCK_SOURCE","IP_UNICAST_IF","IP_XFRM_POLICY","ISIG","ISOFS_SUPER_MAGIC","ISTRIP","ITIMER_PROF","ITIMER_REAL","ITIMER_VIRTUAL","IUTF8","IWEVASSOCREQIE","IWEVASSOCRESPIE","IWEVCUSTOM","IWEVEXPIRED","IWEVFIRST","IWEVGENIE","IWEVMICHAELMICFAILURE","IWEVPMKIDCAND","IWEVQUAL","IWEVREGISTERED","IWEVTXDROP","IW_AUTH_80211_AUTH_ALG","IW_AUTH_ALG_LEAP","IW_AUTH_ALG_OPEN_SYSTEM","IW_AUTH_ALG_SHARED_KEY","IW_AUTH_CIPHER_AES_CMAC","IW_AUTH_CIPHER_CCMP","IW_AUTH_CIPHER_GROUP","IW_AUTH_CIPHER_GROUP_MGMT","IW_AUTH_CIPHER_NONE","IW_AUTH_CIPHER_PAIRWISE","IW_AUTH_CIPHER_TKIP","IW_AUTH_CIPHER_WEP104","IW_AUTH_CIPHER_WEP40","IW_AUTH_DROP_UNENCRYPTED","IW_AUTH_FLAGS","IW_AUTH_INDEX","IW_AUTH_KEY_MGMT","IW_AUTH_KEY_MGMT_802_1X","IW_AUTH_KEY_MGMT_PSK","IW_AUTH_MFP","IW_AUTH_MFP_DISABLED","IW_AUTH_MFP_OPTIONAL","IW_AUTH_MFP_REQUIRED","IW_AUTH_PRIVACY_INVOKED","IW_AUTH_ROAMING_CONTROL","IW_AUTH_ROAMING_DISABLE","IW_AUTH_ROAMING_ENABLE","IW_AUTH_RX_UNENCRYPTED_EAPOL","IW_AUTH_TKIP_COUNTERMEASURES","IW_AUTH_WPA_ENABLED","IW_AUTH_WPA_VERSION","IW_AUTH_WPA_VERSION_DISABLED","IW_AUTH_WPA_VERSION_WPA","IW_AUTH_WPA_VERSION_WPA2","IW_CUSTOM_MAX","IW_ENCODE_ALG_AES_CMAC","IW_ENCODE_ALG_CCMP","IW_ENCODE_ALG_NONE","IW_ENCODE_ALG_PMK","IW_ENCODE_ALG_TKIP","IW_ENCODE_ALG_WEP","IW_ENCODE_DISABLED","IW_ENCODE_ENABLED","IW_ENCODE_EXT_GROUP_KEY","IW_ENCODE_EXT_RX_SEQ_VALID","IW_ENCODE_EXT_SET_TX_KEY","IW_ENCODE_EXT_TX_SEQ_VALID","IW_ENCODE_FLAGS","IW_ENCODE_INDEX","IW_ENCODE_MODE","IW_ENCODE_NOKEY","IW_ENCODE_OPEN","IW_ENCODE_RESTRICTED","IW_ENCODE_SEQ_MAX_SIZE","IW_ENCODE_TEMP","IW_ENCODING_TOKEN_MAX","IW_ENC_CAPA_4WAY_HANDSHAKE","IW_ENC_CAPA_CIPHER_CCMP","IW_ENC_CAPA_CIPHER_TKIP","IW_ENC_CAPA_WPA","IW_ENC_CAPA_WPA2","IW_ESSID_MAX_SIZE","IW_EV_CHAR_PK_LEN","IW_EV_LCP_PK_LEN","IW_EV_POINT_PK_LEN","IW_FREQ_AUTO","IW_FREQ_FIXED","IW_GENERIC_IE_MAX","IW_MAX_AP","IW_MAX_BITRATES","IW_MAX_ENCODING_SIZES","IW_MAX_FREQUENCIES","IW_MAX_SPY","IW_MAX_TXPOWER","IW_MICFAILURE_COUNT","IW_MICFAILURE_GROUP","IW_MICFAILURE_KEY_ID","IW_MICFAILURE_PAIRWISE","IW_MICFAILURE_STAKEY","IW_MLME_ASSOC","IW_MLME_AUTH","IW_MLME_DEAUTH","IW_MLME_DISASSOC","IW_MODE_ADHOC","IW_MODE_AUTO","IW_MODE_INFRA","IW_MODE_MASTER","IW_MODE_MESH","IW_MODE_MONITOR","IW_MODE_REPEAT","IW_MODE_SECOND","IW_PMKID_CAND_PREAUTH","IW_PMKID_LEN","IW_PMKSA_ADD","IW_PMKSA_FLUSH","IW_PMKSA_REMOVE","IW_POWER_ALL_R","IW_POWER_FORCE_S","IW_POWER_MAX","IW_POWER_MIN","IW_POWER_MODE","IW_POWER_MODIFIER","IW_POWER_MULTICAST_R","IW_POWER_ON","IW_POWER_PERIOD","IW_POWER_RELATIVE","IW_POWER_REPEATER","IW_POWER_TIMEOUT","IW_POWER_TYPE","IW_POWER_UNICAST_R","IW_PRIV_SIZE_FIXED","IW_PRIV_SIZE_MASK","IW_PRIV_TYPE_ADDR","IW_PRIV_TYPE_BYTE","IW_PRIV_TYPE_CHAR","IW_PRIV_TYPE_FLOAT","IW_PRIV_TYPE_INT","IW_PRIV_TYPE_MASK","IW_PRIV_TYPE_NONE","IW_QUAL_ALL_INVALID","IW_QUAL_ALL_UPDATED","IW_QUAL_DBM","IW_QUAL_LEVEL_INVALID","IW_QUAL_LEVEL_UPDATED","IW_QUAL_NOISE_INVALID","IW_QUAL_NOISE_UPDATED","IW_QUAL_QUAL_INVALID","IW_QUAL_QUAL_UPDATED","IW_QUAL_RCPI","IW_RETRY_LIFETIME","IW_RETRY_LIMIT","IW_RETRY_LONG","IW_RETRY_MAX","IW_RETRY_MIN","IW_RETRY_MODIFIER","IW_RETRY_ON","IW_RETRY_RELATIVE","IW_RETRY_SHORT","IW_RETRY_TYPE","IW_SCAN_ALL_ESSID","IW_SCAN_ALL_FREQ","IW_SCAN_ALL_MODE","IW_SCAN_ALL_RATE","IW_SCAN_CAPA_BSSID","IW_SCAN_CAPA_CHANNEL","IW_SCAN_CAPA_ESSID","IW_SCAN_CAPA_MODE","IW_SCAN_CAPA_NONE","IW_SCAN_CAPA_RATE","IW_SCAN_CAPA_TIME","IW_SCAN_CAPA_TYPE","IW_SCAN_DEFAULT","IW_SCAN_MAX_DATA","IW_SCAN_THIS_ESSID","IW_SCAN_THIS_FREQ","IW_SCAN_THIS_MODE","IW_SCAN_THIS_RATE","IW_SCAN_TYPE_ACTIVE","IW_SCAN_TYPE_PASSIVE","IW_TXPOW_DBM","IW_TXPOW_MWATT","IW_TXPOW_RANGE","IW_TXPOW_RELATIVE","IW_TXPOW_TYPE","IXANY","IXOFF","IXON","J1939_EE_INFO_NONE","J1939_EE_INFO_RX_ABORT","J1939_EE_INFO_RX_DPO","J1939_EE_INFO_RX_RTS","J1939_EE_INFO_TX_ABORT","J1939_FILTER_MAX","J1939_IDLE_ADDR","J1939_MAX_UNICAST_ADDR","J1939_NLA_BYTES_ACKED","J1939_NLA_DEST_ADDR","J1939_NLA_DEST_NAME","J1939_NLA_PAD","J1939_NLA_PGN","J1939_NLA_SRC_ADDR","J1939_NLA_SRC_NAME","J1939_NLA_TOTAL_SIZE","J1939_NO_ADDR","J1939_NO_NAME","J1939_NO_PGN","J1939_PGN_ADDRESS_CLAIMED","J1939_PGN_ADDRESS_COMMANDED","J1939_PGN_MAX","J1939_PGN_PDU1_MAX","J1939_PGN_REQUEST","JFFS2_SUPER_MAGIC","KERNEL_VERSION","KERN_ACCT","KERN_ACPI_VIDEO_FLAGS","KERN_BOOTLOADER_TYPE","KERN_CADPID","KERN_COMPAT_LOG","KERN_CORE_PATTERN","KERN_CORE_USES_PID","KERN_CTLALTDEL","KERN_DOMAINNAME","KERN_HOTPLUG","KERN_HPPA_PWRSW","KERN_HPPA_UNALIGNED","KERN_HZ_TIMER","KERN_IA64_UNALIGNED","KERN_IEEE_EMULATION_WARNINGS","KERN_MAX_LOCK_DEPTH","KERN_MAX_THREADS","KERN_MODPROBE","KERN_MSGMAX","KERN_MSGMNB","KERN_MSGMNI","KERN_MSGPOOL","KERN_NAMETRANS","KERN_NGROUPS_MAX","KERN_NMI_WATCHDOG","KERN_NODENAME","KERN_OSRELEASE","KERN_OSREV","KERN_OSTYPE","KERN_OVERFLOWGID","KERN_OVERFLOWUID","KERN_PANIC","KERN_PANIC_ON_NMI","KERN_PANIC_ON_OOPS","KERN_PIDMAX","KERN_PPC_HTABRECLAIM","KERN_PPC_L2CR","KERN_PPC_POWERSAVE_NAP","KERN_PPC_ZEROPAGED","KERN_PRINTK","KERN_PRINTK_RATELIMIT","KERN_PRINTK_RATELIMIT_BURST","KERN_PROF","KERN_PTY","KERN_RANDOM","KERN_RANDOMIZE","KERN_REALROOTDEV","KERN_RTSIGMAX","KERN_RTSIGNR","KERN_S390_USER_DEBUG_LOGGING","KERN_SECUREMASK","KERN_SEM","KERN_SETUID_DUMPABLE","KERN_SG_BIG_BUFF","KERN_SHMALL","KERN_SHMMAX","KERN_SHMMNI","KERN_SHMPATH","KERN_SPARC_REBOOT","KERN_SPARC_SCONS_PWROFF","KERN_SPARC_STOP_A","KERN_SPIN_RETRY","KERN_SYSRQ","KERN_TAINTED","KERN_UNKNOWN_NMI_PANIC","KERN_VERSION","KEXEC_ARCH_MASK","KEXEC_FILE_NO_INITRAMFS","KEXEC_FILE_ON_CRASH","KEXEC_FILE_UNLOAD","KEXEC_ON_CRASH","KEXEC_PRESERVE_CONTEXT","KEYCTL_ASSUME_AUTHORITY","KEYCTL_CAPABILITIES","KEYCTL_CAPS0_BIG_KEY","KEYCTL_CAPS0_CAPABILITIES","KEYCTL_CAPS0_DIFFIE_HELLMAN","KEYCTL_CAPS0_INVALIDATE","KEYCTL_CAPS0_MOVE","KEYCTL_CAPS0_PERSISTENT_KEYRINGS","KEYCTL_CAPS0_PUBLIC_KEY","KEYCTL_CAPS0_RESTRICT_KEYRING","KEYCTL_CAPS1_NS_KEYRING_NAME","KEYCTL_CAPS1_NS_KEY_TAG","KEYCTL_CHOWN","KEYCTL_CLEAR","KEYCTL_DESCRIBE","KEYCTL_DH_COMPUTE","KEYCTL_GET_KEYRING_ID","KEYCTL_GET_PERSISTENT","KEYCTL_GET_SECURITY","KEYCTL_INSTANTIATE","KEYCTL_INSTANTIATE_IOV","KEYCTL_INVALIDATE","KEYCTL_JOIN_SESSION_KEYRING","KEYCTL_LINK","KEYCTL_MOVE","KEYCTL_NEGATE","KEYCTL_PKEY_DECRYPT","KEYCTL_PKEY_ENCRYPT","KEYCTL_PKEY_QUERY","KEYCTL_PKEY_SIGN","KEYCTL_PKEY_VERIFY","KEYCTL_READ","KEYCTL_REJECT","KEYCTL_RESTRICT_KEYRING","KEYCTL_REVOKE","KEYCTL_SEARCH","KEYCTL_SESSION_TO_PARENT","KEYCTL_SETPERM","KEYCTL_SET_REQKEY_KEYRING","KEYCTL_SET_TIMEOUT","KEYCTL_SUPPORTS_DECRYPT","KEYCTL_SUPPORTS_ENCRYPT","KEYCTL_SUPPORTS_SIGN","KEYCTL_SUPPORTS_VERIFY","KEYCTL_UNLINK","KEYCTL_UPDATE","KEY_CNT","KEY_MAX","KEY_REQKEY_DEFL_DEFAULT","KEY_REQKEY_DEFL_GROUP_KEYRING","KEY_REQKEY_DEFL_NO_CHANGE","KEY_REQKEY_DEFL_PROCESS_KEYRING","KEY_REQKEY_DEFL_REQUESTOR_KEYRING","KEY_REQKEY_DEFL_SESSION_KEYRING","KEY_REQKEY_DEFL_THREAD_KEYRING","KEY_REQKEY_DEFL_USER_KEYRING","KEY_REQKEY_DEFL_USER_SESSION_KEYRING","KEY_SPEC_GROUP_KEYRING","KEY_SPEC_PROCESS_KEYRING","KEY_SPEC_REQKEY_AUTH_KEY","KEY_SPEC_REQUESTOR_KEYRING","KEY_SPEC_SESSION_KEYRING","KEY_SPEC_THREAD_KEYRING","KEY_SPEC_USER_KEYRING","KEY_SPEC_USER_SESSION_KEYRING","LC_ADDRESS","LC_ADDRESS_MASK","LC_ALL","LC_ALL_MASK","LC_COLLATE","LC_COLLATE_MASK","LC_CTYPE","LC_CTYPE_MASK","LC_IDENTIFICATION","LC_IDENTIFICATION_MASK","LC_MEASUREMENT","LC_MEASUREMENT_MASK","LC_MESSAGES","LC_MESSAGES_MASK","LC_MONETARY","LC_MONETARY_MASK","LC_NAME","LC_NAME_MASK","LC_NUMERIC","LC_NUMERIC_MASK","LC_PAPER","LC_PAPER_MASK","LC_TELEPHONE","LC_TELEPHONE_MASK","LC_TIME","LC_TIME_MASK","LED_CNT","LED_MAX","LINUX_REBOOT_CMD_CAD_OFF","LINUX_REBOOT_CMD_CAD_ON","LINUX_REBOOT_CMD_HALT","LINUX_REBOOT_CMD_KEXEC","LINUX_REBOOT_CMD_POWER_OFF","LINUX_REBOOT_CMD_RESTART","LINUX_REBOOT_CMD_RESTART2","LINUX_REBOOT_CMD_SW_SUSPEND","LINUX_REBOOT_MAGIC1","LINUX_REBOOT_MAGIC2","LINUX_REBOOT_MAGIC2A","LINUX_REBOOT_MAGIC2B","LINUX_REBOOT_MAGIC2C","LIO_NOP","LIO_NOWAIT","LIO_READ","LIO_WAIT","LIO_WRITE","LM_ID_BASE","LM_ID_NEWLM","LOCK_EX","LOCK_NB","LOCK_SH","LOCK_UN","LOGIN_PROCESS","LOG_ALERT","LOG_AUTH","LOG_AUTHPRIV","LOG_CONS","LOG_CRIT","LOG_CRON","LOG_DAEMON","LOG_DEBUG","LOG_EMERG","LOG_ERR","LOG_FACMASK","LOG_FTP","LOG_INFO","LOG_KERN","LOG_LOCAL0","LOG_LOCAL1","LOG_LOCAL2","LOG_LOCAL3","LOG_LOCAL4","LOG_LOCAL5","LOG_LOCAL6","LOG_LOCAL7","LOG_LPR","LOG_MAIL","LOG_NDELAY","LOG_NEWS","LOG_NFACILITIES","LOG_NOTICE","LOG_NOWAIT","LOG_ODELAY","LOG_PERROR","LOG_PID","LOG_PRIMASK","LOG_SYSLOG","LOG_USER","LOG_UUCP","LOG_WARNING","L_tmpnam","Lmid_t","MADV_COLD","MADV_COLLAPSE","MADV_DODUMP","MADV_DOFORK","MADV_DONTDUMP","MADV_DONTFORK","MADV_DONTNEED","MADV_DONTNEED_LOCKED","MADV_FREE","MADV_HUGEPAGE","MADV_HWPOISON","MADV_KEEPONFORK","MADV_MERGEABLE","MADV_NOHUGEPAGE","MADV_NORMAL","MADV_PAGEOUT","MADV_POPULATE_READ","MADV_POPULATE_WRITE","MADV_RANDOM","MADV_REMOVE","MADV_SEQUENTIAL","MADV_SOFT_OFFLINE","MADV_UNMERGEABLE","MADV_WILLNEED","MADV_WIPEONFORK","MAP_32BIT","MAP_ANON","MAP_ANONYMOUS","MAP_DENYWRITE","MAP_EXECUTABLE","MAP_FAILED","MAP_FILE","MAP_FIXED","MAP_FIXED_NOREPLACE","MAP_GROWSDOWN","MAP_HUGETLB","MAP_HUGE_16GB","MAP_HUGE_16MB","MAP_HUGE_1GB","MAP_HUGE_1MB","MAP_HUGE_256MB","MAP_HUGE_2GB","MAP_HUGE_2MB","MAP_HUGE_32MB","MAP_HUGE_512KB","MAP_HUGE_512MB","MAP_HUGE_64KB","MAP_HUGE_8MB","MAP_HUGE_MASK","MAP_HUGE_SHIFT","MAP_LOCKED","MAP_NONBLOCK","MAP_NORESERVE","MAP_POPULATE","MAP_PRIVATE","MAP_SHARED","MAP_SHARED_VALIDATE","MAP_STACK","MAP_SYNC","MAP_TYPE","MAXTC","MAXTTL","MAX_ADDR_LEN","MAX_IPOPTLEN","MAX_LINKS","MCAST_BLOCK_SOURCE","MCAST_EXCLUDE","MCAST_INCLUDE","MCAST_JOIN_GROUP","MCAST_JOIN_SOURCE_GROUP","MCAST_LEAVE_GROUP","MCAST_LEAVE_SOURCE_GROUP","MCAST_MSFILTER","MCAST_UNBLOCK_SOURCE","MCL_CURRENT","MCL_FUTURE","MCL_ONFAULT","MEMBARRIER_CMD_GLOBAL","MEMBARRIER_CMD_GLOBAL_EXPEDITED","MEMBARRIER_CMD_PRIVATE_EXPEDITED","MEMBARRIER_CMD_PRIVATE_EXPEDITED_RSEQ","MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE","MEMBARRIER_CMD_QUERY","MEMBARRIER_CMD_REGISTER_GLOBAL_EXPEDITED","MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED","MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_RSEQ","MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_SYNC_CORE","MFD_ALLOW_SEALING","MFD_CLOEXEC","MFD_EXEC","MFD_HUGETLB","MFD_HUGE_16GB","MFD_HUGE_16MB","MFD_HUGE_1GB","MFD_HUGE_1MB","MFD_HUGE_256MB","MFD_HUGE_2GB","MFD_HUGE_2MB","MFD_HUGE_32MB","MFD_HUGE_512KB","MFD_HUGE_512MB","MFD_HUGE_64KB","MFD_HUGE_8MB","MFD_HUGE_MASK","MFD_HUGE_SHIFT","MFD_NOEXEC_SEAL","MINIX2_SUPER_MAGIC","MINIX2_SUPER_MAGIC2","MINIX3_SUPER_MAGIC","MINIX_SUPER_MAGIC","MINIX_SUPER_MAGIC2","MINSIGSTKSZ","MLOCK_ONFAULT","MMAP_PAGE_ZERO","MNT_DETACH","MNT_EXPIRE","MNT_FORCE","MODULE_INIT_IGNORE_MODVERSIONS","MODULE_INIT_IGNORE_VERMAGIC","MOD_CLKA","MOD_CLKB","MOD_ESTERROR","MOD_FREQUENCY","MOD_MAXERROR","MOD_MICRO","MOD_NANO","MOD_OFFSET","MOD_STATUS","MOD_TAI","MOD_TIMECONST","MON_1","MON_10","MON_11","MON_12","MON_2","MON_3","MON_4","MON_5","MON_6","MON_7","MON_8","MON_9","MOVE_MOUNT_BENEATH","MOVE_MOUNT_F_AUTOMOUNTS","MOVE_MOUNT_F_EMPTY_PATH","MOVE_MOUNT_F_SYMLINKS","MOVE_MOUNT_SET_GROUP","MOVE_MOUNT_T_AUTOMOUNTS","MOVE_MOUNT_T_EMPTY_PATH","MOVE_MOUNT_T_SYMLINKS","MPOL_BIND","MPOL_DEFAULT","MPOL_F_NUMA_BALANCING","MPOL_F_RELATIVE_NODES","MPOL_F_STATIC_NODES","MPOL_INTERLEAVE","MPOL_LOCAL","MPOL_PREFERRED","MREMAP_DONTUNMAP","MREMAP_FIXED","MREMAP_MAYMOVE","MSC_CNT","MSC_MAX","MSDOS_SUPER_MAGIC","MSG_CMSG_CLOEXEC","MSG_CONFIRM","MSG_COPY","MSG_CTRUNC","MSG_DONTROUTE","MSG_DONTWAIT","MSG_EOR","MSG_ERRQUEUE","MSG_EXCEPT","MSG_FASTOPEN","MSG_FIN","MSG_INFO","MSG_MORE","MSG_NOERROR","MSG_NOSIGNAL","MSG_NOTIFICATION","MSG_OOB","MSG_PEEK","MSG_RST","MSG_STAT","MSG_SYN","MSG_TRUNC","MSG_TRYHARD","MSG_WAITALL","MSG_WAITFORONE","MSG_ZEROCOPY","MS_ACTIVE","MS_ASYNC","MS_BIND","MS_DIRSYNC","MS_INVALIDATE","MS_I_VERSION","MS_KERNMOUNT","MS_LAZYTIME","MS_MANDLOCK","MS_MGC_MSK","MS_MGC_VAL","MS_MOVE","MS_NOATIME","MS_NODEV","MS_NODIRATIME","MS_NOEXEC","MS_NOSUID","MS_NOUSER","MS_POSIXACL","MS_PRIVATE","MS_RDONLY","MS_REC","MS_RELATIME","MS_REMOUNT","MS_RMT_MASK","MS_SHARED","MS_SILENT","MS_SLAVE","MS_STRICTATIME","MS_SYNC","MS_SYNCHRONOUS","MS_UNBINDABLE","M_ARENA_MAX","M_ARENA_TEST","M_CHECK_ACTION","M_GRAIN","M_KEEP","M_MMAP_MAX","M_MMAP_THRESHOLD","M_MXFAST","M_NLBLKS","M_PERTURB","M_TOP_PAD","M_TRIM_THRESHOLD","NCCS","NCP_SUPER_MAGIC","NDA_CACHEINFO","NDA_DST","NDA_IFINDEX","NDA_LINK_NETNSID","NDA_LLADDR","NDA_MASTER","NDA_PORT","NDA_PROBES","NDA_SRC_VNI","NDA_UNSPEC","NDA_VLAN","NDA_VNI","NETLINK_ADD_MEMBERSHIP","NETLINK_AUDIT","NETLINK_BROADCAST_ERROR","NETLINK_CAP_ACK","NETLINK_CONNECTOR","NETLINK_CRYPTO","NETLINK_DNRTMSG","NETLINK_DROP_MEMBERSHIP","NETLINK_ECRYPTFS","NETLINK_EXT_ACK","NETLINK_FIB_LOOKUP","NETLINK_FIREWALL","NETLINK_GENERIC","NETLINK_GET_STRICT_CHK","NETLINK_INET_DIAG","NETLINK_IP6_FW","NETLINK_ISCSI","NETLINK_KOBJECT_UEVENT","NETLINK_LISTEN_ALL_NSID","NETLINK_LIST_MEMBERSHIPS","NETLINK_NETFILTER","NETLINK_NFLOG","NETLINK_NO_ENOBUFS","NETLINK_PKTINFO","NETLINK_RDMA","NETLINK_ROUTE","NETLINK_RX_RING","NETLINK_SCSITRANSPORT","NETLINK_SELINUX","NETLINK_SOCK_DIAG","NETLINK_TX_RING","NETLINK_UNUSED","NETLINK_USERSOCK","NETLINK_XFRM","NET_802","NET_ATALK","NET_AX25","NET_BRIDGE","NET_CORE","NET_DCCP","NET_DECNET","NET_ECONET","NET_ETHER","NET_IPV4","NET_IPV6","NET_IPX","NET_IRDA","NET_LLC","NET_NETFILTER","NET_NETROM","NET_ROSE","NET_SCTP","NET_TR","NET_UNIX","NET_X25","NEW_TIME","NFNETLINK_V0","NFNLGRP_ACCT_QUOTA","NFNLGRP_CONNTRACK_DESTROY","NFNLGRP_CONNTRACK_EXP_DESTROY","NFNLGRP_CONNTRACK_EXP_NEW","NFNLGRP_CONNTRACK_EXP_UPDATE","NFNLGRP_CONNTRACK_NEW","NFNLGRP_CONNTRACK_UPDATE","NFNLGRP_NFTABLES","NFNLGRP_NFTRACE","NFNLGRP_NONE","NFNL_BATCH_GENID","NFNL_BATCH_UNSPEC","NFNL_MSG_BATCH_BEGIN","NFNL_MSG_BATCH_END","NFNL_SUBSYS_ACCT","NFNL_SUBSYS_COUNT","NFNL_SUBSYS_CTHELPER","NFNL_SUBSYS_CTNETLINK","NFNL_SUBSYS_CTNETLINK_EXP","NFNL_SUBSYS_CTNETLINK_TIMEOUT","NFNL_SUBSYS_HOOK","NFNL_SUBSYS_IPSET","NFNL_SUBSYS_NFTABLES","NFNL_SUBSYS_NFT_COMPAT","NFNL_SUBSYS_NONE","NFNL_SUBSYS_OSF","NFNL_SUBSYS_QUEUE","NFNL_SUBSYS_ULOG","NFPROTO_ARP","NFPROTO_BRIDGE","NFPROTO_DECNET","NFPROTO_INET","NFPROTO_IPV4","NFPROTO_IPV6","NFPROTO_NETDEV","NFPROTO_NUMPROTO","NFPROTO_UNSPEC","NFQA_CAP_LEN","NFQA_CFG_CMD","NFQA_CFG_FLAGS","NFQA_CFG_F_CONNTRACK","NFQA_CFG_F_FAIL_OPEN","NFQA_CFG_F_GSO","NFQA_CFG_F_MAX","NFQA_CFG_F_SECCTX","NFQA_CFG_F_UID_GID","NFQA_CFG_MASK","NFQA_CFG_PARAMS","NFQA_CFG_QUEUE_MAXLEN","NFQA_CFG_UNSPEC","NFQA_CT","NFQA_CT_INFO","NFQA_EXP","NFQA_GID","NFQA_HWADDR","NFQA_IFINDEX_INDEV","NFQA_IFINDEX_OUTDEV","NFQA_IFINDEX_PHYSINDEV","NFQA_IFINDEX_PHYSOUTDEV","NFQA_L2HDR","NFQA_MARK","NFQA_PACKET_HDR","NFQA_PAYLOAD","NFQA_PRIORITY","NFQA_SECCTX","NFQA_SKB_CSUMNOTREADY","NFQA_SKB_CSUM_NOTVERIFIED","NFQA_SKB_GSO","NFQA_SKB_INFO","NFQA_TIMESTAMP","NFQA_UID","NFQA_UNSPEC","NFQA_VERDICT_HDR","NFQA_VLAN","NFQA_VLAN_PROTO","NFQA_VLAN_TCI","NFQA_VLAN_UNSPEC","NFQNL_CFG_CMD_BIND","NFQNL_CFG_CMD_NONE","NFQNL_CFG_CMD_PF_BIND","NFQNL_CFG_CMD_PF_UNBIND","NFQNL_CFG_CMD_UNBIND","NFQNL_COPY_META","NFQNL_COPY_NONE","NFQNL_COPY_PACKET","NFQNL_MSG_CONFIG","NFQNL_MSG_PACKET","NFQNL_MSG_VERDICT","NFQNL_MSG_VERDICT_BATCH","NFS_SUPER_MAGIC","NFT_BREAK","NFT_BYTEORDER_HTON","NFT_BYTEORDER_NTOH","NFT_CHAIN_MAXNAMELEN","NFT_CMP_EQ","NFT_CMP_GT","NFT_CMP_GTE","NFT_CMP_LT","NFT_CMP_LTE","NFT_CMP_NEQ","NFT_CONTINUE","NFT_CT_BYTES","NFT_CT_DIRECTION","NFT_CT_DST","NFT_CT_EXPIRATION","NFT_CT_HELPER","NFT_CT_L3PROTOCOL","NFT_CT_LABELS","NFT_CT_MARK","NFT_CT_PKTS","NFT_CT_PROTOCOL","NFT_CT_PROTO_DST","NFT_CT_PROTO_SRC","NFT_CT_SECMARK","NFT_CT_SRC","NFT_CT_STATE","NFT_CT_STATUS","NFT_DATA_RESERVED_MASK","NFT_DATA_VALUE","NFT_DATA_VALUE_MAXLEN","NFT_DATA_VERDICT","NFT_DYNSET_F_INV","NFT_DYNSET_OP_ADD","NFT_DYNSET_OP_UPDATE","NFT_GOTO","NFT_JUMP","NFT_LIMIT_F_INV","NFT_LIMIT_PKTS","NFT_LIMIT_PKT_BYTES","NFT_LOOKUP_F_INV","NFT_META_BRI_IIFNAME","NFT_META_BRI_OIFNAME","NFT_META_CGROUP","NFT_META_CPU","NFT_META_IIF","NFT_META_IIFGROUP","NFT_META_IIFNAME","NFT_META_IIFTYPE","NFT_META_L4PROTO","NFT_META_LEN","NFT_META_MARK","NFT_META_NFPROTO","NFT_META_NFTRACE","NFT_META_OIF","NFT_META_OIFGROUP","NFT_META_OIFNAME","NFT_META_OIFTYPE","NFT_META_PKTTYPE","NFT_META_PRANDOM","NFT_META_PRIORITY","NFT_META_PROTOCOL","NFT_META_RTCLASSID","NFT_META_SECMARK","NFT_META_SKGID","NFT_META_SKUID","NFT_MSG_DELCHAIN","NFT_MSG_DELOBJ","NFT_MSG_DELRULE","NFT_MSG_DELSET","NFT_MSG_DELSETELEM","NFT_MSG_DELTABLE","NFT_MSG_GETCHAIN","NFT_MSG_GETGEN","NFT_MSG_GETOBJ","NFT_MSG_GETOBJ_RESET","NFT_MSG_GETRULE","NFT_MSG_GETSET","NFT_MSG_GETSETELEM","NFT_MSG_GETTABLE","NFT_MSG_MAX","NFT_MSG_NEWCHAIN","NFT_MSG_NEWGEN","NFT_MSG_NEWOBJ","NFT_MSG_NEWRULE","NFT_MSG_NEWSET","NFT_MSG_NEWSETELEM","NFT_MSG_NEWTABLE","NFT_MSG_TRACE","NFT_NAT_DNAT","NFT_NAT_SNAT","NFT_NG_INCREMENTAL","NFT_NG_RANDOM","NFT_OBJ_MAXNAMELEN","NFT_PAYLOAD_CSUM_INET","NFT_PAYLOAD_CSUM_NONE","NFT_PAYLOAD_LL_HEADER","NFT_PAYLOAD_NETWORK_HEADER","NFT_PAYLOAD_TRANSPORT_HEADER","NFT_QUEUE_FLAG_BYPASS","NFT_QUEUE_FLAG_CPU_FANOUT","NFT_QUEUE_FLAG_MASK","NFT_QUOTA_F_INV","NFT_RANGE_EQ","NFT_RANGE_NEQ","NFT_REG32_00","NFT_REG32_01","NFT_REG32_02","NFT_REG32_03","NFT_REG32_04","NFT_REG32_05","NFT_REG32_06","NFT_REG32_07","NFT_REG32_08","NFT_REG32_09","NFT_REG32_10","NFT_REG32_11","NFT_REG32_12","NFT_REG32_13","NFT_REG32_14","NFT_REG32_15","NFT_REG32_SIZE","NFT_REG_1","NFT_REG_2","NFT_REG_3","NFT_REG_4","NFT_REG_SIZE","NFT_REG_VERDICT","NFT_REJECT_ICMPX_ADMIN_PROHIBITED","NFT_REJECT_ICMPX_HOST_UNREACH","NFT_REJECT_ICMPX_NO_ROUTE","NFT_REJECT_ICMPX_PORT_UNREACH","NFT_REJECT_ICMPX_UNREACH","NFT_REJECT_ICMP_UNREACH","NFT_REJECT_TCP_RST","NFT_RETURN","NFT_SET_ANONYMOUS","NFT_SET_CONSTANT","NFT_SET_ELEM_INTERVAL_END","NFT_SET_EVAL","NFT_SET_INTERVAL","NFT_SET_MAP","NFT_SET_MAXNAMELEN","NFT_SET_POL_MEMORY","NFT_SET_POL_PERFORMANCE","NFT_SET_TIMEOUT","NFT_TABLE_MAXNAMELEN","NFT_TRACETYPE_POLICY","NFT_TRACETYPE_RETURN","NFT_TRACETYPE_RULE","NFT_TRACETYPE_UNSPEC","NFT_USERDATA_MAXLEN","NFULA_CFG_CMD","NFULA_CFG_FLAGS","NFULA_CFG_MODE","NFULA_CFG_NLBUFSIZ","NFULA_CFG_QTHRESH","NFULA_CFG_TIMEOUT","NFULA_CFG_UNSPEC","NFULA_CT","NFULA_CT_INFO","NFULA_GID","NFULA_HWADDR","NFULA_HWHEADER","NFULA_HWLEN","NFULA_HWTYPE","NFULA_IFINDEX_INDEV","NFULA_IFINDEX_OUTDEV","NFULA_IFINDEX_PHYSINDEV","NFULA_IFINDEX_PHYSOUTDEV","NFULA_L2HDR","NFULA_MARK","NFULA_PACKET_HDR","NFULA_PAYLOAD","NFULA_PREFIX","NFULA_SEQ","NFULA_SEQ_GLOBAL","NFULA_TIMESTAMP","NFULA_UID","NFULA_UNSPEC","NFULA_VLAN","NFULA_VLAN_PROTO","NFULA_VLAN_TCI","NFULA_VLAN_UNSPEC","NFULNL_CFG_CMD_BIND","NFULNL_CFG_CMD_NONE","NFULNL_CFG_CMD_PF_BIND","NFULNL_CFG_CMD_PF_UNBIND","NFULNL_CFG_CMD_UNBIND","NFULNL_CFG_F_CONNTRACK","NFULNL_CFG_F_SEQ","NFULNL_CFG_F_SEQ_GLOBAL","NFULNL_COPY_META","NFULNL_COPY_NONE","NFULNL_COPY_PACKET","NFULNL_MSG_CONFIG","NFULNL_MSG_PACKET","NF_ACCEPT","NF_DROP","NF_INET_FORWARD","NF_INET_LOCAL_IN","NF_INET_LOCAL_OUT","NF_INET_NUMHOOKS","NF_INET_POST_ROUTING","NF_INET_PRE_ROUTING","NF_IP6_FORWARD","NF_IP6_LOCAL_IN","NF_IP6_LOCAL_OUT","NF_IP6_NUMHOOKS","NF_IP6_POST_ROUTING","NF_IP6_PRE_ROUTING","NF_IP6_PRI_CONNTRACK","NF_IP6_PRI_CONNTRACK_DEFRAG","NF_IP6_PRI_CONNTRACK_HELPER","NF_IP6_PRI_FILTER","NF_IP6_PRI_FIRST","NF_IP6_PRI_LAST","NF_IP6_PRI_MANGLE","NF_IP6_PRI_NAT_DST","NF_IP6_PRI_NAT_SRC","NF_IP6_PRI_RAW","NF_IP6_PRI_SECURITY","NF_IP6_PRI_SELINUX_FIRST","NF_IP6_PRI_SELINUX_LAST","NF_IP_FORWARD","NF_IP_LOCAL_IN","NF_IP_LOCAL_OUT","NF_IP_NUMHOOKS","NF_IP_POST_ROUTING","NF_IP_PRE_ROUTING","NF_IP_PRI_CONNTRACK","NF_IP_PRI_CONNTRACK_CONFIRM","NF_IP_PRI_CONNTRACK_DEFRAG","NF_IP_PRI_CONNTRACK_HELPER","NF_IP_PRI_FILTER","NF_IP_PRI_FIRST","NF_IP_PRI_LAST","NF_IP_PRI_MANGLE","NF_IP_PRI_NAT_DST","NF_IP_PRI_NAT_SRC","NF_IP_PRI_RAW","NF_IP_PRI_SECURITY","NF_IP_PRI_SELINUX_FIRST","NF_IP_PRI_SELINUX_LAST","NF_MAX_VERDICT","NF_NETDEV_INGRESS","NF_NETDEV_NUMHOOKS","NF_QUEUE","NF_REPEAT","NF_STOLEN","NF_STOP","NF_VERDICT_BITS","NF_VERDICT_FLAG_QUEUE_BYPASS","NF_VERDICT_MASK","NF_VERDICT_QBITS","NF_VERDICT_QMASK","NILFS_SUPER_MAGIC","NI_DGRAM","NI_IDN","NI_MAXHOST","NI_NAMEREQD","NI_NOFQDN","NI_NUMERICHOST","NI_NUMERICSERV","NL0","NL1","NLA_ALIGN","NLA_ALIGNTO","NLA_F_NESTED","NLA_F_NET_BYTEORDER","NLA_TYPE_MASK","NLDLY","NLMSG_DONE","NLMSG_ERROR","NLMSG_MIN_TYPE","NLMSG_NOOP","NLMSG_OVERRUN","NLM_F_ACK","NLM_F_APPEND","NLM_F_ATOMIC","NLM_F_CREATE","NLM_F_DUMP","NLM_F_DUMP_FILTERED","NLM_F_DUMP_INTR","NLM_F_ECHO","NLM_F_EXCL","NLM_F_MATCH","NLM_F_MULTI","NLM_F_REPLACE","NLM_F_REQUEST","NLM_F_ROOT","NOEXPR","NOFLSH","NOSTR","NSFS_MAGIC","NTF_EXT_LEARNED","NTF_MASTER","NTF_OFFLOADED","NTF_PROXY","NTF_ROUTER","NTF_SELF","NTF_USE","NTP_API","NT_ASRS","NT_AUXV","NT_FPREGSET","NT_GWINDOWS","NT_LWPSINFO","NT_LWPSTATUS","NT_PLATFORM","NT_PRCRED","NT_PRFPREG","NT_PRFPXREG","NT_PRPSINFO","NT_PRSTATUS","NT_PRXREG","NT_PSINFO","NT_PSTATUS","NT_TASKSTRUCT","NT_UTSNAME","NUD_DELAY","NUD_FAILED","NUD_INCOMPLETE","NUD_NOARP","NUD_NONE","NUD_PERMANENT","NUD_PROBE","NUD_REACHABLE","NUD_STALE","OCFS2_SUPER_MAGIC","OCRNL","OFDEL","OFILL","OLCUC","OLD_TIME","ONLCR","ONLRET","ONOCR","OPENPROM_SUPER_MAGIC","OPEN_TREE_CLOEXEC","OPEN_TREE_CLONE","OPOST","ORIG_RAX","OVERLAYFS_SUPER_MAGIC","O_ACCMODE","O_APPEND","O_ASYNC","O_CLOEXEC","O_CREAT","O_DIRECT","O_DIRECTORY","O_DSYNC","O_EXCL","O_FSYNC","O_LARGEFILE","O_NDELAY","O_NOATIME","O_NOCTTY","O_NOFOLLOW","O_NONBLOCK","O_PATH","O_RDONLY","O_RDWR","O_RSYNC","O_SYNC","O_TMPFILE","O_TRUNC","O_WRONLY","PACKET_ADD_MEMBERSHIP","PACKET_DROP_MEMBERSHIP","PACKET_MR_ALLMULTI","PACKET_MR_MULTICAST","PACKET_MR_PROMISC","PACKET_MR_UNICAST","PARENB","PARMRK","PARODD","PATH_MAX","PENDIN","PF_ALG","PF_APPLETALK","PF_ASH","PF_ATMPVC","PF_ATMSVC","PF_AX25","PF_BLUETOOTH","PF_BRIDGE","PF_CAIF","PF_CAN","PF_DECnet","PF_DUMPCORE","PF_ECONET","PF_EXITING","PF_FORKNOEXEC","PF_IB","PF_IDLE","PF_IEEE802154","PF_INET","PF_INET6","PF_IO_WORKER","PF_IPX","PF_IRDA","PF_ISDN","PF_IUCV","PF_KEY","PF_KSWAPD","PF_KTHREAD","PF_LLC","PF_LOCAL","PF_LOCAL_THROTTLE","PF_MASKOS","PF_MASKPROC","PF_MCE_EARLY","PF_MCE_PROCESS","PF_MEMALLOC","PF_MEMALLOC_NOFS","PF_MEMALLOC_NOIO","PF_MEMALLOC_PIN","PF_MPLS","PF_NETBEUI","PF_NETLINK","PF_NETROM","PF_NFC","PF_NOFREEZE","PF_NO_SETAFFINITY","PF_NPROC_EXCEEDED","PF_PACKET","PF_PHONET","PF_POSTCOREDUMP","PF_PPPOX","PF_R","PF_RANDOMIZE","PF_RDS","PF_ROSE","PF_ROUTE","PF_RXRPC","PF_SECURITY","PF_SIGNALED","PF_SNA","PF_SUPERPRIV","PF_TIPC","PF_UNIX","PF_UNSPEC","PF_USED_MATH","PF_USER_WORKER","PF_VCPU","PF_VSOCK","PF_W","PF_WANPIPE","PF_WQ_WORKER","PF_X","PF_X25","PF_XDP","PIDFD_NONBLOCK","PIPE_BUF","PM_STR","POLLERR","POLLHUP","POLLIN","POLLNVAL","POLLOUT","POLLPRI","POLLRDBAND","POLLRDHUP","POLLRDNORM","POLLWRBAND","POLLWRNORM","POSIX_FADV_DONTNEED","POSIX_FADV_NOREUSE","POSIX_FADV_NORMAL","POSIX_FADV_RANDOM","POSIX_FADV_SEQUENTIAL","POSIX_FADV_WILLNEED","POSIX_MADV_DONTNEED","POSIX_MADV_NORMAL","POSIX_MADV_RANDOM","POSIX_MADV_SEQUENTIAL","POSIX_MADV_WILLNEED","POSIX_SPAWN_RESETIDS","POSIX_SPAWN_SETPGROUP","POSIX_SPAWN_SETSCHEDPARAM","POSIX_SPAWN_SETSCHEDULER","POSIX_SPAWN_SETSID","POSIX_SPAWN_SETSIGDEF","POSIX_SPAWN_SETSIGMASK","POSIX_SPAWN_USEVFORK","PRIO_MAX","PRIO_MIN","PRIO_PGRP","PRIO_PROCESS","PRIO_USER","PROC_SUPER_MAGIC","PROT_EXEC","PROT_GROWSDOWN","PROT_GROWSUP","PROT_NONE","PROT_READ","PROT_WRITE","PR_CAPBSET_DROP","PR_CAPBSET_READ","PR_CAP_AMBIENT","PR_CAP_AMBIENT_CLEAR_ALL","PR_CAP_AMBIENT_IS_SET","PR_CAP_AMBIENT_LOWER","PR_CAP_AMBIENT_RAISE","PR_ENDIAN_BIG","PR_ENDIAN_LITTLE","PR_ENDIAN_PPC_LITTLE","PR_FPEMU_NOPRINT","PR_FPEMU_SIGFPE","PR_FP_EXC_ASYNC","PR_FP_EXC_DISABLED","PR_FP_EXC_DIV","PR_FP_EXC_INV","PR_FP_EXC_NONRECOV","PR_FP_EXC_OVF","PR_FP_EXC_PRECISE","PR_FP_EXC_RES","PR_FP_EXC_SW_ENABLE","PR_FP_EXC_UND","PR_FP_MODE_FR","PR_FP_MODE_FRE","PR_GET_CHILD_SUBREAPER","PR_GET_DUMPABLE","PR_GET_ENDIAN","PR_GET_FPEMU","PR_GET_FPEXC","PR_GET_FP_MODE","PR_GET_KEEPCAPS","PR_GET_NAME","PR_GET_NO_NEW_PRIVS","PR_GET_PDEATHSIG","PR_GET_SECCOMP","PR_GET_SECUREBITS","PR_GET_SPECULATION_CTRL","PR_GET_THP_DISABLE","PR_GET_TID_ADDRESS","PR_GET_TIMERSLACK","PR_GET_TIMING","PR_GET_TSC","PR_GET_UNALIGN","PR_MCE_KILL","PR_MCE_KILL_CLEAR","PR_MCE_KILL_DEFAULT","PR_MCE_KILL_EARLY","PR_MCE_KILL_GET","PR_MCE_KILL_LATE","PR_MCE_KILL_SET","PR_MPX_DISABLE_MANAGEMENT","PR_MPX_ENABLE_MANAGEMENT","PR_SCHED_CORE","PR_SCHED_CORE_CREATE","PR_SCHED_CORE_GET","PR_SCHED_CORE_MAX","PR_SCHED_CORE_SCOPE_PROCESS_GROUP","PR_SCHED_CORE_SCOPE_THREAD","PR_SCHED_CORE_SCOPE_THREAD_GROUP","PR_SCHED_CORE_SHARE_FROM","PR_SCHED_CORE_SHARE_TO","PR_SET_CHILD_SUBREAPER","PR_SET_DUMPABLE","PR_SET_ENDIAN","PR_SET_FPEMU","PR_SET_FPEXC","PR_SET_FP_MODE","PR_SET_KEEPCAPS","PR_SET_MM","PR_SET_MM_ARG_END","PR_SET_MM_ARG_START","PR_SET_MM_AUXV","PR_SET_MM_BRK","PR_SET_MM_END_CODE","PR_SET_MM_END_DATA","PR_SET_MM_ENV_END","PR_SET_MM_ENV_START","PR_SET_MM_EXE_FILE","PR_SET_MM_MAP","PR_SET_MM_MAP_SIZE","PR_SET_MM_START_BRK","PR_SET_MM_START_CODE","PR_SET_MM_START_DATA","PR_SET_MM_START_STACK","PR_SET_NAME","PR_SET_NO_NEW_PRIVS","PR_SET_PDEATHSIG","PR_SET_PTRACER","PR_SET_PTRACER_ANY","PR_SET_SECCOMP","PR_SET_SECUREBITS","PR_SET_SPECULATION_CTRL","PR_SET_THP_DISABLE","PR_SET_TIMERSLACK","PR_SET_TIMING","PR_SET_TSC","PR_SET_UNALIGN","PR_SET_VMA","PR_SET_VMA_ANON_NAME","PR_SPEC_DISABLE","PR_SPEC_DISABLE_NOEXEC","PR_SPEC_ENABLE","PR_SPEC_FORCE_DISABLE","PR_SPEC_INDIRECT_BRANCH","PR_SPEC_NOT_AFFECTED","PR_SPEC_PRCTL","PR_SPEC_STORE_BYPASS","PR_TASK_PERF_EVENTS_DISABLE","PR_TASK_PERF_EVENTS_ENABLE","PR_TIMING_STATISTICAL","PR_TIMING_TIMESTAMP","PR_TSC_ENABLE","PR_TSC_SIGSEGV","PR_UNALIGN_NOPRINT","PR_UNALIGN_SIGBUS","PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","PTHREAD_COND_INITIALIZER","PTHREAD_CREATE_DETACHED","PTHREAD_CREATE_JOINABLE","PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","PTHREAD_EXPLICIT_SCHED","PTHREAD_INHERIT_SCHED","PTHREAD_MUTEX_ADAPTIVE_NP","PTHREAD_MUTEX_DEFAULT","PTHREAD_MUTEX_ERRORCHECK","PTHREAD_MUTEX_INITIALIZER","PTHREAD_MUTEX_NORMAL","PTHREAD_MUTEX_RECURSIVE","PTHREAD_MUTEX_ROBUST","PTHREAD_MUTEX_STALLED","PTHREAD_ONCE_INIT","PTHREAD_PRIO_INHERIT","PTHREAD_PRIO_NONE","PTHREAD_PRIO_PROTECT","PTHREAD_PROCESS_PRIVATE","PTHREAD_PROCESS_SHARED","PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","PTHREAD_RWLOCK_INITIALIZER","PTHREAD_STACK_MIN","PTRACE_ATTACH","PTRACE_CONT","PTRACE_DETACH","PTRACE_EVENT_CLONE","PTRACE_EVENT_EXEC","PTRACE_EVENT_EXIT","PTRACE_EVENT_FORK","PTRACE_EVENT_SECCOMP","PTRACE_EVENT_STOP","PTRACE_EVENT_VFORK","PTRACE_EVENT_VFORK_DONE","PTRACE_GETEVENTMSG","PTRACE_GETFPREGS","PTRACE_GETFPXREGS","PTRACE_GETREGS","PTRACE_GETREGSET","PTRACE_GETSIGINFO","PTRACE_GETSIGMASK","PTRACE_GET_RSEQ_CONFIGURATION","PTRACE_GET_SYSCALL_INFO","PTRACE_INTERRUPT","PTRACE_KILL","PTRACE_LISTEN","PTRACE_O_EXITKILL","PTRACE_O_MASK","PTRACE_O_SUSPEND_SECCOMP","PTRACE_O_TRACECLONE","PTRACE_O_TRACEEXEC","PTRACE_O_TRACEEXIT","PTRACE_O_TRACEFORK","PTRACE_O_TRACESECCOMP","PTRACE_O_TRACESYSGOOD","PTRACE_O_TRACEVFORK","PTRACE_O_TRACEVFORKDONE","PTRACE_PEEKDATA","PTRACE_PEEKSIGINFO","PTRACE_PEEKSIGINFO_SHARED","PTRACE_PEEKTEXT","PTRACE_PEEKUSER","PTRACE_POKEDATA","PTRACE_POKETEXT","PTRACE_POKEUSER","PTRACE_SEIZE","PTRACE_SETFPREGS","PTRACE_SETFPXREGS","PTRACE_SETOPTIONS","PTRACE_SETREGS","PTRACE_SETREGSET","PTRACE_SETSIGINFO","PTRACE_SETSIGMASK","PTRACE_SINGLESTEP","PTRACE_SYSCALL","PTRACE_SYSCALL_INFO_ENTRY","PTRACE_SYSCALL_INFO_EXIT","PTRACE_SYSCALL_INFO_NONE","PTRACE_SYSCALL_INFO_SECCOMP","PTRACE_SYSEMU","PTRACE_SYSEMU_SINGLESTEP","PTRACE_TRACEME","PT_DYNAMIC","PT_GNU_EH_FRAME","PT_GNU_RELRO","PT_GNU_STACK","PT_HIOS","PT_HIPROC","PT_HISUNW","PT_INTERP","PT_LOAD","PT_LOOS","PT_LOPROC","PT_LOSUNW","PT_NOTE","PT_NULL","PT_NUM","PT_PHDR","PT_SHLIB","PT_SUNWBSS","PT_SUNWSTACK","PT_TLS","P_ALL","P_PGID","P_PID","P_PIDFD","QCMD","QFMT_VFS_OLD","QFMT_VFS_V0","QFMT_VFS_V1","QIF_ALL","QIF_BLIMITS","QIF_BTIME","QIF_ILIMITS","QIF_INODES","QIF_ITIME","QIF_LIMITS","QIF_SPACE","QIF_TIMES","QIF_USAGE","QNX4_SUPER_MAGIC","QNX6_SUPER_MAGIC","Q_GETFMT","Q_GETINFO","Q_GETQUOTA","Q_QUOTAOFF","Q_QUOTAON","Q_SETINFO","Q_SETQUOTA","Q_SYNC","R10","R11","R12","R13","R14","R15","R8","R9","RADIXCHAR","RAND_MAX","RAX","RBP","RBX","RB_AUTOBOOT","RB_DISABLE_CAD","RB_ENABLE_CAD","RB_HALT_SYSTEM","RB_KEXEC","RB_POWER_OFF","RB_SW_SUSPEND","RCX","RDI","RDTGROUP_SUPER_MAGIC","RDX","READ_IMPLIES_EXEC","REG_BADBR","REG_BADPAT","REG_BADRPT","REG_CR2","REG_CSGSFS","REG_EBRACE","REG_EBRACK","REG_ECOLLATE","REG_ECTYPE","REG_EEND","REG_EESCAPE","REG_EFL","REG_ENOSYS","REG_EPAREN","REG_ERANGE","REG_ERPAREN","REG_ERR","REG_ESIZE","REG_ESPACE","REG_ESUBREG","REG_EXTENDED","REG_ICASE","REG_NEWLINE","REG_NOMATCH","REG_NOSUB","REG_NOTBOL","REG_NOTEOL","REG_OLDMASK","REG_R10","REG_R11","REG_R12","REG_R13","REG_R14","REG_R15","REG_R8","REG_R9","REG_RAX","REG_RBP","REG_RBX","REG_RCX","REG_RDI","REG_RDX","REG_RIP","REG_RSI","REG_RSP","REG_STARTEND","REG_TRAPNO","REISERFS_SUPER_MAGIC","REL_CNT","REL_MAX","RENAME_EXCHANGE","RENAME_NOREPLACE","RENAME_WHITEOUT","REP_CNT","REP_MAX","RESOLVE_BENEATH","RESOLVE_CACHED","RESOLVE_IN_ROOT","RESOLVE_NO_MAGICLINKS","RESOLVE_NO_SYMLINKS","RESOLVE_NO_XDEV","RIP","RLIM64_INFINITY","RLIMIT_AS","RLIMIT_CORE","RLIMIT_CPU","RLIMIT_DATA","RLIMIT_FSIZE","RLIMIT_LOCKS","RLIMIT_MEMLOCK","RLIMIT_MSGQUEUE","RLIMIT_NICE","RLIMIT_NLIMITS","RLIMIT_NOFILE","RLIMIT_NPROC","RLIMIT_RSS","RLIMIT_RTPRIO","RLIMIT_RTTIME","RLIMIT_SIGPENDING","RLIMIT_STACK","RLIM_INFINITY","RLIM_NLIMITS","RLIM_SAVED_CUR","RLIM_SAVED_MAX","RSI","RSP","RTA_CACHEINFO","RTA_DST","RTA_ENCAP","RTA_ENCAP_TYPE","RTA_EXPIRES","RTA_FLOW","RTA_GATEWAY","RTA_IIF","RTA_MARK","RTA_METRICS","RTA_MFC_STATS","RTA_MP_ALGO","RTA_MULTIPATH","RTA_NEWDST","RTA_OIF","RTA_PAD","RTA_PREF","RTA_PREFSRC","RTA_PRIORITY","RTA_PROTOINFO","RTA_SESSION","RTA_SRC","RTA_TABLE","RTA_TTL_PROPAGATE","RTA_UID","RTA_UNSPEC","RTA_VIA","RTCF_DIRECTSRC","RTCF_DOREDIRECT","RTCF_LOG","RTCF_MASQ","RTCF_NAT","RTCF_VALVE","RTEXT_FILTER_BRVLAN","RTEXT_FILTER_BRVLAN_COMPRESSED","RTEXT_FILTER_CFM_CONFIG","RTEXT_FILTER_CFM_STATUS","RTEXT_FILTER_MRP","RTEXT_FILTER_SKIP_STATS","RTEXT_FILTER_VF","RTF_ADDRCLASSMASK","RTF_ADDRCONF","RTF_ALLONLINK","RTF_BROADCAST","RTF_CACHE","RTF_DEFAULT","RTF_DYNAMIC","RTF_FLOW","RTF_GATEWAY","RTF_HOST","RTF_INTERFACE","RTF_IRTT","RTF_LINKRT","RTF_LOCAL","RTF_MODIFIED","RTF_MSS","RTF_MTU","RTF_MULTICAST","RTF_NAT","RTF_NOFORWARD","RTF_NONEXTHOP","RTF_NOPMTUDISC","RTF_POLICY","RTF_REINSTATE","RTF_REJECT","RTF_STATIC","RTF_THROW","RTF_UP","RTF_WINDOW","RTF_XRESOLVE","RTLD_DEEPBIND","RTLD_DEFAULT","RTLD_DI_CONFIGADDR","RTLD_DI_LINKMAP","RTLD_DI_LMID","RTLD_DI_ORIGIN","RTLD_DI_PROFILENAME","RTLD_DI_PROFILEOUT","RTLD_DI_SERINFO","RTLD_DI_SERINFOSIZE","RTLD_DI_TLS_DATA","RTLD_DI_TLS_MODID","RTLD_GLOBAL","RTLD_LAZY","RTLD_LOCAL","RTLD_NEXT","RTLD_NODELETE","RTLD_NOLOAD","RTLD_NOW","RTMGRP_DECnet_IFADDR","RTMGRP_DECnet_ROUTE","RTMGRP_IPV4_IFADDR","RTMGRP_IPV4_MROUTE","RTMGRP_IPV4_ROUTE","RTMGRP_IPV4_RULE","RTMGRP_IPV6_IFADDR","RTMGRP_IPV6_IFINFO","RTMGRP_IPV6_MROUTE","RTMGRP_IPV6_PREFIX","RTMGRP_IPV6_ROUTE","RTMGRP_LINK","RTMGRP_NEIGH","RTMGRP_NOTIFY","RTMGRP_TC","RTMSG_AR_FAILED","RTMSG_CONTROL","RTMSG_DELDEVICE","RTMSG_DELROUTE","RTMSG_DELRULE","RTMSG_NEWDEVICE","RTMSG_NEWROUTE","RTMSG_NEWRULE","RTMSG_OVERRUN","RTM_DELACTION","RTM_DELADDR","RTM_DELADDRLABEL","RTM_DELLINK","RTM_DELMDB","RTM_DELNEIGH","RTM_DELNETCONF","RTM_DELNSID","RTM_DELQDISC","RTM_DELROUTE","RTM_DELRULE","RTM_DELTCLASS","RTM_DELTFILTER","RTM_F_CLONED","RTM_F_EQUALIZE","RTM_F_FIB_MATCH","RTM_F_LOOKUP_TABLE","RTM_F_NOTIFY","RTM_F_PREFIX","RTM_GETACTION","RTM_GETADDR","RTM_GETADDRLABEL","RTM_GETANYCAST","RTM_GETDCB","RTM_GETLINK","RTM_GETMDB","RTM_GETMULTICAST","RTM_GETNEIGH","RTM_GETNEIGHTBL","RTM_GETNETCONF","RTM_GETNSID","RTM_GETQDISC","RTM_GETROUTE","RTM_GETRULE","RTM_GETSTATS","RTM_GETTCLASS","RTM_GETTFILTER","RTM_NEWACTION","RTM_NEWADDR","RTM_NEWADDRLABEL","RTM_NEWCACHEREPORT","RTM_NEWLINK","RTM_NEWMDB","RTM_NEWNDUSEROPT","RTM_NEWNEIGH","RTM_NEWNEIGHTBL","RTM_NEWNETCONF","RTM_NEWNSID","RTM_NEWPREFIX","RTM_NEWQDISC","RTM_NEWROUTE","RTM_NEWRULE","RTM_NEWSTATS","RTM_NEWTCLASS","RTM_NEWTFILTER","RTM_SETDCB","RTM_SETLINK","RTM_SETNEIGHTBL","RTNLGRP_BRVLAN","RTNLGRP_DCB","RTNLGRP_DECnet_IFADDR","RTNLGRP_DECnet_ROUTE","RTNLGRP_DECnet_RULE","RTNLGRP_IPV4_IFADDR","RTNLGRP_IPV4_MROUTE","RTNLGRP_IPV4_MROUTE_R","RTNLGRP_IPV4_NETCONF","RTNLGRP_IPV4_ROUTE","RTNLGRP_IPV4_RULE","RTNLGRP_IPV6_IFADDR","RTNLGRP_IPV6_IFINFO","RTNLGRP_IPV6_MROUTE","RTNLGRP_IPV6_MROUTE_R","RTNLGRP_IPV6_NETCONF","RTNLGRP_IPV6_PREFIX","RTNLGRP_IPV6_ROUTE","RTNLGRP_IPV6_RULE","RTNLGRP_LINK","RTNLGRP_MCTP_IFADDR","RTNLGRP_MDB","RTNLGRP_MPLS_NETCONF","RTNLGRP_MPLS_ROUTE","RTNLGRP_ND_USEROPT","RTNLGRP_NEIGH","RTNLGRP_NEXTHOP","RTNLGRP_NONE","RTNLGRP_NOP2","RTNLGRP_NOP4","RTNLGRP_NOTIFY","RTNLGRP_NSID","RTNLGRP_PHONET_IFADDR","RTNLGRP_PHONET_ROUTE","RTNLGRP_STATS","RTNLGRP_TC","RTNLGRP_TUNNEL","RTN_ANYCAST","RTN_BLACKHOLE","RTN_BROADCAST","RTN_LOCAL","RTN_MULTICAST","RTN_NAT","RTN_PROHIBIT","RTN_THROW","RTN_UNICAST","RTN_UNREACHABLE","RTN_UNSPEC","RTN_XRESOLVE","RTPROT_BOOT","RTPROT_KERNEL","RTPROT_REDIRECT","RTPROT_STATIC","RTPROT_UNSPEC","RT_ADDRCLASS","RT_CLASS_DEFAULT","RT_CLASS_LOCAL","RT_CLASS_MAIN","RT_CLASS_MAX","RT_CLASS_UNSPEC","RT_LOCALADDR","RT_SCOPE_HOST","RT_SCOPE_LINK","RT_SCOPE_NOWHERE","RT_SCOPE_SITE","RT_SCOPE_UNIVERSE","RT_TABLE_COMPAT","RT_TABLE_DEFAULT","RT_TABLE_LOCAL","RT_TABLE_MAIN","RT_TABLE_UNSPEC","RT_TOS","RUN_LVL","RUSAGE_CHILDREN","RUSAGE_SELF","RUSAGE_THREAD","RWF_APPEND","RWF_DSYNC","RWF_HIPRI","RWF_NOWAIT","RWF_SYNC","R_OK","SA_NOCLDSTOP","SA_NOCLDWAIT","SA_NODEFER","SA_ONSTACK","SA_RESETHAND","SA_RESTART","SA_SIGINFO","SCHED_BATCH","SCHED_DEADLINE","SCHED_FIFO","SCHED_FLAG_ALL","SCHED_FLAG_DL_OVERRUN","SCHED_FLAG_KEEP_ALL","SCHED_FLAG_KEEP_PARAMS","SCHED_FLAG_KEEP_POLICY","SCHED_FLAG_RECLAIM","SCHED_FLAG_RESET_ON_FORK","SCHED_FLAG_UTIL_CLAMP","SCHED_FLAG_UTIL_CLAMP_MAX","SCHED_FLAG_UTIL_CLAMP_MIN","SCHED_IDLE","SCHED_NORMAL","SCHED_OTHER","SCHED_RESET_ON_FORK","SCHED_RR","SCM_CREDENTIALS","SCM_J1939_DEST_ADDR","SCM_J1939_DEST_NAME","SCM_J1939_ERRQUEUE","SCM_J1939_PRIO","SCM_RIGHTS","SCM_TIMESTAMP","SCM_TIMESTAMPING","SCM_TIMESTAMPING_OPT_STATS","SCM_TIMESTAMPING_PKTINFO","SCM_TIMESTAMPNS","SCM_TXTIME","SCM_WIFI_STATUS","SCTP_ABORT","SCTP_ADAPTATION_LAYER","SCTP_ADDR_OVER","SCTP_ALL_ASSOC","SCTP_ASSOCINFO","SCTP_AUTHINFO","SCTP_AUTH_ACTIVE_KEY","SCTP_AUTH_CHUNK","SCTP_AUTH_DEACTIVATE_KEY","SCTP_AUTH_DELETE_KEY","SCTP_AUTH_KEY","SCTP_AUTOCLOSE","SCTP_AUTO_ASCONF","SCTP_CONTEXT","SCTP_CURRENT_ASSOC","SCTP_DEFAULT_SEND_PARAM","SCTP_DEFAULT_SNDINFO","SCTP_DELAYED_ACK","SCTP_DELAYED_ACK_TIME","SCTP_DELAYED_SACK","SCTP_DISABLE_FRAGMENTS","SCTP_DSTADDRV4","SCTP_DSTADDRV6","SCTP_ENABLE_CHANGE_ASSOC_REQ","SCTP_ENABLE_RESET_ASSOC_REQ","SCTP_ENABLE_RESET_STREAM_REQ","SCTP_ENABLE_STRRESET_MASK","SCTP_EOF","SCTP_EVENTS","SCTP_FRAGMENT_INTERLEAVE","SCTP_FUTURE_ASSOC","SCTP_GET_ASSOC_ID_LIST","SCTP_GET_ASSOC_NUMBER","SCTP_GET_PEER_ADDR_INFO","SCTP_HMAC_IDENT","SCTP_INIT","SCTP_INITMSG","SCTP_I_WANT_MAPPED_V4_ADDR","SCTP_LOCAL_AUTH_CHUNKS","SCTP_MAXSEG","SCTP_MAX_BURST","SCTP_NODELAY","SCTP_NOTIFICATION","SCTP_NXTINFO","SCTP_PARTIAL_DELIVERY_POINT","SCTP_PEER_ADDR_PARAMS","SCTP_PEER_ADDR_THLDS","SCTP_PEER_ADDR_THLDS_V2","SCTP_PEER_AUTH_CHUNKS","SCTP_PRIMARY_ADDR","SCTP_PRINFO","SCTP_PR_INDEX","SCTP_PR_POLICY","SCTP_PR_PRIO_ENABLED","SCTP_PR_RTX_ENABLED","SCTP_PR_SCTP_ALL","SCTP_PR_SCTP_MASK","SCTP_PR_SCTP_MAX","SCTP_PR_SCTP_NONE","SCTP_PR_SCTP_PRIO","SCTP_PR_SCTP_RTX","SCTP_PR_SCTP_TTL","SCTP_PR_SET_POLICY","SCTP_PR_TTL_ENABLED","SCTP_RCVINFO","SCTP_RECVNXTINFO","SCTP_RECVRCVINFO","SCTP_REUSE_PORT","SCTP_RTOINFO","SCTP_SACK_IMMEDIATELY","SCTP_SENDALL","SCTP_SET_PEER_PRIMARY_ADDR","SCTP_SNDINFO","SCTP_SNDRCV","SCTP_STATUS","SCTP_STREAM_RESET_INCOMING","SCTP_STREAM_RESET_OUTGOING","SCTP_UNORDERED","SECCOMP_ADDFD_FLAG_SEND","SECCOMP_ADDFD_FLAG_SETFD","SECCOMP_FILTER_FLAG_LOG","SECCOMP_FILTER_FLAG_NEW_LISTENER","SECCOMP_FILTER_FLAG_SPEC_ALLOW","SECCOMP_FILTER_FLAG_TSYNC","SECCOMP_FILTER_FLAG_TSYNC_ESRCH","SECCOMP_FILTER_FLAG_WAIT_KILLABLE_RECV","SECCOMP_GET_ACTION_AVAIL","SECCOMP_GET_NOTIF_SIZES","SECCOMP_MODE_DISABLED","SECCOMP_MODE_FILTER","SECCOMP_MODE_STRICT","SECCOMP_RET_ACTION","SECCOMP_RET_ACTION_FULL","SECCOMP_RET_ALLOW","SECCOMP_RET_DATA","SECCOMP_RET_ERRNO","SECCOMP_RET_KILL","SECCOMP_RET_KILL_PROCESS","SECCOMP_RET_KILL_THREAD","SECCOMP_RET_LOG","SECCOMP_RET_TRACE","SECCOMP_RET_TRAP","SECCOMP_SET_MODE_FILTER","SECCOMP_SET_MODE_STRICT","SECCOMP_USER_NOTIF_FLAG_CONTINUE","SECURITYFS_MAGIC","SEEK_CUR","SEEK_DATA","SEEK_END","SEEK_HOLE","SEEK_SET","SELFMAG","SELINUX_MAGIC","SEM_FAILED","SFD_CLOEXEC","SFD_NONBLOCK","SHM_EXEC","SHM_HUGETLB","SHM_LOCK","SHM_NORESERVE","SHM_R","SHM_RDONLY","SHM_REMAP","SHM_RND","SHM_UNLOCK","SHM_W","SHORT_INODE","SHUT_RD","SHUT_RDWR","SHUT_WR","SIGABRT","SIGALRM","SIGBUS","SIGCHLD","SIGCONT","SIGEV_NONE","SIGEV_SIGNAL","SIGEV_THREAD","SIGEV_THREAD_ID","SIGFPE","SIGHUP","SIGILL","SIGINT","SIGIO","SIGIOT","SIGKILL","SIGPIPE","SIGPOLL","SIGPROF","SIGPWR","SIGQUIT","SIGRTMAX","SIGRTMIN","SIGSEGV","SIGSTKFLT","SIGSTKSZ","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGUNUSED","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","SIG_BLOCK","SIG_DFL","SIG_ERR","SIG_IGN","SIG_SETMASK","SIG_UNBLOCK","SIOCADDMULTI","SIOCADDRT","SIOCDARP","SIOCDELMULTI","SIOCDELRT","SIOCDIFADDR","SIOCDRARP","SIOCETHTOOL","SIOCGARP","SIOCGHWTSTAMP","SIOCGIFADDR","SIOCGIFBR","SIOCGIFBRDADDR","SIOCGIFCONF","SIOCGIFCOUNT","SIOCGIFDSTADDR","SIOCGIFENCAP","SIOCGIFFLAGS","SIOCGIFHWADDR","SIOCGIFINDEX","SIOCGIFMAP","SIOCGIFMEM","SIOCGIFMETRIC","SIOCGIFMTU","SIOCGIFNAME","SIOCGIFNETMASK","SIOCGIFPFLAGS","SIOCGIFSLAVE","SIOCGIFTXQLEN","SIOCGIWAP","SIOCGIWAPLIST","SIOCGIWAUTH","SIOCGIWENCODE","SIOCGIWENCODEEXT","SIOCGIWESSID","SIOCGIWFRAG","SIOCGIWFREQ","SIOCGIWGENIE","SIOCGIWMODE","SIOCGIWNAME","SIOCGIWNICKN","SIOCGIWNWID","SIOCGIWPOWER","SIOCGIWPRIV","SIOCGIWRANGE","SIOCGIWRATE","SIOCGIWRETRY","SIOCGIWRTS","SIOCGIWSCAN","SIOCGIWSENS","SIOCGIWSPY","SIOCGIWSTATS","SIOCGIWTHRSPY","SIOCGIWTXPOW","SIOCGMIIPHY","SIOCGMIIREG","SIOCGRARP","SIOCGSKNS","SIOCIWFIRST","SIOCIWFIRSTPRIV","SIOCIWLAST","SIOCIWLASTPRIV","SIOCOUTQNSD","SIOCSARP","SIOCSHWTSTAMP","SIOCSIFADDR","SIOCSIFBR","SIOCSIFBRDADDR","SIOCSIFDSTADDR","SIOCSIFENCAP","SIOCSIFFLAGS","SIOCSIFHWADDR","SIOCSIFHWBROADCAST","SIOCSIFLINK","SIOCSIFMAP","SIOCSIFMEM","SIOCSIFMETRIC","SIOCSIFMTU","SIOCSIFNAME","SIOCSIFNETMASK","SIOCSIFPFLAGS","SIOCSIFSLAVE","SIOCSIFTXQLEN","SIOCSIWAP","SIOCSIWAUTH","SIOCSIWCOMMIT","SIOCSIWENCODE","SIOCSIWENCODEEXT","SIOCSIWESSID","SIOCSIWFRAG","SIOCSIWFREQ","SIOCSIWGENIE","SIOCSIWMLME","SIOCSIWMODE","SIOCSIWNICKN","SIOCSIWNWID","SIOCSIWPMKSA","SIOCSIWPOWER","SIOCSIWPRIV","SIOCSIWRANGE","SIOCSIWRATE","SIOCSIWRETRY","SIOCSIWRTS","SIOCSIWSCAN","SIOCSIWSENS","SIOCSIWSPY","SIOCSIWSTATS","SIOCSIWTHRSPY","SIOCSIWTXPOW","SIOCSMIIREG","SIOCSRARP","SIOCWANDEV","SIOGIFINDEX","SI_LOAD_SHIFT","SKF_AD_ALU_XOR_X","SKF_AD_CPU","SKF_AD_HATYPE","SKF_AD_IFINDEX","SKF_AD_MARK","SKF_AD_MAX","SKF_AD_NLATTR","SKF_AD_NLATTR_NEST","SKF_AD_OFF","SKF_AD_PAY_OFFSET","SKF_AD_PKTTYPE","SKF_AD_PROTOCOL","SKF_AD_QUEUE","SKF_AD_RANDOM","SKF_AD_RXHASH","SKF_AD_VLAN_TAG","SKF_AD_VLAN_TAG_PRESENT","SKF_AD_VLAN_TPID","SKF_LL_OFF","SKF_NET_OFF","SK_MEMINFO_BACKLOG","SK_MEMINFO_DROPS","SK_MEMINFO_FWD_ALLOC","SK_MEMINFO_OPTMEM","SK_MEMINFO_RCVBUF","SK_MEMINFO_RMEM_ALLOC","SK_MEMINFO_SNDBUF","SK_MEMINFO_WMEM_ALLOC","SK_MEMINFO_WMEM_QUEUED","SMACK_MAGIC","SMB_SUPER_MAGIC","SND_CNT","SND_MAX","SOCK_CLOEXEC","SOCK_DCCP","SOCK_DGRAM","SOCK_NONBLOCK","SOCK_PACKET","SOCK_RAW","SOCK_RDM","SOCK_SEQPACKET","SOCK_STREAM","SOF_TIMESTAMPING_OPT_CMSG","SOF_TIMESTAMPING_OPT_ID","SOF_TIMESTAMPING_OPT_PKTINFO","SOF_TIMESTAMPING_OPT_STATS","SOF_TIMESTAMPING_OPT_TSONLY","SOF_TIMESTAMPING_OPT_TX_SWHW","SOF_TIMESTAMPING_RAW_HARDWARE","SOF_TIMESTAMPING_RX_HARDWARE","SOF_TIMESTAMPING_RX_SOFTWARE","SOF_TIMESTAMPING_SOFTWARE","SOF_TIMESTAMPING_SYS_HARDWARE","SOF_TIMESTAMPING_TX_ACK","SOF_TIMESTAMPING_TX_HARDWARE","SOF_TIMESTAMPING_TX_SCHED","SOF_TIMESTAMPING_TX_SOFTWARE","SOF_TXTIME_DEADLINE_MODE","SOF_TXTIME_REPORT_ERRORS","SOL_AAL","SOL_ALG","SOL_ATM","SOL_BLUETOOTH","SOL_CAIF","SOL_CAN_BASE","SOL_CAN_J1939","SOL_CAN_RAW","SOL_DCCP","SOL_DECNET","SOL_ICMPV6","SOL_IP","SOL_IPV6","SOL_IRDA","SOL_IUCV","SOL_LLC","SOL_NETBEUI","SOL_NETLINK","SOL_NFC","SOL_PACKET","SOL_PNPIPE","SOL_PPPOL2TP","SOL_RAW","SOL_RDS","SOL_RXRPC","SOL_SOCKET","SOL_TCP","SOL_TIPC","SOL_TLS","SOL_UDP","SOL_X25","SOL_XDP","SOMAXCONN","SO_ACCEPTCONN","SO_ATTACH_BPF","SO_ATTACH_FILTER","SO_ATTACH_REUSEPORT_CBPF","SO_ATTACH_REUSEPORT_EBPF","SO_BINDTODEVICE","SO_BINDTOIFINDEX","SO_BPF_EXTENSIONS","SO_BROADCAST","SO_BSDCOMPAT","SO_BUSY_POLL","SO_CNX_ADVICE","SO_COOKIE","SO_DEBUG","SO_DETACH_BPF","SO_DETACH_FILTER","SO_DETACH_REUSEPORT_BPF","SO_DOMAIN","SO_DONTROUTE","SO_EE_OFFENDER","SO_EE_ORIGIN_ICMP","SO_EE_ORIGIN_ICMP6","SO_EE_ORIGIN_LOCAL","SO_EE_ORIGIN_NONE","SO_EE_ORIGIN_TIMESTAMPING","SO_EE_ORIGIN_TXSTATUS","SO_ERROR","SO_GET_FILTER","SO_INCOMING_CPU","SO_INCOMING_NAPI_ID","SO_J1939_ERRQUEUE","SO_J1939_FILTER","SO_J1939_PROMISC","SO_J1939_SEND_PRIO","SO_KEEPALIVE","SO_LINGER","SO_LOCK_FILTER","SO_MARK","SO_MAX_PACING_RATE","SO_MEMINFO","SO_NOFCS","SO_NO_CHECK","SO_OOBINLINE","SO_ORIGINAL_DST","SO_PASSCRED","SO_PASSSEC","SO_PEEK_OFF","SO_PEERCRED","SO_PEERGROUPS","SO_PEERNAME","SO_PEERSEC","SO_PRIORITY","SO_PROTOCOL","SO_RCVBUF","SO_RCVBUFFORCE","SO_RCVLOWAT","SO_RCVTIMEO","SO_RCVTIMEO_NEW","SO_REUSEADDR","SO_REUSEPORT","SO_RXQ_OVFL","SO_SECURITY_AUTHENTICATION","SO_SECURITY_ENCRYPTION_NETWORK","SO_SECURITY_ENCRYPTION_TRANSPORT","SO_SELECT_ERR_QUEUE","SO_SNDBUF","SO_SNDBUFFORCE","SO_SNDLOWAT","SO_SNDTIMEO","SO_SNDTIMEO_NEW","SO_TIMESTAMP","SO_TIMESTAMPING","SO_TIMESTAMPING_NEW","SO_TIMESTAMPNS","SO_TIMESTAMPNS_NEW","SO_TIMESTAMP_NEW","SO_TXTIME","SO_TYPE","SO_WIFI_STATUS","SO_ZEROCOPY","SPLICE_F_GIFT","SPLICE_F_MORE","SPLICE_F_MOVE","SPLICE_F_NONBLOCK","SS","SS_DISABLE","SS_ONSTACK","STATX_ALL","STATX_ATIME","STATX_ATTR_APPEND","STATX_ATTR_AUTOMOUNT","STATX_ATTR_COMPRESSED","STATX_ATTR_DAX","STATX_ATTR_ENCRYPTED","STATX_ATTR_IMMUTABLE","STATX_ATTR_MOUNT_ROOT","STATX_ATTR_NODUMP","STATX_ATTR_VERITY","STATX_BASIC_STATS","STATX_BLOCKS","STATX_BTIME","STATX_CTIME","STATX_DIOALIGN","STATX_GID","STATX_INO","STATX_MNT_ID","STATX_MODE","STATX_MTIME","STATX_NLINK","STATX_SIZE","STATX_TYPE","STATX_UID","STATX__RESERVED","STA_CLK","STA_CLOCKERR","STA_DEL","STA_FLL","STA_FREQHOLD","STA_INS","STA_MODE","STA_NANO","STA_PLL","STA_PPSERROR","STA_PPSFREQ","STA_PPSJITTER","STA_PPSSIGNAL","STA_PPSTIME","STA_PPSWANDER","STA_RONLY","STA_UNSYNC","STDERR_FILENO","STDIN_FILENO","STDOUT_FILENO","STICKY_TIMEOUTS","ST_APPEND","ST_IMMUTABLE","ST_MANDLOCK","ST_NOATIME","ST_NODEV","ST_NODIRATIME","ST_NOEXEC","ST_NOSUID","ST_RDONLY","ST_RELATIME","ST_SYNCHRONOUS","ST_WRITE","SW_CNT","SW_MAX","SYNC_FILE_RANGE_WAIT_AFTER","SYNC_FILE_RANGE_WAIT_BEFORE","SYNC_FILE_RANGE_WRITE","SYN_CNT","SYN_MAX","SYSFS_MAGIC","SYS__sysctl","SYS_accept","SYS_accept4","SYS_access","SYS_acct","SYS_add_key","SYS_adjtimex","SYS_afs_syscall","SYS_alarm","SYS_arch_prctl","SYS_bind","SYS_bpf","SYS_brk","SYS_capget","SYS_capset","SYS_chdir","SYS_chmod","SYS_chown","SYS_chroot","SYS_clock_adjtime","SYS_clock_getres","SYS_clock_gettime","SYS_clock_nanosleep","SYS_clock_settime","SYS_clone","SYS_clone3","SYS_close","SYS_close_range","SYS_connect","SYS_copy_file_range","SYS_creat","SYS_create_module","SYS_delete_module","SYS_dup","SYS_dup2","SYS_dup3","SYS_epoll_create","SYS_epoll_create1","SYS_epoll_ctl","SYS_epoll_ctl_old","SYS_epoll_pwait","SYS_epoll_pwait2","SYS_epoll_wait","SYS_epoll_wait_old","SYS_eventfd","SYS_eventfd2","SYS_execve","SYS_execveat","SYS_exit","SYS_exit_group","SYS_faccessat","SYS_faccessat2","SYS_fadvise64","SYS_fallocate","SYS_fanotify_init","SYS_fanotify_mark","SYS_fchdir","SYS_fchmod","SYS_fchmodat","SYS_fchown","SYS_fchownat","SYS_fcntl","SYS_fdatasync","SYS_fgetxattr","SYS_finit_module","SYS_flistxattr","SYS_flock","SYS_fork","SYS_fremovexattr","SYS_fsconfig","SYS_fsetxattr","SYS_fsmount","SYS_fsopen","SYS_fspick","SYS_fstat","SYS_fstatfs","SYS_fsync","SYS_ftruncate","SYS_futex","SYS_futex_waitv","SYS_futimesat","SYS_get_kernel_syms","SYS_get_mempolicy","SYS_get_robust_list","SYS_get_thread_area","SYS_getcpu","SYS_getcwd","SYS_getdents","SYS_getdents64","SYS_getegid","SYS_geteuid","SYS_getgid","SYS_getgroups","SYS_getitimer","SYS_getpeername","SYS_getpgid","SYS_getpgrp","SYS_getpid","SYS_getpmsg","SYS_getppid","SYS_getpriority","SYS_getrandom","SYS_getresgid","SYS_getresuid","SYS_getrlimit","SYS_getrusage","SYS_getsid","SYS_getsockname","SYS_getsockopt","SYS_gettid","SYS_gettimeofday","SYS_getuid","SYS_getxattr","SYS_init_module","SYS_inotify_add_watch","SYS_inotify_init","SYS_inotify_init1","SYS_inotify_rm_watch","SYS_io_cancel","SYS_io_destroy","SYS_io_getevents","SYS_io_setup","SYS_io_submit","SYS_io_uring_enter","SYS_io_uring_register","SYS_io_uring_setup","SYS_ioctl","SYS_ioperm","SYS_iopl","SYS_ioprio_get","SYS_ioprio_set","SYS_kcmp","SYS_kexec_file_load","SYS_kexec_load","SYS_keyctl","SYS_kill","SYS_landlock_add_rule","SYS_landlock_create_ruleset","SYS_landlock_restrict_self","SYS_lchown","SYS_lgetxattr","SYS_link","SYS_linkat","SYS_listen","SYS_listxattr","SYS_llistxattr","SYS_lookup_dcookie","SYS_lremovexattr","SYS_lseek","SYS_lsetxattr","SYS_lstat","SYS_madvise","SYS_mbind","SYS_membarrier","SYS_memfd_create","SYS_memfd_secret","SYS_migrate_pages","SYS_mincore","SYS_mkdir","SYS_mkdirat","SYS_mknod","SYS_mknodat","SYS_mlock","SYS_mlock2","SYS_mlockall","SYS_mmap","SYS_modify_ldt","SYS_mount","SYS_mount_setattr","SYS_move_mount","SYS_move_pages","SYS_mprotect","SYS_mq_getsetattr","SYS_mq_notify","SYS_mq_open","SYS_mq_timedreceive","SYS_mq_timedsend","SYS_mq_unlink","SYS_mremap","SYS_msgctl","SYS_msgget","SYS_msgrcv","SYS_msgsnd","SYS_msync","SYS_munlock","SYS_munlockall","SYS_munmap","SYS_name_to_handle_at","SYS_nanosleep","SYS_newfstatat","SYS_nfsservctl","SYS_open","SYS_open_by_handle_at","SYS_open_tree","SYS_openat","SYS_openat2","SYS_pause","SYS_perf_event_open","SYS_personality","SYS_pidfd_getfd","SYS_pidfd_open","SYS_pidfd_send_signal","SYS_pipe","SYS_pipe2","SYS_pivot_root","SYS_pkey_alloc","SYS_pkey_free","SYS_pkey_mprotect","SYS_poll","SYS_ppoll","SYS_prctl","SYS_pread64","SYS_preadv","SYS_preadv2","SYS_prlimit64","SYS_process_madvise","SYS_process_mrelease","SYS_process_vm_readv","SYS_process_vm_writev","SYS_pselect6","SYS_ptrace","SYS_putpmsg","SYS_pwrite64","SYS_pwritev","SYS_pwritev2","SYS_query_module","SYS_quotactl","SYS_quotactl_fd","SYS_read","SYS_readahead","SYS_readlink","SYS_readlinkat","SYS_readv","SYS_reboot","SYS_recvfrom","SYS_recvmmsg","SYS_recvmsg","SYS_remap_file_pages","SYS_removexattr","SYS_rename","SYS_renameat","SYS_renameat2","SYS_request_key","SYS_restart_syscall","SYS_rmdir","SYS_rseq","SYS_rt_sigaction","SYS_rt_sigpending","SYS_rt_sigprocmask","SYS_rt_sigqueueinfo","SYS_rt_sigreturn","SYS_rt_sigsuspend","SYS_rt_sigtimedwait","SYS_rt_tgsigqueueinfo","SYS_sched_get_priority_max","SYS_sched_get_priority_min","SYS_sched_getaffinity","SYS_sched_getattr","SYS_sched_getparam","SYS_sched_getscheduler","SYS_sched_rr_get_interval","SYS_sched_setaffinity","SYS_sched_setattr","SYS_sched_setparam","SYS_sched_setscheduler","SYS_sched_yield","SYS_seccomp","SYS_security","SYS_select","SYS_semctl","SYS_semget","SYS_semop","SYS_semtimedop","SYS_sendfile","SYS_sendmmsg","SYS_sendmsg","SYS_sendto","SYS_set_mempolicy","SYS_set_mempolicy_home_node","SYS_set_robust_list","SYS_set_thread_area","SYS_set_tid_address","SYS_setdomainname","SYS_setfsgid","SYS_setfsuid","SYS_setgid","SYS_setgroups","SYS_sethostname","SYS_setitimer","SYS_setns","SYS_setpgid","SYS_setpriority","SYS_setregid","SYS_setresgid","SYS_setresuid","SYS_setreuid","SYS_setrlimit","SYS_setsid","SYS_setsockopt","SYS_settimeofday","SYS_setuid","SYS_setxattr","SYS_shmat","SYS_shmctl","SYS_shmdt","SYS_shmget","SYS_shutdown","SYS_sigaltstack","SYS_signalfd","SYS_signalfd4","SYS_socket","SYS_socketpair","SYS_splice","SYS_stat","SYS_statfs","SYS_statx","SYS_swapoff","SYS_swapon","SYS_symlink","SYS_symlinkat","SYS_sync","SYS_sync_file_range","SYS_syncfs","SYS_sysfs","SYS_sysinfo","SYS_syslog","SYS_tee","SYS_tgkill","SYS_time","SYS_timer_create","SYS_timer_delete","SYS_timer_getoverrun","SYS_timer_gettime","SYS_timer_settime","SYS_timerfd_create","SYS_timerfd_gettime","SYS_timerfd_settime","SYS_times","SYS_tkill","SYS_truncate","SYS_tuxcall","SYS_umask","SYS_umount2","SYS_uname","SYS_unlink","SYS_unlinkat","SYS_unshare","SYS_uselib","SYS_userfaultfd","SYS_ustat","SYS_utime","SYS_utimensat","SYS_utimes","SYS_vfork","SYS_vhangup","SYS_vmsplice","SYS_vserver","SYS_wait4","SYS_waitid","SYS_write","SYS_writev","S_IEXEC","S_IFBLK","S_IFCHR","S_IFDIR","S_IFIFO","S_IFLNK","S_IFMT","S_IFREG","S_IFSOCK","S_IREAD","S_IRGRP","S_IROTH","S_IRUSR","S_IRWXG","S_IRWXO","S_IRWXU","S_ISGID","S_ISUID","S_ISVTX","S_IWGRP","S_IWOTH","S_IWRITE","S_IWUSR","S_IXGRP","S_IXOTH","S_IXUSR","TAB0","TAB1","TAB2","TAB3","TABDLY","TCA_CHAIN","TCA_DUMP_INVISIBLE","TCA_FCNT","TCA_HW_OFFLOAD","TCA_KIND","TCA_OPTIONS","TCA_PAD","TCA_RATE","TCA_STAB","TCA_STATS","TCA_STATS2","TCA_UNSPEC","TCA_XSTATS","TCFLSH","TCGETA","TCGETS","TCGETS2","TCGETX","TCIFLUSH","TCIOFF","TCIOFLUSH","TCION","TCOFLUSH","TCOOFF","TCOON","TCP_CC_INFO","TCP_CM_INQ","TCP_CONGESTION","TCP_COOKIE_TRANSACTIONS","TCP_CORK","TCP_DEFER_ACCEPT","TCP_FASTOPEN","TCP_FASTOPEN_CONNECT","TCP_FASTOPEN_KEY","TCP_FASTOPEN_NO_COOKIE","TCP_INFO","TCP_INQ","TCP_KEEPCNT","TCP_KEEPIDLE","TCP_KEEPINTVL","TCP_LINGER2","TCP_MAXSEG","TCP_MD5SIG","TCP_MD5SIG_EXT","TCP_MD5SIG_MAXKEYLEN","TCP_NODELAY","TCP_NOTSENT_LOWAT","TCP_QUEUE_SEQ","TCP_QUICKACK","TCP_REPAIR","TCP_REPAIR_OPTIONS","TCP_REPAIR_QUEUE","TCP_REPAIR_WINDOW","TCP_SAVED_SYN","TCP_SAVE_SYN","TCP_SYNCNT","TCP_THIN_DUPACK","TCP_THIN_LINEAR_TIMEOUTS","TCP_TIMESTAMP","TCP_ULP","TCP_USER_TIMEOUT","TCP_WINDOW_CLAMP","TCP_ZEROCOPY_RECEIVE","TCSADRAIN","TCSAFLUSH","TCSANOW","TCSBRK","TCSBRKP","TCSETA","TCSETAF","TCSETAW","TCSETS","TCSETS2","TCSETSF","TCSETSF2","TCSETSW","TCSETSW2","TCSETX","TCSETXF","TCSETXW","TCXONC","TFD_CLOEXEC","TFD_NONBLOCK","TFD_TIMER_ABSTIME","TFD_TIMER_CANCEL_ON_SET","THOUSEP","TIMER_ABSTIME","TIME_BAD","TIME_DEL","TIME_ERROR","TIME_INS","TIME_OK","TIME_OOP","TIME_WAIT","TIOCCBRK","TIOCCONS","TIOCEXCL","TIOCGDEV","TIOCGETD","TIOCGEXCL","TIOCGICOUNT","TIOCGLCKTRMIOS","TIOCGPGRP","TIOCGPKT","TIOCGPTLCK","TIOCGPTN","TIOCGPTPEER","TIOCGRS485","TIOCGSERIAL","TIOCGSID","TIOCGSOFTCAR","TIOCGWINSZ","TIOCINQ","TIOCLINUX","TIOCMBIC","TIOCMBIS","TIOCMGET","TIOCMIWAIT","TIOCMSET","TIOCM_CAR","TIOCM_CD","TIOCM_CTS","TIOCM_DSR","TIOCM_DTR","TIOCM_LE","TIOCM_RI","TIOCM_RNG","TIOCM_RTS","TIOCM_SR","TIOCM_ST","TIOCNOTTY","TIOCNXCL","TIOCOUTQ","TIOCPKT","TIOCSBRK","TIOCSCTTY","TIOCSERCONFIG","TIOCSERGETLSR","TIOCSERGETMULTI","TIOCSERGSTRUCT","TIOCSERGWILD","TIOCSERSETMULTI","TIOCSERSWILD","TIOCSETD","TIOCSIG","TIOCSLCKTRMIOS","TIOCSPGRP","TIOCSPTLCK","TIOCSRS485","TIOCSSERIAL","TIOCSSOFTCAR","TIOCSTI","TIOCSWINSZ","TIOCVHANGUP","TLS_1_2_VERSION","TLS_1_2_VERSION_MAJOR","TLS_1_2_VERSION_MINOR","TLS_1_3_VERSION","TLS_1_3_VERSION_MAJOR","TLS_1_3_VERSION_MINOR","TLS_CIPHER_AES_GCM_128","TLS_CIPHER_AES_GCM_128_IV_SIZE","TLS_CIPHER_AES_GCM_128_KEY_SIZE","TLS_CIPHER_AES_GCM_128_REC_SEQ_SIZE","TLS_CIPHER_AES_GCM_128_SALT_SIZE","TLS_CIPHER_AES_GCM_128_TAG_SIZE","TLS_CIPHER_AES_GCM_256","TLS_CIPHER_AES_GCM_256_IV_SIZE","TLS_CIPHER_AES_GCM_256_KEY_SIZE","TLS_CIPHER_AES_GCM_256_REC_SEQ_SIZE","TLS_CIPHER_AES_GCM_256_SALT_SIZE","TLS_CIPHER_AES_GCM_256_TAG_SIZE","TLS_CIPHER_CHACHA20_POLY1305","TLS_CIPHER_CHACHA20_POLY1305_IV_SIZE","TLS_CIPHER_CHACHA20_POLY1305_KEY_SIZE","TLS_CIPHER_CHACHA20_POLY1305_REC_SEQ_SIZE","TLS_CIPHER_CHACHA20_POLY1305_SALT_SIZE","TLS_CIPHER_CHACHA20_POLY1305_TAG_SIZE","TLS_GET_RECORD_TYPE","TLS_RX","TLS_SET_RECORD_TYPE","TLS_TX","TMPFS_MAGIC","TMP_MAX","TOSTOP","TRACEFS_MAGIC","TUN_FLT_ALLMULTI","TUN_F_CSUM","TUN_F_TSO4","TUN_F_TSO6","TUN_F_TSO_ECN","TUN_F_UFO","TUN_F_USO4","TUN_F_USO6","TUN_PKT_STRIP","TUN_READQ_SIZE","TUN_TAP_DEV","TUN_TUN_DEV","TUN_TX_TIMESTAMP","TUN_TYPE_MASK","T_FMT","T_FMT_AMPM","UDF_SUPER_MAGIC","UDP_CORK","UDP_ENCAP","UDP_GRO","UDP_NO_CHECK6_RX","UDP_NO_CHECK6_TX","UDP_SEGMENT","UINPUT_MAX_NAME_SIZE","UINPUT_VERSION","UIO_MAXIOV","UMOUNT_NOFOLLOW","UNAME26","USBDEVICE_SUPER_MAGIC","USER_PROCESS","USRQUOTA","UTIME_NOW","UTIME_OMIT","VDISCARD","VEOF","VEOL","VEOL2","VERASE","VINTR","VKILL","VLNEXT","VMADDR_CID_ANY","VMADDR_CID_HOST","VMADDR_CID_HYPERVISOR","VMADDR_CID_LOCAL","VMADDR_CID_RESERVED","VMADDR_PORT_ANY","VMIN","VM_BLOCK_DUMP","VM_DIRTY_BACKGROUND","VM_DIRTY_EXPIRE_CS","VM_DIRTY_RATIO","VM_DIRTY_WB_CS","VM_DROP_PAGECACHE","VM_HUGETLB_GROUP","VM_HUGETLB_PAGES","VM_LAPTOP_MODE","VM_LEGACY_VA_LAYOUT","VM_LOWMEM_RESERVE_RATIO","VM_MAX_MAP_COUNT","VM_MIN_FREE_KBYTES","VM_MIN_SLAB","VM_MIN_UNMAPPED","VM_NR_PDFLUSH_THREADS","VM_OVERCOMMIT_MEMORY","VM_OVERCOMMIT_RATIO","VM_PAGEBUF","VM_PAGE_CLUSTER","VM_PANIC_ON_OOM","VM_PERCPU_PAGELIST_FRACTION","VM_SWAPPINESS","VM_SWAP_TOKEN_TIMEOUT","VM_VDSO_ENABLED","VM_VFS_CACHE_PRESSURE","VM_ZONE_RECLAIM_MODE","VQUIT","VREPRINT","VSTART","VSTOP","VSUSP","VSWTC","VT0","VT1","VTDLY","VTIME","VWERASE","WCONTINUED","WCOREDUMP","WEXITED","WEXITSTATUS","WHOLE_SECONDS","WIFCONTINUED","WIFEXITED","WIFSIGNALED","WIFSTOPPED","WIRELESS_EXT","WNOHANG","WNOWAIT","WSTOPPED","WSTOPSIG","WTERMSIG","WUNTRACED","W_EXITCODE","W_OK","W_STOPCODE","XATTR_CREATE","XATTR_REPLACE","XDP_COPY","XDP_MMAP_OFFSETS","XDP_OPTIONS","XDP_OPTIONS_ZEROCOPY","XDP_PGOFF_RX_RING","XDP_PGOFF_TX_RING","XDP_PKT_CONTD","XDP_RING_NEED_WAKEUP","XDP_RX_RING","XDP_SHARED_UMEM","XDP_STATISTICS","XDP_TX_RING","XDP_UMEM_COMPLETION_RING","XDP_UMEM_FILL_RING","XDP_UMEM_PGOFF_COMPLETION_RING","XDP_UMEM_PGOFF_FILL_RING","XDP_UMEM_REG","XDP_UMEM_UNALIGNED_CHUNK_FLAG","XDP_USE_NEED_WAKEUP","XDP_USE_SG","XDP_ZEROCOPY","XENFS_SUPER_MAGIC","XFS_SUPER_MAGIC","XSK_UNALIGNED_BUF_ADDR_MASK","XSK_UNALIGNED_BUF_OFFSET_SHIFT","XTABS","X_OK","YESEXPR","YESSTR","_IOFBF","_IOLBF","_IONBF","_PC_2_SYMLINKS","_PC_ALLOC_SIZE_MIN","_PC_ASYNC_IO","_PC_CHOWN_RESTRICTED","_PC_FILESIZEBITS","_PC_LINK_MAX","_PC_MAX_CANON","_PC_MAX_INPUT","_PC_NAME_MAX","_PC_NO_TRUNC","_PC_PATH_MAX","_PC_PIPE_BUF","_PC_PRIO_IO","_PC_REC_INCR_XFER_SIZE","_PC_REC_MAX_XFER_SIZE","_PC_REC_MIN_XFER_SIZE","_PC_REC_XFER_ALIGN","_PC_SOCK_MAXBUF","_PC_SYMLINK_MAX","_PC_SYNC_IO","_PC_VDISABLE","_POSIX_VDISABLE","_SC_2_CHAR_TERM","_SC_2_C_BIND","_SC_2_C_DEV","_SC_2_C_VERSION","_SC_2_FORT_DEV","_SC_2_FORT_RUN","_SC_2_LOCALEDEF","_SC_2_PBS","_SC_2_PBS_ACCOUNTING","_SC_2_PBS_CHECKPOINT","_SC_2_PBS_LOCATE","_SC_2_PBS_MESSAGE","_SC_2_PBS_TRACK","_SC_2_SW_DEV","_SC_2_UPE","_SC_2_VERSION","_SC_ADVISORY_INFO","_SC_AIO_LISTIO_MAX","_SC_AIO_MAX","_SC_AIO_PRIO_DELTA_MAX","_SC_ARG_MAX","_SC_ASYNCHRONOUS_IO","_SC_ATEXIT_MAX","_SC_AVPHYS_PAGES","_SC_BARRIERS","_SC_BASE","_SC_BC_BASE_MAX","_SC_BC_DIM_MAX","_SC_BC_SCALE_MAX","_SC_BC_STRING_MAX","_SC_CHARCLASS_NAME_MAX","_SC_CHAR_BIT","_SC_CHAR_MAX","_SC_CHAR_MIN","_SC_CHILD_MAX","_SC_CLK_TCK","_SC_CLOCK_SELECTION","_SC_COLL_WEIGHTS_MAX","_SC_CPUTIME","_SC_C_LANG_SUPPORT","_SC_C_LANG_SUPPORT_R","_SC_DELAYTIMER_MAX","_SC_DEVICE_IO","_SC_DEVICE_SPECIFIC","_SC_DEVICE_SPECIFIC_R","_SC_EQUIV_CLASS_MAX","_SC_EXPR_NEST_MAX","_SC_FD_MGMT","_SC_FIFO","_SC_FILE_ATTRIBUTES","_SC_FILE_LOCKING","_SC_FILE_SYSTEM","_SC_FSYNC","_SC_GETGR_R_SIZE_MAX","_SC_GETPW_R_SIZE_MAX","_SC_HOST_NAME_MAX","_SC_INT_MAX","_SC_INT_MIN","_SC_IOV_MAX","_SC_IPV6","_SC_JOB_CONTROL","_SC_LEVEL1_DCACHE_ASSOC","_SC_LEVEL1_DCACHE_LINESIZE","_SC_LEVEL1_DCACHE_SIZE","_SC_LEVEL1_ICACHE_ASSOC","_SC_LEVEL1_ICACHE_LINESIZE","_SC_LEVEL1_ICACHE_SIZE","_SC_LEVEL2_CACHE_ASSOC","_SC_LEVEL2_CACHE_LINESIZE","_SC_LEVEL2_CACHE_SIZE","_SC_LEVEL3_CACHE_ASSOC","_SC_LEVEL3_CACHE_LINESIZE","_SC_LEVEL3_CACHE_SIZE","_SC_LEVEL4_CACHE_ASSOC","_SC_LEVEL4_CACHE_LINESIZE","_SC_LEVEL4_CACHE_SIZE","_SC_LINE_MAX","_SC_LOGIN_NAME_MAX","_SC_LONG_BIT","_SC_MAPPED_FILES","_SC_MB_LEN_MAX","_SC_MEMLOCK","_SC_MEMLOCK_RANGE","_SC_MEMORY_PROTECTION","_SC_MESSAGE_PASSING","_SC_MONOTONIC_CLOCK","_SC_MQ_OPEN_MAX","_SC_MQ_PRIO_MAX","_SC_MULTI_PROCESS","_SC_NETWORKING","_SC_NGROUPS_MAX","_SC_NL_ARGMAX","_SC_NL_LANGMAX","_SC_NL_MSGMAX","_SC_NL_NMAX","_SC_NL_SETMAX","_SC_NL_TEXTMAX","_SC_NPROCESSORS_CONF","_SC_NPROCESSORS_ONLN","_SC_NZERO","_SC_OPEN_MAX","_SC_PAGESIZE","_SC_PAGE_SIZE","_SC_PASS_MAX","_SC_PHYS_PAGES","_SC_PII","_SC_PII_INTERNET","_SC_PII_INTERNET_DGRAM","_SC_PII_INTERNET_STREAM","_SC_PII_OSI","_SC_PII_OSI_CLTS","_SC_PII_OSI_COTS","_SC_PII_OSI_M","_SC_PII_SOCKET","_SC_PII_XTI","_SC_PIPE","_SC_POLL","_SC_PRIORITIZED_IO","_SC_PRIORITY_SCHEDULING","_SC_RAW_SOCKETS","_SC_READER_WRITER_LOCKS","_SC_REALTIME_SIGNALS","_SC_REGEXP","_SC_REGEX_VERSION","_SC_RE_DUP_MAX","_SC_RTSIG_MAX","_SC_SAVED_IDS","_SC_SCHAR_MAX","_SC_SCHAR_MIN","_SC_SELECT","_SC_SEMAPHORES","_SC_SEM_NSEMS_MAX","_SC_SEM_VALUE_MAX","_SC_SHARED_MEMORY_OBJECTS","_SC_SHELL","_SC_SHRT_MAX","_SC_SHRT_MIN","_SC_SIGNALS","_SC_SIGQUEUE_MAX","_SC_SINGLE_PROCESS","_SC_SPAWN","_SC_SPIN_LOCKS","_SC_SPORADIC_SERVER","_SC_SSIZE_MAX","_SC_SS_REPL_MAX","_SC_STREAMS","_SC_STREAM_MAX","_SC_SYMLOOP_MAX","_SC_SYNCHRONIZED_IO","_SC_SYSTEM_DATABASE","_SC_SYSTEM_DATABASE_R","_SC_THREADS","_SC_THREAD_ATTR_STACKADDR","_SC_THREAD_ATTR_STACKSIZE","_SC_THREAD_CPUTIME","_SC_THREAD_DESTRUCTOR_ITERATIONS","_SC_THREAD_KEYS_MAX","_SC_THREAD_PRIORITY_SCHEDULING","_SC_THREAD_PRIO_INHERIT","_SC_THREAD_PRIO_PROTECT","_SC_THREAD_PROCESS_SHARED","_SC_THREAD_ROBUST_PRIO_INHERIT","_SC_THREAD_ROBUST_PRIO_PROTECT","_SC_THREAD_SAFE_FUNCTIONS","_SC_THREAD_SPORADIC_SERVER","_SC_THREAD_STACK_MIN","_SC_THREAD_THREADS_MAX","_SC_TIMEOUTS","_SC_TIMERS","_SC_TIMER_MAX","_SC_TRACE","_SC_TRACE_EVENT_FILTER","_SC_TRACE_EVENT_NAME_MAX","_SC_TRACE_INHERIT","_SC_TRACE_LOG","_SC_TRACE_NAME_MAX","_SC_TRACE_SYS_MAX","_SC_TRACE_USER_EVENT_MAX","_SC_TTY_NAME_MAX","_SC_TYPED_MEMORY_OBJECTS","_SC_TZNAME_MAX","_SC_T_IOV_MAX","_SC_UCHAR_MAX","_SC_UINT_MAX","_SC_UIO_MAXIOV","_SC_ULONG_MAX","_SC_USER_GROUPS","_SC_USER_GROUPS_R","_SC_USHRT_MAX","_SC_V6_ILP32_OFF32","_SC_V6_ILP32_OFFBIG","_SC_V6_LP64_OFF64","_SC_V6_LPBIG_OFFBIG","_SC_V7_ILP32_OFF32","_SC_V7_ILP32_OFFBIG","_SC_V7_LP64_OFF64","_SC_V7_LPBIG_OFFBIG","_SC_VERSION","_SC_WORD_BIT","_SC_XBS5_ILP32_OFF32","_SC_XBS5_ILP32_OFFBIG","_SC_XBS5_LP64_OFF64","_SC_XBS5_LPBIG_OFFBIG","_SC_XOPEN_CRYPT","_SC_XOPEN_ENH_I18N","_SC_XOPEN_LEGACY","_SC_XOPEN_REALTIME","_SC_XOPEN_REALTIME_THREADS","_SC_XOPEN_SHM","_SC_XOPEN_STREAMS","_SC_XOPEN_UNIX","_SC_XOPEN_VERSION","_SC_XOPEN_XCU_VERSION","_SC_XOPEN_XPG2","_SC_XOPEN_XPG3","_SC_XOPEN_XPG4","__NFT_REG_MAX","__SIZEOF_PTHREAD_BARRIERATTR_T","__SIZEOF_PTHREAD_BARRIER_T","__SIZEOF_PTHREAD_CONDATTR_T","__SIZEOF_PTHREAD_COND_T","__SIZEOF_PTHREAD_MUTEXATTR_T","__SIZEOF_PTHREAD_MUTEX_T","__SIZEOF_PTHREAD_RWLOCKATTR_T","__SIZEOF_PTHREAD_RWLOCK_T","__UT_HOSTSIZE","__UT_LINESIZE","__UT_NAMESIZE","__WALL","__WCLONE","__WNOTHREAD","__c_anonymous_ifc_ifcu","__c_anonymous_ifr_ifru","__c_anonymous_ifru_map","__c_anonymous_ptrace_syscall_info_data","__c_anonymous_ptrace_syscall_info_entry","__c_anonymous_ptrace_syscall_info_exit","__c_anonymous_ptrace_syscall_info_seccomp","__c_anonymous_sockaddr_can_can_addr","__c_anonymous_sockaddr_can_j1939","__c_anonymous_sockaddr_can_tp","__errno_location","__exit_status","__fsword_t","__glibc_reserved1","__glibc_reserved2","__glibc_reserved3","__glibc_reserved4","__kernel_rwf_t","__key","__priority_which_t","__rlimit_resource_t","__s16","__s32","__s64","__seq","__statx_timestamp_pad1","__syscall_ulong_t","__timeval","__u16","__u32","__u64","__u8","__unused1","__unused10","__unused11","__unused2","__unused3","__unused4","__unused5","__unused6","__unused7","__unused8","__unused9","_exit","_f","_libc_fpstate","_libc_fpxreg","_libc_xmmreg","_st","_xmm","abort","abs","absflat","absfuzz","absinfo","absmax","absmin","accept","accept4","access","acct","actime","addmntent","addr","addr","addr","addr","addr","addr_mask","addrinfo","adjtime","adjtimex","af","af_alg_iv","ai_addr","ai_addrlen","ai_canonname","ai_family","ai_flags","ai_next","ai_protocol","ai_socktype","aio_buf","aio_buf","aio_cancel","aio_data","aio_error","aio_fildes","aio_fildes","aio_flags","aio_fsync","aio_key","aio_lio_opcode","aio_lio_opcode","aio_nbytes","aio_nbytes","aio_offset","aio_offset","aio_read","aio_reqprio","aio_reqprio","aio_resfd","aio_return","aio_rw_flags","aio_sigevent","aio_suspend","aio_write","aiocb","alarm","ar_hln","ar_hrd","ar_op","ar_pln","ar_pro","arch","arch","arena","arena","args","args","args","arp_dev","arp_flags","arp_flags","arp_ha","arp_ha","arp_netmask","arp_netmask","arp_pa","arp_pa","arpd_request","arphdr","arpreq","arpreq_old","asctime_r","atexit","atof","atoi","atol","atoll","attack_length","attack_level","auth_keynumber","backtrace","base_addr","bind","blkcnt64_t","blkcnt_t","blksize_t","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brk","bsearch","bufferram","bustype","button","c_cc","c_cc","c_cflag","c_cflag","c_char","c_double","c_float","c_iflag","c_iflag","c_int","c_ispeed","c_ispeed","c_lflag","c_lflag","c_line","c_line","c_long","c_longlong","c_oflag","c_oflag","c_ospeed","c_ospeed","c_schar","c_short","c_uchar","c_uint","c_ulong","c_ulonglong","c_ushort","c_void","calcnt","calloc","can_addr","can_dlc","can_err_mask_t","can_family","can_filter","can_frame","can_id","can_id","can_id","can_ifindex","can_mask","canfd_frame","canid_t","canxl_frame","cc_t","center","cfgetispeed","cfgetospeed","cfmakeraw","cfsetispeed","cfsetospeed","cfsetspeed","cgid","cgroup","ch_addralign","ch_addralign","ch_reserved","ch_size","ch_size","ch_type","ch_type","chdir","child_tid","chmod","chown","chroot","chunk_size","chunk_size","cipher_type","clearenv","clearerr","clock_adjtime","clock_getcpuclockid","clock_getres","clock_gettime","clock_nanosleep","clock_settime","clock_t","clockid","clockid_t","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_args","close","close_range","closedir","closelog","cmd","cmsg_len","cmsg_level","cmsg_type","cmsghdr","code","code","code","codes_ptr","codes_size","connect","constant","consumer","consumer","cookie","copy_file_range","cpu_set_t","cr","cr","creat","creat64","cs","ctermid","ctime_r","cuid","currency_symbol","custom_data","custom_len","cwd","cwd","d_ino","d_ino","d_name","d_name","d_off","d_off","d_reclen","d_reclen","d_type","d_type","daemon","data","data","data","data","deadband","decimal_point","delay","desc","desc","dest_offset","dev","dev_t","difftime","direction","dirent","dirent64","dirfd","dirname","dl_iterate_phdr","dl_phdr_info","dladdr","dladdr1","dlclose","dlerror","dli_fbase","dli_fname","dli_saddr","dli_sname","dlinfo","dlmopen","dlopen","dlpi_addr","dlpi_adds","dlpi_name","dlpi_phdr","dlpi_phnum","dlpi_subs","dlpi_tls_data","dlpi_tls_modid","dlsym","dma","domainname","dqb_bhardlimit","dqb_bsoftlimit","dqb_btime","dqb_curinodes","dqb_curspace","dqb_ihardlimit","dqb_isoftlimit","dqb_itime","dqb_valid","dqblk","drand48","ds","dup","dup2","dup3","duplocale","e_ehsize","e_ehsize","e_entry","e_entry","e_exit","e_flags","e_flags","e_ident","e_ident","e_machine","e_machine","e_phentsize","e_phentsize","e_phnum","e_phnum","e_phoff","e_phoff","e_shentsize","e_shentsize","e_shnum","e_shnum","e_shoff","e_shoff","e_shstrndx","e_shstrndx","e_termination","e_type","e_type","e_version","e_version","eaccess","ee_code","ee_data","ee_errno","ee_info","ee_origin","ee_pad","ee_type","effect","effect_id","eflags","element","end_level","endgrent","endmntent","endpwent","endservent","endspent","endutxent","entry","envelope","envelope","envelope","epoll_create","epoll_create1","epoll_ctl","epoll_event","epoll_pwait","epoll_wait","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","erand48","errcnt","error","error","es","esterror","esterror","euidaccess","event_len","eventfd","eventfd_read","eventfd_t","eventfd_write","events","events","execl","execle","execlp","execv","execve","execveat","execvp","execvpe","exit","exit","exit_signal","explicit_bzero","exponent","f_bavail","f_bavail","f_bavail","f_bavail","f_bfree","f_bfree","f_bfree","f_bfree","f_blocks","f_blocks","f_blocks","f_blocks","f_bsize","f_bsize","f_bsize","f_bsize","f_favail","f_favail","f_ffree","f_ffree","f_ffree","f_ffree","f_files","f_files","f_files","f_files","f_flag","f_flag","f_flags","f_frsize","f_frsize","f_frsize","f_frsize","f_fsid","f_fsid","f_fsid","f_fsid","f_namelen","f_namelen","f_namemax","f_namemax","f_spare","f_type","f_type","faccessat","fade_length","fade_level","fallocate","fallocate64","fanotify_event_metadata","fanotify_init","fanotify_mark","fanotify_response","fchdir","fchmod","fchmodat","fchown","fchownat","fclose","fcntl","fd","fd","fd","fd_set","fdatasync","fdopen","fdopendir","feof","ferror","fexecve","ff_condition_effect","ff_constant_effect","ff_effect","ff_effects_max","ff_effects_max","ff_envelope","ff_periodic_effect","ff_ramp_effect","ff_replay","ff_rumble_effect","ff_trigger","fflush","fgetc","fgetgrent_r","fgetpos","fgetpos64","fgetpwent_r","fgets","fgetspent_r","fgetxattr","file_clone_range","fileno","filter","flag","flags","flags","flags","flags","flags","flags","flags","flags","flags","flags","flags","flags","flags","flags","flags","flat","flistxattr","flock","flock","flock64","fmemopen","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fop","fop","fopen","fopen64","fordblks","fordblks","fork","forkpty","fpathconf","fpos64_t","fpos_t","fpregs","fprintf","fputc","fputs","fr","fr","frac_digits","fread","fread_unlocked","free","freeaddrinfo","freehigh","freeifaddrs","freelocale","freeram","freeswap","fremovexattr","freopen","freopen64","freq","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","fs","fs_base","fsblkcnt_t","fscanf","fseek","fseeko","fseeko64","fsetpos","fsetpos64","fsetxattr","fsfilcnt_t","fsid_t","fsmblks","fsmblks","fstat","fstat64","fstatat","fstatat64","fstatfs","fstatfs64","fstatvfs","fstatvfs64","fsync","ftell","ftello","ftello64","ftok","ftruncate","ftruncate64","ftw","ftw","futimens","futimes","fuzz","fwrite","gai_strerror","genlmsghdr","getaddrinfo","getauxval","getchar","getchar_unlocked","getcontext","getcwd","getdomainname","getdtablesize","getegid","getentropy","getenv","geteuid","getgid","getgrent","getgrent_r","getgrgid","getgrgid_r","getgrnam","getgrnam_r","getgrouplist","getgroups","gethostid","gethostname","getifaddrs","getline","getloadavg","getlogin","getmntent","getmntent_r","getnameinfo","getopt","getopt_long","getpeername","getpgid","getpgrp","getpid","getppid","getpriority","getprotobyname","getprotobynumber","getpt","getpwent","getpwent_r","getpwnam","getpwnam_r","getpwuid","getpwuid_r","getrandom","getresgid","getresuid","getrlimit","getrlimit64","getrusage","getservbyname","getservbyport","getservent","getsid","getsockname","getsockopt","getspent","getspent_r","getspnam","getspnam_r","gettid","gettimeofday","getuid","getutxent","getutxid","getutxline","getxattr","gid","gid","gid_t","gl_flags","gl_flags","gl_offs","gl_offs","gl_pathc","gl_pathc","gl_pathv","gl_pathv","glob","glob64","glob64_t","glob_t","globfree","globfree64","gmtime","gmtime_r","gnu_basename","gnu_get_libc_release","gnu_get_libc_version","gr_gid","gr_mem","gr_name","gr_passwd","grantpt","greg_t","gregs","group","group","grouping","gs","gs_base","h_addr_list","h_addrtype","h_aliases","h_length","h_name","ha","has_arg","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hasmntopt","hblkhd","hblkhd","hblks","hblks","headroom","headroom","hostent","hstrerror","hwtstamp_config","i387","iconv","iconv_close","iconv_open","iconv_t","id","id","id","id","id","id","id_t","idtype_t","if_freenameindex","if_index","if_indextoname","if_name","if_nameindex","if_nameindex","if_nametoindex","ifa_addr","ifa_data","ifa_flags","ifa_ifu","ifa_name","ifa_netmask","ifa_next","ifaddrs","ifc_ifcu","ifc_len","ifconf","ifcu_buf","ifcu_req","ifr6_addr","ifr6_ifindex","ifr6_prefixlen","ifr_ifru","ifr_name","ifreq","ifru_addr","ifru_broadaddr","ifru_data","ifru_dstaddr","ifru_flags","ifru_hwaddr","ifru_ifindex","ifru_map","ifru_metric","ifru_mtu","ifru_netmask","ifru_newname","ifru_slave","imr_address","imr_ifindex","imr_interface","imr_interface","imr_multiaddr","imr_multiaddr","imr_multiaddr","imr_sourceaddr","in6_addr","in6_ifreq","in6_pktinfo","in6_rtmsg","in_addr","in_addr_t","in_pktinfo","in_port_t","index","info","info","info","initgroups","ino64_t","ino_t","inotify_add_watch","inotify_event","inotify_init","inotify_init1","inotify_rm_watch","input_absinfo","input_event","input_id","input_keymap_entry","input_mask","instruction_pointer","instruction_pointer","int16_t","int32_t","int64_t","int8_t","int_curr_symbol","int_frac_digits","int_n_cs_precedes","int_n_sep_by_space","int_n_sign_posn","int_p_cs_precedes","int_p_sep_by_space","int_p_sign_posn","interval","intmax_t","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","intptr_t","iocb","ioctl","ioperm","iopl","iov_base","iov_len","iovec","ip","ip_mreq","ip_mreq_source","ip_mreqn","ipc_perm","ipi6_addr","ipi6_ifindex","ipi_addr","ipi_ifindex","ipi_spec_dst","ipv6_mreq","ipv6mr_interface","ipv6mr_multiaddr","irq","is_error","isalnum","isalpha","isatty","isblank","iscntrl","isdigit","isgraph","islower","isprint","ispunct","isspace","isupper","isxdigit","it_interval","it_interval","it_value","it_value","itimerspec","itimerval","iv","iv","iv","iv","ivlen","j1939","j1939_filter","jf","jitcnt","jitter","jrand48","jt","k","keepcost","keepcost","key","key","key","key_t","keycode","kill","killpg","l_len","l_len","l_linger","l_onoff","l_pid","l_pid","l_start","l_start","l_type","l_type","l_whence","l_whence","labs","lchown","lcong48","lconv","left_coeff","left_saturation","len","len","len","len","len","len","len","len","length","level","lgetxattr","linger","link","linkat","lio_listio","listen","listxattr","llistxattr","loads","locale_t","localeconv","localtime","localtime_r","lockf","loff_t","login_tty","lrand48","lremovexattr","lseek","lseek64","lsetxattr","lstat","lstat64","lutimes","machine","madvise","magic","magnitude","major","makecontext","makedev","mallinfo","mallinfo","mallinfo2","mallinfo2","malloc","malloc_info","malloc_trim","malloc_usable_size","mallopt","mask","mask","max_align_t","maxerror","maxerror","maximum","mcontext_t","mem_end","mem_start","mem_unit","memalign","memchr","memcmp","memcpy","memfd_create","memmem","memmove","memrchr","memset","metadata_len","mincore","minimum","minor","mkdir","mkdirat","mkdtemp","mkfifo","mkfifoat","mknod","mknodat","mkostemp","mkostemps","mkstemp","mkstemps","mktime","mlock","mlock2","mlockall","mmap","mmap64","mmsghdr","mnt_dir","mnt_freq","mnt_fsname","mnt_opts","mnt_passno","mnt_type","mntent","mode","mode","mode_t","modes","modtime","mon_decimal_point","mon_grouping","mon_thousands_sep","mount","mprotect","mq_attr","mq_close","mq_curmsgs","mq_flags","mq_getattr","mq_maxmsg","mq_msgsize","mq_open","mq_receive","mq_send","mq_setattr","mq_timedreceive","mq_timedsend","mq_unlink","mqd_t","mr_address","mr_alen","mr_ifindex","mr_type","mrand48","mremap","msg","msg_control","msg_controllen","msg_ctime","msg_flags","msg_hdr","msg_iov","msg_iovlen","msg_len","msg_lrpid","msg_lspid","msg_name","msg_namelen","msg_perm","msg_qbytes","msg_qnum","msg_rtime","msg_stime","msgctl","msgget","msghdr","msginfo","msglen_t","msgmap","msgmax","msgmnb","msgmni","msgpool","msgqnum_t","msgrcv","msgseg","msgsnd","msgssz","msgtql","msqid_ds","msync","munlock","munlockall","munmap","mxcr_mask","mxcr_mask","mxcsr","mxcsr","n_cs_precedes","n_sep_by_space","n_sign_posn","name","name","name","name","name","name_mask","name_t","nanosleep","negative_sign","newfd","newfd_flags","newlocale","nfds_t","nice","nl_family","nl_groups","nl_item","nl_langinfo","nl_langinfo_l","nl_mmap_hdr","nl_mmap_req","nl_pid","nl_pktinfo","nla_len","nla_type","nlattr","nlink_t","nlmsg_flags","nlmsg_len","nlmsg_pid","nlmsg_seq","nlmsg_type","nlmsgerr","nlmsghdr","nm_block_nr","nm_block_size","nm_frame_nr","nm_frame_size","nm_gid","nm_group","nm_len","nm_pid","nm_status","nm_uid","nodename","nr","nr","nr","nr","nrand48","ntp_adjtime","ntp_gettime","ntptimeval","nxt_assoc_id","nxt_flags","nxt_length","nxt_ppid","nxt_sid","off","off64_t","off_t","offset","offset","old","op","open","open64","open_how","open_memstream","open_wmemstream","openat","openat64","opendir","openlog","openpty","option","options","ordblks","ordblks","orig_rax","p_aliases","p_align","p_align","p_cs_precedes","p_filesz","p_filesz","p_flags","p_flags","p_memsz","p_memsz","p_name","p_offset","p_offset","p_paddr","p_paddr","p_proto","p_sep_by_space","p_sign_posn","p_type","p_type","p_vaddr","p_vaddr","packet_mreq","pad","pad","pad","parent_tid","passwd","pathconf","pause","pclose","period","perror","personality","pgn","pgn","pgn_mask","pgn_t","phase","pid","pid","pid","pid_t","pidfd","pipe","pipe2","poll","pollfd","popen","port","positive_sign","posix_basename","posix_fadvise","posix_fadvise64","posix_fallocate","posix_fallocate64","posix_madvise","posix_memalign","posix_openpt","posix_spawn","posix_spawn_file_actions_addchdir_np","posix_spawn_file_actions_addclose","posix_spawn_file_actions_addclosefrom_np","posix_spawn_file_actions_adddup2","posix_spawn_file_actions_addfchdir_np","posix_spawn_file_actions_addopen","posix_spawn_file_actions_addtcsetpgrp_np","posix_spawn_file_actions_destroy","posix_spawn_file_actions_init","posix_spawn_file_actions_t","posix_spawnattr_destroy","posix_spawnattr_getflags","posix_spawnattr_getpgroup","posix_spawnattr_getschedparam","posix_spawnattr_getschedpolicy","posix_spawnattr_getsigdefault","posix_spawnattr_getsigmask","posix_spawnattr_init","posix_spawnattr_setflags","posix_spawnattr_setpgroup","posix_spawnattr_setschedparam","posix_spawnattr_setschedpolicy","posix_spawnattr_setsigdefault","posix_spawnattr_setsigmask","posix_spawnattr_t","posix_spawnp","ppoll","ppsfreq","pr_policy","pr_value","prctl","pread","pread64","preadv","preadv2","preadv64","preadv64v2","precision","printf","prio","priority_t","prlimit","prlimit64","process_vm_readv","process_vm_writev","procs","producer","producer","product","protoent","pselect","pthread_atfork","pthread_attr_destroy","pthread_attr_getaffinity_np","pthread_attr_getguardsize","pthread_attr_getinheritsched","pthread_attr_getschedparam","pthread_attr_getschedpolicy","pthread_attr_getstack","pthread_attr_getstacksize","pthread_attr_init","pthread_attr_setaffinity_np","pthread_attr_setdetachstate","pthread_attr_setguardsize","pthread_attr_setinheritsched","pthread_attr_setschedparam","pthread_attr_setschedpolicy","pthread_attr_setstacksize","pthread_attr_t","pthread_barrier_destroy","pthread_barrier_init","pthread_barrier_t","pthread_barrier_wait","pthread_barrierattr_destroy","pthread_barrierattr_getpshared","pthread_barrierattr_init","pthread_barrierattr_setpshared","pthread_barrierattr_t","pthread_cancel","pthread_cond_broadcast","pthread_cond_destroy","pthread_cond_init","pthread_cond_signal","pthread_cond_t","pthread_cond_timedwait","pthread_cond_wait","pthread_condattr_destroy","pthread_condattr_getclock","pthread_condattr_getpshared","pthread_condattr_init","pthread_condattr_setclock","pthread_condattr_setpshared","pthread_condattr_t","pthread_create","pthread_detach","pthread_exit","pthread_getaffinity_np","pthread_getattr_np","pthread_getcpuclockid","pthread_getname_np","pthread_getschedparam","pthread_getspecific","pthread_join","pthread_key_create","pthread_key_delete","pthread_key_t","pthread_kill","pthread_mutex_consistent","pthread_mutex_destroy","pthread_mutex_init","pthread_mutex_lock","pthread_mutex_t","pthread_mutex_timedlock","pthread_mutex_trylock","pthread_mutex_unlock","pthread_mutexattr_destroy","pthread_mutexattr_getprotocol","pthread_mutexattr_getpshared","pthread_mutexattr_getrobust","pthread_mutexattr_init","pthread_mutexattr_setprotocol","pthread_mutexattr_setpshared","pthread_mutexattr_setrobust","pthread_mutexattr_settype","pthread_mutexattr_t","pthread_once","pthread_once_t","pthread_rwlock_destroy","pthread_rwlock_init","pthread_rwlock_rdlock","pthread_rwlock_t","pthread_rwlock_tryrdlock","pthread_rwlock_trywrlock","pthread_rwlock_unlock","pthread_rwlock_wrlock","pthread_rwlockattr_destroy","pthread_rwlockattr_getkind_np","pthread_rwlockattr_getpshared","pthread_rwlockattr_init","pthread_rwlockattr_setkind_np","pthread_rwlockattr_setpshared","pthread_rwlockattr_t","pthread_self","pthread_setaffinity_np","pthread_setname_np","pthread_setschedparam","pthread_setschedprio","pthread_setspecific","pthread_sigmask","pthread_sigqueue","pthread_spin_destroy","pthread_spin_init","pthread_spin_lock","pthread_spin_trylock","pthread_spin_unlock","pthread_spinlock_t","pthread_t","ptrace","ptrace_peeksiginfo_args","ptrace_rseq_configuration","ptrace_syscall_info","ptrdiff_t","ptsname","ptsname_r","putchar","putchar_unlocked","putenv","putgrent","putpwent","puts","pututxline","pw_dir","pw_gecos","pw_gid","pw_name","pw_passwd","pw_shell","pw_uid","pwrite","pwrite64","pwritev","pwritev2","pwritev64","pwritev64v2","qsort","qsort_r","quotactl","r10","r11","r12","r13","r14","r15","r8","r9","raise","rand","rax","rbp","rbx","rcv_assoc_id","rcv_context","rcv_cumtsn","rcv_flags","rcv_ppid","rcv_sid","rcv_ssn","rcv_tsn","rcx","rdi","rdp","rdp","rdx","read","readahead","readdir","readdir64","readdir64_r","readdir_r","readlink","readlinkat","readv","realloc","reallocarray","realpath","reboot","rec_seq","rec_seq","rec_seq","recv","recvfrom","recvmmsg","recvmsg","regcomp","regerror","regex_t","regexec","regfree","regmatch_t","regoff_t","regs","release","remap_file_pages","remove","removexattr","rename","renameat","renameat2","replay","req","request_id","request_id","res_init","reserved","reserved","resolution","resolve","response","ret_data","retval","retval","revents","rewind","rewinddir","right_coeff","right_saturation","rip","rip","rip","rlim64_t","rlim_cur","rlim_cur","rlim_max","rlim_max","rlim_t","rlimit","rlimit64","rm_eo","rm_so","rmdir","rseq_abi_pointer","rseq_abi_size","rsi","rsp","rt_class","rt_dev","rt_dst","rt_flags","rt_gateway","rt_genmask","rt_irtt","rt_metric","rt_mtu","rt_pad1","rt_pad2","rt_pad3","rt_pad4","rt_tos","rt_window","rtentry","ru_idrss","ru_inblock","ru_isrss","ru_ixrss","ru_majflt","ru_maxrss","ru_minflt","ru_msgrcv","ru_msgsnd","ru_nivcsw","ru_nsignals","ru_nswap","ru_nvcsw","ru_oublock","ru_stime","ru_utime","rusage","rx","rx","rx_dropped","rx_dropped","rx_fill_ring_empty_descs","rx_filter","rx_id","rx_invalid_descs","rx_invalid_descs","rx_ring_full","s6_addr","s_addr","s_aliases","s_name","s_port","s_proto","sa_data","sa_family","sa_family_t","sa_flags","sa_mask","sa_restorer","sa_sigaction","salg_family","salg_feat","salg_mask","salg_name","salg_type","salt","salt","salt","sbrk","scancode","scanf","sched_attr","sched_deadline","sched_flags","sched_get_priority_max","sched_get_priority_min","sched_getaffinity","sched_getcpu","sched_getparam","sched_getscheduler","sched_nice","sched_param","sched_period","sched_policy","sched_priority","sched_priority","sched_rr_get_interval","sched_runtime","sched_setaffinity","sched_setparam","sched_setscheduler","sched_yield","sctp_assoc_t","sctp_authinfo","sctp_initmsg","sctp_nxtinfo","sctp_prinfo","sctp_rcvinfo","sctp_sndinfo","sctp_sndrcvinfo","sdt","seccomp","seccomp_data","seccomp_data","seccomp_notif","seccomp_notif","seccomp_notif_addfd","seccomp_notif_resp","seccomp_notif_resp","seccomp_notif_sizes","seed48","seekdir","select","sem_close","sem_ctime","sem_destroy","sem_flg","sem_getvalue","sem_init","sem_nsems","sem_num","sem_op","sem_open","sem_otime","sem_perm","sem_post","sem_t","sem_timedwait","sem_trywait","sem_unlink","sem_wait","semaem","sembuf","semctl","semget","semid_ds","seminfo","semmap","semmni","semmns","semmnu","semmsl","semop","semopm","semume","semusz","semvmx","send","sendfile","sendfile64","sendmmsg","sendmsg","sendto","servent","set_tid","set_tid_size","setbuf","setcontext","setdomainname","setegid","setenv","seteuid","setfsgid","setfsuid","setgid","setgrent","setgroups","sethostid","sethostname","setlocale","setlogmask","setmntent","setns","setpgid","setpriority","setpwent","setregid","setresgid","setresuid","setreuid","setrlimit","setrlimit64","setservent","setsid","setsockopt","setspent","settimeofday","setuid","setutxent","setvbuf","setxattr","sgetspent_r","sh_addr","sh_addr","sh_addralign","sh_addralign","sh_entsize","sh_entsize","sh_flags","sh_flags","sh_info","sh_info","sh_link","sh_link","sh_name","sh_name","sh_offset","sh_offset","sh_size","sh_size","sh_type","sh_type","sharedram","shift","shm_atime","shm_cpid","shm_ctime","shm_dtime","shm_lpid","shm_nattch","shm_open","shm_perm","shm_segsz","shm_unlink","shmat","shmatt_t","shmctl","shmdt","shmget","shmid_ds","shutdown","si_addr","si_code","si_errno","si_pid","si_signo","si_status","si_stime","si_uid","si_utime","si_value","sigaction","sigaction","sigaddset","sigaltstack","sigdelset","sigemptyset","sigev_notify","sigev_notify_thread_id","sigev_signo","sigev_value","sigevent","sigfillset","sighandler_t","siginfo_t","sigismember","signal","signal","signalfd","signalfd_siginfo","signature","significand","sigpending","sigprocmask","sigset_t","sigsuspend","sigtimedwait","sigval","sigwait","sigwaitinfo","sin6_addr","sin6_family","sin6_flowinfo","sin6_port","sin6_scope_id","sin_addr","sin_family","sin_port","sin_zero","sinfo_assoc_id","sinfo_context","sinfo_cumtsn","sinfo_flags","sinfo_ppid","sinfo_ssn","sinfo_stream","sinfo_timetolive","sinfo_tsn","sinit_max_attempts","sinit_max_init_timeo","sinit_max_instreams","sinit_num_ostreams","sival_ptr","size","size_t","sleep","sll_addr","sll_family","sll_halen","sll_hatype","sll_ifindex","sll_pkttype","sll_protocol","smblks","smblks","snd_assoc_id","snd_context","snd_flags","snd_ppid","snd_sid","snprintf","sock_extended_err","sock_filter","sock_fprog","sock_txtime","sockaddr","sockaddr_alg","sockaddr_can","sockaddr_in","sockaddr_in6","sockaddr_ll","sockaddr_nl","sockaddr_storage","sockaddr_un","sockaddr_vm","sockaddr_xdp","socket","socketpair","socklen_t","sp_expire","sp_flag","sp_inact","sp_lstchg","sp_max","sp_min","sp_namp","sp_pwdp","sp_warn","speed_t","splice","sprintf","spwd","srand","srand48","src_fd","src_length","src_offset","srcfd","ss","ss_family","ss_flags","ss_size","ss_sp","sscanf","ssi_addr","ssi_addr_lsb","ssi_arch","ssi_band","ssi_call_addr","ssi_code","ssi_errno","ssi_fd","ssi_int","ssi_overrun","ssi_pid","ssi_ptr","ssi_signo","ssi_status","ssi_stime","ssi_syscall","ssi_tid","ssi_trapno","ssi_uid","ssi_utime","ssize_t","st_atime","st_atime","st_atime_nsec","st_atime_nsec","st_blksize","st_blksize","st_blocks","st_blocks","st_ctime","st_ctime","st_ctime_nsec","st_ctime_nsec","st_dev","st_dev","st_gid","st_gid","st_info","st_info","st_ino","st_ino","st_mode","st_mode","st_mtime","st_mtime","st_mtime_nsec","st_mtime_nsec","st_name","st_name","st_nlink","st_nlink","st_other","st_other","st_rdev","st_rdev","st_shndx","st_shndx","st_size","st_size","st_size","st_size","st_space","st_uid","st_uid","st_value","st_value","stabil","stack","stack_pointer","stack_size","stack_t","stamp","start_code","start_level","start_stack","stat","stat","stat64","stat64","statfs","statfs","statfs64","statfs64","status","statvfs","statvfs","statvfs64","statvfs64","statx","statx","statx_timestamp","stbcnt","stpcpy","stpncpy","strcasecmp","strcasestr","strcat","strchr","strchrnul","strcmp","strcoll","strcpy","strcspn","strdup","strerror","strerror_r","strftime","strftime_l","strlen","strncasecmp","strncat","strncmp","strncpy","strndup","strnlen","strong_magnitude","strpbrk","strptime","strrchr","strsignal","strspn","strstr","strtod","strtof","strtok","strtok_r","strtol","strtoll","strtoul","strtoull","strxfrm","stx_atime","stx_attributes","stx_attributes_mask","stx_blksize","stx_blocks","stx_btime","stx_ctime","stx_dev_major","stx_dev_minor","stx_dio_mem_align","stx_dio_offset_align","stx_gid","stx_ino","stx_mask","stx_mnt_id","stx_mode","stx_mtime","stx_nlink","stx_rdev_major","stx_rdev_minor","stx_size","stx_uid","sun_family","sun_path","suseconds_t","sval","svm_cid","svm_family","svm_port","svm_reserved1","svm_zero","swapcontext","swapoff","swapon","swd","swd","sxdp_family","sxdp_flags","sxdp_ifindex","sxdp_queue_id","sxdp_shared_umem_fd","symlink","symlinkat","sync","sync_file_range","syncfs","syscall","sysconf","sysctl","sysinfo","sysinfo","syslog","sysname","system","tai","tai","tcdrain","tcflag_t","tcflow","tcflush","tcgetattr","tcgetpgrp","tcgetsid","tcsendbreak","tcsetattr","tcsetpgrp","tee","telldir","termios","termios2","thousands_sep","tick","time","time","time","time","time_t","timegm","timer_create","timer_delete","timer_getoverrun","timer_gettime","timer_settime","timer_t","timerfd_create","timerfd_gettime","timerfd_settime","times","timespec","timeval","timex","timezone","tls","tls12_crypto_info_aes_gcm_128","tls12_crypto_info_aes_gcm_256","tls12_crypto_info_chacha20_poly1305","tls_crypto_info","tm","tm_gmtoff","tm_hour","tm_isdst","tm_mday","tm_min","tm_mon","tm_sec","tm_wday","tm_yday","tm_year","tm_zone","tmpfile","tmpfile64","tmpnam","tms","tms_cstime","tms_cutime","tms_stime","tms_utime","tolerance","tolower","totalhigh","totalram","totalswap","toupper","tp","trigger","truncate","truncate64","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ttyname","ttyname_r","tv_nsec","tv_nsec","tv_sec","tv_sec","tv_sec","tv_sec","tv_usec","tv_usec","tx","tx","tx_id","tx_invalid_descs","tx_invalid_descs","tx_ring_empty_descs","tx_type","type_","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u","u","u64","u_ar0","u_comm","u_debugreg","u_dsize","u_fpstate","u_fpvalid","u_ssize","u_tsize","uc_flags","uc_link","uc_mcontext","uc_sigmask","uc_stack","ucontext_t","ucred","uid","uid","uid_t","uinput_abs_setup","uinput_ff_erase","uinput_ff_upload","uinput_setup","uinput_user_dev","uint16_t","uint32_t","uint64_t","uint8_t","uintmax_t","uintptr_t","umask","umount","umount2","uname","ungetc","unlink","unlinkat","unlockpt","unsetenv","unshare","uordblks","uordblks","updated","uptime","useconds_t","uselocale","user","user_fpregs_struct","user_regs_struct","usleep","usmblks","usmblks","ut_addr_v6","ut_exit","ut_host","ut_id","ut_line","ut_pid","ut_session","ut_tv","ut_type","ut_user","utimbuf","utime","utimensat","utimes","utmpname","utmpx","utmpxname","utsname","val","val","value","value","vendor","vers","version","version","version","version","vfork","vhangup","vmsplice","wait","wait4","waitid","waitpid","waveform","wchar_t","wcslen","wcstombs","wd","weak_magnitude","winsize","wmemchr","write","writev","ws_col","ws_row","ws_xpixel","ws_ypixel","xdp_desc","xdp_mmap_offsets","xdp_mmap_offsets_v1","xdp_options","xdp_ring_offset","xdp_ring_offset_v1","xdp_statistics","xdp_statistics_v1","xdp_umem_reg","xdp_umem_reg_v1","xmm_space"],"q":[[0,"libc"],[9838,"core::fmt"],[9839,"core::fmt"],[9840,"core::hash"],[9841,"core::any"]],"dmaximum number of services provided on the same listening …uth Header","","IP Payload Comp. Protocol","DCCP","IP6 destination option","exterior gateway protocol","encapsulation header","IP6 Encap Sec. Payload","Ethernet-within-IPv6 encapsulation.","IP6 fragmentation header","General Routing Encap.","Hop-by-hop option header","","","xns idp","group mgmt protocol","","for compatibility","","","","","Multipath TCP","","IP6 no next header","Protocol indep. multicast","pup","raw IP packet","IP6 routing header","resource reservation","SCTP","","tp-4 w/ class negotiationhe <code>PartialEq</code>, <code>Eq</code> and <code>Hash</code> implementations of thisquivalent to C’s <code>void</code> type when used as a pointereturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","GNU version of <code>basename(3)</code>, defined in <code>string.h</codeinterface name, e.g. “en0”","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeversion of <code>basename(3)</code>, defined in <code>libgen.h</codehe 64-bit libc on Solaris and illumos only has readdir_r. …if":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,3,3],4],0,0,0,0,0,0,0,0,0,0,[2,2],0,0,0,0,0,0,0,0,[2,2],0,[[1,2],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5,6],[7,5],[8,8],[[7,5],5],[8,8],0,0,0,[9,10],[[11,12],13],[12,9],[[11,12],9],[[12,12],14],[[11,12],14],[[11,12],13],0,[12,13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[9,15],13],[[9,15],14],[[9,15],13],0,[15,13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[9,9,9,9],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[16,16],0,0,[16,16],0,0,0,0,0,0,0,0,[16,16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[16,16],0,0,0,0,0,0,0,[16,16],0,0,0,0,0,0,0,0,0,0,0,[16,16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[17,17,17],17],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[9,9],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[17,17],0,0,0,0,0,[17,14],0,0,0,0,0,0,0,0,0,0,[16,16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,9],[9,9],[9,14],[9,14],0,0,0,0,0,0,0,[[9,9],13],[9,14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],9],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[18,19],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,14],0,[9,9],0,[9,14],[9,14],[9,14],[9,14],0,0,0,0,[9,9],[9,9],0,[[9,9],9],0,[9,9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[19,19],[41,41],[42,42],[43,43],[44,44],[15,15],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[12,12],[69,69],[70,70],[71,71],[72,72],[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[91,91],[92,92],[93,93],[94,94],[95,95],[96,96],[97,97],[98,98],[99,99],[100,100],[101,101],[102,102],[103,103],[104,104],[105,105],[106,106],[107,107],[108,108],[18,18],[109,109],[110,110],[111,111],[112,112],[4,4],[113,113],[114,114],[115,115],[116,116],[117,117],[118,118],[119,119],[120,120],[121,121],[122,122],[123,123],[124,124],[125,125],[126,126],[127,127],[128,128],[129,129],[130,130],[131,131],[132,132],[133,133],[134,134],[135,135],[136,136],[137,137],[138,138],[139,139],[140,140],[141,141],[142,142],[143,143],[144,144],[145,145],[146,146],[147,147],[148,148],[149,149],[150,150],[151,151],[152,152],[153,153],[154,154],[155,155],[156,156],[157,157],[158,158],[159,159],[160,160],[7,7],[5,5],[161,161],[162,162],[163,163],[164,164],[165,165],[166,166],[167,167],[168,168],[169,169],[170,170],[171,171],[172,172],[173,173],[174,174],[175,175],[176,176],[177,177],[178,178],[179,179],[180,180],[181,181],[182,182],[183,183],[184,184],[185,185],[186,186],[187,187],[188,188],[189,189],[190,190],[191,191],[192,192],[193,193],[194,194],[195,195],[196,196],[197,197],[198,198],[199,199],[200,200],[201,201],[202,202],[203,203],[204,204],[205,205],[206,206],[207,207],[208,208],[209,209],[210,210],[211,211],[212,212],[213,213],[214,214],[215,215],[216,216],[217,217],[218,218],[219,219],[220,220],[221,221],[222,222],[223,223],[224,224],[225,225],[226,226],[227,227],[228,228],[229,229],[230,230],[231,231],[232,232],[233,233],[234,234],[235,235],[236,236],[237,237],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[20,20],14],[[21,21],14],[[22,22],14],[[23,23],14],[[24,24],14],[[25,25],14],[[26,26],14],[[27,27],14],[[28,28],14],[[29,29],14],[[30,30],14],[[31,31],14],[[32,32],14],[[33,33],14],[[34,34],14],[[35,35],14],[[36,36],14],[[37,37],14],[[38,38],14],[[39,39],14],[[40,40],14],[[19,19],14],[[41,41],14],[[42,42],14],[[43,43],14],[[44,44],14],[[15,15],14],[[45,45],14],[[46,46],14],[[47,47],14],[[48,48],14],[[49,49],14],[[50,50],14],[[51,51],14],[[52,52],14],[[53,53],14],[[54,54],14],[[55,55],14],[[56,56],14],[[57,57],14],[[58,58],14],[[59,59],14],[[60,60],14],[[61,61],14],[[62,62],14],[[63,63],14],[[64,64],14],[[65,65],14],[[66,66],14],[[67,67],14],[[68,68],14],[[12,12],14],[[69,69],14],[[70,70],14],[[71,71],14],[[72,72],14],[[73,73],14],[[74,74],14],[[75,75],14],[[76,76],14],[[77,77],14],[[78,78],14],[[79,79],14],[[80,80],14],[[81,81],14],[[82,82],14],[[83,83],14],[[84,84],14],[[85,85],14],[[86,86],14],[[87,87],14],[[88,88],14],[[89,89],14],[[90,90],14],[[91,91],14],[[92,92],14],[[93,93],14],[[94,94],14],[[95,95],14],[[96,96],14],[[97,97],14],[[98,98],14],[[99,99],14],[[100,100],14],[[101,101],14],[[102,102],14],[[103,103],14],[[104,104],14],[[105,105],14],[[106,106],14],[[107,107],14],[[108,108],14],[[18,18],14],[[109,109],14],[[110,110],14],[[111,111],14],[[112,112],14],[[4,4],14],[[113,113],14],[[114,114],14],[[115,115],14],[[116,116],14],[[117,117],14],[[118,118],14],[[119,119],14],[[120,120],14],[[121,121],14],[[122,122],14],[[123,123],14],[[124,124],14],[[125,125],14],[[126,126],14],[[127,127],14],[[128,128],14],[[129,129],14],[[130,130],14],[[131,131],14],[[132,132],14],[[133,133],14],[[134,134],14],[[135,135],14],[[136,136],14],[[137,137],14],[[138,138],14],[[139,139],14],[[140,140],14],[[141,141],14],[[142,142],14],[[143,143],14],[[144,144],14],[[149,149],14],[[150,150],14],[[151,151],14],[[155,155],14],[[156,156],14],[[157,157],14],[[158,158],14],[[159,159],14],[[160,160],14],[[7,7],14],[[5,5],14],[[161,161],14],[[162,162],14],[[163,163],14],[[164,164],14],[[165,165],14],[[166,166],14],[[167,167],14],[[168,168],14],[[169,169],14],[[170,170],14],[[171,171],14],[[172,172],14],[[173,173],14],[[174,174],14],[[175,175],14],[[176,176],14],[[177,177],14],[[178,178],14],[[179,179],14],[[180,180],14],[[181,181],14],[[182,182],14],[[183,183],14],[[184,184],14],[[185,185],14],[[186,186],14],[[187,187],14],[[188,188],14],[[189,189],14],[[190,190],14],[[191,191],14],[[192,192],14],[[193,193],14],[[194,194],14],[[195,195],14],[[196,196],14],[[197,197],14],[[198,198],14],[[199,199],14],[[200,200],14],[[201,201],14],[[202,202],14],[[203,203],14],[[204,204],14],[[205,205],14],[[206,206],14],[[207,207],14],[[208,208],14],[[209,209],14],[[210,210],14],[[211,211],14],[[212,212],14],[[213,213],14],[[214,214],14],[[215,215],14],[[216,216],14],[[217,217],14],[[218,218],14],[[219,219],14],[[221,221],14],[[222,222],14],[[223,223],14],[[224,224],14],[[225,225],14],[[226,226],14],[[227,227],14],[[228,228],14],[[229,229],14],[[230,230],14],[[231,231],14],[[232,232],14],[[236,236],14],[[237,237],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[238,239],240],[[20,239],240],[[21,239],240],[[22,239],240],[[23,239],240],[[24,239],240],[[25,239],240],[[26,239],240],[[27,239],240],[[28,239],240],[[29,239],240],[[30,239],240],[[31,239],240],[[32,239],240],[[33,239],240],[[34,239],240],[[35,239],240],[[36,239],240],[[241,239],240],[[242,239],240],[[243,239],240],[[37,239],240],[[38,239],240],[[39,239],240],[[40,239],240],[[19,239],240],[[41,239],240],[[42,239],240],[[43,239],240],[[44,239],240],[[15,239],240],[[45,239],240],[[46,239],240],[[47,239],240],[[48,239],240],[[49,239],240],[[50,239],240],[[51,239],240],[[52,239],240],[[53,239],240],[[54,239],240],[[55,239],240],[[56,239],240],[[57,239],240],[[58,239],240],[[59,239],240],[[60,239],240],[[244,239],[[246,[13,245]]]],[[247,239],240],[[61,239],240],[[62,239],240],[[63,239],240],[[64,239],240],[[65,239],240],[[66,239],240],[[67,239],240],[[68,239],240],[[12,239],240],[[69,239],240],[[70,239],240],[[71,239],240],[[72,239],240],[[73,239],240],[[74,239],240],[[75,239],240],[[76,239],240],[[77,239],240],[[78,239],240],[[79,239],240],[[80,239],240],[[81,239],240],[[82,239],240],[[83,239],240],[[84,239],240],[[85,239],240],[[86,239],240],[[87,239],240],[[88,239],240],[[89,239],240],[[90,239],240],[[91,239],240],[[92,239],240],[[93,239],240],[[94,239],240],[[95,239],240],[[96,239],240],[[97,239],240],[[98,239],240],[[99,239],240],[[100,239],240],[[101,239],240],[[102,239],240],[[103,239],240],[[104,239],240],[[105,239],240],[[106,239],240],[[107,239],240],[[108,239],240],[[18,239],240],[[109,239],240],[[110,239],240],[[111,239],240],[[112,239],240],[[4,239],240],[[113,239],240],[[114,239],240],[[115,239],240],[[116,239],240],[[117,239],240],[[118,239],240],[[119,239],240],[[120,239],240],[[121,239],240],[[122,239],240],[[123,239],240],[[124,239],240],[[125,239],240],[[126,239],240],[[127,239],240],[[128,239],240],[[129,239],240],[[130,239],240],[[131,239],240],[[132,239],240],[[133,239],240],[[134,239],240],[[135,239],240],[[136,239],240],[[137,239],240],[[138,239],240],[[139,239],240],[[140,239],240],[[141,239],240],[[142,239],240],[[143,239],240],[[144,239],240],[[145,239],240],[[146,239],240],[[147,239],240],[[148,239],240],[[149,239],240],[[150,239],240],[[151,239],240],[[155,239],240],[[156,239],240],[[157,239],240],[[158,239],240],[[159,239],240],[[160,239],240],[[7,239],240],[[5,239],240],[[161,239],240],[[162,239],240],[[163,239],240],[[164,239],240],[[165,239],240],[[166,239],240],[[167,239],240],[[168,239],240],[[169,239],240],[[170,239],240],[[171,239],240],[[172,239],240],[[173,239],240],[[174,239],240],[[175,239],240],[[176,239],240],[[177,239],240],[[178,239],240],[[179,239],240],[[180,239],240],[[181,239],240],[[182,239],240],[[183,239],240],[[184,239],240],[[185,239],240],[[186,239],240],[[187,239],240],[[188,239],240],[[189,239],240],[[190,239],240],[[191,239],240],[[192,239],240],[[193,239],240],[[194,239],240],[[195,239],240],[[196,239],240],[[197,239],240],[[198,239],240],[[199,239],240],[[200,239],240],[[201,239],240],[[202,239],240],[[203,239],240],[[204,239],240],[[205,239],240],[[206,239],240],[[207,239],240],[[208,239],240],[[209,239],240],[[210,239],240],[[211,239],240],[[212,239],240],[[213,239],240],[[214,239],240],[[215,239],240],[[216,239],240],[[217,239],240],[[218,239],240],[[219,239],240],[[221,239],240],[[222,239],240],[[223,239],240],[[224,239],240],[[225,239],240],[[226,239],240],[[227,239],240],[[228,239],240],[[229,239],240],[[230,239],240],[[231,239],240],[[232,239],240],[[236,239],240],[[237,239],240],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[20,-1],13,248],[[21,-1],13,248],[[22,-1],13,248],[[23,-1],13,248],[[24,-1],13,248],[[25,-1],13,248],[[26,-1],13,248],[[27,-1],13,248],[[28,-1],13,248],[[29,-1],13,248],[[30,-1],13,248],[[31,-1],13,248],[[32,-1],13,248],[[33,-1],13,248],[[34,-1],13,248],[[35,-1],13,248],[[36,-1],13,248],[[37,-1],13,248],[[38,-1],13,248],[[39,-1],13,248],[[40,-1],13,248],[[19,-1],13,248],[[41,-1],13,248],[[42,-1],13,248],[[43,-1],13,248],[[44,-1],13,248],[[15,-1],13,248],[[45,-1],13,248],[[46,-1],13,248],[[47,-1],13,248],[[48,-1],13,248],[[49,-1],13,248],[[50,-1],13,248],[[51,-1],13,248],[[52,-1],13,248],[[53,-1],13,248],[[54,-1],13,248],[[55,-1],13,248],[[56,-1],13,248],[[57,-1],13,248],[[58,-1],13,248],[[59,-1],13,248],[[60,-1],13,248],[[61,-1],13,248],[[62,-1],13,248],[[63,-1],13,248],[[64,-1],13,248],[[65,-1],13,248],[[66,-1],13,248],[[67,-1],13,248],[[68,-1],13,248],[[12,-1],13,248],[[69,-1],13,248],[[70,-1],13,248],[[71,-1],13,248],[[72,-1],13,248],[[73,-1],13,248],[[74,-1],13,248],[[75,-1],13,248],[[76,-1],13,248],[[77,-1],13,248],[[78,-1],13,248],[[79,-1],13,248],[[80,-1],13,248],[[81,-1],13,248],[[82,-1],13,248],[[83,-1],13,248],[[84,-1],13,248],[[85,-1],13,248],[[86,-1],13,248],[[87,-1],13,248],[[88,-1],13,248],[[89,-1],13,248],[[90,-1],13,248],[[91,-1],13,248],[[92,-1],13,248],[[93,-1],13,248],[[94,-1],13,248],[[95,-1],13,248],[[96,-1],13,248],[[97,-1],13,248],[[98,-1],13,248],[[99,-1],13,248],[[100,-1],13,248],[[101,-1],13,248],[[102,-1],13,248],[[103,-1],13,248],[[104,-1],13,248],[[105,-1],13,248],[[106,-1],13,248],[[107,-1],13,248],[[108,-1],13,248],[[18,-1],13,248],[[109,-1],13,248],[[110,-1],13,248],[[111,-1],13,248],[[112,-1],13,248],[[4,-1],13,248],[[113,-1],13,248],[[114,-1],13,248],[[115,-1],13,248],[[116,-1],13,248],[[117,-1],13,248],[[118,-1],13,248],[[119,-1],13,248],[[120,-1],13,248],[[121,-1],13,248],[[122,-1],13,248],[[123,-1],13,248],[[124,-1],13,248],[[125,-1],13,248],[[126,-1],13,248],[[127,-1],13,248],[[128,-1],13,248],[[129,-1],13,248],[[130,-1],13,248],[[131,-1],13,248],[[132,-1],13,248],[[133,-1],13,248],[[134,-1],13,248],[[135,-1],13,248],[[136,-1],13,248],[[137,-1],13,248],[[138,-1],13,248],[[139,-1],13,248],[[140,-1],13,248],[[141,-1],13,248],[[142,-1],13,248],[[143,-1],13,248],[[144,-1],13,248],[[149,-1],13,248],[[150,-1],13,248],[[151,-1],13,248],[[155,-1],13,248],[[156,-1],13,248],[[157,-1],13,248],[[158,-1],13,248],[[159,-1],13,248],[[160,-1],13,248],[[7,-1],13,248],[[5,-1],13,248],[[161,-1],13,248],[[162,-1],13,248],[[163,-1],13,248],[[164,-1],13,248],[[165,-1],13,248],[[166,-1],13,248],[[167,-1],13,248],[[168,-1],13,248],[[169,-1],13,248],[[170,-1],13,248],[[171,-1],13,248],[[172,-1],13,248],[[173,-1],13,248],[[174,-1],13,248],[[175,-1],13,248],[[176,-1],13,248],[[177,-1],13,248],[[178,-1],13,248],[[179,-1],13,248],[[180,-1],13,248],[[181,-1],13,248],[[182,-1],13,248],[[183,-1],13,248],[[184,-1],13,248],[[185,-1],13,248],[[186,-1],13,248],[[187,-1],13,248],[[188,-1],13,248],[[189,-1],13,248],[[190,-1],13,248],[[191,-1],13,248],[[192,-1],13,248],[[193,-1],13,248],[[194,-1],13,248],[[195,-1],13,248],[[196,-1],13,248],[[197,-1],13,248],[[198,-1],13,248],[[199,-1],13,248],[[200,-1],13,248],[[201,-1],13,248],[[202,-1],13,248],[[203,-1],13,248],[[204,-1],13,248],[[205,-1],13,248],[[206,-1],13,248],[[207,-1],13,248],[[208,-1],13,248],[[209,-1],13,248],[[210,-1],13,248],[[211,-1],13,248],[[212,-1],13,248],[[213,-1],13,248],[[214,-1],13,248],[[215,-1],13,248],[[216,-1],13,248],[[217,-1],13,248],[[218,-1],13,248],[[219,-1],13,248],[[221,-1],13,248],[[222,-1],13,248],[[223,-1],13,248],[[224,-1],13,248],[[225,-1],13,248],[[226,-1],13,248],[[227,-1],13,248],[[228,-1],13,248],[[229,-1],13,248],[[230,-1],13,248],[[231,-1],13,248],[[232,-1],13,248],[[236,-1],13,248],[[237,-1],13,248],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[249,8],0,[[8,8],249],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[249,8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[201,244],0,0,[201,250],0,[201,9],[201,251],[201,252],[201,251],[201,32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],[-1,[[246,[-2]]],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],[-1,253,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[731,1443,3276,3285,3744,4741,5161,7477,7478,7479,7480,7767,7768,9750,9751,9752,9753,9806],"p":[[8,"__u16",0],[8,"__u32",0],[8,"__u8",0],[5,"sock_filter",0],[5,"cmsghdr",0],[8,"c_uchar",0],[5,"msghdr",0],[8,"c_uint",0],[8,"c_int",0],[8,"size_t",0],[1,"usize"],[5,"cpu_set_t",0],[1,"tuple"],[1,"bool"],[5,"fd_set",0],[1,"u8"],[1,"u32"],[5,"sock_extended_err",0],[5,"sockaddr",0],[5,"group",0],[5,"utimbuf",0],[5,"timeval",0],[5,"timespec",0],[5,"rlimit",0],[5,"rusage",0],[5,"ipv6_mreq",0],[5,"hostent",0],[5,"iovec",0],[5,"pollfd",0],[5,"winsize",0],[5,"linger",0],[5,"sigval",0],[5,"itimerval",0],[5,"tms",0],[5,"servent",0],[5,"protoent",0],[5,"in_addr",0],[5,"ip_mreq",0],[5,"ip_mreqn",0],[5,"ip_mreq_source",0],[5,"sockaddr_in",0],[5,"sockaddr_in6",0],[5,"addrinfo",0],[5,"sockaddr_ll",0],[5,"tm",0],[5,"sched_param",0],[5,"Dl_info",0],[5,"lconv",0],[5,"in_pktinfo",0],[5,"ifaddrs",0],[5,"in6_rtmsg",0],[5,"arpreq",0],[5,"arpreq_old",0],[5,"arphdr",0],[5,"mmsghdr",0],[5,"epoll_event",0],[5,"sockaddr_un",0],[5,"sockaddr_storage",0],[5,"utsname",0],[5,"sigevent",0],[5,"glob_t",0],[5,"passwd",0],[5,"spwd",0],[5,"dqblk",0],[5,"signalfd_siginfo",0],[5,"itimerspec",0],[5,"fsid_t",0],[5,"packet_mreq",0],[5,"if_nameindex",0],[5,"msginfo",0],[5,"sembuf",0],[5,"input_event",0],[5,"input_id",0],[5,"input_absinfo",0],[5,"input_keymap_entry",0],[5,"input_mask",0],[5,"ff_replay",0],[5,"ff_trigger",0],[5,"ff_envelope",0],[5,"ff_constant_effect",0],[5,"ff_ramp_effect",0],[5,"ff_condition_effect",0],[5,"ff_periodic_effect",0],[5,"ff_rumble_effect",0],[5,"ff_effect",0],[5,"uinput_ff_upload",0],[5,"uinput_ff_erase",0],[5,"uinput_abs_setup",0],[5,"dl_phdr_info",0],[5,"Elf32_Ehdr",0],[5,"Elf64_Ehdr",0],[5,"Elf32_Sym",0],[5,"Elf64_Sym",0],[5,"Elf32_Phdr",0],[5,"Elf64_Phdr",0],[5,"Elf32_Shdr",0],[5,"Elf64_Shdr",0],[5,"ucred",0],[5,"mntent",0],[5,"posix_spawn_file_actions_t",0],[5,"posix_spawnattr_t",0],[5,"genlmsghdr",0],[5,"in6_pktinfo",0],[5,"arpd_request",0],[5,"inotify_event",0],[5,"fanotify_response",0],[5,"sockaddr_vm",0],[5,"regmatch_t",0],[5,"__c_anonymous_sockaddr_can_tp",0],[5,"__c_anonymous_sockaddr_can_j1939",0],[5,"can_filter",0],[5,"j1939_filter",0],[5,"sock_fprog",0],[5,"seccomp_data",0],[5,"seccomp_notif_sizes",0],[5,"seccomp_notif",0],[5,"seccomp_notif_resp",0],[5,"seccomp_notif_addfd",0],[5,"nlmsghdr",0],[5,"nlmsgerr",0],[5,"nlattr",0],[5,"file_clone_range",0],[5,"__c_anonymous_ifru_map",0],[5,"in6_ifreq",0],[5,"option",0],[5,"sctp_initmsg",0],[5,"sctp_sndrcvinfo",0],[5,"sctp_sndinfo",0],[5,"sctp_rcvinfo",0],[5,"sctp_nxtinfo",0],[5,"sctp_prinfo",0],[5,"sctp_authinfo",0],[5,"rlimit64",0],[5,"tls_crypto_info",0],[5,"tls12_crypto_info_aes_gcm_128",0],[5,"tls12_crypto_info_aes_gcm_256",0],[5,"tls12_crypto_info_chacha20_poly1305",0],[5,"sockaddr_nl",0],[5,"dirent",0],[5,"sockaddr_alg",0],[5,"uinput_setup",0],[5,"uinput_user_dev",0],[5,"af_alg_iv",0],[5,"mq_attr",0],[20,"__c_anonymous_ifr_ifru",0],[5,"ifreq",0],[20,"__c_anonymous_ifc_ifcu",0],[5,"ifconf",0],[5,"hwtstamp_config",0],[5,"dirent64",0],[5,"sched_attr",0],[5,"sock_txtime",0],[20,"__c_anonymous_sockaddr_can_can_addr",0],[5,"sockaddr_can",0],[5,"statx",0],[5,"statx_timestamp",0],[5,"aiocb",0],[5,"__exit_status",0],[5,"__timeval",0],[5,"glob64_t",0],[5,"termios",0],[5,"mallinfo",0],[5,"mallinfo2",0],[5,"nl_pktinfo",0],[5,"nl_mmap_req",0],[5,"nl_mmap_hdr",0],[5,"rtentry",0],[5,"timex",0],[5,"ntptimeval",0],[5,"regex_t",0],[5,"Elf64_Chdr",0],[5,"Elf32_Chdr",0],[5,"seminfo",0],[5,"ptrace_peeksiginfo_args",0],[5,"__c_anonymous_ptrace_syscall_info_entry",0],[5,"__c_anonymous_ptrace_syscall_info_exit",0],[5,"__c_anonymous_ptrace_syscall_info_seccomp",0],[5,"ptrace_syscall_info",0],[5,"sockaddr_xdp",0],[5,"xdp_ring_offset",0],[5,"xdp_mmap_offsets",0],[5,"xdp_ring_offset_v1",0],[5,"xdp_mmap_offsets_v1",0],[5,"xdp_umem_reg",0],[5,"xdp_umem_reg_v1",0],[5,"xdp_statistics",0],[5,"xdp_statistics_v1",0],[5,"xdp_options",0],[5,"xdp_desc",0],[5,"iocb",0],[20,"__c_anonymous_ptrace_syscall_info_data",0],[5,"utmpx",0],[5,"sigset_t",0],[5,"sysinfo",0],[5,"msqid_ds",0],[5,"semid_ds",0],[5,"sigaction",0],[5,"statfs",0],[5,"flock",0],[5,"flock64",0],[5,"siginfo_t",0],[5,"stack_t",0],[5,"stat",0],[5,"stat64",0],[5,"statfs64",0],[5,"statvfs64",0],[5,"pthread_attr_t",0],[5,"_libc_fpxreg",0],[5,"_libc_xmmreg",0],[5,"_libc_fpstate",0],[5,"user_regs_struct",0],[5,"user",0],[5,"mcontext_t",0],[5,"ipc_perm",0],[5,"shmid_ds",0],[5,"ptrace_rseq_configuration",0],[5,"user_fpregs_struct",0],[5,"ucontext_t",0],[5,"statvfs",0],[5,"max_align_t",0],[5,"clone_args",0],[5,"sem_t",0],[5,"termios2",0],[5,"pthread_mutexattr_t",0],[5,"pthread_rwlockattr_t",0],[5,"pthread_condattr_t",0],[5,"pthread_barrierattr_t",0],[5,"fanotify_event_metadata",0],[5,"pthread_cond_t",0],[5,"pthread_mutex_t",0],[5,"pthread_rwlock_t",0],[5,"pthread_barrier_t",0],[5,"can_frame",0],[5,"canfd_frame",0],[5,"canxl_frame",0],[5,"open_how",0],[5,"in6_addr",0],[6,"DIR",0],[5,"Formatter",9838],[8,"Result",9838],[6,"FILE",0],[6,"fpos_t",0],[6,"timezone",0],[6,"c_void",0],[5,"Error",9838],[6,"Result",9839],[6,"fpos64_t",0],[10,"Hasher",9840],[8,"dev_t",0],[8,"pid_t",0],[8,"c_long",0],[8,"uid_t",0],[5,"TypeId",9841]],"b":[]}],\
["linux_embedded_hal",{"doc":"Implementation of <code>embedded-hal</code> traits for Linux devices","t":"FFFFFGFFFPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNDDNNNNNNNNNNNNDNNNNNNNNDDNNNNDNDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["CdevPin","Delay","I2cdev","Pin","Serial","SpiOperation","Spidev","SysTimer","SysfsPin","Transfer","Write","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","delay_ms","delay_ms","delay_ms","delay_ms","delay_us","delay_us","delay_us","delay_us","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","eq","exec","exec","flush","fmt","from","from","from","from","from","from","from","from","from_path","gpio_cdev","i2cdev","into","into","into","into","into","into","into","into","is_high","is_high","is_low","is_low","nb","new","new","new","new","open","open","read","read","serial_core","serial_unix","set_high","set_high","set_low","set_low","spidev","start","sysfs_gpio","transfer","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","wait","write","write","write","write_read"],"q":[[0,"linux_embedded_hal"],[120,"core::cmp"],[121,"embedded_hal::blocking::i2c"],[122,"core::result"],[123,"nb"],[124,"core::fmt"],[125,"core::fmt"],[126,"std::path"],[127,"core::convert"],[128,"gpio_cdev"],[129,"gpio_cdev::errors"],[130,"i2cdev::linux"],[131,"serial_core"],[132,"std::io::error"],[133,"core::convert"],[134,"void"]],"d":["Cdev pin re-export Newtype around <code>gpio_cdev::LineHandle</code> …","Empty struct that provides delay functionality on top of …","Newtype around <code>i2cdev::linux::LinuxI2CDevice</code> that …","Newtype around <code>sysfs_gpio::Pin</code> that implements the …","Newtype around <code>serial_unix::TTYPort</code> that implements the …","Operation for transactional SPI trait","Newtype around <code>spidev::Spidev</code> that implements the …","A periodic timer based on <code>std::time::Instant</code>, which is a …","Sysfs pin re-export Newtype around <code>sysfs_gpio::Pin</code> that …","Write data out while reading data into the provided buffer","Write data from the provided buffer, discarding read data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","See <code>sysfs_gpio::Pin::from_path</code> for details.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Create a new timer instance.","See <code>sysfs_gpio::Pin::new</code> for details.","See <code>gpio_cdev::Line::request</code> for details.","See <code>i2cdev::linux::LinuxI2CDevice::new</code> for details.","Wrapper for <code>serial_unix::TTYPort::open</code>","See <code>spidev::Spidev::open</code> for details.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,12,12,18,1,8,9,2,10,11,12,18,1,8,9,2,10,11,12,1,2,2,2,2,2,2,2,2,8,9,10,11,8,9,10,11,12,10,11,18,12,18,1,8,9,2,10,11,12,8,0,0,18,1,8,9,2,10,11,12,8,9,8,9,0,1,8,9,10,18,11,18,10,0,0,8,9,8,9,0,1,0,11,18,1,8,9,2,10,11,12,18,1,8,9,2,10,11,12,18,1,8,9,2,10,11,12,1,18,10,11,10],"f":[0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[2,3],4],[[2,5],4],[[2,6],4],[[2,7],4],[[2,7],4],[[2,5],4],[[2,3],4],[[2,6],4],[8,-1,[]],[9,-1,[]],[10,-1,[]],[11,-1,[]],[8,-1,[]],[9,-1,[]],[10,-1,[]],[11,-1,[]],[[[12,[-1]],[12,[-1]]],13,14],[[10,5,[16,[15]]],[[17,[4,-1]]],[]],[[11,[16,[[12,[5]]]]],[[17,[4,-1]]],[]],[18,[[19,[4,-1]]],[]],[[[12,[-1]],20],[[17,[4,21]]],22],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[23,[8]]],[[25,[24]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[8,[[17,[13,-1]]],[]],[9,[[17,[13,-1]]],[]],[8,[[17,[13,-1]]],[]],[9,[[17,[13,-1]]],[]],0,[[],1],[6,8],[26,[[17,[9,27]]]],[-1,[[17,[10,28]]],[[25,[24]]]],[-1,[[17,[18,29]]],[[25,[24]]]],[-1,[[30,[11]]],[[25,[24]]]],[18,[[19,[5,-1]]],[]],[[10,5,[16,[5]]],[[17,[4,-1]]],[]],0,0,[8,[[17,[4,-1]]],[]],[9,[[17,[4,-1]]],[]],[8,[[17,[4,-1]]],[]],[9,[[17,[4,-1]]],[]],0,[[1,-2],4,[],[[31,[-1]]]],0,[[11,[16,[5]]],[[30,[[16,[5]]]]]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[1,[[19,[4,33]]]],[[18,5],[[19,[4,-1]]],[]],[[10,5,[16,[5]]],[[17,[4,-1]]],[]],[[11,[16,[5]]],[[30,[4]]]],[[10,5,[16,[5]],[16,[5]]],[[17,[4,-1]]],[]]],"c":[],"p":[[5,"SysTimer",0],[5,"Delay",0],[1,"u32"],[1,"tuple"],[1,"u8"],[1,"u64"],[1,"u16"],[5,"SysfsPin",0],[5,"CdevPin",0],[5,"I2cdev",0],[5,"Spidev",0],[6,"SpiOperation",0],[1,"bool"],[10,"PartialEq",120],[6,"Operation",121],[1,"slice"],[6,"Result",122],[5,"Serial",0],[8,"Result",123],[5,"Formatter",124],[5,"Error",124],[10,"Debug",124],[8,"Result",125],[5,"Path",126],[10,"AsRef",127],[5,"LineHandle",128],[5,"Error",129],[6,"LinuxI2CError",130],[5,"Error",131],[8,"Result",132],[10,"Into",127],[5,"TypeId",133],[6,"Void",134]],"b":[[28,"impl-_embedded_hal_blocking_delay_DelayMs%3Cu32%3E-for-Delay"],[29,"impl-_embedded_hal_blocking_delay_DelayMs%3Cu8%3E-for-Delay"],[30,"impl-_embedded_hal_blocking_delay_DelayMs%3Cu64%3E-for-Delay"],[31,"impl-_embedded_hal_blocking_delay_DelayMs%3Cu16%3E-for-Delay"],[32,"impl-_embedded_hal_blocking_delay_DelayUs%3Cu16%3E-for-Delay"],[33,"impl-_embedded_hal_blocking_delay_DelayUs%3Cu8%3E-for-Delay"],[34,"impl-_embedded_hal_blocking_delay_DelayUs%3Cu32%3E-for-Delay"],[35,"impl-_embedded_hal_blocking_delay_DelayUs%3Cu64%3E-for-Delay"]]}],\
["log",{"doc":"A lightweight logging facade.","t":"PPPPPPGGKFFPFFFSFPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNQNNMNNNNNNNQNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNQNNNNNNNNNNNNNNNNMQQHNNHNNNNNNNNNNNNNNHHHHNNNNNNQNNNNNNNNNNNNNNNNNNNNNNNNQ","n":["Debug","Debug","Error","Error","Info","Info","Level","LevelFilter","Log","Metadata","MetadataBuilder","Off","ParseLevelError","Record","RecordBuilder","STATIC_MAX_LEVEL","SetLoggerError","Trace","Trace","Warn","Warn","args","args","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","builder","builder","clone","clone","clone","clone","cmp","cmp","cmp","cmp","debug","default","default","enabled","eq","eq","eq","eq","eq","eq","eq","error","file","file","file_static","file_static","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","hash","hash","hash","hash","info","into","into","into","into","into","into","into","into","iter","iter","level","level","level","level","line","line","log","log","log_enabled","logger","max","max","max_level","metadata","metadata","module_path","module_path","module_path_static","module_path_static","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_logger","set_logger_racy","set_max_level","set_max_level_racy","target","target","target","target","to_level","to_level_filter","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","warn"],"q":[[0,"log"],[170,"core::fmt"],[171,"core::cmp"],[172,"core::option"],[173,"core::fmt"],[174,"core::hash"],[175,"core::iter::traits::iterator"],[176,"core::any"]],"d":["The “debug” level.","Corresponds to the <code>Debug</code> log level.","The “error” level.","Corresponds to the <code>Error</code> log level.","The “info” level.","Corresponds to the <code>Info</code> log level.","An enum representing the available verbosity levels of the …","An enum representing the available verbosity level filters …","A trait encapsulating the operations required of a logger.","Metadata about a log message.","Builder for <code>Metadata</code>.","A level lower than all log levels.","The type returned by <code>from_str</code> when the string doesn’t …","The “payload” of a log message.","Builder for <code>Record</code>.","The statically resolved maximum log level.","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …","The “trace” level.","Corresponds to the <code>Trace</code> log level.","The “warn” level.","Corresponds to the <code>Warn</code> log level.","The message body.","Set <code>args</code>.","Returns the string representation of the <code>Level</code>.","Returns the string representation of the <code>LevelFilter</code>.","","","","","","","","","","","","","","","","","Invoke the builder and return a <code>Record</code>","Returns a <code>Metadata</code> object.","Returns a new builder.","Returns a new builder.","","","","","","","","","Logs a message at the debug level.","","","Determines if a log message with the specified metadata …","","","","","","","","Logs a message at the error level.","The source file containing the message.","Set <code>file</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>file</code> to a <code>&#39;static</code> string.","Flushes any buffered records.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Logs a message at the info level.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Iterate through all supported logging levels.","Iterate through all supported filtering levels.","The verbosity level of the message.","Set <code>Metadata::level</code>.","The verbosity level of the message.","Setter for <code>level</code>.","The line containing the message.","Set <code>line</code>","Logs the <code>Record</code>.","The standard logging macro.","Determines if a message logged at the specified level in …","Returns a reference to the logger.","Returns the most verbose logging level.","Returns the most verbose logging level filter.","Returns the current maximum log level.","Metadata about the log directive.","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …","The module path of the message.","Set <code>module_path</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>module_path</code> to a <code>&#39;static</code> string","Construct new <code>RecordBuilder</code>.","Construct a new <code>MetadataBuilder</code>.","","","","","","","Sets the global logger to a <code>&amp;&#39;static Log</code>.","A thread-unsafe version of <code>set_logger</code>.","Sets the global maximum log level.","A thread-unsafe version of <code>set_max_level</code>.","The name of the target of the directive.","Set <code>Metadata::target</code>","The name of the target of the directive.","Setter for <code>target</code>.","Converts <code>self</code> to the equivalent <code>Level</code>.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","Logs a message at the trace level.","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the warn level."],"i":[4,6,4,6,4,6,0,0,0,0,0,6,0,0,0,0,0,4,6,4,6,1,3,4,6,4,6,1,3,8,7,17,12,4,6,1,3,8,7,17,12,3,7,1,8,4,6,1,8,4,6,8,7,0,3,7,10,4,4,6,6,8,7,12,0,1,3,1,3,10,4,4,6,6,1,3,8,7,17,17,12,12,4,6,1,3,8,7,17,12,4,6,4,6,8,7,0,4,6,1,3,8,7,17,12,4,6,1,3,8,7,1,3,10,0,0,0,4,6,0,1,3,1,3,1,3,3,7,4,4,6,6,8,7,0,0,0,0,1,3,8,7,6,4,0,4,6,1,3,8,7,17,12,4,6,1,3,8,7,17,12,4,6,1,3,8,7,17,12,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[3,2],3],[4,5],[6,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,1],[7,8],[[],3],[[],7],[4,4],[6,6],[1,1],[8,8],[[4,4],9],[[6,6],9],[[8,8],9],[[7,7],9],0,[[],3],[[],7],[[10,8],11],[[4,4],11],[[4,6],11],[[6,4],11],[[6,6],11],[[8,8],11],[[7,7],11],[[12,12],11],0,[1,[[13,[5]]]],[[3,[13,[5]]],3],[1,[[13,[5]]]],[[3,[13,[5]]],3],[10,14],[[4,15],16],[[4,15],16],[[6,15],16],[[6,15],16],[[1,15],16],[[3,15],16],[[8,15],16],[[7,15],16],[[17,15],16],[[17,15],16],[[12,15],16],[[12,15],16],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[5,[[18,[4,-1]]],[]],[5,[[18,[6,-1]]],[]],[[4,-1],14,19],[[6,-1],14,19],[[8,-1],14,19],[[7,-1],14,19],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[0,[[21,[],[[20,[4]]]]]]]],[[],[[0,[[21,[],[[20,[6]]]]]]]],[1,4],[[3,4],3],[8,4],[[7,4],7],[1,[[13,[22]]]],[[3,[13,[22]]],3],[[10,1],14],0,0,[[],10],[[],4],[[],6],[[],6],[1,8],[[3,8],3],[1,[[13,[5]]]],[[3,[13,[5]]],3],[1,[[13,[5]]]],[[3,[13,[5]]],3],[[],3],[[],7],[[4,6],[[13,[9]]]],[[4,4],[[13,[9]]]],[[6,4],[[13,[9]]]],[[6,6],[[13,[9]]]],[[8,8],[[13,[9]]]],[[7,7],[[13,[9]]]],[10,[[18,[14,17]]]],[10,[[18,[14,17]]]],[6,14],[6,14],[1,5],[[3,5],3],[8,5],[[7,5],7],[6,[[13,[4]]]],[4,6],0,[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],0],"c":[],"p":[[5,"Record",0],[5,"Arguments",170],[5,"RecordBuilder",0],[6,"Level",0],[1,"str"],[6,"LevelFilter",0],[5,"MetadataBuilder",0],[5,"Metadata",0],[6,"Ordering",171],[10,"Log",0],[1,"bool"],[5,"ParseLevelError",0],[6,"Option",172],[1,"tuple"],[5,"Formatter",170],[8,"Result",170],[5,"SetLoggerError",0],[6,"Result",173],[10,"Hasher",174],[17,"Item"],[10,"Iterator",175],[1,"u32"],[5,"TypeId",176]],"b":[[57,"impl-PartialEq-for-Level"],[58,"impl-PartialEq%3CLevelFilter%3E-for-Level"],[59,"impl-PartialEq%3CLevel%3E-for-LevelFilter"],[60,"impl-PartialEq-for-LevelFilter"],[70,"impl-Display-for-Level"],[71,"impl-Debug-for-Level"],[72,"impl-Display-for-LevelFilter"],[73,"impl-Debug-for-LevelFilter"],[78,"impl-Display-for-SetLoggerError"],[79,"impl-Debug-for-SetLoggerError"],[80,"impl-Display-for-ParseLevelError"],[81,"impl-Debug-for-ParseLevelError"],[128,"impl-PartialOrd%3CLevelFilter%3E-for-Level"],[129,"impl-PartialOrd-for-Level"],[130,"impl-PartialOrd%3CLevel%3E-for-LevelFilter"],[131,"impl-PartialOrd-for-LevelFilter"]]}],\
["memoffset",{"doc":"A crate used for calculating offsets of struct members and …","t":"QQQQQ","n":["offset_of","offset_of_tuple","raw_field","raw_field_tuple","span_of"],"q":[[0,"memoffset"]],"d":["Calculates the offset of the specified field from the …","Calculates the offset of the specified field from the …","Computes a const raw pointer to the given field of the …","Computes a const raw pointer to the given field of the …","Produces a range instance representing the sub-slice …"],"i":[0,0,0,0,0],"f":[0,0,0,0,0],"c":[],"p":[],"b":[]}],\
["navigator_rs",{"doc":"Navigator-rs","t":"FGPFPPPPPPPPPPPPPPPPPPPPFPPPFFFGFGONNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNONNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOO","n":["ADCData","AdcChannel","All","AxisData","Ch0","Ch1","Ch1","Ch10","Ch11","Ch12","Ch13","Ch14","Ch15","Ch16","Ch2","Ch2","Ch3","Ch3","Ch4","Ch5","Ch6","Ch7","Ch8","Ch9","Led","Led1","Led2","Led3","Navigator","NavigatorBuilder","Pwm","PwmChannel","SensorData","UserLed","accelerometer","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adc","as_mut_array","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","channel","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","create","default","default","default","default","default","deref","deref_mut","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt_debug","from","from","from","from","from","from","from","from","from","from","get_led","get_led","get_pwm_enable","gyro","init","into","into","into","into","into","into","into","into","into","into","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","leak","magnetometer","new","new","pressure","read_accel","read_adc","read_adc_all","read_all","read_altitude","read_gyro","read_leak","read_mag","read_pressure","read_temperature","select","self_test","set_led","set_led","set_led_all","set_led_all","set_led_toggle","set_led_toggle","set_neopixel","set_pwm_channel_value","set_pwm_channels_value","set_pwm_channels_values","set_pwm_enable","set_pwm_freq_hz","set_pwm_freq_prescale","temperature","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_rgb_led_strip_size","x","y","z"],"q":[[0,"navigator_rs"],[225,"palette::chromatic_adaptation"],[226,"linux_embedded_hal::sysfs_pin"],[227,"core::fmt"],[228,"core::fmt"],[229,"core::result"],[230,"palette::convert"],[231,"core::any"]],"d":["Encapsulates the value of ADC’s four channels.","Set of available options to select ADC’s channel.","","The <code>AxisData</code> struct encapsulate values for the x, y, and z …","","","","","","","","","","","","","","","","","","","","","The <code>Led</code> struct represents the 3 LEDs on navigator board.","Attached to green LED through GPIO 24, labelled LED_1.","Attached to blue LED through GPIO 25, labelled LED_2.","Attached to red LED through GPIO 11, labelled LED_3.","The <code>Navigator</code> struct contains various components used for …","Build pattern structure","The <code>Pwm</code> struct represents a PWM (Pulse Width Modulation) …","Set of available options to select PWM’s channel.","Encapsulates the value of all sensors on the board.","Set of options to control navigator’s LEDs.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Gets the selected navigator LED output state. The true …","Get the PWM IC enabling value through OE_pin.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Reads acceleration based on ICM20689 of <code>Navigator</code>.","Reads the ADC based on ADS1115 of <code>Navigator</code>.","Reads the ADC based on ADS1115 of <code>Navigator</code>.","Reads all sensors and stores on a single structure.","Reads the altitude based on pressure values measured by …","Reads angular velocity based on ICM20689 of <code>Navigator</code>.","Reads the state of leak detector pin from <code>Navigator</code>.","Reads the magnetometer Ak09915 of <code>Navigator</code>.","Reads the pressure based on BMP280 of <code>Navigator</code>.","Reads the temperature using BMP280 of <code>Navigator</code>.","","","","Sets the selected navigator LED output.","","Set all LEDs on desired state ( Blue, Green and Red ).","","Toggle the output of selected LED.","Set the values of the neopixel LED array.","Sets the Duty Cycle (high value time) of selected channel.","Like <code>set_pwm_channel_value</code>. This function sets the Duty …","Like <code>set_pwm_channel_value</code>. This function sets the Duty …","Sets the PWM IC to be enabled through OE_pin.","Sets the pwm frequency in Hertz of <code>Navigator</code>.","Sets the PWM frequency of <code>Navigator</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,9,0,7,7,9,9,9,9,9,9,9,9,7,9,7,9,9,9,9,9,9,9,0,8,8,8,0,0,0,0,0,0,12,2,6,14,5,7,8,9,10,11,12,12,2,2,6,14,5,7,8,9,10,11,12,2,6,14,5,7,8,9,10,11,12,5,11,7,8,9,10,11,12,7,8,9,10,11,12,6,2,6,10,11,12,14,14,9,7,8,8,9,10,11,12,6,2,6,14,5,7,8,9,10,11,12,2,6,6,12,6,2,6,14,5,7,8,9,10,11,12,2,6,14,5,7,8,9,10,11,12,2,6,14,5,7,8,9,10,11,12,12,12,2,6,12,6,6,6,6,6,6,6,6,6,6,2,6,2,6,2,6,2,6,6,6,6,6,6,6,6,12,7,8,9,10,11,12,8,2,6,14,5,7,8,9,10,11,12,2,6,14,5,7,8,9,10,11,12,2,6,14,5,7,8,9,10,11,12,2,6,14,5,7,8,9,10,11,12,5,10,10,10],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],0,[2,[[4,[3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,6],0,[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[],5],[[],2],[[],6],[[],10],[[],11],[[],12],[14,-1,[]],[14,-1,[]],[[9,9],15],[[7,16],17],[[8,16],17],[[8,16],17],[[9,16],17],[[10,16],17],[[11,16],17],[[12,16],17],[6,[[0,[18]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[2,8],15],[[6,8],15],[6,15],0,[6,13],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[],2],[[],6],0,[6,10],[[6,7],19],[6,11],[6,12],[6,19],[6,10],[6,15],[6,10],[6,19],[6,19],[[2,8],3],[6,15],[[2,8,15],13],[[6,8,15],13],[[2,15],13],[[6,15],13],[[2,8],13],[[6,8],13],[[6,[21,[[4,[20]]]]],13],[[6,9,22],13],[[6,[4,[9]],22],13],[[6,[4,[9]],[4,[22]]],13],[[6,15],13],[[6,19],13],[[6,20],13],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,23,[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2,[25,[-2]]]]],[],[]],[-1,[[24,[-2,[25,[-2]]]]],[],[]],[-1,[[24,[-2,[25,[-2]]]]],[],[]],[-1,[[24,[-2,[25,[-2]]]]],[],[]],[-1,[[24,[-2,[25,[-2]]]]],[],[]],[-1,[[24,[-2,[25,[-2]]]]],[],[]],[-1,[[24,[-2,[25,[-2]]]]],[],[]],[-1,[[24,[-2,[25,[-2]]]]],[],[]],[-1,[[24,[-2,[25,[-2]]]]],[],[]],[-1,[[24,[-2,[25,[-2]]]]],[],[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[[5,27],5],0,0,0],"c":[],"p":[[10,"TransformMatrix",225],[5,"Led",0],[5,"SysfsPin",226],[1,"array"],[5,"NavigatorBuilder",0],[5,"Navigator",0],[6,"AdcChannel",0],[6,"UserLed",0],[6,"PwmChannel",0],[5,"AxisData",0],[5,"ADCData",0],[5,"SensorData",0],[1,"tuple"],[5,"Pwm",0],[1,"bool"],[5,"Formatter",227],[8,"Result",227],[10,"Debug",227],[1,"f32"],[1,"u8"],[1,"slice"],[1,"u16"],[5,"String",228],[6,"Result",229],[5,"OutOfBounds",230],[5,"TypeId",231],[1,"usize"]],"b":[[91,"impl-Debug-for-UserLed"],[92,"impl-Display-for-UserLed"]]}],\
["nb",{"doc":"Minimal and reusable non-blocking I/O layer","t":"PGPPIPQNNNNNNNNNNNNNNNN","n":["Err","Error","Ok","Other","Result","WouldBlock","block","borrow","borrow_mut","clone","cmp","eq","fmt","from","from","from","hash","into","map","partial_cmp","try_from","try_into","type_id"],"q":[[0,"nb"],[23,"core::clone"],[24,"core::cmp"],[25,"core::cmp"],[26,"core::fmt"],[27,"core::hash"],[28,"core::option"],[29,"core::cmp"],[30,"core::any"]],"d":["Contains the error value","A non-blocking error","Contains the success value","A different kind of error","A non-blocking result","This operation requires blocking behavior to complete","Turns the non-blocking expression <code>$e</code> into a blocking …","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Maps an <code>Error&lt;E&gt;</code> to <code>Error&lt;T&gt;</code> by applying a function to a …","","","",""],"i":[20,0,20,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]]],3,4],[[[1,[-1]],[1,[-1]]],5,6],[[[1,[-1]],7],8,9],[-1,-1,[]],[10,-1,[]],[-1,[[1,[-1]]],[]],[[[1,[-1]],-2],11,12,13],[-1,-2,[],[]],[[[1,[-1]],-3],[[1,[-2]]],[],[],[[15,[-1],[[14,[-2]]]]]],[[[1,[-1]],[1,[-1]]],[[16,[3]]],17],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,19,[]]],"c":[],"p":[[6,"Error",0],[10,"Clone",23],[6,"Ordering",24],[10,"Ord",24],[1,"bool"],[10,"PartialEq",24],[5,"Formatter",25],[8,"Result",25],[10,"Debug",25],[1,"never"],[1,"tuple"],[10,"Hash",26],[10,"Hasher",26],[17,"Output"],[10,"FnOnce",27],[6,"Option",28],[10,"PartialOrd",24],[6,"Result",29],[5,"TypeId",30],[8,"Result",0]],"b":[]}],\
["nix",{"doc":"Rust friendly bindings to the various *nix system …","t":"PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPIKPIPQCCCCCCQQQQQQQQQQQQQMCMECCCCCQQQQCCCCCMPPFPFPPFFPPGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNHNNNNNNNNNNNPPPPPPPPPPPPPPPPPPPPPPPPPSTPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPSTPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPSTPPGKNPNNNNNNNNHNNNNHNNNNNMNNNNNNTTTTTFTTTTTTTPPPPPPPPPPPTTTTPPPPPFGFGPPPPFTTTTTTTTTTTTTTTTTTTTTTTTPPPPPPGTTTFTTTTFFPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNNHHHHNNNNNNNHHNNNNNNNHNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHFFONNNNONNONNNONNNNHNNONNNONNNNNNNNFTTFTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNHHNNTFFFTTTTTTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNIHHHHHHHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCTTTTTTTTTTTTTTTTTTTTTTFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTTTTTTTTTTFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNNNNNNFFFIFNNNNNNNNNNNNNNNNNNNNNNNNOHNNNNNHNNNNNNNNOOHHHHNONNNNNNNNNNNNNNNHNOOOOTTTTTTTTTTTTTTTTTTTIFFNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHNNHNNNNNNNNNNNNNNHCCCCCCCCCCCCCCCCCCCCCCCCCCCCPGPFGPPPPPPFFGGPPHNNHONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTTTTTTTTTTTTTTTTFPPPFFGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTTTFNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFTTTTTTTTTTTTTTTTTTTTTTTTFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOQQQQTTFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNPPPPPPPPPPPPPPPPPTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTFTTTFFGFTTTTTTFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHHHHHHHNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTTTTTTFTTTTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNHNNNNNNNNNNIHHIGFPPPPPPPPPPPPPPPPPPPPTTTTTTTTTPPPPPPPPPPPPPPPPPPPGNHNNNNNNNNNNNNNNNNNNNNNNNHNHNNNNNNNNNNNNNNNNNNNNHHHNNNNHNNNNNNNHNNNNHNHNHHHHNNNHHHNNNNHNNNNNNNNNNHFPPPPTTTTTTTTTTGGFPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPGNNNNNNNNNNNHHNNNNPPPPPPPPPPPPPPPPGNNNNNNNNHNNNIHNNNNSFFNNNNNNNNNNNNNNNNNNNNNNNNHNHNNNNNNNNHHPTTTTTTTPPPPPPPPPPSPPSPPPPPPPPPPPPSPPPPPPPPPPFFPPFGPFPGPPGGFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNNHHNNNHNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNINNOOOOOTTSSFEFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFEHOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNGPPFPPPPPPPPPPPPPFGGPPPKPPPPPGGFFPPPFFPPPPPPPPPFPTTTTTTTTTPFPPPPFPPPPPPPPPPPPPPPPPPPPPPFFPPPPTTPPPPPPPFPKGPGFGGPPPPPPPPFFPPPPPRRPPFPPPOHHNOONNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOFNONNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNHOOOOOOOFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHNNOOINHHHHMNNHHOOOOOOOOOFFFFHFHHCONNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGFHPPFPPFTTTTTTTTTTTTTTTTTTTTTTTGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNINNNNNNNNNHHNNNNNNNNNNNNNNNNNNNNNNNNNNHHHNNNNNNNNNNNNNNNNNNHHHHHHHHINNNNNNNNOOOOOOOOOOOOOOOOHNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNHHSSSSSSSSSSFSSSSSSSSSSSSSSSSSFSSNNNNNNNNNNNNNNNNNNNNNIHNNNNHNNNNNNNNFTTTTTTTTTTTTFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNHNNNNNNNNNNNNNFNNNNNNNNNNNNNNNHNNNNNPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPTTTTGTTTTTTTTTTTTTTTTTTFTTTTTTTTTTTTGGTTTTTTTTTTTTTTTTFFSTTTTTTTTTTTTFTTTTGGTTTTTPPPPPPPPPPTFPPPPPPPPPPPPPPPTTTPPTSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFKNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNMNNNNNMNNNNNMNNMNNNMNNMNNNNMNNNNIINNNNNNNNNNNNNNNPPPPPGGPPPTTTFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFNONNNNNNNNNNNNNNNNNNNNOHHHHHHHNNNNNNNNHFNNNNNNNNNNNNNNNNNHNPPPPPPPTTTTTTFGTTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHTTTTTTTTTTFNNNHHHHNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNPPPPPFPPPPPPPPPPPTGPGPPFFPPPPPGPPPPPPPPPPPPPPPPPPPPPPPPGFPSPTPFFPPPPPPPPPPPPGPPPFGFTGTPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPHCCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNHNOHHHNNOONNNNNNNNNNNHHHHHNHHHHHNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHOHHHHHHHHHHHHHHHHOONNNNNNHNNNNNNNNNNNNNNNNNNNNNNNHHHHOHHHHOONNNNOOHHHHHHOONOONHHHHHHHHHHHHOHNNHNHHHHNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNONHHHOHHHH","n":["E2BIG","EACCES","EADDRINUSE","EADDRNOTAVAIL","EADV","EAFNOSUPPORT","EAGAIN","EALREADY","EBADE","EBADF","EBADFD","EBADMSG","EBADR","EBADRQC","EBADSLT","EBFONT","EBUSY","ECANCELED","ECHILD","ECHRNG","ECOMM","ECONNABORTED","ECONNREFUSED","ECONNRESET","EDEADLK","EDESTADDRREQ","EDOM","EDOTDOT","EDQUOT","EEXIST","EFAULT","EFBIG","EHOSTDOWN","EHOSTUNREACH","EHWPOISON","EIDRM","EILSEQ","EINPROGRESS","EINTR","EINVAL","EIO","EISCONN","EISDIR","EISNAM","EKEYEXPIRED","EKEYREJECTED","EKEYREVOKED","EL2HLT","EL2NSYNC","EL3HLT","EL3RST","ELIBACC","ELIBBAD","ELIBEXEC","ELIBMAX","ELIBSCN","ELNRNG","ELOOP","EMEDIUMTYPE","EMFILE","EMLINK","EMSGSIZE","EMULTIHOP","ENAMETOOLONG","ENAVAIL","ENETDOWN","ENETRESET","ENETUNREACH","ENFILE","ENOANO","ENOBUFS","ENOCSI","ENODATA","ENODEV","ENOENT","ENOEXEC","ENOKEY","ENOLCK","ENOLINK","ENOMEDIUM","ENOMEM","ENOMSG","ENONET","ENOPKG","ENOPROTOOPT","ENOSPC","ENOSR","ENOSTR","ENOSYS","ENOTBLK","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTNAM","ENOTRECOVERABLE","ENOTSOCK","ENOTTY","ENOTUNIQ","ENXIO","EOPNOTSUPP","EOVERFLOW","EOWNERDEAD","EPERM","EPFNOSUPPORT","EPIPE","EPROTO","EPROTONOSUPPORT","EPROTOTYPE","ERANGE","EREMCHG","EREMOTE","EREMOTEIO","ERESTART","ERFKILL","EROFS","ESHUTDOWN","ESOCKTNOSUPPORT","ESPIPE","ESRCH","ESRMNT","ESTALE","ESTRPIPE","ETIME","ETIMEDOUT","ETOOMANYREFS","ETXTBSY","EUCLEAN","EUNATCH","EUSERS","EXDEV","EXFULL","Err","Error","NixPath","Ok","Result","UnknownErrno","cmsg_space","dir","env","errno","fcntl","features","ifaddrs","ioctl_none","ioctl_none_bad","ioctl_read","ioctl_read_bad","ioctl_read_buf","ioctl_readwrite","ioctl_readwrite_bad","ioctl_readwrite_buf","ioctl_write_buf","ioctl_write_int","ioctl_write_int_bad","ioctl_write_ptr","ioctl_write_ptr_bad","is_empty","kmod","len","libc","mount","mqueue","net","poll","pty","request_code_none","request_code_read","request_code_readwrite","request_code_write","sched","sys","time","ucontext","unistd","with_nix_path","BlockDevice","CharacterDevice","Dir","Directory","Entry","Fifo","File","Iter","OwningIter","Socket","Symlink","Type","as_raw_fd","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","drop","drop","eq","eq","eq","eq","eq","file_name","file_type","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_fd","hash","hash","hash","hash","hash","ino","into","into","into","into","into","into_iter","into_iter","into_iter","iter","next","next","open","openat","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","ClearEnvError","borrow","borrow_mut","clearenv","clone","clone_into","fmt","fmt","from","into","to_owned","to_string","try_from","try_into","type_id","E2BIG","EACCES","EADDRINUSE","EADDRNOTAVAIL","EADV","EAFNOSUPPORT","EAGAIN","EALREADY","EBADE","EBADF","EBADFD","EBADMSG","EBADR","EBADRQC","EBADSLT","EBFONT","EBUSY","ECANCELED","ECHILD","ECHRNG","ECOMM","ECONNABORTED","ECONNREFUSED","ECONNRESET","EDEADLK","EDEADLOCK","EDEADLOCK","EDESTADDRREQ","EDOM","EDOTDOT","EDQUOT","EEXIST","EFAULT","EFBIG","EHOSTDOWN","EHOSTUNREACH","EHWPOISON","EIDRM","EILSEQ","EINPROGRESS","EINTR","EINVAL","EIO","EISCONN","EISDIR","EISNAM","EKEYEXPIRED","EKEYREJECTED","EKEYREVOKED","EL2HLT","EL2NSYNC","EL3HLT","EL3RST","ELIBACC","ELIBBAD","ELIBEXEC","ELIBMAX","ELIBSCN","ELNRNG","ELOOP","EMEDIUMTYPE","EMFILE","EMLINK","EMSGSIZE","EMULTIHOP","ENAMETOOLONG","ENAVAIL","ENETDOWN","ENETRESET","ENETUNREACH","ENFILE","ENOANO","ENOBUFS","ENOCSI","ENODATA","ENODEV","ENOENT","ENOEXEC","ENOKEY","ENOLCK","ENOLINK","ENOMEDIUM","ENOMEM","ENOMSG","ENONET","ENOPKG","ENOPROTOOPT","ENOSPC","ENOSR","ENOSTR","ENOSYS","ENOTBLK","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTNAM","ENOTRECOVERABLE","ENOTSOCK","ENOTSUP","ENOTSUP","ENOTTY","ENOTUNIQ","ENXIO","EOPNOTSUPP","EOVERFLOW","EOWNERDEAD","EPERM","EPFNOSUPPORT","EPIPE","EPROTO","EPROTONOSUPPORT","EPROTOTYPE","ERANGE","EREMCHG","EREMOTE","EREMOTEIO","ERESTART","ERFKILL","EROFS","ESHUTDOWN","ESOCKTNOSUPPORT","ESPIPE","ESRCH","ESRMNT","ESTALE","ESTRPIPE","ETIME","ETIMEDOUT","ETOOMANYREFS","ETXTBSY","EUCLEAN","EUNATCH","EUSERS","EWOULDBLOCK","EWOULDBLOCK","EXDEV","EXFULL","Errno","ErrnoSentinel","Sys","UnknownErrno","as_errno","borrow","borrow_mut","clear","clone","clone_into","desc","eq","errno","fmt","fmt","from","from_errno","from_i32","from_i32","into","invalid_argument","last","result","sentinel","to_owned","to_string","try_from","try_from","try_into","type_id","AT_EMPTY_PATH","AT_NO_AUTOMOUNT","AT_REMOVEDIR","AT_SYMLINK_FOLLOW","AT_SYMLINK_NOFOLLOW","AtFlags","FALLOC_FL_COLLAPSE_RANGE","FALLOC_FL_INSERT_RANGE","FALLOC_FL_KEEP_SIZE","FALLOC_FL_PUNCH_HOLE","FALLOC_FL_UNSHARE_RANGE","FALLOC_FL_ZERO_RANGE","FD_CLOEXEC","F_ADD_SEALS","F_DUPFD","F_DUPFD_CLOEXEC","F_GETFD","F_GETFL","F_GETLK","F_GETPIPE_SZ","F_GET_SEALS","F_OFD_GETLK","F_OFD_SETLK","F_OFD_SETLKW","F_SEAL_GROW","F_SEAL_SEAL","F_SEAL_SHRINK","F_SEAL_WRITE","F_SETFD","F_SETFL","F_SETLK","F_SETLKW","F_SETPIPE_SZ","FallocateFlags","FcntlArg","FdFlag","FlockArg","LockExclusive","LockExclusiveNonblock","LockShared","LockSharedNonblock","OFlag","O_ACCMODE","O_APPEND","O_ASYNC","O_CLOEXEC","O_CREAT","O_DIRECT","O_DIRECTORY","O_DSYNC","O_EXCL","O_FSYNC","O_LARGEFILE","O_NDELAY","O_NOATIME","O_NOCTTY","O_NOFOLLOW","O_NONBLOCK","O_PATH","O_RDONLY","O_RDWR","O_RSYNC","O_SYNC","O_TMPFILE","O_TRUNC","O_WRONLY","POSIX_FADV_DONTNEED","POSIX_FADV_NOREUSE","POSIX_FADV_NORMAL","POSIX_FADV_RANDOM","POSIX_FADV_SEQUENTIAL","POSIX_FADV_WILLNEED","PosixFadviseAdvice","RENAME_EXCHANGE","RENAME_NOREPLACE","RENAME_WHITEOUT","RenameFlags","SPLICE_F_GIFT","SPLICE_F_MORE","SPLICE_F_MOVE","SPLICE_F_NONBLOCK","SealFlag","SpliceFFlags","Unlock","UnlockNonblock","all","all","all","all","all","all","all","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bits","bits","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","complement","complement","complement","complement","complement","complement","complement","contains","contains","contains","contains","contains","contains","contains","copy_file_range","difference","difference","difference","difference","difference","difference","difference","empty","empty","empty","empty","empty","empty","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend","extend","extend","extend","fallocate","fcntl","flock","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","insert","insert","insert","insert","insert","insert","insert","intersection","intersection","intersection","intersection","intersection","intersection","intersection","intersects","intersects","intersects","intersects","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","is_all","is_all","is_all","is_all","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","not","not","not","not","not","not","not","open","openat","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","posix_fadvise","posix_fallocate","readlink","readlinkat","remove","remove","remove","remove","remove","remove","remove","renameat","renameat2","set","set","set","set","set","set","set","splice","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","tee","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","toggle","toggle","toggle","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","union","union","union","union","vmsplice","socket_atomic_cloexec","InterfaceAddress","InterfaceAddressIterator","address","borrow","borrow","borrow_mut","borrow_mut","broadcast","clone","clone_into","destination","drop","eq","eq","flags","fmt","fmt","from","from","getifaddrs","hash","hash","interface_name","into","into","into_iter","netmask","next","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","DeleteModuleFlags","MODULE_INIT_IGNORE_MODVERSIONS","MODULE_INIT_IGNORE_VERMAGIC","ModuleInitFlags","O_NONBLOCK","O_TRUNC","all","all","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","complement","complement","contains","contains","delete_module","difference","difference","empty","empty","eq","eq","extend","extend","finit_module","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","hash","hash","init_module","insert","insert","intersection","intersection","intersects","intersects","into","into","is_all","is_all","is_empty","is_empty","not","not","partial_cmp","partial_cmp","remove","remove","set","set","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","toggle","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","union","MNT_DETACH","MNT_EXPIRE","MNT_FORCE","MS_ACTIVE","MS_BIND","MS_DIRSYNC","MS_I_VERSION","MS_KERNMOUNT","MS_LAZYTIME","MS_MANDLOCK","MS_MGC_MSK","MS_MGC_VAL","MS_MOVE","MS_NOATIME","MS_NODEV","MS_NODIRATIME","MS_NOEXEC","MS_NOSUID","MS_NOUSER","MS_POSIXACL","MS_PRIVATE","MS_RDONLY","MS_REC","MS_RELATIME","MS_REMOUNT","MS_RMT_MASK","MS_SHARED","MS_SILENT","MS_SLAVE","MS_STRICTATIME","MS_SYNCHRONOUS","MS_UNBINDABLE","MntFlags","MsFlags","all","all","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","complement","complement","contains","contains","difference","difference","empty","empty","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","hash","hash","insert","insert","intersection","intersection","intersects","intersects","into","into","is_all","is_all","is_empty","is_empty","mount","not","not","partial_cmp","partial_cmp","remove","remove","set","set","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","toggle","toggle","try_from","try_from","try_into","try_into","type_id","type_id","umount","umount2","union","union","FD_CLOEXEC","FdFlag","MQ_OFlag","MqAttr","O_CLOEXEC","O_CREAT","O_EXCL","O_NONBLOCK","O_RDONLY","O_RDWR","O_WRONLY","all","all","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","complement","complement","contains","contains","difference","difference","empty","empty","eq","eq","eq","extend","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","hash","hash","hash","insert","insert","intersection","intersection","intersects","intersects","into","into","into","is_all","is_all","is_empty","is_empty","mq_attr_member_t","mq_close","mq_getattr","mq_open","mq_receive","mq_remove_nonblock","mq_send","mq_set_nonblock","mq_setattr","mq_unlink","new","not","not","partial_cmp","partial_cmp","remove","remove","set","set","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","union","if_","IFF_ALLMULTI","IFF_AUTOMEDIA","IFF_BROADCAST","IFF_DEBUG","IFF_DORMANT","IFF_DYNAMIC","IFF_ECHO","IFF_LOOPBACK","IFF_LOWER_UP","IFF_MASTER","IFF_MULTICAST","IFF_NOARP","IFF_NOTRAILERS","IFF_NO_PI","IFF_POINTOPOINT","IFF_PORTSEL","IFF_PROMISC","IFF_RUNNING","IFF_SLAVE","IFF_TAP","IFF_TUN","IFF_UP","Interface","InterfaceFlags","Interfaces","InterfacesIter","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","complement","contains","difference","drop","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","if_nameindex","if_nametoindex","index","insert","intersection","intersects","into","into","into","into","into_iter","into_iter","is_all","is_empty","iter","name","next","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","to_slice","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","POLLERR","POLLHUP","POLLIN","POLLNVAL","POLLOUT","POLLPRI","POLLRDBAND","POLLRDNORM","POLLWRBAND","POLLWRNORM","PollFd","PollFlags","all","as_raw_fd","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","difference","empty","eq","eq","events","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","hash","insert","intersection","intersects","into","into","is_all","is_empty","new","not","partial_cmp","poll","ppoll","remove","revents","set","set_events","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","ForkptyResult","OpenptyResult","PtyMaster","SessionId","Winsize","as_raw_fd","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","drop","eq","eq","eq","flush","fmt","fmt","fmt","fmt","fork_result","forkpty","from","from","from","from","from","grantpt","hash","hash","hash","into","into","into","into","into_raw_fd","master","master","openpty","posix_openpt","ptsname","ptsname_r","read","slave","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unlockpt","write","ws_col","ws_row","ws_xpixel","ws_ypixel","CLONE_DETACHED","CLONE_FILES","CLONE_FS","CLONE_IO","CLONE_NEWCGROUP","CLONE_NEWIPC","CLONE_NEWNET","CLONE_NEWNS","CLONE_NEWPID","CLONE_NEWUSER","CLONE_NEWUTS","CLONE_PARENT","CLONE_PTRACE","CLONE_SIGHAND","CLONE_SYSVSEM","CLONE_THREAD","CLONE_UNTRACED","CLONE_VFORK","CLONE_VM","CloneCb","CloneFlags","CpuSet","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","cmp","complement","contains","count","default","difference","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","hash","insert","intersection","intersects","into","into","is_all","is_empty","is_set","new","not","partial_cmp","remove","sched_getaffinity","sched_setaffinity","sched_yield","set","set","setns","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","unset","unshare","aio","epoll","eventfd","inotify","ioctl","memfd","mman","personality","pthread","ptrace","quota","reboot","resource","select","sendfile","signal","signalfd","socket","stat","statfs","statvfs","sysinfo","termios","time","timerfd","uio","utsname","wait","AioAllDone","AioCancelStat","AioCanceled","AioCb","AioFsyncMode","AioNotCanceled","LIO_NOP","LIO_NOWAIT","LIO_READ","LIO_WAIT","LIO_WRITE","LioCb","LioCbBuilder","LioMode","LioOpcode","O_DSYNC","O_SYNC","aio_cancel_all","aio_return","aio_return","aio_suspend","aiocbs","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cancel","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","drop","emplace_mut_slice","emplace_slice","eq","eq","eq","eq","error","error","fd","finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_fd","from_mut_ptr","from_mut_slice","from_ptr","from_slice","fsync","hash","hash","hash","hash","into","into","into","into","into","into","into","is_empty","len","lio_opcode","listio","listio_resubmit","nbytes","offset","partial_cmp","partial_cmp","partial_cmp","priority","read","set_sigev_notify","sigevent","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity","write","EPOLLERR","EPOLLET","EPOLLEXCLUSIVE","EPOLLHUP","EPOLLIN","EPOLLMSG","EPOLLONESHOT","EPOLLOUT","EPOLLPRI","EPOLLRDBAND","EPOLLRDHUP","EPOLLRDNORM","EPOLLWAKEUP","EPOLLWRBAND","EPOLLWRNORM","EPOLL_CLOEXEC","EpollCreateFlags","EpollCtlAdd","EpollCtlDel","EpollCtlMod","EpollEvent","EpollFlags","EpollOp","all","all","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","complement","complement","contains","contains","data","difference","difference","empty","empty","empty","epoll_create","epoll_create1","epoll_ctl","epoll_wait","eq","eq","eq","eq","events","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","hash","hash","hash","hash","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","is_all","is_all","is_empty","is_empty","new","not","not","partial_cmp","partial_cmp","remove","remove","set","set","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","union","EFD_CLOEXEC","EFD_NONBLOCK","EFD_SEMAPHORE","EfdFlags","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","cmp","complement","contains","difference","empty","eq","eventfd","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","is_all","is_empty","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_into","type_id","union","AddWatchFlags","IN_ACCESS","IN_ALL_EVENTS","IN_ATTRIB","IN_CLOEXEC","IN_CLOSE","IN_CLOSE_NOWRITE","IN_CLOSE_WRITE","IN_CREATE","IN_DELETE","IN_DELETE_SELF","IN_DONT_FOLLOW","IN_IGNORED","IN_ISDIR","IN_MODIFY","IN_MOVE","IN_MOVED_FROM","IN_MOVED_TO","IN_MOVE_SELF","IN_NONBLOCK","IN_ONESHOT","IN_ONLYDIR","IN_OPEN","IN_Q_OVERFLOW","IN_UNMOUNT","InitFlags","Inotify","InotifyEvent","WatchDescriptor","add_watch","all","all","as_raw_fd","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","complement","complement","contains","contains","cookie","difference","difference","empty","empty","eq","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_raw_fd","hash","hash","hash","init","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","is_all","is_all","is_empty","is_empty","mask","name","not","not","partial_cmp","partial_cmp","partial_cmp","read_events","remove","remove","rm_watch","set","set","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union","union","wd","request_code_none","request_code_read","request_code_readwrite","request_code_write","MFD_ALLOW_SEALING","MFD_CLOEXEC","MemFdCreateFlag","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","cmp","complement","contains","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","is_all","is_empty","memfd_create","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_into","type_id","union","MADV_DODUMP","MADV_DOFORK","MADV_DONTDUMP","MADV_DONTFORK","MADV_DONTNEED","MADV_FREE","MADV_HUGEPAGE","MADV_HWPOISON","MADV_MERGEABLE","MADV_NOHUGEPAGE","MADV_NORMAL","MADV_RANDOM","MADV_REMOVE","MADV_SEQUENTIAL","MADV_SOFT_OFFLINE","MADV_UNMERGEABLE","MADV_WILLNEED","MAP_32BIT","MAP_ANON","MAP_ANONYMOUS","MAP_DENYWRITE","MAP_EXECUTABLE","MAP_FILE","MAP_FIXED","MAP_GROWSDOWN","MAP_HUGETLB","MAP_HUGE_16GB","MAP_HUGE_16MB","MAP_HUGE_1GB","MAP_HUGE_1MB","MAP_HUGE_256MB","MAP_HUGE_2GB","MAP_HUGE_2MB","MAP_HUGE_32MB","MAP_HUGE_512KB","MAP_HUGE_512MB","MAP_HUGE_64KB","MAP_HUGE_8MB","MAP_LOCKED","MAP_NONBLOCK","MAP_NORESERVE","MAP_POPULATE","MAP_PRIVATE","MAP_SHARED","MAP_STACK","MCL_CURRENT","MCL_FUTURE","MREMAP_FIXED","MREMAP_MAYMOVE","MRemapFlags","MS_ASYNC","MS_INVALIDATE","MS_SYNC","MapFlags","MlockAllFlags","MmapAdvise","MsFlags","PROT_EXEC","PROT_GROWSDOWN","PROT_GROWSUP","PROT_NONE","PROT_READ","PROT_WRITE","ProtFlags","all","all","all","all","all","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","complement","complement","complement","complement","complement","contains","contains","contains","contains","contains","difference","difference","difference","difference","difference","empty","empty","empty","empty","empty","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_iter","from_iter","from_iter","hash","hash","hash","hash","hash","hash","insert","insert","insert","insert","insert","intersection","intersection","intersection","intersection","intersection","intersects","intersects","intersects","intersects","intersects","into","into","into","into","into","into","is_all","is_all","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_empty","is_empty","madvise","mlock","mlockall","mmap","mprotect","mremap","msync","munlock","munlockall","munmap","not","not","not","not","not","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","remove","remove","remove","remove","remove","set","set","set","set","set","shm_open","shm_unlink","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","toggle","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","union","union","ADDR_COMPAT_LAYOUT","ADDR_LIMIT_32BIT","ADDR_LIMIT_3GB","ADDR_NO_RANDOMIZE","FDPIC_FUNCPTRS","MMAP_PAGE_ZERO","Persona","READ_IMPLIES_EXEC","SHORT_INODE","STICKY_TIMEOUTS","UNAME26","WHOLE_SECONDS","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","cmp","complement","contains","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","get","hash","insert","intersection","intersects","into","is_all","is_empty","not","partial_cmp","remove","set","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_into","type_id","union","Pthread","pthread_kill","pthread_self","AddressType","Event","Options","PTRACE_ATTACH","PTRACE_CONT","PTRACE_DETACH","PTRACE_EVENT_CLONE","PTRACE_EVENT_EXEC","PTRACE_EVENT_EXIT","PTRACE_EVENT_FORK","PTRACE_EVENT_SECCOMP","PTRACE_EVENT_STOP","PTRACE_EVENT_VFORK","PTRACE_EVENT_VFORK_DONE","PTRACE_GETEVENTMSG","PTRACE_GETFPREGS","PTRACE_GETFPXREGS","PTRACE_GETREGS","PTRACE_GETREGSET","PTRACE_GETSIGINFO","PTRACE_INTERRUPT","PTRACE_KILL","PTRACE_LISTEN","PTRACE_O_EXITKILL","PTRACE_O_TRACECLONE","PTRACE_O_TRACEEXEC","PTRACE_O_TRACEEXIT","PTRACE_O_TRACEFORK","PTRACE_O_TRACESECCOMP","PTRACE_O_TRACESYSGOOD","PTRACE_O_TRACEVFORK","PTRACE_O_TRACEVFORKDONE","PTRACE_PEEKDATA","PTRACE_PEEKSIGINFO","PTRACE_PEEKTEXT","PTRACE_PEEKUSER","PTRACE_POKEDATA","PTRACE_POKETEXT","PTRACE_POKEUSER","PTRACE_SEIZE","PTRACE_SETFPREGS","PTRACE_SETFPXREGS","PTRACE_SETOPTIONS","PTRACE_SETREGS","PTRACE_SETREGSET","PTRACE_SETSIGINFO","PTRACE_SINGLESTEP","PTRACE_SYSCALL","PTRACE_SYSEMU","PTRACE_SYSEMU_SINGLESTEP","PTRACE_TRACEME","Request","all","attach","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","complement","cont","contains","detach","difference","empty","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","getevent","getregs","getsiginfo","hash","hash","hash","insert","interrupt","intersection","intersects","into","into","into","is_all","is_empty","kill","not","partial_cmp","partial_cmp","partial_cmp","read","remove","seize","set","setoptions","setregs","setsiginfo","step","sub","sub_assign","symmetric_difference","syscall","sysemu","sysemu_step","to_owned","to_owned","to_owned","toggle","traceme","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","write","Dqblk","GRPQUOTA","QFMT_VFS_OLD","QFMT_VFS_V0","QFMT_VFS_V1","QIF_ALL","QIF_BLIMITS","QIF_BTIME","QIF_ILIMITS","QIF_INODES","QIF_ITIME","QIF_LIMITS","QIF_SPACE","QIF_TIMES","QIF_USAGE","QuotaFmt","QuotaType","QuotaValidFlags","USRQUOTA","all","allocated_inodes","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","block_time_limit","blocks_hard_limit","blocks_soft_limit","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","complement","contains","default","default","difference","empty","eq","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","hash","hash","hash","inode_time_limit","inodes_hard_limit","inodes_soft_limit","insert","intersection","intersects","into","into","into","into","is_all","is_empty","not","occupied_space","partial_cmp","partial_cmp","partial_cmp","quotactl_get","quotactl_off","quotactl_on","quotactl_set","quotactl_sync","remove","set","set_block_time_limit","set_blocks_hard_limit","set_blocks_soft_limit","set_inode_time_limit","set_inodes_hard_limit","set_inodes_soft_limit","sub","sub_assign","symmetric_difference","to_owned","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","RB_AUTOBOOT","RB_HALT_SYSTEM","RB_KEXEC","RB_POWER_OFF","RB_SW_SUSPEND","RebootMode","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","from","hash","into","partial_cmp","reboot","set_cad_enabled","to_owned","try_from","try_into","type_id","RLIMIT_AS","RLIMIT_CORE","RLIMIT_CPU","RLIMIT_DATA","RLIMIT_FSIZE","RLIMIT_LOCKS","RLIMIT_MEMLOCK","RLIMIT_MSGQUEUE","RLIMIT_NICE","RLIMIT_NOFILE","RLIMIT_NPROC","RLIMIT_RSS","RLIMIT_RTPRIO","RLIMIT_RTTIME","RLIMIT_SIGPENDING","RLIMIT_STACK","Resource","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","from","getrlimit","hash","into","partial_cmp","rlim_t","setrlimit","to_owned","try_from","try_into","type_id","FD_SETSIZE","FdSet","Fds","borrow","borrow","borrow_mut","borrow_mut","clear","clone","clone_into","contains","default","eq","fds","fmt","fmt","from","from","hash","highest","insert","into","into","into_iter","new","next","next_back","pselect","remove","select","size_hint","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","sendfile","sendfile64","Handler","SA_NOCLDSTOP","SA_NOCLDWAIT","SA_NODEFER","SA_ONSTACK","SA_RESETHAND","SA_RESTART","SA_SIGINFO","SIGABRT","SIGALRM","SIGBUS","SIGCHLD","SIGCONT","SIGFPE","SIGHUP","SIGILL","SIGINT","SIGIO","SIGIOT","SIGKILL","SIGPIPE","SIGPOLL","SIGPROF","SIGPWR","SIGQUIT","SIGSEGV","SIGSTKFLT","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGUNUSED","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","SIG_BLOCK","SIG_SETMASK","SIG_UNBLOCK","SaFlags","SigAction","SigAction","SigDfl","SigEvent","SigHandler","SigIgn","SigSet","SigevNone","SigevNotify","SigevSignal","SigevThreadId","SigmaskHow","Signal","SignalIterator","add","all","all","as_ref","as_ref","as_str","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","complement","contains","contains","difference","empty","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_str","handler","hash","hash","hash","hash","hash","hash","hash","hash","hash","insert","intersection","intersects","into","into","into","into","into","into","into","into","into","into_iter","is_all","is_empty","iterator","kill","killpg","mask","new","new","next","not","partial_cmp","partial_cmp","partial_cmp","pthread_sigmask","raise","remove","remove","set","sigaction","sigevent","signal","sigprocmask","sub","sub_assign","symmetric_difference","thread_block","thread_get_mask","thread_set_mask","thread_swap_mask","thread_unblock","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_of_thread_id","union","wait","si_value","si_value","signal","signal","thread_id","SFD_CLOEXEC","SFD_NONBLOCK","SIGNALFD_NEW","SIGNALFD_SIGINFO_SIZE","SfdFlags","SigSet","SignalFd","all","as_raw_fd","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","difference","drop","empty","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","hash","hash","insert","intersection","intersects","into","into","into","into_iter","is_all","is_empty","new","next","not","partial_cmp","read_signal","remove","set","set_mask","siginfo","signal","signalfd","ssi_addr","ssi_addr_lsb","ssi_arch","ssi_band","ssi_call_addr","ssi_code","ssi_errno","ssi_fd","ssi_int","ssi_overrun","ssi_pid","ssi_ptr","ssi_signo","ssi_status","ssi_stime","ssi_syscall","ssi_tid","ssi_trapno","ssi_uid","ssi_utime","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","with_flags","AddressFamily","Alg","Alg","AlgAddr","AlgSetAeadAssoclen","AlgSetIv","AlgSetOp","AppleTalk","Ash","AtmPvc","AtmSvc","Ax25","Bluetooth","Both","Bridge","Caif","Can","CmsgIterator","ControlMessage","ControlMessageOwned","Datagram","Decnet","Econet","GetSockOpt","Ib","Ieee802154","Inet","Inet","Inet6","InetAddr","IpAddr","IpMembershipRequest","Ipv4Addr","Ipv4PacketInfo","Ipv4PacketInfo","Ipv4RecvErr","Ipv6Addr","Ipv6MembershipRequest","Ipv6PacketInfo","Ipv6PacketInfo","Ipv6RecvErr","Ipx","Irda","Isdn","Iucv","Key","Link","LinkAddr","Llc","MSG_CMSG_CLOEXEC","MSG_CTRUNC","MSG_DONTWAIT","MSG_EOR","MSG_ERRQUEUE","MSG_OOB","MSG_PEEK","MSG_TRUNC","MSG_WAITALL","Mpls","MsgFlags","NetBeui","NetRom","Netlink","Netlink","NetlinkAddr","NetlinkAudit","NetlinkCrypto","NetlinkDECNetRoutingMessage","NetlinkFIBLookup","NetlinkIPv6Firewall","NetlinkISCSI","NetlinkKObjectUEvent","NetlinkNetFilter","NetlinkRDMA","NetlinkRoute","NetlinkSCSITransport","NetlinkSELinux","NetlinkSockDiag","NetlinkUserSock","Nfc","Packet","Phonet","Pppox","Raw","Rdm","Rds","Read","RecvMmsgData","RecvMsg","Rose","RxRpc","RxqOvfl","RxqOvfl","SOCK_CLOEXEC","SOCK_NONBLOCK","ScmCredentials","ScmCredentials","ScmRights","ScmRights","ScmTimestamp","ScmTimestampns","Security","SendMmsgData","SeqPacket","SetSockOpt","Shutdown","Sna","SockAddr","SockFlag","SockProtocol","SockType","Stream","Tcp","Tipc","Udp","UdpGroSegments","UdpGsoSegments","Unix","Unix","UnixAddr","UnixCredentials","Unspec","V4","V4","V6","V6","Val","Val","Vsock","Vsock","VsockAddr","Wanpipe","Write","X25","_lt","accept","accept4","addr","addr","address","alg_name","alg_type","all","all","any","as_abstract","as_ffi_pair","as_mut_ptr","as_ptr","bind","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","cid","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmsg_buffer","cmsg_len","cmsg_level","cmsg_type","cmsghdr","cmsgs","cmsgs","complement","complement","connect","contains","contains","default","difference","difference","empty","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","family","family","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_i32","from_iter","from_iter","from_std","from_std","from_std","from_std","get","getpeername","getsockname","getsockopt","gid","groups","halen","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hatype","ifindex","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","iov","iov","ip","is_all","is_all","is_empty","is_empty","listen","msg_control","msg_controllen","msg_flags","msg_iov","msg_iovlen","msg_name","msg_namelen","msghdr","new","new","new","new","new","new","new","new","new","new","new_abstract","new_alg","new_inet","new_netlink","new_unix","new_v4","new_v6","new_vsock","next","not","not","octets","partial_cmp","partial_cmp","path","path_len","pid","pid","pkttype","port","port","protocol","recv","recvfrom","recvmmsg","recvmsg","remove","remove","sa_data","sa_family","sa_family_t","segments","send","sendmmsg","sendmsg","sendto","set","set","set","setsockopt","shutdown","sin6_addr","sin6_family","sin6_flowinfo","sin6_port","sin6_scope_id","sin_addr","sin_family","sin_port","sin_zero","sockaddr","sockaddr_in","sockaddr_in6","sockaddr_storage","sockaddr_storage_to_addr","sockaddr_un","socket","socketpair","sockopt","ss_family","sub","sub","sub_assign","sub_assign","sun_family","sun_path","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_std","to_std","to_std","to_std","to_str","to_str","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uid","union","union","AcceptConn","AlgSetAeadAuthSize","AlgSetKey","BindToDevice","Broadcast","Ip6tOriginalDst","IpAddMembership","IpDropMembership","IpFreebind","IpMulticastLoop","IpMulticastTtl","IpTransparent","Ipv4PacketInfo","Ipv4RecvErr","Ipv4Ttl","Ipv6AddMembership","Ipv6DropMembership","Ipv6RecvErr","Ipv6RecvPacketInfo","Ipv6Ttl","Ipv6V6Only","KeepAlive","Linger","Mark","OobInline","OriginalDst","PassCred","PeerCredentials","RcvBuf","RcvBufForce","ReceiveTimeout","ReceiveTimestamp","ReceiveTimestampns","ReuseAddr","ReusePort","RxqOvfl","SendTimeout","SndBuf","SndBufForce","SockType","SocketError","TcpCongestion","TcpKeepCount","TcpKeepIdle","TcpKeepInterval","TcpMaxSeg","TcpNoDelay","TcpRepair","TcpUserTimeout","UdpGroSegment","UdpGsoSegment","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","set","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","FchmodatFlags","FileStat","FileStat","FollowSymlink","FollowSymlink","Mode","NoFollowSymlink","NoFollowSymlink","SFlag","S_IFBLK","S_IFCHR","S_IFDIR","S_IFIFO","S_IFLNK","S_IFMT","S_IFREG","S_IFSOCK","S_IRGRP","S_IROTH","S_IRUSR","S_IRWXG","S_IRWXO","S_IRWXU","S_ISGID","S_ISUID","S_ISVTX","S_IWGRP","S_IWOTH","S_IWUSR","S_IXGRP","S_IXOTH","S_IXUSR","UtimensatFlags","all","all","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","complement","complement","contains","contains","dev_t","difference","difference","empty","empty","eq","eq","eq","extend","extend","fchmod","fchmodat","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","fstat","fstatat","futimens","hash","hash","hash","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","is_all","is_all","is_empty","is_empty","lstat","lutimes","major","makedev","minor","mkdirat","mknod","mknodat","mode_t","not","not","partial_cmp","partial_cmp","remove","remove","set","set","st_atime","st_atime_nsec","st_blksize","st_blocks","st_ctime","st_ctime_nsec","st_dev","st_gid","st_ino","st_mode","st_mtime","st_mtime_nsec","st_nlink","st_rdev","st_size","st_uid","stat","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","umask","union","union","utimensat","utimes","ADFS_SUPER_MAGIC","AFFS_SUPER_MAGIC","CGROUP2_SUPER_MAGIC","CGROUP_SUPER_MAGIC","CODA_SUPER_MAGIC","CRAMFS_MAGIC","EFS_SUPER_MAGIC","EXT2_SUPER_MAGIC","EXT3_SUPER_MAGIC","EXT4_SUPER_MAGIC","FsType","HPFS_SUPER_MAGIC","HUGETLBFS_MAGIC","ISOFS_SUPER_MAGIC","JFFS2_SUPER_MAGIC","MINIX2_SUPER_MAGIC","MINIX2_SUPER_MAGIC2","MINIX_SUPER_MAGIC","MINIX_SUPER_MAGIC2","MSDOS_SUPER_MAGIC","NCP_SUPER_MAGIC","NFS_SUPER_MAGIC","OPENPROM_SUPER_MAGIC","OVERLAYFS_SUPER_MAGIC","PROC_SUPER_MAGIC","QNX4_SUPER_MAGIC","REISERFS_SUPER_MAGIC","SMB_SUPER_MAGIC","Statfs","TMPFS_MAGIC","USBDEVICE_SUPER_MAGIC","block_size","blocks","blocks_available","blocks_free","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","files","files_free","filesystem_id","filesystem_type","fmt","fmt","from","from","fsid_t","fstatfs","into","into","maximum_name_length","optimal_transfer_size","statfs","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","FsFlags","ST_APPEND","ST_IMMUTABLE","ST_MANDLOCK","ST_NOATIME","ST_NODEV","ST_NODIRATIME","ST_NOEXEC","ST_NOSUID","ST_RDONLY","ST_RELATIME","ST_SYNCHRONOUS","ST_WRITE","Statvfs","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","block_size","blocks","blocks_available","blocks_free","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","default","difference","empty","eq","eq","extend","files","files_available","files_free","filesystem_id","flags","fmt","fmt","fmt","fmt","fmt","fmt","fragment_size","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","fstatvfs","hash","hash","insert","intersection","intersects","into","into","is_all","is_empty","name_max","not","partial_cmp","remove","set","statvfs","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","SysInfo","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash","into","load_average","process_count","ram_total","ram_unused","swap_free","swap_total","sysinfo","to_owned","try_from","try_into","type_id","uptime","B0","B1000000","B110","B115200","B1152000","B1200","B134","B150","B1500000","B1800","B19200","B200","B2000000","B230400","B2400","B2500000","B300","B3000000","B3500000","B38400","B4000000","B460800","B4800","B50","B500000","B57600","B576000","B600","B75","B921600","B9600","BRKINT","BS0","BS1","BSDLY","BaudRate","CBAUD","CBAUDEX","CIBAUD","CLOCAL","CMSPAR","CR0","CR1","CR2","CR3","CRDLY","CREAD","CRTSCTS","CS5","CS6","CS7","CS8","CSIZE","CSTOPB","ControlFlags","ECHO","ECHOCTL","ECHOE","ECHOK","ECHOKE","ECHONL","ECHOPRT","EXTPROC","FF0","FF1","FFDLY","FLUSHO","FlowArg","FlushArg","HUPCL","ICANON","ICRNL","IEXTEN","IGNBRK","IGNCR","IGNPAR","IMAXBEL","INLCR","INPCK","ISIG","ISTRIP","IUTF8","IXANY","IXOFF","IXON","InputFlags","LocalFlags","NCCS","NL0","NL1","NLDLY","NOFLSH","OCRNL","OFDEL","OFILL","OLCUC","ONLCR","ONLRET","ONOCR","OPOST","OutputFlags","PARENB","PARMRK","PARODD","PENDIN","SetArg","SpecialCharacterIndices","TAB0","TAB1","TAB2","TAB3","TABDLY","TCIFLUSH","TCIOFF","TCIOFLUSH","TCION","TCOFLUSH","TCOOFF","TCOON","TCSADRAIN","TCSAFLUSH","TCSANOW","TOSTOP","Termios","VDISCARD","VEOF","VEOL","VEOL2","VERASE","VINTR","VKILL","VLNEXT","VMIN","VQUIT","VREPRINT","VSTART","VSTOP","VSUSP","VSWTC","VT0","VT1","VTDLY","VTIME","VWERASE","XTABS","_POSIX_VDISABLE","all","all","all","all","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cfgetispeed","cfgetospeed","cfmakeraw","cfsetispeed","cfsetospeed","cfsetspeed","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","complement","complement","complement","complement","contains","contains","contains","contains","control_chars","control_flags","difference","difference","difference","difference","empty","empty","empty","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_iter","from_iter","hash","hash","hash","hash","hash","hash","hash","hash","hash","input_flags","insert","insert","insert","insert","intersection","intersection","intersection","intersection","intersects","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","is_all","is_all","is_all","is_all","is_empty","is_empty","is_empty","is_empty","local_flags","not","not","not","not","output_flags","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","remove","remove","remove","remove","set","set","set","set","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","symmetric_difference","tcdrain","tcflow","tcflush","tcgetattr","tcgetsid","tcsendbreak","tcsetattr","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","toggle","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","union","TimeSpec","TimeVal","TimeValLike","add","add","as_mut","as_mut","as_ref","as_ref","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","div","div","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from_duration","from_timespec","hash","hash","hours","into","into","microseconds","microseconds","microseconds","milliseconds","milliseconds","milliseconds","minutes","mul","mul","nanoseconds","nanoseconds","nanoseconds","neg","neg","num_hours","num_microseconds","num_microseconds","num_microseconds","num_milliseconds","num_milliseconds","num_milliseconds","num_minutes","num_nanoseconds","num_nanoseconds","num_nanoseconds","num_seconds","num_seconds","num_seconds","partial_cmp","partial_cmp","seconds","seconds","seconds","sub","sub","suseconds_t","time_t","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","tv_nsec","tv_sec","tv_sec","tv_usec","type_id","type_id","zero","CLOCK_BOOTTIME","CLOCK_BOOTTIME_ALARM","CLOCK_MONOTONIC","CLOCK_REALTIME","CLOCK_REALTIME_ALARM","ClockId","Expiration","Interval","IntervalDelayed","OneShot","TFD_CLOEXEC","TFD_NONBLOCK","TFD_TIMER_ABSTIME","TimerFd","TimerFlags","TimerSetTimeFlags","all","all","as_raw_fd","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","complement","complement","contains","contains","difference","difference","drop","empty","empty","eq","eq","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_iter","from_iter","from_raw_fd","get","hash","hash","hash","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","is_all","is_all","is_empty","is_empty","new","not","not","partial_cmp","partial_cmp","partial_cmp","remove","remove","set","set","set","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union","union","unset","wait","IoVec","RemoteIoVec","as_slice","base","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","from_mut_slice","from_slice","hash","hash","into","into","len","pread","preadv","process_vm_readv","process_vm_writev","pwrite","pwritev","readv","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","writev","UtsName","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash","into","machine","nodename","release","sysname","to_owned","try_from","try_into","type_id","uname","version","Continued","Exited","PtraceEvent","PtraceSyscall","Signaled","StillAlive","Stopped","WCONTINUED","WEXITED","WNOHANG","WNOWAIT","WSTOPPED","WUNTRACED","WaitPidFlag","WaitStatus","__WALL","__WCLONE","__WNOTHREAD","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","difference","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_raw","hash","hash","insert","intersection","intersects","into","into","is_all","is_empty","not","partial_cmp","pid","remove","set","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","wait","waitpid","CLOCK_BOOTTIME","CLOCK_BOOTTIME_ALARM","CLOCK_MONOTONIC","CLOCK_MONOTONIC_COARSE","CLOCK_MONOTONIC_RAW","CLOCK_PROCESS_CPUTIME_ID","CLOCK_REALTIME","CLOCK_REALTIME_ALARM","CLOCK_REALTIME_COARSE","CLOCK_THREAD_CPUTIME_ID","ClockId","as_raw","borrow","borrow_mut","clock_getcpuclockid","clock_getres","clock_gettime","clock_settime","clone","clone_into","cmp","eq","fmt","fmt","from","from","from_raw","hash","into","now","partial_cmp","pid_cpu_clock_id","res","set_time","to_owned","to_string","try_from","try_into","type_id","UContext","borrow","borrow_mut","clone","clone_into","eq","fmt","from","get","hash","into","set","sigmask","sigmask_mut","to_owned","try_from","try_into","type_id","AIO_LISTIO_MAX","AIO_MAX","AIO_PRIO_DELTA_MAX","ARG_MAX","ATEXIT_MAX","AccessFlags","BC_BASE_MAX","BC_DIM_MAX","BC_SCALE_MAX","BC_STRING_MAX","CHILD_MAX","CLK_TCK","COLL_WEIGHTS_MAX","Child","DELAYTIMER_MAX","EXPR_NEST_MAX","FILESIZEBITS","F_OK","FchownatFlags","FollowSymlink","ForkResult","GETGR_R_SIZE_MAX","GETPW_R_SIZE_MAX","Gid","Group","HOST_NAME_MAX","IOV_MAX","LINE_MAX","LINK_MAX","LOGIN_NAME_MAX","LinkatFlags","MAX_CANON","MAX_INPUT","MQ_OPEN_MAX","MQ_PRIO_MAX","NAME_MAX","NGROUPS_MAX","NoFollowSymlink","NoRemoveDir","NoSymlinkFollow","OPEN_MAX","PAGE_SIZE","PATH_MAX","PIPE_BUF","POSIX2_SYMLINKS","POSIX_ALLOC_SIZE_MIN","POSIX_REC_INCR_XFER_SIZE","POSIX_REC_MAX_XFER_SIZE","POSIX_REC_MIN_XFER_SIZE","POSIX_REC_XFER_ALIGN","PTHREAD_DESTRUCTOR_ITERATIONS","PTHREAD_KEYS_MAX","PTHREAD_STACK_MIN","PTHREAD_THREADS_MAX","Parent","PathconfVar","Pid","RE_DUP_MAX","ROOT","RTSIG_MAX","R_OK","RemoveDir","ResGid","ResUid","SEM_NSEMS_MAX","SEM_VALUE_MAX","SIGQUEUE_MAX","STREAM_MAX","SYMLINK_MAX","SYMLOOP_MAX","SeekCur","SeekData","SeekEnd","SeekHole","SeekSet","SymlinkFollow","SysconfVar","TIMER_MAX","TTY_NAME_MAX","TZNAME_MAX","Uid","UnlinkatFlags","User","W_OK","Whence","X_OK","_POSIX2_CHAR_TERM","_POSIX2_C_BIND","_POSIX2_C_DEV","_POSIX2_FORT_DEV","_POSIX2_FORT_RUN","_POSIX2_LOCALEDEF","_POSIX2_PBS","_POSIX2_PBS_ACCOUNTING","_POSIX2_PBS_CHECKPOINT","_POSIX2_PBS_LOCATE","_POSIX2_PBS_MESSAGE","_POSIX2_PBS_TRACK","_POSIX2_SW_DEV","_POSIX2_UPE","_POSIX2_VERSION","_POSIX_ADVISORY_INFO","_POSIX_ASYNCHRONOUS_IO","_POSIX_ASYNC_IO","_POSIX_BARRIERS","_POSIX_CHOWN_RESTRICTED","_POSIX_CLOCK_SELECTION","_POSIX_CPUTIME","_POSIX_FSYNC","_POSIX_IPV6","_POSIX_JOB_CONTROL","_POSIX_MAPPED_FILES","_POSIX_MEMLOCK","_POSIX_MEMLOCK_RANGE","_POSIX_MEMORY_PROTECTION","_POSIX_MESSAGE_PASSING","_POSIX_MONOTONIC_CLOCK","_POSIX_NO_TRUNC","_POSIX_PRIORITIZED_IO","_POSIX_PRIORITY_SCHEDULING","_POSIX_PRIO_IO","_POSIX_RAW_SOCKETS","_POSIX_READER_WRITER_LOCKS","_POSIX_REALTIME_SIGNALS","_POSIX_REGEXP","_POSIX_SAVED_IDS","_POSIX_SEMAPHORES","_POSIX_SHARED_MEMORY_OBJECTS","_POSIX_SHELL","_POSIX_SPAWN","_POSIX_SPIN_LOCKS","_POSIX_SPORADIC_SERVER","_POSIX_SS_REPL_MAX","_POSIX_SYNCHRONIZED_IO","_POSIX_SYNC_IO","_POSIX_THREADS","_POSIX_THREAD_ATTR_STACKADDR","_POSIX_THREAD_ATTR_STACKSIZE","_POSIX_THREAD_CPUTIME","_POSIX_THREAD_PRIORITY_SCHEDULING","_POSIX_THREAD_PRIO_INHERIT","_POSIX_THREAD_PRIO_PROTECT","_POSIX_THREAD_PROCESS_SHARED","_POSIX_THREAD_ROBUST_PRIO_INHERIT","_POSIX_THREAD_ROBUST_PRIO_PROTECT","_POSIX_THREAD_SAFE_FUNCTIONS","_POSIX_THREAD_SPORADIC_SERVER","_POSIX_TIMEOUTS","_POSIX_TIMERS","_POSIX_TRACE","_POSIX_TRACE_EVENT_FILTER","_POSIX_TRACE_EVENT_NAME_MAX","_POSIX_TRACE_INHERIT","_POSIX_TRACE_LOG","_POSIX_TRACE_NAME_MAX","_POSIX_TRACE_SYS_MAX","_POSIX_TRACE_USER_EVENT_MAX","_POSIX_TYPED_MEMORY_OBJECTS","_POSIX_V6_ILP32_OFF32","_POSIX_V6_ILP32_OFFBIG","_POSIX_V6_LP64_OFF64","_POSIX_V6_LPBIG_OFFBIG","_POSIX_VDISABLE","_POSIX_VERSION","_XOPEN_CRYPT","_XOPEN_ENH_I18N","_XOPEN_LEGACY","_XOPEN_REALTIME","_XOPEN_REALTIME_THREADS","_XOPEN_SHM","_XOPEN_STREAMS","_XOPEN_UNIX","_XOPEN_VERSION","access","acct","alarm","all","as_raw","as_raw","as_raw","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chdir","chown","chroot","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","close","cmp","cmp","complement","contains","current","current","daemon","difference","dir","dup","dup2","dup3","effective","effective","effective","effective","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","execv","execve","execveat","execvp","execvpe","extend","fchdir","fchown","fchownat","fdatasync","fexecve","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fork","fpathconf","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_gid","from_iter","from_name","from_name","from_raw","from_raw","from_raw","from_uid","fsync","ftruncate","gecos","getcwd","getegid","geteuid","getgid","getgrouplist","getgroups","gethostname","getpgid","getpgrp","getpid","getppid","getresgid","getresuid","getsid","gettid","getuid","gid","gid","hash","hash","hash","hash","hash","hash","initgroups","insert","intersection","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_all","is_child","is_empty","is_parent","is_root","isatty","linkat","lseek","lseek64","mem","mkdir","mkfifo","mkfifoat","mkstemp","name","name","not","parent","partial_cmp","partial_cmp","passwd","passwd","pathconf","pause","pipe","pipe2","pivot_root","read","real","real","remove","saved","saved","set","setegid","seteuid","setfsgid","setfsuid","setgid","setgroups","sethostname","setpgid","setresgid","setresuid","setsid","setuid","shell","sleep","sub","sub_assign","symlinkat","symmetric_difference","sync","sysconf","tcgetpgrp","tcsetpgrp","this","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","toggle","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ttyname","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uid","union","unlink","unlinkat","write","child","disable","enable","cancel","set"],"q":[[0,"nix"],[176,"nix::dir"],[260,"nix::env"],[275,"nix::errno"],[442,"nix::fcntl"],[923,"nix::features"],[924,"nix::ifaddrs"],[959,"nix::kmod"],[1066,"nix::mount"],[1201,"nix::mqueue"],[1335,"nix::net"],[1336,"nix::net::if_"],[1445,"nix::poll"],[1526,"nix::pty"],[1600,"nix::sched"],[1696,"nix::sys"],[1724,"nix::sys::aio"],[1855,"nix::sys::epoll"],[2010,"nix::sys::eventfd"],[2064,"nix::sys::inotify"],[2235,"nix::sys::ioctl"],[2239,"nix::sys::memfd"],[2292,"nix::sys::mman"],[2628,"nix::sys::personality"],[2691,"nix::sys::pthread"],[2694,"nix::sys::ptrace"],[2844,"nix::sys::quota"],[2976,"nix::sys::reboot"],[2999,"nix::sys::resource"],[3034,"nix::sys::select"],[3072,"nix::sys::sendfile"],[3074,"nix::sys::signal"],[3329,"nix::sys::signal::SigevNotify"],[3334,"nix::sys::signalfd"],[3444,"nix::sys::socket"],[4196,"nix::sys::socket::sockopt"],[4995,"nix::sys::stat"],[5196,"nix::sys::statfs"],[5263,"nix::sys::statvfs"],[5353,"nix::sys::sysinfo"],[5375,"nix::sys::termios"],[5824,"nix::sys::time"],[5915,"nix::sys::timerfd"],[6072,"nix::sys::uio"],[6113,"nix::sys::utsname"],[6133,"nix::sys::wait"],[6217,"nix::time"],[6256,"nix::ucontext"],[6274,"nix::unistd"],[6789,"nix::unistd::ForkResult"],[6790,"nix::unistd::acct"],[6792,"nix::unistd::alarm"],[6794,"core::ffi::c_str"],[6795,"core::ops::function"],[6796,"std::os::fd::raw"],[6797,"core::option"],[6798,"core::fmt"],[6799,"core::fmt"],[6800,"core::marker"],[6801,"core::result"],[6802,"core::any"],[6803,"alloc::string"],[6804,"core::cmp"],[6805,"std::io::error"],[6806,"libc::unix"],[6807,"libc::unix"],[6808,"core::iter::traits::collect"],[6809,"libc::unix::linux_like::linux::gnu::b64"],[6810,"std::ffi::os_str"],[6811,"std::os::fd::raw"],[6812,"libc::unix::linux_like::linux"],[6813,"libc::unix"],[6814,"alloc::boxed"],[6815,"core::pin"],[6816,"core::ffi"],[6817,"alloc::vec"],[6818,"libc::unix"],[6819,"libc::unix::linux_like::linux::gnu::b64::x86_64"],[6820,"libc::unix::linux_like::linux"],[6821,"core::net::ip_addr"],[6822,"core::net::ip_addr"],[6823,"core::iter::traits::exact_size"],[6824,"core::iter::traits::iterator"],[6825,"libc::unix"],[6826,"libc::unix"],[6827,"libc::unix::linux_like"],[6828,"libc::unix::linux_like"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains the error value","Nix’s main error type.","Common trait used to represent file system paths by many …","Contains the success value","Nix Result Type","","Create a buffer large enough for storing some control …","","Environment variables","","","Feature tests for OS functionality","Query network interface addresses","Generates a wrapper function for an ioctl that passes no …","Generates a wrapper function for a “bad” ioctl that …","Generates a wrapper function for an ioctl that reads data …","Generates a wrapper function for a “bad” ioctl that …","Generates a wrapper function for an ioctl that reads an …","Generates a wrapper function for an ioctl that reads and …","Generates a wrapper function for a “bad” ioctl that …","Generates a wrapper function for an ioctl that reads and …","Generates a wrapper function for an ioctl that writes an …","Generates a wrapper function for a ioctl that writes an …","Generates a wrapper function for a “bad” ioctl that …","Generates a wrapper function for an ioctl that writes data …","Generates a wrapper function for a “bad” ioctl that …","Is the path empty?","Load and unload kernel modules.","Length of the path in bytes","","Mount file systems","Posix Message Queue functions","Functionality involving network interfaces","Wait for events to trigger on specific file descriptors","Create master and slave virtual pseudo-terminals (PTYs)","Generate an ioctl request code for a command that passes …","Generate an ioctl request code for a command that reads.","Generate an ioctl request code for a command that reads …","Generate an ioctl request code for a command that writes.","Execution scheduling","Mostly platform-specific functionality","","","Safe wrappers around functions found in libc “unistd.h”…","Execute a function with this path as a <code>CStr</code>.","","","An open directory.","","A directory entry, similar to <code>std::fs::DirEntry</code>.","","","","The return type of Dir::into_iter","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the bare file name of this directory entry without …","Returns the type of this directory entry, if known.","","","","","","Converts from a descriptor-based object, closing the …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts from a file descriptor, closing it on success or …","","","","","","Returns the inode number (<code>d_ino</code>) of the underlying <code>dirent</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a owning iterator, that is, one that takes …","","","Returns an iterator of <code>Result&lt;Entry&gt;</code> which rewinds when …","","","Opens the given path as with <code>fcntl::open</code>.","Opens the given path as with <code>fcntl::openat</code>.","","","","","","","","","","","","","","","","","","Indicates that <code>clearenv</code> failed for some unknown reason","","","Clear the environment of all name-value pairs.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The sentinel value indicates that a function failed and …","Backwards compatibility hack for Nix &lt;= 0.21.0 users","","Convert this <code>Error</code> to an <code>Errno</code>.","","","","","","","","Returns the platform-specific value of errno","","","Returns the argument unchanged.","Create a nix Error from a given errno","","","Calls <code>U::from(self)</code>.","Create a new invalid argument error (<code>EINVAL</code>)","","Returns <code>Ok(value)</code> if it does not contain the sentinel …","","","","","","","","","","","","","","Removes byte range from a file without leaving a hole.","Increases file space by inserting a hole within the file …","File size is not changed.","Deallocates space by creating a hole.","Shared file data extants are made private to the file.","Zeroes space in specified byte range.","The file descriptor will automatically be closed during a …","","","","","","","","","","","","The size of the file cannot be increased.","Prevents further calls to <code>fcntl()</code> with <code>F_ADD_SEALS</code>.","The file cannot be reduced in size.","The file contents cannot be modified.","","","","","","Mode argument flags for fallocate determining operation …","","Additional configuration flags for <code>fcntl</code>’s <code>F_SETFD</code>.","","","","","","Configuration options for opened files.","Mask for the access mode of the file.","Open the file in append-only mode.","Generate a signal when input or output becomes possible.","Closes the file descriptor once an <code>execve</code> call is made.","Create the file if it does not exist.","Try to minimize cache effects of the I/O for this file.","If the specified path isn’t a directory, fail.","Implicitly follow each <code>write()</code> with an <code>fdatasync()</code>.","Error out if a file was not created.","Same as <code>O_SYNC</code>.","Allow files whose sizes can’t be represented in an <code>off_t</code> …","Same as <code>O_NONBLOCK</code>.","Do not update the file last access time during <code>read(2)</code>s.","Don’t attach the device as the process’ controlling …","<code>open()</code> will fail if the given path is a symbolic link.","When possible, open the file in nonblocking mode.","Obtain a file descriptor for low-level access.","Only allow reading.","Allow both reading and writing.","Similar to <code>O_DSYNC</code> but applies to <code>read</code>s instead.","Implicitly follow each <code>write()</code> with an <code>fsync()</code>.","Create an unnamed temporary file.","Truncate an existing regular file to 0 length if it allows …","Only allow writing.","","","","","","","","","","","","Gift the user pages to the kernel.","Hint that more data will be coming in a subsequent splice.","Request that pages be moved instead of copied.","Do not block on I/O.","Additional flags for file sealing, which allows for …","Additional flags to <code>splice</code> and friends.","","","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Copy a range of data from one file to another","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","Manipulates file space.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","","","","","","","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","","","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","Check if the OS supports atomic close-on-exec for sockets","Describes a single address for an interface as returned by …","Holds the results of <code>getifaddrs</code>.","Network address of this interface","","","","","Broadcast address of this interface, if applicable","","","Point-to-point destination address","","","","Flags as from <code>SIOCGIFFLAGS</code> ioctl","","","Returns the argument unchanged.","Returns the argument unchanged.","Get interface addresses using libc’s <code>getifaddrs</code>","","","Name of the network interface","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Netmask of this interface","","","","","","","","","Flags used by <code>delete_module</code>.","Ignore symbol version hashes.","Ignore kernel version magic.","Flags used by the <code>finit_module</code> function.","","","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Unloads the kernel module with the given name.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","Loads a kernel module from a given file descriptor.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","Loads a kernel module from a buffer.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","Linux 2.4.0 - Bind directory at different place","Directory modifications are synchronous","","","","Allow mandatory locks on a FS","","","","Do not update access times","Disallow access to device special files","Do not update directory access times","Disallow program execution","Ignore suid and sgid bits","","","","Mount read-only","","","Alter flags of a mounted FS","","","","","","Writes are synced at once","","","","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","Close a message queue","Get message queue attributes","Open a message queue","Receive a message from a message queue","Convenience function. Removes <code>O_NONBLOCK</code> attribute for a …","Send a message to a message queue","Convenience function. Sets the <code>O_NONBLOCK</code> attribute for a …","Set the attributes of the message queue. Only <code>O_NONBLOCK</code> …","Remove a message queue","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Network interface name resolution.","Receive all multicast packets. (see <code>netdevice(7)</code>)","Auto media selection active. (see <code>netdevice(7)</code>)","Valid broadcast address set. (see <code>netdevice(7)</code>)","Internal debugging flag. (see <code>netdevice(7)</code>)","Driver signals dormant. Volatile.","The addresses are lost when the interface goes down. (see …","Echo sent packets. Volatile.","Interface is a loopback interface. (see <code>netdevice(7)</code>)","Driver signals L1 up. Volatile.","Master of a load balancing bundle. (see <code>netdevice(7)</code>)","Supports multicast. (see <code>netdevice(7)</code>)","No arp protocol, L2 destination address not set. (see …","Avoid use of trailers. (see <code>netdevice(7)</code>)","Do not provide packet information","Interface is a point-to-point link. (see <code>netdevice(7)</code>)","Is able to select media type via ifmap. (see <code>netdevice(7)</code>)","Interface is in promiscuous mode. (see <code>netdevice(7)</code>)","Resources allocated. (see <code>netdevice(7)</code>)","Slave of a load balancing bundle. (see <code>netdevice(7)</code>)","TAP device","TUN device (no Ethernet headers)","Interface is running. (see <code>netdevice(7)</code>)","A network interface. Has a name like “eth0” or “…","Standard interface flags, used by <code>getifaddrs</code>","A list of the network interfaces available on this system. …","An iterator over the interfaces in an <code>Interfaces</code>.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Returns an empty set of flags.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Retrieve a list of the network interfaces available on the …","Resolve an interface into a interface number.","Obtain the index of this interface.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Iterate over the interfaces in this list.","Obtain the name of this interface.","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Convert this to a slice of interfaces. Note that the …","Toggles the specified flags in-place.","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Error condition (only returned in <code>PollFd::revents</code>; ignored …","Hang up (only returned in <code>PollFd::revents</code>; ignored in …","There is data to read.","Invalid request: <code>fd</code> not open (only returned in …","Writing is now possible, though a write larger that the …","There is some exceptional condition on the file descriptor.","Priority band data can be read (generally unused on Linux).","Equivalent to <code>POLLIN</code>","Priority data may be written.","Equivalent to <code>POLLOUT</code>","This is a wrapper around <code>libc::pollfd</code>.","These flags define the different events that can be …","Returns the set containing all flags.","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","The events of interest for this <code>PollFd</code>.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Creates a new <code>PollFd</code> specifying the events of interest for …","Returns the complement of this set of flags.","","<code>poll</code> waits for one of a set of file descriptors to become …","<code>ppoll()</code> allows an application to safely wait until either …","Removes the specified flags in-place.","Returns the events that occured in the last call to <code>poll</code> …","Inserts or removes the specified flags depending on the …","Modify the events of interest for this <code>PollFd</code>.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Representation of a master with a forked pty","Representation of a master/slave pty pair","Representation of the Master device in a master/slave pty …","","","","","","","","","","","","","","","","","","","","","","","","","","","Metadata about forked process","Create a new pseudoterminal, returning the master file …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Grant access to a slave pseudoterminal (see <code>grantpt(3)</code>)","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The master port in a virtual pty pair","The master port in a virtual pty pair","Create a new pseudoterminal, returning the slave and …","Open a pseudoterminal device (see <code>posix_openpt(3)</code>)","Get the name of the slave pseudoterminal (see <code>ptsname(3)</code>)","Get the name of the slave pseudoterminal (see <code>ptsname(3)</code>)","","The slave port in a virtual pty pair","","","","","","","","","","","","","","","","Unlock a pseudoterminal master/slave pseudoterminal pair …","","","","","","Unused since Linux 2.6.2","The calling process and the child process share the same …","The caller and the child process share the same  filesystem","The new process shares an I/O context with the calling …","Create the process in a new cgroup namespace.","Create the process in a new IPC namespace.","Create the process in a new network namespace.","The cloned child is started in a new mount namespace.","Create the process in a new PID namespace.","Create the process in a new user namespace.","Create the process in a new UTS namespace.","The parent of the new child  (as returned by getppid(2)) …","If the calling process is being traced, then trace the …","The calling process and the child process share the same …","The child and the calling process share a single list of …","The child is placed in the same thread group as the calling","A tracing process cannot force <code>CLONE_PTRACE</code> on this child …","The execution of the calling process is suspended until the","The calling process and the child process run in the same …","Type for the function executed by <code>clone</code>.","Options for use with <code>clone</code>","CpuSet represent a bit-mask of CPUs. CpuSets are used by …","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","<code>clone</code> create a child process (<code>clone(2)</code>)","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Return the maximum number of CPU in CpuSet","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Test to see if a CPU is in the CpuSet. <code>field</code> is the CPU id …","Create a new and empty CpuSet.","Returns the complement of this set of flags.","","Removes the specified flags in-place.","<code>sched_getaffinity</code> get a thread’s CPU affinity mask (…","<code>sched_setaffinity</code> set a thread’s CPU affinity mask (…","Explicitly yield the processor to other threads.","Inserts or removes the specified flags depending on the …","Add a CPU to CpuSet. <code>field</code> is the CPU id to add","reassociate thread with a namespace","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Remove a CPU from CpuSet. <code>field</code> is the CPU id to remove","disassociate parts of the process execution context","POSIX Asynchronous I/O","","","Monitoring API for filesystem events.","Provide helpers for making ioctl system calls.","Interfaces for managing memory-backed files.","Memory management declarations.","","Low level threading primitives","","Set and configure disk quotas for users, groups, or …","Reboot/shutdown or enable/disable Ctrl-Alt-Delete.","Configure the process resource limits.","Portably monitor a group of file descriptors for readiness.","Send data from a file to a socket, bypassing userland.","Operating system signals.","Interface for the <code>signalfd</code> syscall.","Socket interface functions","","Get filesystem statistics, non-portably","Get filesystem statistics","","An interface for controlling asynchronous communication …","","Timer API via file descriptors.","Vectored I/O","Get system identification","Wait for a process to change status","All of the requests have already finished","Return values for <code>AioCb::cancel</code> and <code>aio_cancel_all</code>","All outstanding requests were canceled","AIO Control Block.","Mode for <code>AioCb::fsync</code>.  Controls whether only data or both …","Some requests were not canceled.  Their status should be …","No operation","Requests that <code>lio_listio</code> return immediately","Write data as if by a call to <code>AioCb::read</code>","Requests that <code>lio_listio</code> block until all requested …","Write data as if by a call to <code>AioCb::write</code>","LIO Control Block.","Used to construct <code>LioCb</code>","Mode for <code>lio_listio</code>","When used with <code>lio_listio</code>, determines whether a given <code>aiocb</code>…","on supported operating systems only, do it like <code>fdatasync</code>","do it like <code>fsync</code>","Cancels outstanding AIO requests for a given file …","Retrieve return status of an asynchronous operation.","Collect final status for an individual <code>AioCb</code> submitted as …","Suspends the calling process until at least one of the …","A collection of <code>AioCb</code>s.","","","","","","","","","","","","","","","Cancels an outstanding AIO request.","","","","","","","","","","","","If the <code>AioCb</code> has no remaining state in the kernel, just …","Add a new operation on a mutable slice to the <code>LioCb</code> under …","Add a new operation on an immutable slice to the <code>LioCb</code> …","","","","","Retrieve error status of an asynchronous operation.","Retrieve error status of an individual <code>AioCb</code> submitted as …","Returns the underlying file descriptor associated with the …","Finalize this <code>LioCb</code>.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a new <code>AioCb</code> with no associated buffer.","Constructs a new <code>AioCb</code> from a mutable raw pointer","Constructs a new <code>AioCb</code> from a mutable slice.","Constructs a new <code>AioCb</code> from a raw pointer.","Like <code>AioCb::from_mut_slice</code>, but works on constant slices …","An asynchronous version of <code>fsync(2)</code>.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Are no <code>AioCb</code>s contained?","Return the number of individual <code>AioCb</code>s contained.","Returns the <code>aiocb</code>’s <code>LioOpcode</code> field","Submits multiple asynchronous I/O requests with a single …","Resubmits any incomplete operations with <code>lio_listio</code>.","Returns the requested length of the aio operation in bytes","Returns the file offset stored in the <code>AioCb</code>","","","","Returns the priority of the <code>AioCb</code>","Asynchronously reads from a file descriptor into a buffer","Update the notification settings for an existing <code>aiocb</code>","Returns the <code>SigEvent</code> stored in the <code>AioCb</code>","","","","","","","","","","","","","","","","","","","","","","","","","","Initialize an empty <code>LioCb</code>","Asynchronously writes from a buffer to a file descriptor","","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Configuration options for <code>inotify_add_watch</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Configuration options for <code>inotify_init1</code>.","An inotify instance. This is also a file descriptor, you …","A single inotify event.","This object is returned when you create a new watch on an …","Adds a new watch on the target file or directory.","Returns the set containing all flags.","Returns the set containing all flags.","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","This cookie is a number that allows you to connect related …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","Initialize a new inotify instance.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Event mask. This field is a bitfield describing the exact …","Filename. This field exists only if the event was …","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","Reads a collection of events from the inotify file …","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes an existing watch using the watch descriptor …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Watch descriptor. This field corresponds to the watch …","Generate an ioctl request code for a command that passes …","Generate an ioctl request code for a command that reads.","Generate an ioctl request code for a command that reads …","Generate an ioctl request code for a command that writes.","Allow sealing operations on this file.","Set the close-on-exec (<code>FD_CLOEXEC</code>) flag on the new file …","Options that change the behavior of <code>memfd_create</code>.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Creates an anonymous file that lives in memory, and return …","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Undo the effect of an earlier <code>MADV_DONTDUMP</code>.","Undo the effect of <code>MADV_DONTFORK</code>.","Exclude the given range from a core dump.","Do not make pages in this range available to the child …","Do not expect access in the near future.","Specify that the application no longer needs the pages in …","Enable Transparent Huge Pages (THP) for pages in the given …","Poison the given pages.","Enable Kernel Samepage Merging (KSM) for the given pages.","Undo the effect of <code>MADV_HUGEPAGE</code>.","No further special treatment. This is the default.","Expect random page references.","Free up a given range of pages and its associated backing …","Expect sequential page references.","Preserve the memory of each page but offline the original …","Undo the effect of <code>MADV_MERGEABLE</code>","Expect access in the near future.","Put the mapping into the first 2GB of the process address …","Synonym for <code>MAP_ANONYMOUS</code>.","The mapping is not backed by any file.","Compatibility flag. Ignored.","Compatibility flag. Ignored.","Compatibility flag. Ignored.","Place the mapping at exactly the address specified in <code>addr</code>.","Used for stacks; indicates to the kernel that the mapping …","Allocate the mapping using “huge pages.”","Make use of 16GB huge page (must be supported by the …","Make use of 16MB huge page (must be supported by the …","Make use of 1GB huge page (must be supported by the system)","Make use of 1MB huge page (must be supported by the system)","Make use of 256MB huge page (must be supported by the …","Make use of 2GB huge page (must be supported by the system)","Make use of 2MB huge page (must be supported by the system)","Make use of 32MB huge page (must be supported by the …","Make use of 512KB huge page (must be supported by the …","Make use of 512MB huge page (must be supported by the …","Make use of 64KB huge page (must be supported by the …","Make use of 8MB huge page (must be supported by the system)","Mark the mmaped region to be locked in the same way as …","Only meaningful when used with <code>MAP_POPULATE</code>. Don’t …","Do not reserve swap space for this mapping.","Populate page tables for a mapping.","Create a private copy-on-write mapping. Mutually exclusive …","Share this mapping. Mutually exclusive with <code>MAP_PRIVATE</code>.","Region grows down, like a stack.","Lock pages that are currently mapped into the address …","Lock pages which will become mapped into the address space …","Place the mapping at exactly the address specified in …","Permit the kernel to relocate the mapping to a new virtual …","Options for <code>mremap</code>.","Schedule an update but return immediately.","Invalidate all cached data.","Perform an update and wait for it to complete.","Additional parameters for <code>mmap</code>.","Flags for <code>mlockall</code>.","Usage information for a range of memory to allow for …","Configuration flags for <code>msync</code>.","Pages can be executed","Apply protection up to the end of a mapping that grows …","Apply protection down to the beginning of a mapping that …","Pages cannot be accessed.","Pages can be read.","Pages can be written.","Desired memory protection of a memory mapping.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","give advice about use of memory","Locks all memory pages that contain part of the address …","Locks all memory pages mapped into this process’ address …","allocate memory, or map files or devices into memory","Set protection of memory mapping.","Expands (or shrinks) an existing memory mapping, …","synchronize a mapped region","Unlocks all memory pages that contain part of the address …","Unlocks all memory pages mapped into this process’ …","remove a mapping","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Creates and opens a new, or opens an existing, POSIX …","Performs the converse of <code>shm_open</code>, removing an object …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","Flags used and returned by <code>get()</code> and <code>set()</code>.","","","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Retrieve the current process personality.","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Set the current process personality.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Identifies an individual thread.","Send a signal to a thread (see <code>pthread_kill(3)</code>).","Obtain ID of the calling thread (see <code>pthread_self(3)</code>","","Using the ptrace options the tracer can configure the …","Ptrace options used in conjunction with the …","","","","Event that stops before a return from clone.","Event that stops before a return from execve.","Event for a stop before an exit. Unlike the waitpid Exit …","Event that stops before a return from fork or clone.","Stop triggered by a seccomp rule on a tracee.","Stop triggered by the <code>INTERRUPT</code> syscall, or a group stop, …","Event that stops before a return from vfork or clone.","Event for a return from vfork.","","","","","","","","","","Send a SIGKILL to the tracee if the tracer exits.  This is …","Stop tracee at next clone call and trace the cloned …","Stop tracee at next execve call.","Stop tracee at next exit call. Stops before exit commences …","Stop tracee at next fork and start tracing the forked …","Stop tracee when a SECCOMP_RET_TRACE rule is triggered. …","When delivering system call traps set a bit to allow …","Stop tracee at next vfork call and trace the vforked …","Stop tracee at vfork completion.","","","","","","","","","","","","","","","","","","","","Ptrace Request enum defining the action to be taken.","Returns the set containing all flags.","Attach to a running process, as with …","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Restart the stopped tracee process, as with …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Detaches the current running process, as with …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Gets a ptrace event as described by …","Get user registers, as with <code>ptrace(PTRACE_GETREGS, ...)</code>","Get siginfo as with <code>ptrace(PTRACE_GETSIGINFO,...)</code>","","","","Inserts the specified flags in-place.","Stop a tracee, as with <code>ptrace(PTRACE_INTERRUPT, ...)</code>","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Issues a kill request as with <code>ptrace(PTRACE_KILL, ...)</code>","Returns the complement of this set of flags.","","","","Reads a word from a processes memory at the given address","Removes the specified flags in-place.","Attach to a running process, as with …","Inserts or removes the specified flags depending on the …","Set options, as with <code>ptrace(PTRACE_SETOPTIONS,...)</code>.","Set user registers, as with <code>ptrace(PTRACE_SETREGS, ...)</code>","Set siginfo as with <code>ptrace(PTRACE_SETSIGINFO,...)</code>","Move the stopped tracee process forward by a single step …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Continue execution until the next syscall, as with …","Continue execution until the next syscall, as with …","Move the stopped tracee process forward by a single step …","","","","Toggles the specified flags in-place.","Sets the process as traceable, as with …","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Writes a word into the processes memory at the given …","Wrapper type for <code>if_dqblk</code>","Specify a group quota","Use the original quota format.","Use the standard VFS v0 quota format.","Use the VFS v1 quota format.","All fields.","The block hard &amp; soft limit fields.","The disk use time limit field.","The inode hard &amp; soft limit fields.","The current inodes field.","The file quote time limit field.","All block &amp; inode limits.","The current space field.","The time limit fields.","The space &amp; inodes usage fields.","The type of quota format to use.","The scope of the quota.","Indicates the quota fields that are valid to read from.","Specify a user quota","Returns the set containing all flags.","Current number of allocated inodes.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Time limit for excessive disk use.","The absolute limit on disk quota blocks allocated.","Preferred limit on disk quota blocks","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","","Time limit for excessive files.","Maximum number of allocated inodes.","Preferred inode limit","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns the complement of this set of flags.","Current occupied space (bytes).","","","","Get disk quota limits and current usage for the given …","Disable disk quotas for a block device.","Turn on disk quotas for a block device.","Configure quota values for the specified fields for a …","Update the on-disk copy of quota usages for a filesystem.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Set the time limit for excessive disk use.","Set the absolute limit on disk quota blocks allocated.","Set the preferred limit on disk quota blocks allocated.","Set the time limit for excessive files.","Set the maximum number of allocated inodes.","Set the preferred limit of allocated inodes.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","How exactly should the system be rebooted.","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Enable or disable the reboot keystroke (Ctrl-Alt-Delete).","","","","","The maximum amount (in bytes) of virtual memory the …","The largest size (in bytes) core(5) file that may be …","The maximum amount of cpu time (in seconds) to be used by …","The maximum size (in bytes) of the data segment for a …","The largest size (in bytes) file that may be created.","A limit on the combined number of flock locks and fcntl …","The maximum size (in bytes) which a process may lock into …","A limit on the number of bytes that can be allocated for …","A ceiling to which the process’s nice value can be …","The maximum number of open files for this process.","The maximum number of simultaneous processes for this user …","When there is memory pressure and swap is available, …","A ceiling on the real-time priority that may be set for …","A limit (in microseconds) on the amount of CPU time that a …","A limit on the number of signals that may be queued for …","The maximum size (in bytes) of the stack segment for a …","The Resource enum is platform dependent. Check different …","","","","","","","","Returns the argument unchanged.","Get the current processes resource limits","","Calls <code>U::from(self)</code>.","","","Set the current processes resource limits","","","","","","Contains a set of file descriptors used by <code>select</code>","Iterator over <code>FdSet</code>.","","","","","Remove all file descriptors from this <code>FdSet</code>.","","","Test an <code>FdSet</code> for the presence of a certain file …","","","Returns an iterator over the file descriptors in the set.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Finds the highest file descriptor in the set.","Add a file descriptor to an <code>FdSet</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create an empty <code>FdSet</code>","","","Monitors file descriptors for readiness with an altered …","Remove a file descriptor from an <code>FdSet</code>","Monitors file descriptors for readiness","","","","","","","","","Copy up to <code>count</code> bytes to <code>out_fd</code> from <code>in_fd</code> starting at …","Copy up to <code>count</code> bytes to <code>out_fd</code> from <code>in_fd</code> starting at …","Use the given signal-catching function, which takes in the …","When catching a <code>Signal::SIGCHLD</code> signal, the signal will be …","When catching a <code>Signal::SIGCHLD</code> signal, the system will not","Further occurrences of the delivered signal are not masked …","The system will deliver the signal to the process on a …","The handler is reset back to the default at the moment the …","Requests that certain system calls restart if interrupted …","This flag is controlled internally by Nix.","Abort","Alarm clock","Bus error","To parent on child stop or exit","Continue a stopped process","Floating point exception","Hangup","Illegal instruction (not reset when caught)","Interrupt","Input/output possible signal","Alias for <code>SIGABRT</code>","Kill (cannot be caught or ignored)","Write on a pipe with no one to read it","Alias for <code>SIGIO</code>","Profiling time alarm","Power failure imminent.","Quit","Segmentation violation","Stack fault (obsolete)","Sendable stop signal not from tty","Bad system call","Software termination signal from kill","Trace trap (not reset when caught)","Stop signal from tty","To readers pgrp upon background tty read","Like TTIN if (tp-&gt;t_local&amp;LTOSTOP)","Alias for <code>SIGSYS</code>","Urgent condition on IO channel","User defined signal 1","User defined signal 2","Virtual time alarm","Window size changes","Exceeded CPU time limit","Exceeded file size limit","The new mask is the union of the current mask and the …","The current mask is replaced by the specified set.","The new mask is the intersection of the current mask and …","Controls the behavior of a <code>SigAction</code>","Action to take on receipt of a signal. Corresponds to …","Use the given signal-catching function, which takes in the …","Default signal handling.","Used to request asynchronous notification of the …","A signal handler.","Request that the signal be ignored.","Specifies a set of <code>Signal</code>s that may be blocked, waited …","No notification will be delivered","Specifies the notification method used by a <code>SigEvent</code>","Notify by delivering a signal to the process.","Notify by delivering a signal to a thread.","Specifies how certain functions should manipulate a signal …","Types of operating system signals","Iterate through all signals defined by this operating …","Add the specified signal to the set.","Returns the set containing all flags.","Initialize to include all signals.","","","Returns name of signal.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","Remove all signals from this set.","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Return whether this set includes the specified signal.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Initialize to include nothing.","","","","","","","","","","","Merge all of <code>other</code>’s signals into this set.","Returns the flags set on the action.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Returns the action’s handler.","","","","","","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Iterate through all signals defined by this OS","Send a signal to a process","Send a signal to a process group","Returns the set of signals that are blocked during …","Creates a new action.","<strong>Note:</strong> this constructor does not allow the user to set the …","","Returns the complement of this set of flags.","","","","Manages the signal mask (set of blocked signals) for the …","Send a signal to the current thread","Removes the specified flags in-place.","Remove the specified signal from this set.","Inserts or removes the specified flags depending on the …","Changes the action taken by a process on receipt of a …","Return a copy of the inner structure","Signal management (see signal(3p))","Examine and change blocked signals.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Adds the set of signals to the signal mask for the calling …","Gets the currently blocked (masked) set of signals for the …","Sets the set of signals as the signal mask for the calling …","Sets the set of signals as the signal mask, and returns …","Removes the set of signals from the signal mask for the …","","","","","","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Identifies a thread for <code>SigevNotify::SigevThreadId</code>","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Suspends execution of the calling thread until one of the …","Will be present in the <code>si_value</code> field of the …","Will be present in the <code>si_value</code> field of the …","Signal to deliver","Signal to send","LWP ID of the thread to notify","","","","","","","A helper struct for creating, reading and closing a …","Returns the set containing all flags.","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Returns an empty set of flags.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","","","","Creates a new file descriptor for reading signals.","","","","","","","","","","","","","","","","","","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","These constants specify the protocol family to be used in …","Interface to kernel crypto API","","","Set the length of associated authentication data (AAD) …","Set IV for <code>AF_ALG</code> crypto API.","Set crypto operation for <code>AF_ALG</code> crypto API. It may be one …","AppleTalk","","Access to raw ATM PVCs","","Amateur radio AX.25 protocol","","Further receptions and transmissions will be disallowed.","","","","","A type-safe zero-copy wrapper around a single control …","A type-safe wrapper around a single control message, as …","Supports datagrams (connectionless, unreliable messages of …","","","Represents a socket option that can be retrieved.","","","IPv4 Internet protocols (see <code>ip(7)</code>)","","IPv6 Internet protocols (see <code>ipv6(7)</code>)","","","Request for multicast socket operations","","","Configure the sending addressing and interface for v4","Socket error queue control messages read with the …","","Request for ipv6 multicast socket operations","","Configure the sending addressing and interface for v6","Socket error queue control messages read with the …","IPX - Novell protocols","","","","","Datalink address (MAC)","Hardware Address","","Set the <code>close-on-exec</code> flag for the file descriptor …","Receive flags: Control Data was discarded (buffer too …","Enables nonblocking operation; if the operation would …","Terminates a record (when this notion is supported, as for …","This flag specifies that queued errors should be received …","Sends or requests out-of-band data on sockets that support …","Peeks at an incoming message. The data is treated as …","For raw (<code>Packet</code>), Internet datagram (since Linux …","Receive operation blocks until the full amount of data can …","","Flags for send/recv and their relatives","","","Kernel user interface device (see <code>netlink(7)</code>)","","","Auditing (ref)","Netlink interface to request information about ciphers …","DECnet routing messages (ref)","Access to FIB lookup from user space (ref)","Transport IPv6 packets from netfilter to user space.  Used …","Open-iSCSI (ref)","Kernel messages to user space (ref)","Netfilter subsystem (ref)","Infiniband RDMA (ref)","Receives routing and link updates and may be used to …","SCSI Transports (ref)","SELinux event notifications. (ref)","Query information about sockets of various protocol …","Reserved for user-mode socket protocols (ref)","","Low level packet interface (see <code>packet(7)</code>)","","","Provides raw network protocol access.","Provides a reliable datagram layer that does not guarantee …","","Further receptions will be disallowed.","","","","","SO_RXQ_OVFL indicates that an unsigned 32 bit value …","SO_RXQ_OVFL indicates that an unsigned 32 bit value …","Set close-on-exec on the new descriptor","Set non-blocking mode on the new socket","Received version of <code>ControlMessage::ScmCredentials</code>","A message of type <code>SCM_CREDENTIALS</code>, containing the pid, uid …","Received version of <code>ControlMessage::ScmRights</code>","A message of type <code>SCM_RIGHTS</code>, containing an array of file …","A message of type <code>SCM_TIMESTAMP</code>, containing the time the …","Nanoseconds resolution timestamp","","","Provides a sequenced, reliable, two-way connection- based …","Represents a socket option that can be set.","","","Represents a socket address","Additional socket options","Constants used in <code>socket</code> and <code>socketpair</code> to specify the …","These constants are used to specify the communication …","Provides sequenced, reliable, two-way, connection- based …","TCP protocol (ip(7))","","UDP protocol (ip(7))","UDP Generic Receive Offload (GRO) allows receiving …","UDP GSO makes it possible for applications to generate …","Local communication (see <code>unix(7)</code>)","","A wrapper around <code>sockaddr_un</code>.","Unix credentials of the sending process.","Unspecified address family, (see <code>getaddrinfo(3)</code>)","","","","","","","","","","","Further  transmissions will be disallowed.","ITU-T X.25 / ISO-8208 protocol (see <code>x25(7)</code>)","","Accept a connection on a socket","Accept a connection on a socket","Physical-layer address (MAC)","","","","","Returns the set containing all flags.","Returns the set containing all flags.","","If this address represents an abstract socket, return its …","Conversion from nix’s SockAddr type to the underlying …","Returns a mutable pointer to the raw <code>sockaddr_un</code> struct","Returns a pointer to the raw <code>sockaddr_un</code> struct","Bind a name to a socket","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Context Identifier (CID)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Iterate over the valid control messages pointed to by this …","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Initiate a connection on a socket","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Always AF_PACKET","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Create a new <code>AddressFamily</code> from an integer value retrieved …","","","","","","","Look up the value of this socket option on the given …","Get the address of the peer connected to the socket <code>fd</code>.","Get the current address to which the socket <code>fd</code> is bound.","Get the current value for the requested socket option","Returns the group identifier","","Length of MAC address","","","","","","","","","","","","","","","","","","","","","","","ARP hardware type","Interface number","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Gets the IP address associated with this socket address.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Listen for connections on a socket","","","","","","","","","","","","Create a new sockaddr_un representing a filesystem path.","","","","Creates a new instance with the credentials of the current …","Instantiate a new <code>IpMembershipRequest</code>","Instantiate a new <code>Ipv6MembershipRequest</code>","Create a new <code>sockaddr_un</code> representing an address in the “…","","","","","Create a new IpAddr that contains an IPv4 address.","Create a new IpAddr that contains an IPv6 address.","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","If this address represents a filesystem path, return that …","Returns the addrlen of this socket - …","","Returns the process identifier","Packet type","Gets the port number associated with this socket address","Port number","Physical-layer protocol","Receive data from a connection-oriented socket. Returns …","Receive data from a connectionless or connection-oriented …","An extension of <code>recvmsg</code> that allows the caller to receive …","Receive message in scatter-gather vectors from a socket, …","Removes the specified flags in-place.","Removes the specified flags in-place.","","","","Return the eight 16-bit segments that make up this address","Send data to a connection-oriented socket. Returns the …","An extension of <code>sendmsg</code> that allows the caller to transmit …","Send data in scatter-gather vectors to a socket, possibly …","Send a message to a socket","Set the value of this socket option on the given socket.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Sets the value for the requested socket option","Shut down part of a full-duplex connection.","","","","","","","","","","","","","","Return the appropriate <code>SockAddr</code> type from a …","","Create an endpoint for communication","Create a pair of connected sockets","Socket options as used by <code>setsockopt</code> and <code>getsockopt</code>.","","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","","","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the user identifier","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns a value indicating whether or not this socket has …","","","Bind this socket to a particular device like “eth0”.","Set or get the broadcast flag.","","Join a multicast group","Leave a multicast group.","If enabled, this boolean option allows binding to an IP …","Set or read a boolean integer argument that determines …","Set or read the time-to-live value of outgoing multicast …","Setting this boolean option enables transparent proxying …","Pass an <code>IP_PKTINFO</code> ancillary message that contains a …","Enable extended reliable error message passing.","Set or retrieve the current time-to-live field that is …","Join an IPv6 multicast group.","Leave an IPv6 multicast group.","Control receiving of asynchronous error options.","Set delivery of the <code>IPV6_PKTINFO</code> control message on …","Set the unicast hop limit for the socket.","The socket is restricted to sending and receiving IPv6 …","Enable sending of keep-alive messages on …","When enabled,  a close(2) or shutdown(2) will not return …","Set the mark for each packet sent through this socket …","If this option is enabled, out-of-band data is directly …","","Enable or disable the receiving of the <code>SCM_CREDENTIALS</code> …","Return the credentials of the foreign process connected to …","Sets or gets the maximum socket receive buffer in bytes.","Using this socket option, a privileged (<code>CAP_NET_ADMIN</code>) …","Specify the receiving timeout until reporting an error.","Enable or disable the receiving of the <code>SO_TIMESTAMP</code> …","Enable or disable the receiving of the <code>SO_TIMESTAMPNS</code> …","Enables local address reuse","Permits multiple AF_INET or AF_INET6 sockets to be bound …","Indicates that an unsigned 32-bit value ancillary message …","Specify the sending timeout until reporting an error.","Sets or gets the maximum socket send buffer in bytes.","Using this socket option, a privileged (<code>CAP_NET_ADMIN</code>)  …","Gets the socket type as an integer.","Get and clear the pending socket error.","This option allows the caller to set the TCP congestion …","The maximum number of keepalive probes TCP should send …","The time (in seconds) the connection needs to remain idle …","The time (in seconds) between individual keepalive probes.","The maximum segment size for outgoing TCP packets.","Under most circumstances, TCP sends data when it is …","","Specifies the maximum amount of time in milliseconds that …eturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codelags for <code>fchmodat</code> function.","","","","","“File mode / permissions” flags.","","","“File type” flags for <code>mknod</code> and related functions.","","","","","","","","","","","","","","","","","","","","","","","","Flags for <code>utimensat</code> function.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","Change the file permission bits of the file specified by a …","Change the file permission bits.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","Change the access and modification times of the file …","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","Change the access and modification times of a file without …","","","","","Create a special or ordinary file, by pathname.","Create a special or ordinary file, relative to a given …","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","","","","","","","","","","","","","","","","","","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Change the access and modification times of a file.","Change the access and modification times of a file.","","","","","","","","","","","Describes the file system type as known by the operating …","","","","","","","","","","","","","","","","","","Describes a mounted file system","","","Size of a block","Total data blocks in filesystem","Free blocks available to unprivileged user","Free blocks in filesystem","","","","","","","","","","Total file nodes in filesystem","Free file nodes in filesystem","Filesystem ID","Magic code defining system type","","","Returns the argument unchanged.","Returns the argument unchanged.","Identifies a mounted file system","Describes a mounted file system.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Maximum length of filenames","Optimal transfer block size","Describes a mounted file system.","","","","","","","","","File system mount Flags","Append-only file","Immutable file","Allow mandatory locks on the filesystem","Do not update access times on files","Do not interpret character or block-special devices","Do not update access times on files","Do not allow execution of binaries on the filesystem","Do not allow the set-uid bits to have an effect","Read Only","Update access time relative to modify/change time","All IO should be done synchronously","Write on file/directory/symlink","Wrapper around the POSIX <code>statvfs</code> struct","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","get the file system block size","Get the number of blocks.","Get the number of free blocks for unprivileged users","Get the number of free blocks in the file system","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","Get the total number of file inodes","Get the number of free file inodes for unprivileged users","Get the number of free file inodes","Get the file system id","Get the mount flags","","","","","","","Get the fundamental file system block size","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Return a <code>Statvfs</code> object with information about <code>fd</code>","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Get the maximum filename length","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Return a <code>Statvfs</code> object with information about the <code>path</code>","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","System info structure returned by <code>sysinfo</code>.","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns the load average tuple.","Current number of processes.","Returns the total amount of installed RAM in Bytes.","Returns the amount of completely unused RAM in Bytes.","Returns the amount of unused swap memory in Bytes.","Returns the amount of swap memory in Bytes.","Returns system information.","","","","","Returns the time since system boot.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Baud rates supported by the system.","","","","","","","","","","","","","","","","","","","Flags for setting the control mode of a terminal","","","","","","","","","","","","","Specify how transmission flow should be altered","Specify a combination of the input and output buffers to …","","","","","","","","","","","","","","","","","Flags for configuring the input mode of a terminal","Flags for setting any local modes","","","","","","","","","","","","","","Flags for configuring the output mode of a terminal","","","","","Specify when a port configuration change should occur.","Indices into the <code>termios.c_cc</code> array for special characters.","","","","","","Flush data that was received but not read","Transmit a STOP character, which should disable a …","Flush both received data not read and written data not …","Transmit a START character, which should re-enable a …","Flush data written but not transmitted","Suspend transmission","Resume transmission","The change occurs after all output has been written","Same as <code>TCSADRAIN</code>, but will also flush the input buffer","The change will occur immediately","","Stores settings for the termios API","","","","","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","Get input baud rate (see cfgetispeed(3p)).","Get output baud rate (see cfgetospeed(3p)).","Configures the port to something like the “raw” mode …","Set input baud rate (see cfsetispeed(3p)).","Set output baud rate (see cfsetospeed(3p)).","Set both the input and output baud rates (see termios(3)).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Control characters (see <code>termios.c_cc</code> documentation)","Control mode flags (see <code>termios.c_cflag</code> documentation)","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","","","","","","","","","","","Input mode flags (see <code>termios.c_iflag</code> documentation)","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Local mode flags (see <code>termios.c_lflag</code> documentation)","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Output mode flags (see <code>termios.c_oflag</code> documentation)","","","","","","","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Block until all output data is written (see tcdrain(3p)).","Suspend or resume the transmission or reception of data …","Discard data in the output or input queue (see tcflush(3p)…","Return the configuration of a port tcgetattr(3p)).","Get the session controlled by the given terminal (see …","Send a break for a specific duration (see tcsendbreak(3p)).","Set the configuration for a terminal (see tcsetattr(3p)).","","","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Makes a new <code>TimeSpec</code> with given number of microseconds.","Makes a new <code>TimeVal</code> with given number of microseconds.","","","","","","","","Makes a new <code>TimeSpec</code> with given number of nanoseconds.","Makes a new <code>TimeVal</code> with given number of nanoseconds.  …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type of the clock used to mark the progress of the …","An enumeration allowing the definition of the expiration …","","","","","","","A timerfd instance. This is also a file descriptor, you …","Additional flags to change the behaviour of the file …","Flags that are used for arming the timer.","Returns the set containing all flags.","Returns the set containing all flags.","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","","","Get the parameters for the alarm currently set, if any.","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Creates a new timer based on the clock defined by <code>clockid</code>. …","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","Sets a new alarm on the timer.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Remove the alarm if any is set.","Wait for the configured alarm to expire.","A vector of buffers.","A slice of memory in a remote process, starting at address …","View the <code>IoVec</code> as a Rust slice.","The starting address of this slice (<code>iov_base</code>).","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create an <code>IoVec</code> from a mutable Rust slice.","Create an <code>IoVec</code> from a Rust slice.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The number of bytes in this slice (<code>iov_len</code>).","Low-level write to a file, with specified offset.","Read from <code>fd</code> at <code>offset</code> filling buffers in <code>iov</code>.","Read data directly from another process’s virtual memory …","Write data directly to another process’s virtual memory …","Low-level write to a file, with specified offset.","Write to <code>fd</code> at <code>offset</code> from buffers in <code>iov</code>.","Low-level vectored read from a raw file descriptor","","","","","","","","","Low-level vectored write to a raw file descriptor","Describes the running system.  Return type of <code>uname</code>.","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Machine hardware platform.","Network name of this machine.","Release level of the operating system.","Name of the operating system implementation","","","","","Get system identification","Version level of the operating system.","The process was previously stopped but has resumed …","The process exited normally (as with <code>exit()</code> or returning …","The traced process was stopped by a <code>PTRACE_EVENT_*</code> event. …","The traced process was stopped by execution of a system …","The process was killed by the given signal. The third field","There are currently no state changes to report in any …","The process is alive, but was stopped by the given signal. …","Report the status of selected processes that have …","Report the status of selected processes which have …","Do not block when there are no processes wishing to report …","Don’t reap, just poll status.","An alias for WUNTRACED.","Report the status of selected processes which are stopped …","Controls the behavior of <code>waitpid</code>.","Possible return values from <code>wait()</code> or <code>waitpid()</code>.","Wait on all children, regardless of type","Wait for “clone” children only.","Don’t wait on children of other threads in this group","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Convert a raw <code>wstatus</code> as returned by <code>waitpid</code>/<code>wait</code> into a …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns the complement of this set of flags.","","Extracts the PID from the WaitStatus unless it equals …","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Wait for any child process to change status or a signal is …","Wait for a process to change status","","","","","","","","","","","Clock identifier","Gets the raw <code>clockid_t</code> wrapped by <code>self</code>","","","Get the clock id of the specified process id, (see …","Get the resolution of the specified clock, (see …","Get the time of the specified clock, (see clock_gettime(2)…","Set the time of the specified clock, (see clock_settime(2)…","","","","","","","","Returns the argument unchanged.","Creates <code>ClockId</code> from raw <code>clockid_t</code>","","Calls <code>U::from(self)</code>.","Returns the current time on the clock id","","Returns <code>ClockId</code> of a <code>pid</code> CPU-time clock","Returns resolution of the clock id","Sets time to <code>timespec</code> on the clock id","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","Maximum number of I/O operations in a single list I/O call …","Maximum number of outstanding asynchronous I/O operations …","The maximum amount by which a process can decrease its …","Maximum length of argument to the exec functions including …","Maximum number of functions that may be registered with …","Options for access()","Maximum obase values allowed by the bc utility.","Maximum number of elements permitted in an array by the bc …","Maximum scale value allowed by the bc utility.","Maximum length of a string constant accepted by the bc …","Maximum number of simultaneous processes per real user ID.","","Maximum number of weights that can be assigned to an entry …","","Maximum number of timer expiration overruns.","Maximum number of expressions that can be nested within …","Minimum number of bits needed to represent, as a signed …","Test for existence of file.","Flags for <code>fchownat</code> function.","","Represents the successful result of calling <code>fork</code>","Initial size of <code>getgrgid_r</code> and <code>getgrnam_r</code> data buffers","Initial size of <code>getpwuid_r</code> and <code>getpwnam_r</code> data buffers","Group identifier","Representation of a Group, based on <code>libc::group</code>","Maximum length of a host name (not including the …","Maximum number of iovec structures that one process has …","Unless otherwise noted, the maximum length, in bytes, of a …","Maximum number of links to a single file.","Maximum length of a login name.","Flags for <code>linkat</code> function.","Maximum number of bytes in a terminal canonical input line.","Minimum number of bytes for which space is available in a …","The maximum number of open message queue descriptors a …","The maximum number of message priorities supported by the …","Maximum number of bytes in a filename (not including the …","Maximum number of simultaneous supplementary group IDs per …","","","","A value one greater than the maximum value that the system …","The size of a system page in bytes.","Maximum number of bytes the implementation will store as a …","Maximum number of bytes that is guaranteed to be atomic …","Symbolic links can be created.","Minimum number of bytes of storage actually allocated for …","Recommended increment for file transfer sizes between the …","Maximum recommended file transfer size.","Minimum recommended file transfer size.","Recommended file transfer buffer alignment.","","","","","","Variable names for <code>pathconf</code>","Process identifier","","Constant for UID = 0","","Test for read permission.","","Real, effective and saved group IDs.","Real, effective and saved user IDs.","","","","","Maximum number of bytes in a symbolic link.","","Specify an offset relative to the current file location.","Specify an offset relative to the next location in the …","Specify an offset relative to the end of the file.","Specify an offset relative to the next hole in the file …","Specify an offset relative to the start of the file.","","Variable names for <code>sysconf</code>","","","","User identifier","Flags for <code>unlinkat</code> function.","Representation of a User, based on <code>libc::passwd</code>","Test for write permission.","Directive that tells <code>lseek</code> and <code>lseek64</code> what the offset is …","Test for execute (search) permission.","The implementation supports the Terminal Characteristics …","The implementation supports the C-Language Binding option.","The implementation supports the C-Language Development …","The implementation supports the FORTRAN Development …","The implementation supports the FORTRAN Runtime Utilities …","The implementation supports the creation of locales by the …","The implementation supports the Batch Environment Services …","The implementation supports the Batch Accounting option.","The implementation supports the Batch Checkpoint/Restart …","The implementation supports the Locate Batch Job Request …","The implementation supports the Batch Job Message Request …","The implementation supports the Track Batch Job Request …","The implementation supports the Software Development …","The implementation supports the User Portability Utilities …","Integer value indicating version of the Shell and …","The implementation supports the Advisory Information …","The implementation supports asynchronous input and output.","Asynchronous input or output operations may be performed …","The implementation supports barriers.","The use of <code>chown</code> and <code>fchown</code> is restricted to a process with","The implementation supports clock selection.","The implementation supports the Process CPU-Time Clocks …","The implementation supports the File Synchronization …","The implementation supports the IPv6 option.","The implementation supports job control.","The implementation supports memory mapped Files.","The implementation supports the Process Memory Locking …","The implementation supports the Range Memory Locking …","The implementation supports memory protection.","The implementation supports the Message Passing option.","The implementation supports the Monotonic Clock option.","Pathname components longer than {NAME_MAX} generate an …","The implementation supports the Prioritized Input and …","The implementation supports the Process Scheduling option.","Prioritized input or output operations may be performed …","The implementation supports the Raw Sockets option.","The implementation supports read-write locks.","The implementation supports realtime signals.","The implementation supports the Regular Expression …","Each process has a saved set-user-ID and a saved …","The implementation supports semaphores.","The implementation supports the Shared Memory Objects …","The implementation supports the POSIX shell.","The implementation supports the Spawn option.","The implementation supports spin locks.","The implementation supports the Process Sporadic Server …","","The implementation supports the Synchronized Input and …","Synchronized input or output operations may be performed …","The implementation supports threads.","The implementation supports the Thread Stack Address …","The implementation supports the Thread Stack Size …","The implementation supports the Thread CPU-Time Clocks …","The implementation supports the Thread Execution …","The implementation supports the Non-Robust Mutex Priority …","The implementation supports the Non-Robust Mutex Priority …","The implementation supports the Thread Process-Shared …","The implementation supports the Robust Mutex Priority …","The implementation supports the Robust Mutex Priority …","The implementation supports thread-safe functions.","The implementation supports the Thread Sporadic Server …","The implementation supports timeouts.","The implementation supports timers.","The implementation supports the Trace option.","The implementation supports the Trace Event Filter option.","","The implementation supports the Trace Inherit option.","The implementation supports the Trace Log option.","","","","The implementation supports the Typed Memory Objects …","The implementation provides a C-language compilation …","The implementation provides a C-language compilation …","The implementation provides a C-language compilation …","The implementation provides a C-language compilation …","This symbol shall be defined to be the value of a …","Integer value indicating version of this standard …","The implementation supports the X/Open Encryption Option …","The implementation supports the Issue 4, Version 2 Enhanced","","The implementation supports the X/Open Realtime Option …","The implementation supports the X/Open Realtime Threads …","The implementation supports the Issue 4, Version 2 Shared …","The implementation supports the XSI STREAMS Option Group.","The implementation supports the XSI option","Integer value indicating version of the X/Open Portability …","Checks the file named by <code>path</code> for accessibility according …","","Alarm signal scheduling.","Returns the set containing all flags.","Get the raw <code>uid_t</code> wrapped by <code>self</code>.","Get the raw <code>gid_t</code> wrapped by <code>self</code>.","Get the raw <code>pid_t</code> wrapped by <code>self</code>.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Change the current working directory of the calling …","Change the ownership of the file at <code>path</code> to be owned by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Close a raw file descriptor","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns Uid of calling process. This is practically a more …","Returns Gid of calling process. This is practically a more …","Daemonize this process by detaching from the controlling …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Home directory","Create a copy of the specified file descriptor (see dup(2)…","Create a copy of the specified file descriptor using the …","Create a new copy of the specified file descriptor using …","Returns effective Uid of calling process. This is …","Returns effective Gid of calling process. This is …","","","Returns an empty set of flags.","","","","","","","","","","","Replace the current process image with a new one (see …","Replace the current process image with a new one (see …","Execute program relative to a directory file descriptor …","Replace the current process image with a new one and …","Replace the current process image with a new one and …","","Change the current working directory of the process to the …","Change the ownership of the file referred to by the open …","Change the ownership of the file at <code>path</code> to be owned by …","Synchronize the data of a file","Replace the current process image with a new one (see …","","","","","","","","","","","","","","","","","","","","","","","Create a new child process duplicating the parent process (…","Like <code>pathconf</code>, but works with file descriptors instead of …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Get a group by GID.","","Get a user by name.","Get a group by name.","Creates <code>Uid</code> from raw <code>uid_t</code>.","Creates <code>Gid</code> from raw <code>gid_t</code>.","Creates <code>Pid</code> from raw <code>pid_t</code>.","Get a user by UID.","Synchronize changes to a file","Truncate a file to a specified length","User information","Returns the current directory as a <code>PathBuf</code>","Get the effective group ID","Get the effective user ID","Get the real group ID","Calculate the supplementary group access list.","Get the list of supplementary group IDs of the calling …","Get the host name and store it in the provided buffer, …","","Get the group id of the calling process (see getpgrp(3)).","Get the pid of this process (see getpid(2)).","Get the pid of this processes’ parent (see getpid(2)).","Gets the real, effective, and saved group IDs.","Gets the real, effective, and saved user IDs.","Get the process group ID of a session leader getsid(2).","Get the caller’s thread ID (see gettid(2).","Get a real user ID","Group ID","Group ID","","","","","","","Initialize the supplementary group access list.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Return <code>true</code> if this is the child process of the <code>fork()</code>","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if this is the parent process of the <code>fork()</code>","Returns true if the <code>Uid</code> represents privileged user - root. …","","Link one file to another file","Move the read/write file offset.","","List of Group members","Creates new directory <code>path</code> with access rights <code>mode</code>.  (see …","Creates new fifo special file (named pipe) with path <code>path</code> …","Creates new fifo special file (named pipe) with path <code>path</code> …","Creates a regular file which persists even after process …","Username","Group name","Returns the complement of this set of flags.","Returns PID of parent of calling process","","","User password (probably encrypted)","Group password","Get path-dependent configurable system variables (see …","Suspend the thread until a signal is received.","Create an interprocess channel.","Like <code>pipe</code>, but allows setting certain file descriptor …","","Read from a raw file descriptor.","","","Removes the specified flags in-place.","","","Inserts or removes the specified flags depending on the …","Set the effective group ID","Set the effective user ID","Set the group identity used for filesystem checks …","Set the user identity used for filesystem checks …","Set the group ID","Set the list of supplementary group IDs for the calling …","Set the system host name (see sethostname(2)).","Set a process group ID (see setpgid(2)).","Sets the real, effective, and saved gid. (see setresuid(2))","Sets the real, effective, and saved uid. (see setresuid(2))","Create new session and set process group id (see setsid(2)…","Set the user ID","Path to shell","Suspend execution for an interval of time","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Creates a symbolic link at <code>path2</code> which points to <code>path1</code>.","Returns the symmetric difference between the flags in <code>self</code> …","Commit filesystem caches to disk","Get configurable system variables (see sysconf(3))","Get the terminal foreground process group (see tcgetpgrp(3)…","Set the terminal foreground process group (see tcgetpgrp(3)…","Returns PID of calling process","","","","","","","","","","","","","","","","","","","Toggles the specified flags in-place.","Truncate a file to a specified length","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the name of the terminal device that is open on file …","","","","","","","","","","","","","","","","User ID","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Remove a directory entry","Remove a directory entry","Write to a raw file descriptor.","","Disable process accounting","Enable process accounting","Cancel an previously set alarm signal.","Schedule an alarm signal."],"if":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],0,[1,3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,-2],[[4,[-1]]],[],[[7,[5],[[6,[-1]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,[8,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[10,10],[11,11],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[8,12],[13,12],[[8,8],2],[[13,13],2],[[14,14],2],[[10,10],2],[[11,11],2],[10,5],[10,[[15,[11]]]],[[8,16],17],[[13,16],17],[[14,16],17],[[10,16],17],[[11,16],17],[-1,[[4,[8]]],18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[9,[[4,[8]]]],[[8,-1],12,19],[[13,-1],12,19],[[14,-1],12,19],[[10,-1],12,19],[[11,-1],12,19],[10,20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[8,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[8,13],[13,[[15,[-1]]],[]],[14,[[15,[-1]]],[]],[[-1,21,22],[[4,[8]]],[23,1]],[[9,-1,21,22],[[4,[8]]],[23,1]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],[[24,[12,26]]]],[26,26],[[-1,-2],12,[],[]],[[26,16],17],[[26,16],17],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,27,[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[28,29],0,[28,[[15,[28]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[],12],[28,28],[[-1,-2],12,[],[]],[28,30],[[28,28],2],[[],31],[[28,16],17],[[28,16],17],[-1,-1,[]],[28,29],[31,28],[31,28],[-1,-2,[],[]],[[],29],[[],28],[-1,[[4,[-1]]],[32,33]],[[],32],[-1,-2,[],[]],[-1,27,[]],[-1,[[24,[-2]]],[],[]],[34,[[24,[28,34]]]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],35],[[],21],[[],36],[[],37],[[],38],[[],39],[[],40],[[35,35],35],[[21,21],21],[[36,36],36],[[37,37],37],[[38,38],38],[[39,39],39],[[40,40],40],[[35,35],12],[[21,21],12],[[36,36],12],[[37,37],12],[[38,38],12],[[39,39],12],[[40,40],12],[[35,35],35],[[21,21],21],[[36,36],36],[[37,37],37],[[38,38],38],[[39,39],39],[[40,40],40],[[35,35],12],[[21,21],12],[[36,36],12],[[37,37],12],[[38,38],12],[[39,39],12],[[40,40],12],[35,41],[21,41],[36,42],[37,41],[38,41],[39,43],[40,41],[[35,35],35],[[21,21],21],[[36,36],36],[[37,37],37],[[38,38],38],[[39,39],39],[[40,40],40],[[35,35],12],[[21,21],12],[[36,36],12],[[37,37],12],[[38,38],12],[[39,39],12],[[40,40],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[35,35],[21,21],[36,36],[37,37],[38,38],[44,44],[39,39],[40,40],[45,45],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[35,35],46],[[21,21],46],[[36,36],46],[[37,37],46],[[38,38],46],[[39,39],46],[[40,40],46],[[45,45],46],[35,35],[21,21],[36,36],[37,37],[38,38],[39,39],[40,40],[[35,35],2],[[21,21],2],[[36,36],2],[[37,37],2],[[38,38],2],[[39,39],2],[[40,40],2],[[9,[15,[47]],9,[15,[47]],3],[[4,[3]]]],[[35,35],35],[[21,21],21],[[36,36],36],[[37,37],37],[[38,38],38],[[39,39],39],[[40,40],40],[[],35],[[],21],[[],36],[[],37],[[],38],[[],39],[[],40],[[35,35],2],[[21,21],2],[[36,36],2],[[37,37],2],[[38,38],2],[[48,48],2],[[44,44],2],[[39,39],2],[[40,40],2],[[45,45],2],[[35,-1],12,[[50,[],[[49,[35]]]]]],[[21,-1],12,[[50,[],[[49,[21]]]]]],[[36,-1],12,[[50,[],[[49,[36]]]]]],[[37,-1],12,[[50,[],[[49,[37]]]]]],[[38,-1],12,[[50,[],[[49,[38]]]]]],[[39,-1],12,[[50,[],[[49,[39]]]]]],[[40,-1],12,[[50,[],[[49,[40]]]]]],[[9,40,51,51],[[4,[12]]]],[[9,48],[[4,[41]]]],[[9,44],[[4,[12]]]],[[35,16],17],[[35,16],17],[[35,16],17],[[35,16],17],[[35,16],17],[[21,16],17],[[21,16],17],[[21,16],17],[[21,16],17],[[21,16],17],[[36,16],17],[[36,16],17],[[36,16],17],[[36,16],17],[[36,16],17],[[37,16],17],[[37,16],17],[[37,16],17],[[37,16],17],[[37,16],17],[[38,16],17],[[38,16],17],[[38,16],17],[[38,16],17],[[38,16],17],[[48,16],17],[[44,16],17],[[39,16],17],[[39,16],17],[[39,16],17],[[39,16],17],[[39,16],17],[[40,16],17],[[40,16],17],[[40,16],17],[[40,16],17],[[40,16],17],[[45,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[41,[[15,[35]]]],[41,[[15,[21]]]],[42,[[15,[36]]]],[41,[[15,[37]]]],[41,[[15,[38]]]],[43,[[15,[39]]]],[41,[[15,[40]]]],[41,35],[41,21],[42,36],[41,37],[41,38],[43,39],[41,40],[41,35],[41,21],[42,36],[41,37],[41,38],[43,39],[41,40],[-1,35,[[50,[],[[49,[35]]]]]],[-1,21,[[50,[],[[49,[21]]]]]],[-1,36,[[50,[],[[49,[36]]]]]],[-1,37,[[50,[],[[49,[37]]]]]],[-1,38,[[50,[],[[49,[38]]]]]],[-1,39,[[50,[],[[49,[39]]]]]],[-1,40,[[50,[],[[49,[40]]]]]],[[35,-1],12,19],[[21,-1],12,19],[[36,-1],12,19],[[37,-1],12,19],[[38,-1],12,19],[[48,-1],12,19],[[44,-1],12,19],[[39,-1],12,19],[[40,-1],12,19],[[45,-1],12,19],[[35,35],12],[[21,21],12],[[36,36],12],[[37,37],12],[[38,38],12],[[39,39],12],[[40,40],12],[[35,35],35],[[21,21],21],[[36,36],36],[[37,37],37],[[38,38],38],[[39,39],39],[[40,40],40],[[35,35],2],[[21,21],2],[[36,36],2],[[37,37],2],[[38,38],2],[[39,39],2],[[40,40],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[35,2],[21,2],[36,2],[37,2],[38,2],[39,2],[40,2],[35,2],[21,2],[36,2],[37,2],[38,2],[39,2],[40,2],[35,35],[21,21],[36,36],[37,37],[38,38],[39,39],[40,40],[[-1,21,22],[[4,[9]]],[23,1]],[[9,-1,21,22],[[4,[9]]],[23,1]],[[35,35],[[15,[46]]]],[[21,21],[[15,[46]]]],[[36,36],[[15,[46]]]],[[37,37],[[15,[46]]]],[[38,38],[[15,[46]]]],[[39,39],[[15,[46]]]],[[40,40],[[15,[46]]]],[[45,45],[[15,[46]]]],[[9,51,51,45],[[4,[12]]]],[[9,51,51],[[4,[12]]]],[-1,[[4,[52]]],[23,1]],[[9,-1],[[4,[52]]],[23,1]],[[35,35],12],[[21,21],12],[[36,36],12],[[37,37],12],[[38,38],12],[[39,39],12],[[40,40],12],[[[15,[9]],-1,[15,[9]],-2],[[4,[12]]],[23,1],[23,1]],[[[15,[9]],-1,[15,[9]],-2,36],[[4,[12]]],[23,1],[23,1]],[[35,35,2],12],[[21,21,2],12],[[36,36,2],12],[[37,37,2],12],[[38,38,2],12],[[39,39,2],12],[[40,40,2],12],[[9,[15,[47]],9,[15,[47]],3,39],[[4,[3]]]],[[35,35],35],[[21,21],21],[[36,36],36],[[37,37],37],[[38,38],38],[[39,39],39],[[40,40],40],[[35,35],12],[[21,21],12],[[36,36],12],[[37,37],12],[[38,38],12],[[39,39],12],[[40,40],12],[[35,35],35],[[21,21],21],[[36,36],36],[[37,37],37],[[38,38],38],[[39,39],39],[[40,40],40],[[9,9,3,39],[[4,[3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[35,35],12],[[21,21],12],[[36,36],12],[[37,37],12],[[38,38],12],[[39,39],12],[[40,40],12],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[[35,35],35],[[21,21],21],[[36,36],36],[[37,37],37],[[38,38],38],[[39,39],39],[[40,40],40],[[9,[54,[[55,[[54,[53]]]]]],39],[[4,[3]]]],[[],2],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[56,56],[[-1,-2],12,[],[]],0,[57,12],[[56,56],2],[[57,57],2],0,[[56,16],17],[[57,16],17],[-1,-1,[]],[-1,-1,[]],[[],[[4,[57]]]],[[56,-1],12,19],[[57,-1],12,19],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[57,[[15,[-1]]],[]],[-1,-2,[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],0,0,0,0,0,0,[[],58],[[],59],[[58,58],58],[[59,59],59],[[58,58],12],[[59,59],12],[[58,58],58],[[59,59],59],[[58,58],12],[[59,59],12],[58,43],[59,41],[[58,58],58],[[59,59],59],[[58,58],12],[[59,59],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[58,58],[59,59],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[58,58],46],[[59,59],46],[58,58],[59,59],[[58,58],2],[[59,59],2],[[5,59],[[4,[12]]]],[[58,58],58],[[59,59],59],[[],58],[[],59],[[58,58],2],[[59,59],2],[[58,-1],12,[[50,[],[[49,[58]]]]]],[[59,-1],12,[[50,[],[[49,[59]]]]]],[[-1,5,58],[[4,[12]]],60],[[58,16],17],[[58,16],17],[[58,16],17],[[58,16],17],[[58,16],17],[[59,16],17],[[59,16],17],[[59,16],17],[[59,16],17],[[59,16],17],[-1,-1,[]],[-1,-1,[]],[43,[[15,[58]]]],[41,[[15,[59]]]],[43,58],[41,59],[43,58],[41,59],[-1,58,[[50,[],[[49,[58]]]]]],[-1,59,[[50,[],[[49,[59]]]]]],[[58,-1],12,19],[[59,-1],12,19],[[[54,[53]],5],[[4,[12]]]],[[58,58],12],[[59,59],12],[[58,58],58],[[59,59],59],[[58,58],2],[[59,59],2],[-1,-2,[],[]],[-1,-2,[],[]],[58,2],[59,2],[58,2],[59,2],[58,58],[59,59],[[58,58],[[15,[46]]]],[[59,59],[[15,[46]]]],[[58,58],12],[[59,59],12],[[58,58,2],12],[[59,59,2],12],[[58,58],58],[[59,59],59],[[58,58],12],[[59,59],12],[[58,58],58],[[59,59],59],[-1,-2,[],[]],[-1,-2,[],[]],[[58,58],12],[[59,59],12],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[[58,58],58],[[59,59],59],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],61],[[],62],[[61,61],61],[[62,62],62],[[61,61],12],[[62,62],12],[[61,61],61],[[62,62],62],[[61,61],12],[[62,62],12],[61,63],[62,41],[[61,61],61],[[62,62],62],[[61,61],12],[[62,62],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[61,61],[62,62],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[61,61],46],[[62,62],46],[61,61],[62,62],[[61,61],2],[[62,62],2],[[61,61],61],[[62,62],62],[[],61],[[],62],[[61,61],2],[[62,62],2],[[61,-1],12,[[50,[],[[49,[61]]]]]],[[62,-1],12,[[50,[],[[49,[62]]]]]],[[61,16],17],[[61,16],17],[[61,16],17],[[61,16],17],[[61,16],17],[[62,16],17],[[62,16],17],[[62,16],17],[[62,16],17],[[62,16],17],[-1,-1,[]],[-1,-1,[]],[63,[[15,[61]]]],[41,[[15,[62]]]],[63,61],[41,62],[63,61],[41,62],[-1,61,[[50,[],[[49,[61]]]]]],[-1,62,[[50,[],[[49,[62]]]]]],[[61,-1],12,19],[[62,-1],12,19],[[61,61],12],[[62,62],12],[[61,61],61],[[62,62],62],[[61,61],2],[[62,62],2],[-1,-2,[],[]],[-1,-2,[],[]],[61,2],[62,2],[61,2],[62,2],[[[15,[-1]],-2,[15,[-3]],61,[15,[-4]]],[[4,[12]]],[23,1],[23,1],[23,1],[23,1]],[61,61],[62,62],[[61,61],[[15,[46]]]],[[62,62],[[15,[46]]]],[[61,61],12],[[62,62],12],[[61,61,2],12],[[62,62,2],12],[[61,61],61],[[62,62],62],[[61,61],12],[[62,62],12],[[61,61],61],[[62,62],62],[-1,-2,[],[]],[-1,-2,[],[]],[[61,61],12],[[62,62],12],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,[[4,[12]]],[23,1]],[[-1,62],[[4,[12]]],[23,1]],[[61,61],61],[[62,62],62],0,0,0,0,0,0,0,0,0,0,0,[[],64],[[],65],[[64,64],64],[[65,65],65],[[64,64],12],[[65,65],12],[[64,64],64],[[65,65],65],[[64,64],12],[[65,65],12],[64,41],[65,41],[[64,64],64],[[65,65],65],[[64,64],12],[[65,65],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[64,64],[65,65],[66,66],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[64,64],46],[[65,65],46],[64,64],[65,65],[[64,64],2],[[65,65],2],[[64,64],64],[[65,65],65],[[],64],[[],65],[[64,64],2],[[65,65],2],[[66,66],2],[[64,-1],12,[[50,[],[[49,[64]]]]]],[[65,-1],12,[[50,[],[[49,[65]]]]]],[66,67],[[64,16],17],[[64,16],17],[[64,16],17],[[64,16],17],[[64,16],17],[[65,16],17],[[65,16],17],[[65,16],17],[[65,16],17],[[65,16],17],[[66,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[41,[[15,[64]]]],[41,[[15,[65]]]],[41,64],[41,65],[41,64],[41,65],[-1,64,[[50,[],[[49,[64]]]]]],[-1,65,[[50,[],[[49,[65]]]]]],[[64,-1],12,19],[[65,-1],12,19],[[66,-1],12,19],[[64,64],12],[[65,65],12],[[64,64],64],[[65,65],65],[[64,64],2],[[65,65],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[64,2],[65,2],[64,2],[65,2],0,[68,[[4,[12]]]],[68,[[4,[66]]]],[[69,64,22,[15,[66]]],[[4,[68]]]],[[68,[54,[53]],42],[[4,[3]]]],[68,[[4,[66]]]],[[68,[54,[53]],42],[[4,[12]]]],[68,[[4,[66]]]],[[68,66],[[4,[66]]]],[69,[[4,[12]]]],[[67,67,67,67],66],[64,64],[65,65],[[64,64],[[15,[46]]]],[[65,65],[[15,[46]]]],[[64,64],12],[[65,65],12],[[64,64,2],12],[[65,65,2],12],[[64,64],64],[[65,65],65],[[64,64],12],[[65,65],12],[[64,64],64],[[65,65],65],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[64,64],12],[[65,65],12],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[[64,64],64],[[65,65],65],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],70],[[70,70],70],[[70,70],12],[[70,70],70],[[70,70],12],[70,41],[[70,70],70],[[70,70],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[70,70],[[-1,-2],12,[],[]],[[70,70],46],[70,70],[[70,70],2],[[70,70],70],[71,12],[[],70],[[70,70],2],[[70,-1],12,[[50,[],[[49,[70]]]]]],[[72,16],17],[[71,16],17],[[70,16],17],[[70,16],17],[[70,16],17],[[70,16],17],[[70,16],17],[[73,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[41,[[15,[70]]]],[41,70],[41,70],[-1,70,[[50,[],[[49,[70]]]]]],[[70,-1],12,19],[[],[[4,[71]]]],[-1,[[4,[43]]],[23,1]],[72,43],[[70,70],12],[[70,70],70],[[70,70],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[71,-1,[]],[-1,-2,[],[]],[70,2],[70,2],[71,73],[72,5],[73,[[15,[-1]]],[]],[70,70],[[70,70],[[15,[46]]]],[[70,70],12],[[70,70,2],12],[[70,70],70],[[70,70],12],[[70,70],70],[-1,-2,[],[]],[71,[[54,[72]]]],[[70,70],12],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[[70,70],70],0,0,0,0,0,0,0,0,0,0,0,0,[[],74],[75,9],[[74,74],74],[[74,74],12],[[74,74],74],[[74,74],12],[74,76],[[74,74],74],[[74,74],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[75,75],[74,74],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[74,74],46],[74,74],[[74,74],2],[[74,74],74],[[],74],[[75,75],2],[[74,74],2],[75,74],[[74,-1],12,[[50,[],[[49,[74]]]]]],[[75,16],17],[[74,16],17],[[74,16],17],[[74,16],17],[[74,16],17],[[74,16],17],[-1,-1,[]],[-1,-1,[]],[76,[[15,[74]]]],[76,74],[76,74],[-1,74,[[50,[],[[49,[74]]]]]],[[75,-1],12,19],[[74,-1],12,19],[[74,74],12],[[74,74],74],[[74,74],2],[-1,-2,[],[]],[-1,-2,[],[]],[74,2],[74,2],[[9,74],75],[74,74],[[74,74],[[15,[46]]]],[[[54,[75]],41],[[4,[41]]]],[[[54,[75]],[15,[77]],78],[[4,[41]]]],[[74,74],12],[75,[[15,[74]]]],[[74,74,2],12],[[75,74],12],[[74,74],74],[[74,74],12],[[74,74],74],[-1,-2,[],[]],[-1,-2,[],[]],[[74,74],12],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[[74,74],74],0,0,0,0,0,[79,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[80,80],[81,81],[82,82],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[79,12],[[80,80],2],[[81,81],2],[[79,79],2],[79,[[83,[12]]]],[[80,16],[[24,[12,84]]]],[[81,16],17],[[82,16],17],[[79,16],17],0,[[-1,-2],[[4,[82]]],[[85,[[15,[80]]]]],[[85,[[15,[86]]]]]],[87,88],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[79,[[4,[12]]]],[[80,-1],12,19],[[81,-1],12,19],[[79,-1],12,19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[79,9],0,0,[[-1,-2],[[4,[81]]],[[85,[[15,[80]]]]],[[85,[[15,[86]]]]]],[21,[[4,[79]]]],[79,[[4,[27]]]],[79,[[4,[27]]]],[[79,[54,[53]]],[[83,[3]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[79,[[4,[12]]]],[[79,[54,[53]]],[[83,[3]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],89],[[89,89],89],[[89,89],12],[[89,89],89],[[89,89],12],[89,41],[[89,89],89],[[89,89],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[90,[54,[53]],89,[15,[41]]],[[4,[87]]]],[89,89],[91,91],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[89,89],46],[89,89],[[89,89],2],[[],3],[[],91],[[89,89],89],[[],89],[[89,89],2],[[91,91],2],[[89,-1],12,[[50,[],[[49,[89]]]]]],[[89,16],17],[[89,16],17],[[89,16],17],[[89,16],17],[[89,16],17],[[91,16],17],[-1,-1,[]],[-1,-1,[]],[41,[[15,[89]]]],[41,89],[41,89],[-1,89,[[50,[],[[49,[89]]]]]],[[89,-1],12,19],[[91,-1],12,19],[[89,89],12],[[89,89],89],[[89,89],2],[-1,-2,[],[]],[-1,-2,[],[]],[89,2],[89,2],[[91,3],[[4,[2]]]],[[],91],[89,89],[[89,89],[[15,[46]]]],[[89,89],12],[87,[[4,[91]]]],[[87,91],[[4,[12]]]],[[],[[4,[12]]]],[[89,89,2],12],[[91,3],[[4,[12]]]],[[9,89],[[4,[12]]]],[[89,89],89],[[89,89],12],[[89,89],89],[-1,-2,[],[]],[-1,-2,[],[]],[[89,89],12],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[[89,89],89],[[91,3],[[4,[12]]]],[89,[[4,[12]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,[[4,[92]]]],[[[95,[[94,[93]]]]],[[4,[96]]]],[[97,3],[[4,[96]]]],[[[54,[[95,[93]]]],[15,[77]]],[[4,[12]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[95,[[94,[93]]]]],[[4,[92]]]],[98,98],[99,99],[100,100],[92,92],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[98,98],46],[[99,99],46],[[100,100],46],[93,12],[[101,9,51,[54,[53]],41,102,99],101],[[101,9,51,[54,[53]],41,102,99],101],[[98,98],2],[[99,99],2],[[100,100],2],[[92,92],2],[[[95,[[94,[93]]]]],[[4,[12]]]],[[97,3],[[4,[12]]]],[93,9],[101,97],[[93,16],17],[[97,16],17],[[98,16],17],[[99,16],17],[[100,16],17],[[92,16],17],[[101,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[9,41,102],[[95,[[94,[93]]]]]],[[9,51,103,3,41,102,99],[[95,[[94,[93]]]]]],[[9,51,[54,[53]],41,102,99],[[95,[[94,[93]]]]]],[[9,51,103,3,41,102,99],[[95,[[94,[93]]]]]],[[9,51,[54,[53]],41,102,99],[[95,[[94,[93]]]]]],[[[95,[[94,[93]]]],98],[[4,[12]]]],[[98,-1],12,19],[[99,-1],12,19],[[100,-1],12,19],[[92,-1],12,19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[97,2],[97,3],[93,[[15,[99]]]],[[97,100,102],[[4,[12]]]],[[97,100,102],[[4,[12]]]],[93,3],[93,51],[[98,98],[[15,[46]]]],[[99,99],[[15,[46]]]],[[100,100],[[15,[46]]]],[93,41],[[[95,[[94,[93]]]]],[[4,[12]]]],[[[95,[[94,[93]]]],102],12],[93,104],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[3,101],[[[95,[[94,[93]]]]],[[4,[12]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],105],[[],106],[[105,105],105],[[106,106],106],[[105,105],12],[[106,106],12],[[105,105],105],[[106,106],106],[[105,105],12],[[106,106],12],[105,41],[106,41],[[105,105],105],[[106,106],106],[[105,105],12],[[106,106],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[105,105],[107,107],[106,106],[108,108],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[105,105],46],[[106,106],46],[105,105],[106,106],[[105,105],2],[[106,106],2],[108,20],[[105,105],105],[[106,106],106],[[],105],[[],106],[[],108],[[],[[4,[9]]]],[106,[[4,[9]]]],[[9,107,9,-1],[[4,[12]]],[[85,[[15,[108]]]]]],[[9,[54,[108]],96],[[4,[3]]]],[[105,105],2],[[107,107],2],[[106,106],2],[[108,108],2],[108,105],[[105,-1],12,[[50,[],[[49,[105]]]]]],[[106,-1],12,[[50,[],[[49,[106]]]]]],[[105,16],17],[[105,16],17],[[105,16],17],[[105,16],17],[[105,16],17],[[107,16],17],[[106,16],17],[[106,16],17],[[106,16],17],[[106,16],17],[[106,16],17],[[108,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[41,[[15,[105]]]],[41,[[15,[106]]]],[41,105],[41,106],[41,105],[41,106],[-1,105,[[50,[],[[49,[105]]]]]],[-1,106,[[50,[],[[49,[106]]]]]],[[105,-1],12,19],[[107,-1],12,19],[[106,-1],12,19],[[108,-1],12,19],[[105,105],12],[[106,106],12],[[105,105],105],[[106,106],106],[[105,105],2],[[106,106],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[105,2],[106,2],[105,2],[106,2],[[105,20],108],[105,105],[106,106],[[105,105],[[15,[46]]]],[[106,106],[[15,[46]]]],[[105,105],12],[[106,106],12],[[105,105,2],12],[[106,106,2],12],[[105,105],105],[[106,106],106],[[105,105],12],[[106,106],12],[[105,105],105],[[106,106],106],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[105,105],12],[[106,106],12],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[[105,105],105],[[106,106],106],0,0,0,0,[[],109],[[109,109],109],[[109,109],12],[[109,109],109],[[109,109],12],[109,41],[[109,109],109],[[109,109],12],[-1,-2,[],[]],[-1,-2,[],[]],[109,109],[[-1,-2],12,[],[]],[[109,109],46],[109,109],[[109,109],2],[[109,109],109],[[],109],[[109,109],2],[[43,109],[[4,[9]]]],[[109,-1],12,[[50,[],[[49,[109]]]]]],[[109,16],17],[[109,16],17],[[109,16],17],[[109,16],17],[[109,16],17],[-1,-1,[]],[41,[[15,[109]]]],[41,109],[41,109],[-1,109,[[50,[],[[49,[109]]]]]],[[109,-1],12,19],[[109,109],12],[[109,109],109],[[109,109],2],[-1,-2,[],[]],[109,2],[109,2],[109,109],[[109,109],[[15,[46]]]],[[109,109],12],[[109,109,2],12],[[109,109],109],[[109,109],12],[[109,109],109],[-1,-2,[],[]],[[109,109],12],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[[109,109],109],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[110,-1,111],[[4,[112]]],[23,1]],[[],111],[[],113],[110,9],[[111,111],111],[[113,113],113],[[111,111],12],[[113,113],12],[[111,111],111],[[113,113],113],[[111,111],12],[[113,113],12],[111,42],[113,41],[[111,111],111],[[113,113],113],[[111,111],12],[[113,113],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[111,111],[113,113],[110,110],[112,112],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[111,111],46],[[113,113],46],[[112,112],46],[111,111],[113,113],[[111,111],2],[[113,113],2],0,[[111,111],111],[[113,113],113],[[],111],[[],113],[[111,111],2],[[113,113],2],[[112,112],2],[[111,-1],12,[[50,[],[[49,[111]]]]]],[[113,-1],12,[[50,[],[[49,[113]]]]]],[[111,16],17],[[111,16],17],[[111,16],17],[[111,16],17],[[111,16],17],[[113,16],17],[[113,16],17],[[113,16],17],[[113,16],17],[[113,16],17],[[110,16],17],[[112,16],17],[[114,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[42,[[15,[111]]]],[41,[[15,[113]]]],[42,111],[41,113],[42,111],[41,113],[-1,111,[[50,[],[[49,[111]]]]]],[-1,113,[[50,[],[[49,[113]]]]]],[9,110],[[111,-1],12,19],[[113,-1],12,19],[[112,-1],12,19],[113,[[4,[110]]]],[[111,111],12],[[113,113],12],[[111,111],111],[[113,113],113],[[111,111],2],[[113,113],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[111,2],[113,2],[111,2],[113,2],0,0,[111,111],[113,113],[[111,111],[[15,[46]]]],[[113,113],[[15,[46]]]],[[112,112],[[15,[46]]]],[110,[[4,[[115,[114]]]]]],[[111,111],12],[[113,113],12],[[110,112],[[4,[12]]]],[[111,111,2],12],[[113,113,2],12],[[111,111],111],[[113,113],113],[[111,111],12],[[113,113],12],[[111,111],111],[[113,113],113],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[111,111],12],[[113,113],12],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[[111,111],111],[[113,113],113],0,0,0,0,0,0,0,0,[[],116],[[116,116],116],[[116,116],12],[[116,116],116],[[116,116],12],[116,43],[[116,116],116],[[116,116],12],[-1,-2,[],[]],[-1,-2,[],[]],[116,116],[[-1,-2],12,[],[]],[[116,116],46],[116,116],[[116,116],2],[[116,116],116],[[],116],[[116,116],2],[[116,-1],12,[[50,[],[[49,[116]]]]]],[[116,16],17],[[116,16],17],[[116,16],17],[[116,16],17],[[116,16],17],[-1,-1,[]],[43,[[15,[116]]]],[43,116],[43,116],[-1,116,[[50,[],[[49,[116]]]]]],[[116,-1],12,19],[[116,116],12],[[116,116],116],[[116,116],2],[-1,-2,[],[]],[116,2],[116,2],[[5,116],[[4,[9]]]],[116,116],[[116,116],[[15,[46]]]],[[116,116],12],[[116,116,2],12],[[116,116],116],[[116,116],12],[[116,116],116],[-1,-2,[],[]],[[116,116],12],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[[116,116],116],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],117],[[],118],[[],119],[[],120],[[],121],[[117,117],117],[[118,118],118],[[119,119],119],[[120,120],120],[[121,121],121],[[117,117],12],[[118,118],12],[[119,119],12],[[120,120],12],[[121,121],12],[[117,117],117],[[118,118],118],[[119,119],119],[[120,120],120],[[121,121],121],[[117,117],12],[[118,118],12],[[119,119],12],[[120,120],12],[[121,121],12],[117,41],[118,41],[119,41],[120,41],[121,41],[[117,117],117],[[118,118],118],[[119,119],119],[[120,120],120],[[121,121],121],[[117,117],12],[[118,118],12],[[119,119],12],[[120,120],12],[[121,121],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[117,117],[118,118],[119,119],[122,122],[120,120],[121,121],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[117,117],46],[[118,118],46],[[119,119],46],[[122,122],46],[[120,120],46],[[121,121],46],[117,117],[118,118],[119,119],[120,120],[121,121],[[117,117],2],[[118,118],2],[[119,119],2],[[120,120],2],[[121,121],2],[[117,117],117],[[118,118],118],[[119,119],119],[[120,120],120],[[121,121],121],[[],117],[[],118],[[],119],[[],120],[[],121],[[117,117],2],[[118,118],2],[[119,119],2],[[122,122],2],[[120,120],2],[[121,121],2],[[117,-1],12,[[50,[],[[49,[117]]]]]],[[118,-1],12,[[50,[],[[49,[118]]]]]],[[119,-1],12,[[50,[],[[49,[119]]]]]],[[120,-1],12,[[50,[],[[49,[120]]]]]],[[121,-1],12,[[50,[],[[49,[121]]]]]],[[117,16],17],[[117,16],17],[[117,16],17],[[117,16],17],[[117,16],17],[[118,16],17],[[118,16],17],[[118,16],17],[[118,16],17],[[118,16],17],[[119,16],17],[[119,16],17],[[119,16],17],[[119,16],17],[[119,16],17],[[122,16],17],[[120,16],17],[[120,16],17],[[120,16],17],[[120,16],17],[[120,16],17],[[121,16],17],[[121,16],17],[[121,16],17],[[121,16],17],[[121,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[41,[[15,[117]]]],[41,[[15,[118]]]],[41,[[15,[119]]]],[41,[[15,[120]]]],[41,[[15,[121]]]],[41,117],[41,118],[41,119],[41,120],[41,121],[41,117],[41,118],[41,119],[41,120],[41,121],[-1,117,[[50,[],[[49,[117]]]]]],[-1,118,[[50,[],[[49,[118]]]]]],[-1,119,[[50,[],[[49,[119]]]]]],[-1,120,[[50,[],[[49,[120]]]]]],[-1,121,[[50,[],[[49,[121]]]]]],[[117,-1],12,19],[[118,-1],12,19],[[119,-1],12,19],[[122,-1],12,19],[[120,-1],12,19],[[121,-1],12,19],[[117,117],12],[[118,118],12],[[119,119],12],[[120,120],12],[[121,121],12],[[117,117],117],[[118,118],118],[[119,119],119],[[120,120],120],[[121,121],121],[[117,117],2],[[118,118],2],[[119,119],2],[[120,120],2],[[121,121],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[117,2],[118,2],[119,2],[120,2],[121,2],[117,2],[118,2],[119,2],[120,2],[121,2],[[103,123,122],[[4,[12]]]],[[103,123],[[4,[12]]]],[121,[[4,[12]]]],[[103,123,117,118,9,51],[[4,[103]]]],[[103,123,117],[[4,[12]]]],[[103,123,123,119,[15,[103]]],[[4,[103]]]],[[103,123,120],[[4,[12]]]],[[103,123],[[4,[12]]]],[[],[[4,[12]]]],[[103,123],[[4,[12]]]],[117,117],[118,118],[119,119],[120,120],[121,121],[[117,117],[[15,[46]]]],[[118,118],[[15,[46]]]],[[119,119],[[15,[46]]]],[[122,122],[[15,[46]]]],[[120,120],[[15,[46]]]],[[121,121],[[15,[46]]]],[[117,117],12],[[118,118],12],[[119,119],12],[[120,120],12],[[121,121],12],[[117,117,2],12],[[118,118,2],12],[[119,119,2],12],[[120,120,2],12],[[121,121,2],12],[[-1,21,22],[[4,[9]]],[23,1]],[-1,[[4,[12]]],[23,1]],[[117,117],117],[[118,118],118],[[119,119],119],[[120,120],120],[[121,121],121],[[117,117],12],[[118,118],12],[[119,119],12],[[120,120],12],[[121,121],12],[[117,117],117],[[118,118],118],[[119,119],119],[[120,120],120],[[121,121],121],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[117,117],12],[[118,118],12],[[119,119],12],[[120,120],12],[[121,121],12],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[[117,117],117],[[118,118],118],[[119,119],119],[[120,120],120],[[121,121],121],0,0,0,0,0,0,0,0,0,0,0,0,[[],124],[[124,124],124],[[124,124],12],[[124,124],124],[[124,124],12],[124,41],[[124,124],124],[[124,124],12],[-1,-2,[],[]],[-1,-2,[],[]],[124,124],[[-1,-2],12,[],[]],[[124,124],46],[124,124],[[124,124],2],[[124,124],124],[[],124],[[124,124],2],[[124,-1],12,[[50,[],[[49,[124]]]]]],[[124,16],17],[[124,16],17],[[124,16],17],[[124,16],17],[[124,16],17],[-1,-1,[]],[41,[[15,[124]]]],[41,124],[41,124],[-1,124,[[50,[],[[49,[124]]]]]],[[],[[4,[124]]]],[[124,-1],12,19],[[124,124],12],[[124,124],124],[[124,124],2],[-1,-2,[],[]],[124,2],[124,2],[124,124],[[124,124],[[15,[46]]]],[[124,124],12],[124,[[4,[124]]]],[[124,124,2],12],[[124,124],124],[[124,124],12],[[124,124],124],[-1,-2,[],[]],[[124,124],12],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[[124,124],124],0,[[125,-1],[[4,[12]]],[[85,[[15,[126]]]]]],[[],125],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],127],[87,[[4,[12]]]],[[127,127],127],[[127,127],12],[[127,127],127],[[127,127],12],[127,41],[[127,127],127],[[127,127],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[128,128],[129,129],[127,127],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[128,128],46],[[129,129],46],[[127,127],46],[127,127],[[87,-1],[[4,[12]]],[[85,[[15,[126]]]]]],[[127,127],2],[[87,-1],[[4,[12]]],[[85,[[15,[126]]]]]],[[127,127],127],[[],127],[[128,128],2],[[129,129],2],[[127,127],2],[[127,-1],12,[[50,[],[[49,[127]]]]]],[[128,16],17],[[129,16],17],[[127,16],17],[[127,16],17],[[127,16],17],[[127,16],17],[[127,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[41,[[15,[127]]]],[41,127],[41,127],[-1,127,[[50,[],[[49,[127]]]]]],[87,[[4,[130]]]],[87,[[4,[131]]]],[87,[[4,[132]]]],[[128,-1],12,19],[[129,-1],12,19],[[127,-1],12,19],[[127,127],12],[87,[[4,[12]]]],[[127,127],127],[[127,127],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[127,2],[127,2],[87,[[4,[12]]]],[127,127],[[128,128],[[15,[46]]]],[[129,129],[[15,[46]]]],[[127,127],[[15,[46]]]],[[87,133],[[4,[130]]]],[[127,127],12],[[87,127],[[4,[12]]]],[[127,127,2],12],[[87,127],[[4,[12]]]],[[87,131],[[4,[12]]]],[[87,132],[[4,[12]]]],[[87,-1],[[4,[12]]],[[85,[[15,[126]]]]]],[[127,127],127],[[127,127],12],[[127,127],127],[[87,-1],[[4,[12]]],[[85,[[15,[126]]]]]],[[87,-1],[[4,[12]]],[[85,[[15,[126]]]]]],[[87,-1],[[4,[12]]],[[85,[[15,[126]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[127,127],12],[[],[[4,[12]]]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[[127,127],127],[[87,133,103],[[4,[12]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],134],[135,[[15,[20]]]],[[134,134],134],[[134,134],12],[[134,134],134],[[134,134],12],[134,42],[[134,134],134],[[134,134],12],[135,[[15,[20]]]],[135,[[15,[20]]]],[135,[[15,[20]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[136,136],[137,137],[134,134],[135,135],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[136,136],46],[[137,137],46],[[134,134],46],[134,134],[[134,134],2],[[],134],[[],135],[[134,134],134],[[],134],[[136,136],2],[[137,137],2],[[134,134],2],[[135,135],2],[[134,-1],12,[[50,[],[[49,[134]]]]]],[[136,16],17],[[137,16],17],[[134,16],17],[[134,16],17],[[134,16],17],[[134,16],17],[[134,16],17],[[135,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[42,[[15,[134]]]],[42,134],[42,134],[-1,134,[[50,[],[[49,[134]]]]]],[[136,-1],12,19],[[137,-1],12,19],[[134,-1],12,19],[[135,-1],12,19],[135,[[15,[20]]]],[135,[[15,[20]]]],[135,[[15,[20]]]],[[134,134],12],[[134,134],134],[[134,134],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[134,2],[134,2],[134,134],[135,[[15,[20]]]],[[136,136],[[15,[46]]]],[[137,137],[[15,[46]]]],[[134,134],[[15,[46]]]],[[136,-1,41],[[4,[135]]],[23,1]],[[136,-1],[[4,[12]]],[23,1]],[[136,-1,137,-1],[[4,[12]]],[23,1]],[[136,-1,41,135,134],[[4,[12]]],[23,1]],[[136,[15,[-1]]],[[4,[12]]],[23,1]],[[134,134],12],[[134,134,2],12],[[135,20],12],[[135,20],12],[[135,20],12],[[135,20],12],[[135,20],12],[[135,20],12],[[134,134],134],[[134,134],12],[[134,134],134],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[134,134],12],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[[134,134],134],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[138,138],[[-1,-2],12,[],[]],[[138,138],46],[[138,138],2],[[138,16],17],[-1,-1,[]],[[138,-1],12,19],[-1,-2,[],[]],[[138,138],[[15,[46]]]],[138,[[4,[139]]]],[2,[[4,[12]]]],[-1,-2,[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[140,140],[[-1,-2],12,[],[]],[[140,140],46],[[140,140],2],[[140,16],17],[-1,-1,[]],[140,[[4,[[12,[[15,[141]],[15,[141]]]]]]]],[[140,-1],12,19],[-1,-2,[],[]],[[140,140],[[15,[46]]]],0,[[140,[15,[141]],[15,[141]]],[[4,[12]]]],[-1,-2,[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[142,12],[142,142],[[-1,-2],12,[],[]],[[142,9],2],[[],142],[[142,142],2],[[142,[15,[9]]],143],[[142,16],17],[[143,16],17],[-1,-1,[]],[-1,-1,[]],[[142,-1],12,19],[142,[[15,[9]]]],[[142,9],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],142],[143,[[15,[9]]]],[143,[[15,[9]]]],[[-1,-2,-3,-4,-5,-6],[[4,[41]]],[[85,[[15,[41]]]]],[[85,[[15,[142]]]]],[[85,[[15,[142]]]]],[[85,[[15,[142]]]]],[[85,[[15,[77]]]]],[[85,[[15,[78]]]]]],[[142,9],12],[[-1,-2,-3,-4,-5],[[4,[41]]],[[85,[[15,[41]]]]],[[85,[[15,[142]]]]],[[85,[[15,[142]]]]],[[85,[[15,[142]]]]],[[85,[[15,[144]]]]]],[143,[[12,[3,[15,[3]]]]]],[-1,-2,[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[[9,9,[15,[51]],3],[[4,[3]]]],[[9,9,[15,[145]],3],[[4,[3]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[78,126],12],[[],146],[[],78],[126,30],[78,147],[126,30],[[146,146],146],[[146,146],12],[[146,146],146],[[146,146],12],[146,41],[[146,146],146],[[146,146],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[78,12],[126,126],[148,148],[146,146],[149,149],[78,78],[150,150],[151,151],[102,102],[104,104],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[126,126],46],[[146,146],46],[[149,149],46],[146,146],[[146,146],2],[[78,126],2],[[146,146],146],[[],146],[[],78],[[126,126],2],[[148,148],2],[[146,146],2],[[149,149],2],[[78,78],2],[[150,150],2],[[151,151],2],[[102,102],2],[[104,104],2],[[146,-1],12,[[50,[],[[49,[146]]]]]],[[78,78],12],[151,146],[[126,16],17],[[126,16],17],[[148,16],17],[[146,16],17],[[146,16],17],[[146,16],17],[[146,16],17],[[146,16],17],[[149,16],17],[[78,16],17],[[150,16],17],[[151,16],17],[[102,16],17],[[104,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[152,104],[-1,-1,[]],[41,[[15,[146]]]],[41,146],[41,146],[-1,146,[[50,[],[[49,[146]]]]]],[30,[[4,[126]]]],[151,150],[[126,-1],12,19],[[148,-1],12,19],[[146,-1],12,19],[[149,-1],12,19],[[78,-1],12,19],[[150,-1],12,19],[[151,-1],12,19],[[102,-1],12,19],[[104,-1],12,19],[[146,146],12],[[146,146],146],[[146,146],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[146,2],[146,2],[[],148],[[87,-1],[[4,[12]]],[[85,[[15,[126]]]]]],[[87,-1],[[4,[12]]],[[85,[[15,[126]]]]]],[151,78],[[150,146,78],151],[102,104],[148,[[15,[126]]]],[146,146],[[126,126],[[15,[46]]]],[[146,146],[[15,[46]]]],[[149,149],[[15,[46]]]],[[149,[15,[78]],[15,[78]]],[[4,[12]]]],[126,[[4,[12]]]],[[146,146],12],[[78,126],12],[[146,146,2],12],[[126,151],[[4,[151]]]],[104,152],[[126,150],[[4,[150]]]],[[149,[15,[78]],[15,[78]]],[[4,[12]]]],[[146,146],146],[[146,146],12],[[146,146],146],[78,[[4,[12]]]],[[],[[4,[78]]]],[78,[[4,[12]]]],[[78,149],[[4,[78]]]],[78,[[4,[12]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,27,[]],[[146,146],12],[-1,[[24,[-2]]],[],[]],[31,[[4,[126]]]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],0,[[146,146],146],[78,[[4,[126]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[],153],[154,9],[[153,153],153],[[153,153],12],[[153,153],153],[[153,153],12],[153,41],[[153,153],153],[[153,153],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[155,155],[153,153],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[153,153],46],[153,153],[[153,153],2],[[153,153],153],[154,12],[[],153],[[155,155],2],[[153,153],2],[[154,154],2],[[153,-1],12,[[50,[],[[49,[153]]]]]],[[155,16],[[24,[12,84]]]],[[153,16],17],[[153,16],17],[[153,16],17],[[153,16],17],[[153,16],17],[[154,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[41,[[15,[153]]]],[41,153],[41,153],[-1,153,[[50,[],[[49,[153]]]]]],[[155,-1],12,19],[[153,-1],12,19],[[154,-1],12,19],[[153,153],12],[[153,153],153],[[153,153],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[153,2],[153,2],[78,[[4,[154]]]],[154,[[15,[-1]]],[]],[153,153],[[153,153],[[15,[46]]]],[154,[[4,[[15,[155]]]]]],[[153,153],12],[[153,153,2],12],[[154,78],[[4,[12]]]],0,0,[[9,78,153],[[4,[9]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[153,153],153],[[153,153],12],[[153,153],153],[-1,-2,[],[]],[-1,-2,[],[]],[[153,153],12],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[[153,153],153],[[78,153],[[4,[154]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,[[4,[9]]]],[[9,156],[[4,[9]]]],[157,[[158,[53]]]],0,0,[159,5],[159,5],[[],156],[[],160],[[],161],[162,[[15,[[54,[53]]]]]],[163,[[12,[164,165]]]],[162,166],[162,166],[[9,163],[[4,[12]]]],[[156,156],156],[[160,160],160],[[156,156],12],[[160,160],12],[[156,156],156],[[160,160],160],[[156,156],12],[[160,160],12],[156,41],[160,41],[[156,156],156],[[160,160],160],[[156,156],12],[[160,160],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[167,42],[164,164],[168,168],[169,169],[166,166],[170,170],[171,171],[172,172],[173,173],[161,161],[174,174],[162,162],[163,163],[175,175],[159,159],[157,157],[167,167],[176,176],[177,177],[178,178],[179,179],[156,156],[160,160],[180,180],[181,181],[182,182],[183,183],[184,184],[185,185],[186,186],[187,187],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[156,156],46],[[160,160],46],0,0,0,0,0,[183,184],0,[156,156],[160,160],[[9,163],[[4,[12]]]],[[156,156],2],[[160,160],2],[[],180],[[156,156],156],[[160,160],160],[[],156],[[],160],[[164,164],2],[[168,168],2],[[169,169],2],[[166,166],2],[[170,170],2],[[171,171],2],[[172,172],2],[[173,173],2],[[161,161],2],[[174,174],2],[[162,162],2],[[163,163],2],[[175,175],2],[[159,159],2],[[157,157],2],[[167,167],2],[[176,176],2],[[177,177],2],[[178,178],2],[[179,179],2],[[156,156],2],[[160,160],2],[[180,180],2],[[181,181],2],[[182,182],2],[[183,183],2],[[184,184],2],[[185,185],2],[[186,186],2],[[187,187],2],[[156,-1],12,[[50,[],[[49,[156]]]]]],[[160,-1],12,[[50,[],[[49,[160]]]]]],[163,171],[157,171],0,[[164,16],[[24,[12,84]]]],[[168,16],[[24,[12,84]]]],[[169,16],[[24,[12,84]]]],[[166,16],[[24,[12,84]]]],[[170,16],[[24,[12,84]]]],[[171,16],17],[[172,16],17],[[172,16],17],[[173,16],17],[[173,16],17],[[161,16],17],[[161,16],17],[[174,16],17],[[174,16],17],[[162,16],17],[[162,16],17],[[163,16],17],[[163,16],17],[[175,16],17],[[175,16],17],[[159,16],17],[[159,16],17],[[157,16],17],[[157,16],17],[[167,16],17],[[167,16],17],[[176,16],[[24,[12,84]]]],[[177,16],[[24,[12,84]]]],[[178,16],17],[[179,16],17],[[156,16],17],[[156,16],17],[[156,16],17],[[156,16],17],[[156,16],17],[[160,16],17],[[160,16],17],[[160,16],17],[[160,16],17],[[160,16],17],[[180,16],17],[[181,16],17],[[182,16],17],[[183,16],17],[[184,16],17],[[185,16],17],[[186,16],17],[[[188,[-1,-2]],16],17,[[189,[[54,[[55,[[54,[53]]]]]]]],190],[[189,[[54,[186]]]],190]],[[[191,[-1]],16],17,[[189,[[54,[[55,[[54,[53]]]]]]]],190]],[[187,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[192,180],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[41,[[15,[156]]]],[41,[[15,[160]]]],[41,156],[41,160],[41,156],[41,160],[31,[[15,[171]]]],[-1,156,[[50,[],[[49,[156]]]]]],[-1,160,[[50,[],[[49,[160]]]]]],[193,172],[194,173],[195,161],[196,174],[[[198,[],[[197,[-1]]]],9],[[4,[-1]]],[]],[9,[[4,[163]]]],[9,[[4,[163]]]],[[9,-1],4,198],[180,199],[175,42],[157,3],[[164,-1],12,19],[[168,-1],12,19],[[169,-1],12,19],[[166,-1],12,19],[[170,-1],12,19],[[171,-1],12,19],[[172,-1],12,19],[[173,-1],12,19],[[161,-1],12,19],[[174,-1],12,19],[[162,-1],12,19],[[163,-1],12,19],[[175,-1],12,19],[[159,-1],12,19],[[157,-1],12,19],[[167,-1],12,19],[[176,-1],12,19],[[177,-1],12,19],[[179,-1],12,19],[[156,-1],12,19],[[160,-1],12,19],[[187,-1],12,19],[157,200],[157,3],[[156,156],12],[[160,160],12],[[156,156],156],[[160,160],160],[[156,156],2],[[160,160],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[172,173],[156,2],[160,2],[156,2],[160,2],[[9,3],[[4,[12]]]],0,0,0,0,0,0,0,0,[[173,200],172],[[53,53,53,53],161],[[200,200,200,200,200,200,200,200],174],[-1,[[4,[162]]],[23,1]],[[42,42],175],[[30,30],159],[[42,42],167],[[],180],[[161,[15,[161]]],181],[174,182],[[[54,[53]]],[[4,[162]]]],[[30,30],163],[172,163],[[42,42],163],[-1,[[4,[163]]],[23,1]],[[53,53,53,53],173],[[200,200,200,200,200,200,200,200],173],[[42,42],163],[184,[[15,[185]]]],[156,156],[160,160],[161,[[158,[53]]]],[[156,156],[[15,[46]]]],[[160,160],[[15,[46]]]],[162,[[15,[201]]]],[162,3],[175,42],[180,88],[157,53],[172,200],[167,42],[157,200],[[9,[54,[53]],160],[[4,[3]]]],[[9,[54,[53]]],[[4,[[12,[3,[15,[163]]]]]]]],[[9,-3,160,[15,[77]]],[[4,[[115,[183]]]]],[[189,[[54,[[55,[[54,[53]]]]]]]]],[202,[203,[],[[49,[[191,[-1]]]]]]],[[50,[],[[49,[[191,[-1]]]],[204,[-2]]]]]],[[9,[54,[[55,[[54,[53]]]]]],[15,[[115,[53]]]],160],[[4,[183]]]],[[156,156],12],[[160,160],12],0,0,0,[174,[[158,[200]]]],[[9,[54,[53]],160],[[4,[3]]]],[[9,-3,160],[[4,[[115,[3]]]]],[[189,[[54,[[55,[[54,[53]]]]]]]]],[[189,[[54,[186]]]]],[[50,[],[[49,[[188,[-1,-2]]]]]]]],[[9,[54,[[55,[[54,[53]]]]]],[54,[186]],160,[15,[163]]],[[4,[3]]]],[[9,[54,[53]],163,160],[[4,[3]]]],[[[205,[],[[197,[-1]]]],9,-1],[[4,[12]]],[]],[[156,156,2],12],[[160,160,2],12],[[9,-1],[[4,[12]]],205],[[9,187],[[4,[12]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[170,3],[[4,[163]]]],0,[[171,178,156,-1],[[4,[9]]],[[85,[[15,[179]]]]]],[[171,178,-1,156],[[4,[[12,[9,9]]]]],[[85,[[15,[179]]]]]],0,0,[[156,156],156],[[160,160],160],[[156,156],12],[[160,160],12],0,0,[[156,156],156],[[160,160],160],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[172,193],[173,194],[161,195],[174,196],[172,27],[163,27],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[[156,156],12],[[160,160],12],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[31,[[4,[178]]]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[180,206],[[156,156],156],[[160,160],160],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[207,207],[208,208],[209,209],[210,210],[211,211],[212,212],[213,213],[214,214],[215,215],[216,216],[217,217],[218,218],[219,219],[220,220],[221,221],[222,222],[223,223],[224,224],[225,225],[226,226],[227,227],[228,228],[229,229],[230,230],[231,231],[232,232],[233,233],[234,234],[235,235],[236,236],[237,237],[238,238],[239,239],[240,240],[241,241],[242,242],[243,243],[244,244],[245,245],[246,246],[247,247],[248,248],[249,249],[250,250],[251,251],[252,252],[253,253],[254,254],[255,255],[256,256],[[[257,[-1]]],[[257,[-1]]],258],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[],[[257,[-1]]],[]],[[207,207],2],[[208,208],2],[[209,209],2],[[210,210],2],[[211,211],2],[[212,212],2],[[213,213],2],[[214,214],2],[[215,215],2],[[216,216],2],[[217,217],2],[[218,218],2],[[219,219],2],[[220,220],2],[[221,221],2],[[222,222],2],[[223,223],2],[[224,224],2],[[225,225],2],[[226,226],2],[[227,227],2],[[228,228],2],[[229,229],2],[[230,230],2],[[231,231],2],[[232,232],2],[[233,233],2],[[234,234],2],[[235,235],2],[[236,236],2],[[237,237],2],[[238,238],2],[[239,239],2],[[240,240],2],[[241,241],2],[[242,242],2],[[243,243],2],[[244,244],2],[[245,245],2],[[246,246],2],[[247,247],2],[[248,248],2],[[249,249],2],[[250,250],2],[[251,251],2],[[252,252],2],[[253,253],2],[[254,254],2],[[255,255],2],[[207,16],17],[[208,16],17],[[209,16],17],[[210,16],17],[[211,16],17],[[212,16],17],[[213,16],17],[[214,16],17],[[215,16],17],[[216,16],17],[[217,16],17],[[218,16],17],[[219,16],17],[[220,16],17],[[221,16],17],[[222,16],17],[[223,16],17],[[224,16],17],[[225,16],17],[[226,16],17],[[227,16],17],[[228,16],17],[[229,16],17],[[230,16],17],[[231,16],17],[[232,16],17],[[233,16],17],[[234,16],17],[[235,16],17],[[236,16],17],[[237,16],17],[[238,16],17],[[239,16],17],[[240,16],17],[[241,16],17],[[242,16],17],[[243,16],17],[[244,16],17],[[245,16],17],[[246,16],17],[[247,16],17],[[248,16],17],[[249,16],17],[[250,16],17],[[251,16],17],[[252,16],17],[[253,16],17],[[254,16],17],[[255,16],17],[[256,16],17],[[[257,[-1]],16],17,190],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[207,9],[[4,[2]]]],[[208,9],[[4,[2]]]],[[209,9],[[4,[2]]]],[[210,9],[[4,[259]]]],[[215,9],[[4,[53]]]],[[216,9],[[4,[2]]]],[[217,9],[[4,[2]]]],[[218,9],[[4,[144]]]],[[219,9],[[4,[144]]]],[[220,9],[[4,[2]]]],[[221,9],[[4,[2]]]],[[222,9],[[4,[31]]]],[[223,9],[[4,[2]]]],[[224,9],[[4,[180]]]],[[225,9],[[4,[42]]]],[[226,9],[[4,[42]]]],[[227,9],[[4,[42]]]],[[228,9],[[4,[42]]]],[[229,9],[[4,[42]]]],[[230,9],[[4,[42]]]],[[231,9],[[4,[3]]]],[[232,9],[[4,[3]]]],[[235,9],[[4,[178]]]],[[236,9],[[4,[2]]]],[[237,9],[[4,[52]]]],[[238,9],[[4,[168]]]],[[239,9],[[4,[169]]]],[[240,9],[[4,[2]]]],[[241,9],[[4,[2]]]],[[242,9],[[4,[2]]]],[[243,9],[[4,[42]]]],[[244,9],[[4,[2]]]],[[245,9],[[4,[52]]]],[[246,9],[[4,[2]]]],[[247,9],[[4,[2]]]],[[248,9],[[4,[41]]]],[[249,9],[[4,[2]]]],[[250,9],[[4,[41]]]],[[251,9],[[4,[2]]]],[[252,9],[[4,[2]]]],[[253,9],[[4,[2]]]],[[254,9],[[4,[41]]]],[[255,9],[[4,[41]]]],[[207,-1],12,19],[[208,-1],12,19],[[209,-1],12,19],[[210,-1],12,19],[[211,-1],12,19],[[212,-1],12,19],[[213,-1],12,19],[[214,-1],12,19],[[215,-1],12,19],[[216,-1],12,19],[[217,-1],12,19],[[218,-1],12,19],[[219,-1],12,19],[[220,-1],12,19],[[221,-1],12,19],[[222,-1],12,19],[[223,-1],12,19],[[224,-1],12,19],[[225,-1],12,19],[[226,-1],12,19],[[227,-1],12,19],[[228,-1],12,19],[[229,-1],12,19],[[230,-1],12,19],[[231,-1],12,19],[[232,-1],12,19],[[233,-1],12,19],[[234,-1],12,19],[[235,-1],12,19],[[236,-1],12,19],[[237,-1],12,19],[[238,-1],12,19],[[239,-1],12,19],[[240,-1],12,19],[[241,-1],12,19],[[242,-1],12,19],[[243,-1],12,19],[[244,-1],12,19],[[245,-1],12,19],[[246,-1],12,19],[[247,-1],12,19],[[248,-1],12,19],[[249,-1],12,19],[[250,-1],12,19],[[251,-1],12,19],[[252,-1],12,19],[[253,-1],12,19],[[254,-1],12,19],[[255,-1],12,19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[207,9,2],[[4,[12]]]],[[208,9,2],[[4,[12]]]],[[209,9,2],[[4,[12]]]],[[210,9,259],[[4,[12]]]],[[211,9,181],[[4,[12]]]],[[212,9,181],[[4,[12]]]],[[213,9,182],[[4,[12]]]],[[214,9,182],[[4,[12]]]],[[215,9,53],[[4,[12]]]],[[216,9,2],[[4,[12]]]],[[217,9,2],[[4,[12]]]],[[218,9,144],[[4,[12]]]],[[219,9,144],[[4,[12]]]],[[220,9,2],[[4,[12]]]],[[221,9,2],[[4,[12]]]],[[223,9,2],[[4,[12]]]],[[225,9,42],[[4,[12]]]],[[226,9,42],[[4,[12]]]],[[227,9,42],[[4,[12]]]],[[228,9,42],[[4,[12]]]],[[229,9,42],[[4,[12]]]],[[230,9,42],[[4,[12]]]],[[231,9,3],[[4,[12]]]],[[232,9,3],[[4,[12]]]],[[233,9,3],[[4,[12]]]],[[234,9,3],[[4,[12]]]],[[237,9,52],[[4,[12]]]],[[240,9,2],[[4,[12]]]],[[241,9,2],[[4,[12]]]],[[242,9,2],[[4,[12]]]],[[243,9,42],[[4,[12]]]],[[244,9,2],[[4,[12]]]],[[245,9,52],[[4,[12]]]],[[246,9,2],[[4,[12]]]],[[247,9,2],[[4,[12]]]],[[248,9,41],[[4,[12]]]],[[249,9,2],[[4,[12]]]],[[250,9,41],[[4,[12]]]],[[251,9,2],[[4,[12]]]],[[252,9,2],[[4,[12]]]],[[253,9,2],[[4,[12]]]],[[254,9,41],[[4,[12]]]],[[255,9,41],[[4,[12]]]],[[256,9,3],[[4,[12]]]],[[[257,[-1]],9,-1],[[4,[12]]],[[189,[[54,[53]]]],258]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],0,0,[[260,261],31],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],262],[[],22],[[262,262],262],[[22,22],22],[[262,262],12],[[22,22],12],[[262,262],262],[[22,22],22],[[262,262],12],[[22,22],12],[262,263],[22,263],[[262,262],262],[[22,22],22],[[262,262],12],[[22,22],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[261,261],[262,262],[22,22],[264,264],[265,265],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[262,262],46],[[22,22],46],[262,262],[22,22],[[262,262],2],[[22,22],2],0,[[262,262],262],[[22,22],22],[[],262],[[],22],[[261,261],2],[[262,262],2],[[22,22],2],[[262,-1],12,[[50,[],[[49,[262]]]]]],[[22,-1],12,[[50,[],[[49,[22]]]]]],[[9,22],[[4,[12]]]],[[[15,[9]],-1,22,264],[[4,[12]]],[23,1]],[[261,16],[[24,[12,84]]]],[[262,16],17],[[262,16],17],[[262,16],17],[[262,16],17],[[262,16],17],[[22,16],17],[[22,16],17],[[22,16],17],[[22,16],17],[[22,16],17],[[264,16],17],[[265,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[263,[[15,[262]]]],[263,[[15,[22]]]],[263,262],[263,22],[263,262],[263,22],[-1,262,[[50,[],[[49,[262]]]]]],[-1,22,[[50,[],[[49,[22]]]]]],[9,[[4,[261]]]],[[9,-1,35],[[4,[261]]],[23,1]],[[9,77,77],[[4,[12]]]],[[261,-1],12,19],[[262,-1],12,19],[[22,-1],12,19],[[262,262],12],[[22,22],12],[[262,262],262],[[22,22],22],[[262,262],2],[[22,22],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[262,2],[22,2],[262,2],[22,2],[-1,[[4,[261]]],[23,1]],[[-1,144,144],[[4,[12]]],[23,1]],[266,20],[[20,20],266],[266,20],[[9,-1,22],[[4,[12]]],[23,1]],[[-1,262,22,266],[[4,[12]]],[23,1]],[[9,-1,262,22,266],[[4,[12]]],[23,1]],0,[262,262],[22,22],[[262,262],[[15,[46]]]],[[22,22],[[15,[46]]]],[[262,262],12],[[22,22],12],[[262,262,2],12],[[22,22,2],12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[4,[261]]],[23,1]],[[262,262],262],[[22,22],22],[[262,262],12],[[22,22],12],[[262,262],262],[[22,22],22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[262,262],12],[[22,22],12],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[22,22],[[262,262],262],[[22,22],22],[[[15,[9]],-1,77,77,265],[[4,[12]]],[23,1]],[[-1,144,144],[[4,[12]]],[23,1]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[267,268],[267,63],[267,63],[267,63],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[267,267],[269,269],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[269,269],2],[267,63],[267,63],[267,270],[267,269],[[267,16],17],[[269,16],17],[-1,-1,[]],[-1,-1,[]],0,[-1,[[4,[267]]],60],[-1,-2,[],[]],[-1,-2,[],[]],[267,268],[267,268],[-1,[[4,[267]]],[23,1]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],271],[[271,271],271],[[271,271],12],[[271,271],271],[[271,271],12],[271,63],[[271,271],271],[[271,271],12],[272,63],[272,273],[272,273],[272,273],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[271,271],[272,272],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[271,271],46],[271,271],[[271,271],2],[[],271],[[271,271],271],[[],271],[[271,271],2],[[272,272],2],[[271,-1],12,[[50,[],[[49,[271]]]]]],[272,274],[272,274],[272,274],[272,63],[272,271],[[271,16],17],[[271,16],17],[[271,16],17],[[271,16],17],[[271,16],17],[[272,16],17],[272,63],[-1,-1,[]],[-1,-1,[]],[63,[[15,[271]]]],[63,271],[63,271],[-1,271,[[50,[],[[49,[271]]]]]],[-1,[[4,[272]]],60],[[271,-1],12,19],[[272,-1],12,19],[[271,271],12],[[271,271],271],[[271,271],2],[-1,-2,[],[]],[-1,-2,[],[]],[271,2],[271,2],[272,63],[271,271],[[271,271],[[15,[46]]]],[[271,271],12],[[271,271,2],12],[-1,[[4,[272]]],[23,1]],[[271,271],271],[[271,271],12],[[271,271],271],[-1,-2,[],[]],[-1,-2,[],[]],[[271,271],12],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[[271,271],271],0,[-1,-2,[],[]],[-1,-2,[],[]],[275,275],[[-1,-2],12,[],[]],[[275,275],2],[[275,16],17],[-1,-1,[]],[[275,-1],12,19],[-1,-2,[],[]],[275,[[12,[276,276,276]]]],[275,200],[275,20],[275,20],[275,20],[275,20],[[],[[4,[275]]]],[-1,-2,[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[275,277],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],278],[[],279],[[],280],[[],281],[[278,278],278],[[279,279],279],[[280,280],280],[[281,281],281],[[278,278],12],[[279,279],12],[[280,280],12],[[281,281],12],[[278,278],278],[[279,279],279],[[280,280],280],[[281,281],281],[[278,278],12],[[279,279],12],[[280,280],12],[[281,281],12],[278,282],[279,282],[280,282],[281,282],[[278,278],278],[[279,279],279],[[280,280],280],[[281,281],281],[[278,278],12],[[279,279],12],[[280,280],12],[[281,281],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[86,283],[86,283],[86,12],[[86,283],[[4,[12]]]],[[86,283],[[4,[12]]]],[[86,283],[[4,[12]]]],[86,86],[283,283],[284,284],[285,285],[286,286],[287,287],[278,278],[279,279],[280,280],[281,281],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[283,283],46],[[284,284],46],[[285,285],46],[[286,286],46],[[287,287],46],[[278,278],46],[[279,279],46],[[280,280],46],[[281,281],46],[278,278],[279,279],[280,280],[281,281],[[278,278],2],[[279,279],2],[[280,280],2],[[281,281],2],0,0,[[278,278],278],[[279,279],279],[[280,280],280],[[281,281],281],[[],278],[[],279],[[],280],[[],281],[[86,86],2],[[283,283],2],[[284,284],2],[[285,285],2],[[286,286],2],[[287,287],2],[[278,278],2],[[279,279],2],[[280,280],2],[[281,281],2],[[278,-1],12,[[50,[],[[49,[278]]]]]],[[279,-1],12,[[50,[],[[49,[279]]]]]],[[280,-1],12,[[50,[],[[49,[280]]]]]],[[281,-1],12,[[50,[],[[49,[281]]]]]],[[86,16],17],[[283,16],17],[[284,16],17],[[285,16],17],[[286,16],17],[[287,16],17],[[278,16],17],[[278,16],17],[[278,16],17],[[278,16],17],[[278,16],17],[[279,16],17],[[279,16],17],[[279,16],17],[[279,16],17],[[279,16],17],[[280,16],17],[[280,16],17],[[280,16],17],[[280,16],17],[[280,16],17],[[281,16],17],[[281,16],17],[[281,16],17],[[281,16],17],[[281,16],17],[288,86],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[282,[[15,[278]]]],[282,[[15,[279]]]],[282,[[15,[280]]]],[282,[[15,[281]]]],[282,278],[282,279],[282,280],[282,281],[282,278],[282,279],[282,280],[282,281],[-1,278,[[50,[],[[49,[278]]]]]],[-1,279,[[50,[],[[49,[279]]]]]],[-1,280,[[50,[],[[49,[280]]]]]],[-1,281,[[50,[],[[49,[281]]]]]],[[283,-1],12,19],[[284,-1],12,19],[[285,-1],12,19],[[286,-1],12,19],[[287,-1],12,19],[[278,-1],12,19],[[279,-1],12,19],[[280,-1],12,19],[[281,-1],12,19],0,[[278,278],12],[[279,279],12],[[280,280],12],[[281,281],12],[[278,278],278],[[279,279],279],[[280,280],280],[[281,281],281],[[278,278],2],[[279,279],2],[[280,280],2],[[281,281],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[278,2],[279,2],[280,2],[281,2],[278,2],[279,2],[280,2],[281,2],0,[278,278],[279,279],[280,280],[281,281],0,[[283,283],[[15,[46]]]],[[284,284],[[15,[46]]]],[[285,285],[[15,[46]]]],[[286,286],[[15,[46]]]],[[287,287],[[15,[46]]]],[[278,278],[[15,[46]]]],[[279,279],[[15,[46]]]],[[280,280],[[15,[46]]]],[[281,281],[[15,[46]]]],[[278,278],12],[[279,279],12],[[280,280],12],[[281,281],12],[[278,278,2],12],[[279,279,2],12],[[280,280,2],12],[[281,281,2],12],[[278,278],278],[[279,279],279],[[280,280],280],[[281,281],281],[[278,278],12],[[279,279],12],[[280,280],12],[[281,281],12],[[278,278],278],[[279,279],279],[[280,280],280],[[281,281],281],[9,[[4,[12]]]],[[9,286],[[4,[12]]]],[[9,285],[[4,[12]]]],[9,[[4,[86]]]],[9,[[4,[87]]]],[[9,41],[[4,[12]]]],[[9,284,86],[[4,[12]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[278,278],12],[[279,279],12],[[280,280],12],[[281,281],12],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[289,[[4,[283]]]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[[278,278],278],[[279,279],279],[[280,280],280],[[281,281],281],0,0,0,[[77,77],77],[[144,144],144],[77,290],[144,291],[77,290],[144,291],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[77,77],[144,144],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[77,77],46],[[144,144],46],[[77,31],77],[[144,31],144],[[77,77],2],[[144,144],2],[[77,16],17],[[77,16],17],[[144,16],17],[[144,16],17],[290,77],[-1,-1,[]],[277,77],[291,144],[-1,-1,[]],[277,77],[290,77],[[77,-1],12,19],[[144,-1],12,19],[292,293],[-1,-2,[],[]],[-1,-2,[],[]],[292,293],[292,77],[292,144],[292,293],[292,77],[292,144],[292,293],[[77,31],77],[[144,31],144],[292,293],[292,77],[292,144],[77,77],[144,144],[293,292],[293,292],[77,292],[144,292],[293,292],[77,292],[144,292],[293,292],[293,292],[77,292],[144,292],[293,292],[77,292],[144,292],[[77,77],[[15,[46]]]],[[144,144],[[15,[46]]]],[292,293],[292,77],[292,144],[[77,77],77],[[144,144],144],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,27,[]],[-1,27,[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[77,130],[77,294],[144,294],[144,295],[-1,25,[]],[-1,25,[]],[[],293],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],296],[[],297],[298,9],[[296,296],296],[[297,297],297],[[296,296],12],[[297,297],12],[[296,296],296],[[297,297],297],[[296,296],12],[[297,297],12],[296,41],[297,41],[[296,296],296],[[297,297],297],[[296,296],12],[[297,297],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[299,299],[296,296],[297,297],[300,300],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[299,299],46],[[296,296],46],[[297,297],46],[296,296],[297,297],[[296,296],2],[[297,297],2],[[296,296],296],[[297,297],297],[298,12],[[],296],[[],297],[[299,299],2],[[296,296],2],[[297,297],2],[[300,300],2],[[296,-1],12,[[50,[],[[49,[296]]]]]],[[297,-1],12,[[50,[],[[49,[297]]]]]],[[298,16],17],[[299,16],17],[[296,16],17],[[296,16],17],[[296,16],17],[[296,16],17],[[296,16],17],[[297,16],17],[[297,16],17],[[297,16],17],[[297,16],17],[[297,16],17],[[300,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[41,[[15,[296]]]],[41,[[15,[297]]]],[41,296],[41,297],[41,296],[41,297],[-1,296,[[50,[],[[49,[296]]]]]],[-1,297,[[50,[],[[49,[297]]]]]],[9,298],[298,[[4,[[15,[300]]]]]],[[299,-1],12,19],[[296,-1],12,19],[[297,-1],12,19],[[296,296],12],[[297,297],12],[[296,296],296],[[297,297],297],[[296,296],2],[[297,297],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[296,2],[297,2],[296,2],[297,2],[[299,296],[[4,[298]]]],[296,296],[297,297],[[299,299],[[15,[46]]]],[[296,296],[[15,[46]]]],[[297,297],[[15,[46]]]],[[296,296],12],[[297,297],12],[[298,300,297],[[4,[12]]]],[[296,296,2],12],[[297,297,2],12],[[296,296],296],[[297,297],297],[[296,296],12],[[297,297],12],[[296,296],296],[[297,297],297],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[296,296],12],[[297,297],12],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[[296,296],296],[[297,297],297],[298,[[4,[12]]]],[298,[[4,[12]]]],0,0,[[[55,[-1]]],[[54,[53]]],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[301,301],[[[55,[-1]]],[[55,[-1]]],258],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[301,301],2],[[[55,[-1]],[55,[-1]]],2,33],[[301,16],17],[[[55,[-1]],16],17,190],[-1,-1,[]],[-1,-1,[]],[[[54,[53]]],[[55,[[54,[53]]]]]],[[[54,[53]]],[[55,[[54,[53]]]]]],[[301,-1],12,19],[[[55,[-1]],-2],12,302,19],[-1,-2,[],[]],[-1,-2,[],[]],0,[[9,[54,[53]],51],[[4,[3]]]],[[9,[54,[[55,[[54,[53]]]]]],51],[[4,[3]]]],[[87,[54,[[55,[[54,[53]]]]]],[54,[301]]],[[4,[3]]]],[[87,[54,[[55,[[54,[53]]]]]],[54,[301]]],[[4,[3]]]],[[9,[54,[53]],51],[[4,[3]]]],[[9,[54,[[55,[[54,[53]]]]]],51],[[4,[3]]]],[[9,[54,[[55,[[54,[53]]]]]]],[[4,[3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[[9,[54,[[55,[[54,[53]]]]]]],[[4,[3]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[303,303],[[-1,-2],12,[],[]],[[303,303],2],[[303,16],17],[-1,-1,[]],[[303,-1],12,19],[-1,-2,[],[]],[303,30],[303,30],[303,30],[303,30],[-1,-2,[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[[],303],[303,30],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],304],[[304,304],304],[[304,304],12],[[304,304],304],[[304,304],12],[304,41],[[304,304],304],[[304,304],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[304,304],[305,305],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[304,304],46],[304,304],[[304,304],2],[[304,304],304],[[],304],[[304,304],2],[[305,305],2],[[304,-1],12,[[50,[],[[49,[304]]]]]],[[304,16],17],[[304,16],17],[[304,16],17],[[304,16],17],[[304,16],17],[[305,16],17],[-1,-1,[]],[-1,-1,[]],[41,[[15,[304]]]],[41,304],[41,304],[-1,304,[[50,[],[[49,[304]]]]]],[[87,31],[[4,[305]]]],[[304,-1],12,19],[[305,-1],12,19],[[304,304],12],[[304,304],304],[[304,304],2],[-1,-2,[],[]],[-1,-2,[],[]],[304,2],[304,2],[304,304],[[304,304],[[15,[46]]]],[305,[[15,[87]]]],[[304,304],12],[[304,304,2],12],[[304,304],304],[[304,304],12],[[304,304],304],[-1,-2,[],[]],[-1,-2,[],[]],[[304,304],12],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[[304,304],304],[[],[[4,[305]]]],[[-1,[15,[304]]],[[4,[305]]],[[85,[[15,[87]]]]]],0,0,0,0,0,0,0,0,0,0,0,[306,307],[-1,-2,[],[]],[-1,-2,[],[]],[87,[[4,[306]]]],[306,[[4,[77]]]],[306,[[4,[77]]]],[[306,77],[[4,[12]]]],[306,306],[[-1,-2],12,[],[]],[[306,306],46],[[306,306],2],[[306,16],17],[[306,16],17],[307,306],[-1,-1,[]],[307,306],[[306,-1],12,19],[-1,-2,[],[]],[306,[[4,[77]]]],[[306,306],[[15,[46]]]],[87,[[4,[306]]]],[306,[[4,[77]]]],[[306,77],[[4,[12]]]],[-1,-2,[],[]],[-1,27,[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[308,308],[[-1,-2],12,[],[]],[[308,308],2],[[308,16],17],[-1,-1,[]],[[],[[4,[308]]]],[[308,-1],12,19],[-1,-2,[],[]],[308,[[4,[12]]]],[308,78],[308,78],[-1,-2,[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,309],[[4,[12]]],[23,1]],0,0,[[],309],[310,206],[311,199],[87,88],[[309,309],309],[[309,309],12],[[309,309],309],[[309,309],12],[309,41],[[309,309],309],[[309,309],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[4,[12]]],[23,1]],[[-1,[15,[310]],[15,[311]]],[[4,[12]]],[23,1]],[-1,[[4,[12]]],[23,1]],[310,310],[311,311],[87,87],[312,312],[313,313],[314,314],[315,315],[316,316],[317,317],[318,318],[319,319],[320,320],[309,309],[321,321],[322,322],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[9,[[4,[12]]]],[[87,87],46],[[309,309],46],[309,309],[[309,309],2],[[],310],[[],311],[[2,2],[[4,[12]]]],[[309,309],309],0,[9,[[4,[9]]]],[[9,9],[[4,[9]]]],[[9,9,21],[[4,[9]]]],[[],310],[[],311],0,0,[[],309],[[310,310],2],[[311,311],2],[[87,87],2],[[317,317],2],[[318,318],2],[[319,319],2],[[320,320],2],[[309,309],2],[[321,321],2],[[322,322],2],[[5,[54,[-1]]],[[4,[139]]],[[189,[5]]]],[[5,[54,[-1]],[54,[-2]]],[[4,[139]]],[[189,[5]]],[[189,[5]]]],[[9,5,[54,[-1]],[54,[-2]],35],[[4,[139]]],[[189,[5]]],[[189,[5]]]],[[5,[54,[-1]]],[[4,[139]]],[[189,[5]]]],[[5,[54,[-1]],[54,[-2]]],[[4,[139]]],[[189,[5]]],[[189,[5]]]],[[309,-1],12,[[50,[],[[49,[309]]]]]],[9,[[4,[12]]]],[[9,[15,[310]],[15,[311]]],[[4,[12]]]],[[[15,[9]],-1,[15,[310]],[15,[311]],313],[[4,[12]]],[23,1]],[9,[[4,[12]]]],[[9,[54,[-1]],[54,[-2]]],[[4,[139]]],[[189,[5]]],[[189,[5]]]],[[310,16],17],[[310,16],17],[[311,16],17],[[311,16],17],[[87,16],17],[[87,16],17],[[312,16],17],[[313,16],17],[[314,16],17],[[315,16],17],[[316,16],17],[[317,16],17],[[318,16],17],[[319,16],17],[[320,16],17],[[309,16],17],[[309,16],17],[[309,16],17],[[309,16],17],[[309,16],17],[[321,16],17],[[322,16],17],[[],[[4,[312]]]],[[9,317],[[4,[[15,[130]]]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[323,321],[-1,-1,[]],[324,322],[41,[[15,[309]]]],[41,309],[41,309],[311,[[4,[[15,[322]]]]]],[-1,309,[[50,[],[[49,[309]]]]]],[30,[[4,[[15,[321]]]]]],[30,[[4,[[15,[322]]]]]],[206,310],[199,311],[88,87],[310,[[4,[[15,[321]]]]]],[9,[[4,[12]]]],[[9,51],[[4,[12]]]],0,[[],[[4,[325]]]],[[],311],[[],310],[[],311],[[5,311],[[4,[[115,[311]]]]]],[[],[[4,[[115,[311]]]]]],[[[54,[53]]],[[4,[5]]]],[[[15,[87]]],[[4,[87]]]],[[],87],[[],87],[[],87],[[],[[4,[320]]]],[[],[[4,[319]]]],[[[15,[87]]],[[4,[87]]]],[[],87],[[],310],0,0,[[310,-1],12,19],[[311,-1],12,19],[[87,-1],12,19],[[317,-1],12,19],[[318,-1],12,19],[[309,-1],12,19],[[5,311],[[4,[12]]]],[[309,309],12],[[309,309],309],[[309,309],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[309,2],[312,2],[309,2],[312,2],[310,2],[9,[[4,[2]]]],[[[15,[9]],-1,[15,[9]],-1,315],[[4,[12]]],[23,1]],[[9,51,314],[[4,[51]]]],[[9,145,314],[[4,[145]]]],0,[[-1,22],[[4,[12]]],[23,1]],[[-1,22],[[4,[12]]],[23,1]],[[[15,[9]],-1,22],[[4,[12]]],[23,1]],[-1,[[4,[[12,[9,325]]]]],[23,1]],0,0,[309,309],[[],87],[[87,87],[[15,[46]]]],[[309,309],[[15,[46]]]],0,0,[[-1,317],[[4,[[15,[130]]]]],[23,1]],[[],12],[[],[[24,[[12,[9,9]],29]]]],[21,[[4,[[12,[9,9]]]]]],[[-1,-2],[[4,[12]]],[23,1],[23,1]],[[9,[54,[53]]],[[4,[3]]]],0,0,[[309,309],12],0,0,[[309,309,2],12],[311,[[4,[12]]]],[310,[[4,[12]]]],[311,311],[310,310],[311,[[4,[12]]]],[[[54,[311]]],[[4,[12]]]],[-1,[[4,[12]]],[[189,[326]]]],[[87,87],[[4,[12]]]],[[311,311,311],[[4,[12]]]],[[310,310,310],[[4,[12]]]],[[],[[4,[87]]]],[310,[[4,[12]]]],0,[43,43],[[309,309],309],[[309,309],12],[[-1,[15,[9]],-2],[[4,[12]]],[23,1],[23,1]],[[309,309],309],[[],12],[318,[[4,[[15,[130]]]]]],[41,[[4,[87]]]],[[41,87],[[4,[12]]]],[[],87],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[[309,309],12],[[-1,51],[[4,[12]]],[23,1]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[9,[[4,[325]]]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],0,[[309,309],309],[-1,[[4,[12]]],[23,1]],[[[15,[9]],-1,316],[[4,[12]]],[23,1]],[[9,[54,[53]]],[[4,[3]]]],0,[[],[[4,[12]]]],[-1,[[4,[12]]],[23,1]],[[],[[15,[43]]]],[43,[[15,[43]]]]],"c":[300,373,408,414,416,428,432,1600,3337,4082,4083],"p":[[10,"NixPath",0],[1,"bool"],[1,"usize"],[8,"Result",0],[5,"CStr",6794],[17,"Output"],[10,"FnOnce",6795],[5,"Dir",176],[8,"RawFd",6796],[5,"Entry",176],[6,"Type",176],[1,"tuple"],[5,"Iter",176],[5,"OwningIter",176],[6,"Option",6797],[5,"Formatter",6798],[8,"Result",6798],[10,"IntoRawFd",6796],[10,"Hasher",6799],[1,"u64"],[5,"OFlag",442],[5,"Mode",4995],[10,"Sized",6800],[6,"Result",6801],[5,"TypeId",6802],[5,"ClearEnvError",260],[5,"String",6803],[6,"Errno",275],[8,"Error",0],[1,"str"],[1,"i32"],[10,"ErrnoSentinel",275],[10,"PartialEq",6804],[5,"Error",6805],[5,"AtFlags",442],[5,"RenameFlags",442],[5,"SealFlag",442],[5,"FdFlag",442],[5,"SpliceFFlags",442],[5,"FallocateFlags",442],[8,"c_int",6806],[1,"u32"],[8,"c_uint",6806],[6,"FlockArg",442],[6,"PosixFadviseAdvice",442],[6,"Ordering",6804],[8,"loff_t",6807],[6,"FcntlArg",442],[17,"Item"],[10,"IntoIterator",6808],[8,"off_t",6809],[5,"OsString",6810],[1,"u8"],[1,"slice"],[5,"IoVec",6072],[5,"InterfaceAddress",924],[5,"InterfaceAddressIterator",924],[5,"ModuleInitFlags",959],[5,"DeleteModuleFlags",959],[10,"AsRawFd",6796],[5,"MsFlags",1066],[5,"MntFlags",1066],[8,"c_ulong",6811],[5,"MQ_OFlag",1201],[5,"FdFlag",1201],[5,"MqAttr",1201],[8,"mq_attr_member_t",1201],[8,"mqd_t",6807],[5,"CString",6812],[5,"InterfaceFlags",1336],[5,"Interfaces",1336],[5,"Interface",1336],[5,"InterfacesIter",1336],[5,"PollFlags",1445],[5,"PollFd",1445],[8,"c_short",6806],[5,"TimeSpec",5824],[5,"SigSet",3074],[5,"PtyMaster",1526],[5,"Winsize",1526],[5,"OpenptyResult",1526],[5,"ForkptyResult",1526],[8,"Result",6805],[5,"Error",6798],[10,"Into",6813],[5,"Termios",5375],[5,"Pid",6274],[8,"SessionId",1526],[5,"CloneFlags",1600],[8,"CloneCb",1600],[5,"CpuSet",1600],[6,"AioCancelStat",1724],[5,"AioCb",1724],[5,"Box",6814],[5,"Pin",6815],[1,"isize"],[5,"LioCb",1724],[6,"AioFsyncMode",1724],[6,"LioOpcode",1724],[6,"LioMode",1724],[5,"LioCbBuilder",1724],[6,"SigevNotify",3074],[6,"c_void",6816],[5,"SigEvent",3074],[5,"EpollFlags",1855],[5,"EpollCreateFlags",1855],[6,"EpollOp",1855],[5,"EpollEvent",1855],[5,"EfdFlags",2010],[5,"Inotify",2064],[5,"AddWatchFlags",2064],[5,"WatchDescriptor",2064],[5,"InitFlags",2064],[5,"InotifyEvent",2064],[5,"Vec",6817],[5,"MemFdCreateFlag",2239],[5,"ProtFlags",2292],[5,"MapFlags",2292],[5,"MRemapFlags",2292],[5,"MsFlags",2292],[5,"MlockAllFlags",2292],[6,"MmapAdvise",2292],[8,"size_t",6806],[5,"Persona",2628],[8,"Pthread",2691],[6,"Signal",3074],[5,"Options",2694],[6,"Request",2694],[6,"Event",2694],[8,"c_long",6811],[5,"user_regs_struct",6818],[5,"siginfo_t",6818],[8,"AddressType",2694],[5,"QuotaValidFlags",2844],[5,"Dqblk",2844],[6,"QuotaType",2844],[6,"QuotaFmt",2844],[6,"RebootMode",2976],[6,"Infallible",6813],[6,"Resource",2999],[8,"rlim_t",2999],[5,"FdSet",3034],[5,"Fds",3034],[5,"TimeVal",5824],[8,"off64_t",6807],[5,"SaFlags",3074],[5,"sigset_t",6809],[5,"SignalIterator",3074],[6,"SigmaskHow",3074],[6,"SigHandler",3074],[5,"SigAction",3074],[5,"sigevent",6819],[5,"SfdFlags",3334],[5,"SignalFd",3334],[5,"siginfo",3334],[5,"SockFlag",3444],[5,"LinkAddr",3444],[1,"array"],[5,"AlgAddr",3444],[5,"MsgFlags",3444],[5,"Ipv4Addr",3444],[5,"UnixAddr",3444],[6,"SockAddr",3444],[5,"sockaddr",3444],[8,"socklen_t",6807],[5,"sockaddr_un",3444],[5,"VsockAddr",3444],[5,"sockaddr_in",3444],[5,"sockaddr_in6",3444],[5,"sockaddr_storage",3444],[6,"AddressFamily",3444],[6,"InetAddr",3444],[6,"IpAddr",3444],[5,"Ipv6Addr",3444],[5,"NetlinkAddr",3444],[5,"msghdr",3444],[5,"cmsghdr",3444],[6,"SockType",3444],[6,"SockProtocol",3444],[5,"UnixCredentials",3444],[5,"IpMembershipRequest",3444],[5,"Ipv6MembershipRequest",3444],[5,"RecvMsg",3444],[5,"CmsgIterator",3444],[6,"ControlMessageOwned",3444],[6,"ControlMessage",3444],[6,"Shutdown",3444],[5,"SendMmsgData",3444],[10,"AsRef",6813],[10,"Debug",6798],[5,"RecvMmsgData",3444],[5,"ucred",6807],[6,"SocketAddr",6820],[6,"IpAddr",6821],[5,"Ipv4Addr",6821],[5,"Ipv6Addr",6821],[17,"Val"],[10,"GetSockOpt",3444],[8,"gid_t",6806],[1,"u16"],[5,"Path",6822],[10,"ExactSizeIterator",6823],[10,"Iterator",6824],[17,"IntoIter"],[10,"SetSockOpt",3444],[8,"uid_t",6806],[5,"ReuseAddr",4196],[5,"ReusePort",4196],[5,"TcpNoDelay",4196],[5,"Linger",4196],[5,"IpAddMembership",4196],[5,"IpDropMembership",4196],[5,"Ipv6AddMembership",4196],[5,"Ipv6DropMembership",4196],[5,"IpMulticastTtl",4196],[5,"IpMulticastLoop",4196],[5,"IpFreebind",4196],[5,"ReceiveTimeout",4196],[5,"SendTimeout",4196],[5,"Broadcast",4196],[5,"OobInline",4196],[5,"SocketError",4196],[5,"KeepAlive",4196],[5,"PeerCredentials",4196],[5,"TcpKeepIdle",4196],[5,"TcpMaxSeg",4196],[5,"TcpKeepCount",4196],[5,"TcpRepair",4196],[5,"TcpKeepInterval",4196],[5,"TcpUserTimeout",4196],[5,"RcvBuf",4196],[5,"SndBuf",4196],[5,"RcvBufForce",4196],[5,"SndBufForce",4196],[5,"SockType",4196],[5,"AcceptConn",4196],[5,"BindToDevice",4196],[5,"OriginalDst",4196],[5,"Ip6tOriginalDst",4196],[5,"ReceiveTimestamp",4196],[5,"ReceiveTimestampns",4196],[5,"IpTransparent",4196],[5,"Mark",4196],[5,"PassCred",4196],[5,"TcpCongestion",4196],[5,"Ipv4PacketInfo",4196],[5,"Ipv6RecvPacketInfo",4196],[5,"UdpGsoSegment",4196],[5,"UdpGroSegment",4196],[5,"RxqOvfl",4196],[5,"Ipv6V6Only",4196],[5,"Ipv4RecvErr",4196],[5,"Ipv6RecvErr",4196],[5,"Ipv4Ttl",4196],[5,"Ipv6Ttl",4196],[5,"AlgSetAeadAuthSize",4196],[5,"AlgSetKey",4196],[10,"Clone",6825],[5,"linger",6806],[1,"i8"],[5,"FileStat",4995],[5,"SFlag",4995],[8,"mode_t",4995],[6,"FchmodatFlags",4995],[6,"UtimensatFlags",4995],[8,"dev_t",4995],[5,"Statfs",5196],[8,"__fsword_t",6809],[5,"FsType",5196],[8,"fsid_t",5196],[5,"FsFlags",5263],[5,"Statvfs",5263],[8,"fsblkcnt_t",6809],[8,"fsfilcnt_t",6809],[5,"SysInfo",5353],[1,"f64"],[5,"Duration",6826],[5,"InputFlags",5375],[5,"OutputFlags",5375],[5,"ControlFlags",5375],[5,"LocalFlags",5375],[8,"tcflag_t",6819],[6,"BaudRate",5375],[6,"SetArg",5375],[6,"FlushArg",5375],[6,"FlowArg",5375],[6,"SpecialCharacterIndices",5375],[5,"termios",6827],[8,"speed_t",6819],[5,"timespec",6806],[5,"timeval",6806],[1,"i64"],[10,"TimeValLike",5824],[8,"time_t",5824],[8,"suseconds_t",5824],[5,"TimerFlags",5915],[5,"TimerSetTimeFlags",5915],[5,"TimerFd",5915],[6,"ClockId",5915],[6,"Expiration",5915],[5,"RemoteIoVec",6072],[10,"Hash",6799],[5,"UtsName",6113],[5,"WaitPidFlag",6133],[6,"WaitStatus",6133],[5,"ClockId",6217],[8,"clockid_t",6819],[5,"UContext",6256],[5,"AccessFlags",6274],[5,"Uid",6274],[5,"Gid",6274],[6,"ForkResult",6274],[6,"FchownatFlags",6274],[6,"Whence",6274],[6,"LinkatFlags",6274],[6,"UnlinkatFlags",6274],[6,"PathconfVar",6274],[6,"SysconfVar",6274],[5,"ResUid",6274],[5,"ResGid",6274],[5,"User",6274],[5,"Group",6274],[5,"passwd",6807],[5,"group",6806],[5,"PathBuf",6822],[5,"OsStr",6810],[15,"SigevSignal",3329],[15,"SigevThreadId",3329],[15,"Parent",6789]],"b":[[266,"impl-Debug-for-ClearEnvError"],[267,"impl-Display-for-ClearEnvError"],[425,"impl-Display-for-Errno"],[426,"impl-Debug-for-Errno"],[678,"impl-Debug-for-AtFlags"],[679,"impl-LowerHex-for-AtFlags"],[680,"impl-Binary-for-AtFlags"],[681,"impl-Octal-for-AtFlags"],[682,"impl-UpperHex-for-AtFlags"],[683,"impl-Binary-for-OFlag"],[684,"impl-LowerHex-for-OFlag"],[685,"impl-Octal-for-OFlag"],[686,"impl-Debug-for-OFlag"],[687,"impl-UpperHex-for-OFlag"],[688,"impl-Octal-for-RenameFlags"],[689,"impl-Binary-for-RenameFlags"],[690,"impl-Debug-for-RenameFlags"],[691,"impl-UpperHex-for-RenameFlags"],[692,"impl-LowerHex-for-RenameFlags"],[693,"impl-LowerHex-for-SealFlag"],[694,"impl-UpperHex-for-SealFlag"],[695,"impl-Binary-for-SealFlag"],[696,"impl-Debug-for-SealFlag"],[697,"impl-Octal-for-SealFlag"],[698,"impl-UpperHex-for-FdFlag"],[699,"impl-Debug-for-FdFlag"],[700,"impl-LowerHex-for-FdFlag"],[701,"impl-Binary-for-FdFlag"],[702,"impl-Octal-for-FdFlag"],[705,"impl-Binary-for-SpliceFFlags"],[706,"impl-Octal-for-SpliceFFlags"],[707,"impl-Debug-for-SpliceFFlags"],[708,"impl-UpperHex-for-SpliceFFlags"],[709,"impl-LowerHex-for-SpliceFFlags"],[710,"impl-Binary-for-FallocateFlags"],[711,"impl-Debug-for-FallocateFlags"],[712,"impl-UpperHex-for-FallocateFlags"],[713,"impl-LowerHex-for-FallocateFlags"],[714,"impl-Octal-for-FallocateFlags"],[1005,"impl-Octal-for-ModuleInitFlags"],[1006,"impl-UpperHex-for-ModuleInitFlags"],[1007,"impl-Binary-for-ModuleInitFlags"],[1008,"impl-LowerHex-for-ModuleInitFlags"],[1009,"impl-Debug-for-ModuleInitFlags"],[1010,"impl-LowerHex-for-DeleteModuleFlags"],[1011,"impl-Octal-for-DeleteModuleFlags"],[1012,"impl-UpperHex-for-DeleteModuleFlags"],[1013,"impl-Debug-for-DeleteModuleFlags"],[1014,"impl-Binary-for-DeleteModuleFlags"],[1138,"impl-UpperHex-for-MsFlags"],[1139,"impl-Debug-for-MsFlags"],[1140,"impl-Binary-for-MsFlags"],[1141,"impl-Octal-for-MsFlags"],[1142,"impl-LowerHex-for-MsFlags"],[1143,"impl-LowerHex-for-MntFlags"],[1144,"impl-Octal-for-MntFlags"],[1145,"impl-Binary-for-MntFlags"],[1146,"impl-UpperHex-for-MntFlags"],[1147,"impl-Debug-for-MntFlags"],[1256,"impl-UpperHex-for-MQ_OFlag"],[1257,"impl-LowerHex-for-MQ_OFlag"],[1258,"impl-Binary-for-MQ_OFlag"],[1259,"impl-Octal-for-MQ_OFlag"],[1260,"impl-Debug-for-MQ_OFlag"],[1261,"impl-Octal-for-FdFlag"],[1262,"impl-LowerHex-for-FdFlag"],[1263,"impl-Binary-for-FdFlag"],[1264,"impl-UpperHex-for-FdFlag"],[1265,"impl-Debug-for-FdFlag"],[1390,"impl-Octal-for-InterfaceFlags"],[1391,"impl-UpperHex-for-InterfaceFlags"],[1392,"impl-Debug-for-InterfaceFlags"],[1393,"impl-LowerHex-for-InterfaceFlags"],[1394,"impl-Binary-for-InterfaceFlags"],[1484,"impl-Binary-for-PollFlags"],[1485,"impl-Octal-for-PollFlags"],[1486,"impl-Debug-for-PollFlags"],[1487,"impl-LowerHex-for-PollFlags"],[1488,"impl-UpperHex-for-PollFlags"],[1649,"impl-Binary-for-CloneFlags"],[1650,"impl-UpperHex-for-CloneFlags"],[1651,"impl-LowerHex-for-CloneFlags"],[1652,"impl-Octal-for-CloneFlags"],[1653,"impl-Debug-for-CloneFlags"],[1933,"impl-Debug-for-EpollFlags"],[1934,"impl-Binary-for-EpollFlags"],[1935,"impl-UpperHex-for-EpollFlags"],[1936,"impl-LowerHex-for-EpollFlags"],[1937,"impl-Octal-for-EpollFlags"],[1939,"impl-Debug-for-EpollCreateFlags"],[1940,"impl-Binary-for-EpollCreateFlags"],[1941,"impl-UpperHex-for-EpollCreateFlags"],[1942,"impl-Octal-for-EpollCreateFlags"],[1943,"impl-LowerHex-for-EpollCreateFlags"],[2034,"impl-Octal-for-EfdFlags"],[2035,"impl-Debug-for-EfdFlags"],[2036,"impl-UpperHex-for-EfdFlags"],[2037,"impl-LowerHex-for-EfdFlags"],[2038,"impl-Binary-for-EfdFlags"],[2146,"impl-Debug-for-AddWatchFlags"],[2147,"impl-UpperHex-for-AddWatchFlags"],[2148,"impl-Octal-for-AddWatchFlags"],[2149,"impl-LowerHex-for-AddWatchFlags"],[2150,"impl-Binary-for-AddWatchFlags"],[2151,"impl-Binary-for-InitFlags"],[2152,"impl-Debug-for-InitFlags"],[2153,"impl-LowerHex-for-InitFlags"],[2154,"impl-Octal-for-InitFlags"],[2155,"impl-UpperHex-for-InitFlags"],[2261,"impl-LowerHex-for-MemFdCreateFlag"],[2262,"impl-UpperHex-for-MemFdCreateFlag"],[2263,"impl-Debug-for-MemFdCreateFlag"],[2264,"impl-Binary-for-MemFdCreateFlag"],[2265,"impl-Octal-for-MemFdCreateFlag"],[2457,"impl-Debug-for-ProtFlags"],[2458,"impl-Binary-for-ProtFlags"],[2459,"impl-UpperHex-for-ProtFlags"],[2460,"impl-LowerHex-for-ProtFlags"],[2461,"impl-Octal-for-ProtFlags"],[2462,"impl-Octal-for-MapFlags"],[2463,"impl-LowerHex-for-MapFlags"],[2464,"impl-Binary-for-MapFlags"],[2465,"impl-UpperHex-for-MapFlags"],[2466,"impl-Debug-for-MapFlags"],[2467,"impl-LowerHex-for-MRemapFlags"],[2468,"impl-Octal-for-MRemapFlags"],[2469,"impl-Debug-for-MRemapFlags"],[2470,"impl-Binary-for-MRemapFlags"],[2471,"impl-UpperHex-for-MRemapFlags"],[2473,"impl-Octal-for-MsFlags"],[2474,"impl-Binary-for-MsFlags"],[2475,"impl-LowerHex-for-MsFlags"],[2476,"impl-Debug-for-MsFlags"],[2477,"impl-UpperHex-for-MsFlags"],[2478,"impl-LowerHex-for-MlockAllFlags"],[2479,"impl-UpperHex-for-MlockAllFlags"],[2480,"impl-Octal-for-MlockAllFlags"],[2481,"impl-Debug-for-MlockAllFlags"],[2482,"impl-Binary-for-MlockAllFlags"],[2659,"impl-Binary-for-Persona"],[2660,"impl-Debug-for-Persona"],[2661,"impl-LowerHex-for-Persona"],[2662,"impl-UpperHex-for-Persona"],[2663,"impl-Octal-for-Persona"],[2782,"impl-LowerHex-for-Options"],[2783,"impl-Debug-for-Options"],[2784,"impl-Octal-for-Options"],[2785,"impl-UpperHex-for-Options"],[2786,"impl-Binary-for-Options"],[2907,"impl-Debug-for-QuotaValidFlags"],[2908,"impl-Octal-for-QuotaValidFlags"],[2909,"impl-LowerHex-for-QuotaValidFlags"],[2910,"impl-Binary-for-QuotaValidFlags"],[2911,"impl-UpperHex-for-QuotaValidFlags"],[3205,"impl-Debug-for-Signal"],[3206,"impl-Display-for-Signal"],[3208,"impl-UpperHex-for-SaFlags"],[3209,"impl-Binary-for-SaFlags"],[3210,"impl-Debug-for-SaFlags"],[3211,"impl-Octal-for-SaFlags"],[3212,"impl-LowerHex-for-SaFlags"],[3371,"impl-Debug-for-SfdFlags"],[3372,"impl-Octal-for-SfdFlags"],[3373,"impl-UpperHex-for-SfdFlags"],[3374,"impl-LowerHex-for-SfdFlags"],[3375,"impl-Binary-for-SfdFlags"],[3794,"impl-Debug-for-InetAddr"],[3795,"impl-Display-for-InetAddr"],[3796,"impl-Debug-for-IpAddr"],[3797,"impl-Display-for-IpAddr"],[3798,"impl-Display-for-Ipv4Addr"],[3799,"impl-Debug-for-Ipv4Addr"],[3800,"impl-Display-for-Ipv6Addr"],[3801,"impl-Debug-for-Ipv6Addr"],[3802,"impl-Debug-for-UnixAddr"],[3803,"impl-Display-for-UnixAddr"],[3804,"impl-Debug-for-SockAddr"],[3805,"impl-Display-for-SockAddr"],[3806,"impl-Debug-for-NetlinkAddr"],[3807,"impl-Display-for-NetlinkAddr"],[3808,"impl-Display-for-AlgAddr"],[3809,"impl-Debug-for-AlgAddr"],[3810,"impl-Display-for-LinkAddr"],[3811,"impl-Debug-for-LinkAddr"],[3812,"impl-Debug-for-VsockAddr"],[3813,"impl-Display-for-VsockAddr"],[3818,"impl-UpperHex-for-SockFlag"],[3819,"impl-Debug-for-SockFlag"],[3820,"impl-LowerHex-for-SockFlag"],[3821,"impl-Octal-for-SockFlag"],[3822,"impl-Binary-for-SockFlag"],[3823,"impl-LowerHex-for-MsgFlags"],[3824,"impl-Octal-for-MsgFlags"],[3825,"impl-UpperHex-for-MsgFlags"],[3826,"impl-Binary-for-MsgFlags"],[3827,"impl-Debug-for-MsgFlags"],[5083,"impl-UpperHex-for-SFlag"],[5084,"impl-Debug-for-SFlag"],[5085,"impl-Binary-for-SFlag"],[5086,"impl-Octal-for-SFlag"],[5087,"impl-LowerHex-for-SFlag"],[5088,"impl-UpperHex-for-Mode"],[5089,"impl-Octal-for-Mode"],[5090,"impl-LowerHex-for-Mode"],[5091,"impl-Debug-for-Mode"],[5092,"impl-Binary-for-Mode"],[5311,"impl-LowerHex-for-FsFlags"],[5312,"impl-Binary-for-FsFlags"],[5313,"impl-UpperHex-for-FsFlags"],[5314,"impl-Octal-for-FsFlags"],[5315,"impl-Debug-for-FsFlags"],[5646,"impl-UpperHex-for-InputFlags"],[5647,"impl-Octal-for-InputFlags"],[5648,"impl-LowerHex-for-InputFlags"],[5649,"impl-Binary-for-InputFlags"],[5650,"impl-Debug-for-InputFlags"],[5651,"impl-LowerHex-for-OutputFlags"],[5652,"impl-Debug-for-OutputFlags"],[5653,"impl-UpperHex-for-OutputFlags"],[5654,"impl-Binary-for-OutputFlags"],[5655,"impl-Octal-for-OutputFlags"],[5656,"impl-Octal-for-ControlFlags"],[5657,"impl-UpperHex-for-ControlFlags"],[5658,"impl-Debug-for-ControlFlags"],[5659,"impl-LowerHex-for-ControlFlags"],[5660,"impl-Binary-for-ControlFlags"],[5661,"impl-Binary-for-LocalFlags"],[5662,"impl-Debug-for-LocalFlags"],[5663,"impl-Octal-for-LocalFlags"],[5664,"impl-UpperHex-for-LocalFlags"],[5665,"impl-LowerHex-for-LocalFlags"],[5847,"impl-Display-for-TimeSpec"],[5848,"impl-Debug-for-TimeSpec"],[5849,"impl-Display-for-TimeVal"],[5850,"impl-Debug-for-TimeVal"],[5851,"impl-From%3Ctimespec%3E-for-TimeSpec"],[5853,"impl-From%3CDuration%3E-for-TimeSpec"],[5986,"impl-LowerHex-for-TimerFlags"],[5987,"impl-Octal-for-TimerFlags"],[5988,"impl-Debug-for-TimerFlags"],[5989,"impl-Binary-for-TimerFlags"],[5990,"impl-UpperHex-for-TimerFlags"],[5991,"impl-Octal-for-TimerSetTimeFlags"],[5992,"impl-Debug-for-TimerSetTimeFlags"],[5993,"impl-LowerHex-for-TimerSetTimeFlags"],[5994,"impl-Binary-for-TimerSetTimeFlags"],[5995,"impl-UpperHex-for-TimerSetTimeFlags"],[6175,"impl-Debug-for-WaitPidFlag"],[6176,"impl-UpperHex-for-WaitPidFlag"],[6177,"impl-Binary-for-WaitPidFlag"],[6178,"impl-LowerHex-for-WaitPidFlag"],[6179,"impl-Octal-for-WaitPidFlag"],[6239,"impl-Debug-for-ClockId"],[6240,"impl-Display-for-ClockId"],[6563,"impl-Display-for-Uid"],[6564,"impl-Debug-for-Uid"],[6565,"impl-Debug-for-Gid"],[6566,"impl-Display-for-Gid"],[6567,"impl-Debug-for-Pid"],[6568,"impl-Display-for-Pid"],[6578,"impl-Octal-for-AccessFlags"],[6579,"impl-Debug-for-AccessFlags"],[6580,"impl-LowerHex-for-AccessFlags"],[6581,"impl-UpperHex-for-AccessFlags"],[6582,"impl-Binary-for-AccessFlags"]]}],\
["num_traits",{"doc":"Numeric traits for generic mathematics","t":"EEEEEEEEEEEEEPEEEGEEREPEEKKKKEKKEFEEKEEEEEEEEEEEEEEEEENNNNCCEEHHHCNNNNNMCCNNOECCECCENNNNNNNEKKKMMMMKKKKMHMNNNNNMNNNNNMNNNNNNNMNNNNNMNNMMMMMMMMMMKKKMMNMNMMMNKMNMMMMMMMMMMNMMNMMMNMMMMNMNMMMMMMNMNMNMNMNMNNNMMMMMMNMMMNMMMMMMMMMMMMMNMNMNMNMMMMMMMNMNMMNKKTKTKNMHMNNHMKMMMMNMMNMMMMMMMNMMMCCCCCCCCRRKKKMMNMMNKKKKKKKKMMMMMMMMKKMNMMNMKRMKKRMMKKKMMMKKKKMMMMMKKKKKKMMMMMMRKHHMKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKKHMHMMMHM","n":["AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","ConstOne","ConstZero","Empty","Euclid","Float","FloatConst","FloatErrorKind","FromBytes","FromPrimitive","FromStrRadixErr","Inv","Invalid","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","ParseFloatError","Pow","PrimInt","RefNum","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","ToBytes","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs_sub","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","checked_pow","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","one","ops","pow","pow","real","sign","signum","to_string","try_from","try_from","try_into","try_into","type_id","type_id","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","TotalOrder","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","copysign","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_subnormal","is_subnormal","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","total_cmp","trunc","trunc","ConstOne","ConstZero","ONE","One","ZERO","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","bytes","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","Bytes","Bytes","FromBytes","NumBytes","ToBytes","from_be_bytes","from_le_bytes","from_ne_bytes","to_be_bytes","to_le_bytes","to_ne_bytes","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_div_rem_euclid","checked_rem_euclid","div_euclid","div_rem_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":[[0,"num_traits"],[92,"num_traits::bounds"],[99,"num_traits::cast"],[134,"num_traits::float"],[247,"num_traits::identities"],[261,"num_traits::int"],[281,"num_traits::ops"],[289,"num_traits::ops::bytes"],[300,"num_traits::ops::checked"],[316,"num_traits::ops::euclid"],[324,"num_traits::ops::inv"],[327,"num_traits::ops::mul_add"],[332,"num_traits::ops::overflowing"],[338,"num_traits::ops::saturating"],[347,"num_traits::ops::wrapping"],[359,"num_traits::pow"],[364,"num_traits::real"],[412,"num_traits::sign"],[422,"core::cmp"],[423,"core::fmt"],[424,"core::fmt"],[425,"alloc::string"],[426,"core::any"],[427,"core::marker"],[428,"core::option"],[429,"core::num"],[430,"core::cmp"],[431,"core::ops::arith"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","","","","","The trait for <code>Num</code> references which implement numeric …","","","","","","","","","","","","","","","","","","","","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a string and radix (typically <code>2..=36</code>).","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Trait for floating point numbers that provide an …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns <code>true</code> if the number is subnormal.","Returns <code>true</code> if the number is subnormal.","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the ordering between <code>self</code> and <code>other</code>.","Return the integer part of a number.","Return the integer part of a number.","Defines an associated constant representing the …","Defines an associated constant representing the additive …","The multiplicative identity element of <code>Self</code>, <code>1</code>.","Defines a multiplicative identity element for <code>Self</code>.","The additive identity element of <code>Self</code>, <code>0</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","","","","","","","Create a number from its representation as a byte array in …","Create a number from its representation as a byte array in …","Create a number from its memory representation as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Returns both the quotient and remainder from checked …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Returns both the quotient and remainder from Euclidean …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation …","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation <code>(self * a) + b</code>","Performs the fused multiply-add assignment operation …","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,9,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,5,0,0,0,0,0,0,0,0,2,5,5,2,5,9,0,0,2,5,5,0,0,0,0,0,0,0,5,2,5,2,5,2,5,0,0,0,0,13,14,13,15,0,0,0,0,16,0,19,22,22,22,22,22,22,22,22,22,22,22,22,22,22,20,20,20,20,20,20,20,20,20,20,20,20,20,20,35,35,35,35,35,35,35,35,35,35,0,0,0,35,35,35,35,35,35,35,35,35,0,36,37,36,36,36,36,36,36,36,36,36,36,37,37,36,36,36,36,37,36,36,36,36,36,37,36,37,36,37,36,37,36,36,37,36,37,36,37,36,37,36,37,36,37,37,36,36,36,36,36,36,36,37,37,36,36,37,37,36,37,36,36,37,36,37,36,37,36,36,36,37,36,37,36,37,36,37,36,36,36,36,36,36,37,36,37,36,41,36,37,0,0,83,0,84,0,43,44,0,43,43,44,0,44,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,0,0,0,0,0,0,0,50,47,0,0,0,47,47,47,50,50,50,0,0,0,0,0,0,0,0,51,52,53,54,55,56,57,58,0,0,59,59,59,60,60,60,0,62,62,0,0,63,63,64,0,0,0,65,66,67,0,0,0,0,68,69,70,68,71,0,0,0,0,0,0,72,73,74,75,76,77,80,0,0,0,80,0,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,0,0,0,82,0,82,82,82,0,82],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[-1,-1,-1],-1,1],[[-1,-1],-1,1],[[-1,-1],-1,1],0,[[2,3],4],[[5,3],4],[[5,3],4],[-1,-1,[]],[-1,-1,[]],[[6,7],[[10,[[9,[],[[8,[-1]]]],-1]]],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,11,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],0,0,0,0,[[],13],[[],14],[[],13],[[],15],0,0,0,0,[16,-1,17],[-1,[[18,[-2]]],19,19],[-1,[[18,[19]]],20],[21,[[18,[22]]]],[23,[[18,[22]]]],[24,[[18,[22]]]],[25,[[18,[22]]]],[26,[[18,[22]]]],[27,[[18,[22]]]],[28,[[18,[22]]]],[29,[[18,[22]]]],[30,[[18,[22]]]],[31,[[18,[22]]]],[7,[[18,[22]]]],[32,[[18,[22]]]],[33,[[18,[22]]]],[34,[[18,[22]]]],[20,[[18,[21]]]],[20,[[18,[23]]]],[20,[[18,[24]]]],[20,[[18,[25]]]],[20,[[18,[26]]]],[20,[[18,[27]]]],[20,[[18,[28]]]],[20,[[18,[29]]]],[20,[[18,[30]]]],[20,[[18,[31]]]],[20,[[18,[7]]]],[20,[[18,[32]]]],[20,[[18,[33]]]],[20,[[18,[34]]]],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],0,0,0,[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],0,[36,36],[37,37],[[36,36],36],[36,36],[36,36],[36,36],[36,36],[36,36],[[36,36],36],[36,36],[36,36],[36,36],[37,37],[37,38],[36,38],[[36,36],36],[36,36],[36,36],[[],37],[[],36],[36,36],[36,36],[36,36],[36,36],[37,37],[36,36],[37,37],[[36,36],36],[[],37],[[],36],[37,[[39,[32,25,28]]]],[36,[[39,[32,25,28]]]],[36,40],[37,40],[36,40],[37,40],[36,40],[37,40],[36,40],[37,40],[36,40],[37,40],[36,40],[37,40],[37,40],[36,40],[36,36],[36,36],[[36,36],36],[36,36],[36,36],[[36,36],36],[[37,37],37],[[],37],[[],36],[[36,36],36],[[37,37],37],[[],37],[[],36],[[],37],[[],36],[[36,36,36],36],[[],37],[[],36],[[],37],[[],36],[[],37],[[],36],[[36,36],36],[[36,26],36],[[37,26],37],[36,36],[37,37],[36,36],[37,37],[36,36],[37,37],[36,36],[36,[[39,[36,36]]]],[36,36],[36,36],[36,36],[36,36],[37,37],[36,36],[37,37],[36,36],[[41,41],42],[36,36],[37,37],0,0,0,0,0,0,[43,40],[44,40],[[],-1,43],[[],43],[43,39],[44,39],[[],-1,44],[[],44],0,[45,7],[45,7],[45,45],[45,45],[45,7],[45,7],[[45,7],45],[45,45],[[45,7],45],[[45,7],45],[[45,7],45],[[45,7],45],[45,45],[45,45],[45,45],[45,7],[45,7],[[45,7],45],[[45,7],45],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[47,[],[[46,[-1]]]]],[48,49]],[-1,[[47,[],[[46,[-1]]]]],[48,49]],[-1,[[47,[],[[46,[-1]]]]],[48,49]],[[[50,[],[[46,[-1]]]]],-1,48],[[[50,[],[[46,[-1]]]]],-1,48],[[[50,[],[[46,[-1]]]]],-1,48],0,0,0,0,0,0,0,0,[[51,51],[[18,[51]]]],[[52,52],[[18,[52]]]],[[53,53],[[18,[53]]]],[54,[[18,[54]]]],[[55,55],[[18,[55]]]],[[56,7],[[18,[56]]]],[[57,7],[[18,[57]]]],[[58,58],[[18,[58]]]],0,0,[[59,59],[[18,[59]]]],[[59,59],[[18,[[39,[59,59]]]]]],[[59,59],[[18,[59]]]],[[60,60],60],[[60,60],[[39,[60,60]]]],[[60,60],60],0,0,[[[62,[],[[61,[-1]]]]],-1,[]],0,0,0,[[[63,[],[[61,[-1]]]],-2,-3],-1,[],[],[]],[[64,-1,-2],39,[],[]],0,0,0,[[65,65],[[39,[65,40]]]],[[66,66],[[39,[66,40]]]],[[67,67],[[39,[67,40]]]],0,0,0,0,[[68,68],68],[[69,69],69],[[70,70],70],[[68,68],68],[[71,71],71],0,0,0,0,0,0,[[72,72],72],[[73,73],73],[74,74],[[75,7],75],[[76,7],76],[[77,77],77],0,0,[[-1,34],[[18,[-1]]],[78,43,53]],[[-1,34],-1,[78,43,[79,[],[[61,[]]]]]],[[[80,[],[[61,[-1]]]],-2],-1,[],[]],0,[81,81],[[81,81],81],[81,81],[81,81],[81,81],[81,81],[81,81],[[81,81],81],[81,81],[81,81],[81,81],[81,81],[81,81],[[],81],[81,81],[81,81],[81,81],[81,81],[81,81],[[81,81],81],[81,40],[81,40],[81,81],[81,81],[[81,81],81],[81,81],[81,81],[[81,81],81],[[],81],[[81,81],81],[[],81],[[],81],[[81,81,81],81],[[81,81],81],[[81,26],81],[81,81],[81,81],[81,81],[81,81],[81,[[39,[81,81]]]],[81,81],[81,81],[81,81],[81,81],[81,81],[81,81],[81,81],0,0,[-1,-1,82],[82,82],[[-1,-1],-1,82],[[82,82],82],[82,40],[82,40],[-1,-1,82],[82,82]],"c":[],"p":[[10,"PartialOrd",422],[6,"FloatErrorKind",0],[5,"Formatter",423],[8,"Result",423],[5,"ParseFloatError",0],[1,"str"],[1,"u32"],[17,"FromStrRadixErr"],[10,"Num",0],[6,"Result",424],[5,"String",425],[5,"TypeId",426],[10,"Bounded",92],[10,"UpperBounded",92],[10,"LowerBounded",92],[10,"AsPrimitive",99],[10,"Copy",427],[6,"Option",428],[10,"NumCast",99],[10,"ToPrimitive",99],[1,"f32"],[10,"FromPrimitive",99],[1,"f64"],[1,"i128"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"i8"],[1,"isize"],[1,"u128"],[1,"u16"],[1,"u64"],[1,"u8"],[1,"usize"],[10,"FloatConst",134],[10,"Float",134],[10,"FloatCore",134],[6,"FpCategory",429],[1,"tuple"],[1,"bool"],[10,"TotalOrder",134],[6,"Ordering",422],[10,"One",247],[10,"Zero",247],[10,"PrimInt",261],[17,"Bytes"],[10,"FromBytes",289],[10,"NumBytes",289],[10,"Sized",427],[10,"ToBytes",289],[10,"CheckedAdd",300],[10,"CheckedDiv",300],[10,"CheckedMul",300],[10,"CheckedNeg",300],[10,"CheckedRem",300],[10,"CheckedShl",300],[10,"CheckedShr",300],[10,"CheckedSub",300],[10,"CheckedEuclid",316],[10,"Euclid",316],[17,"Output"],[10,"Inv",324],[10,"MulAdd",327],[10,"MulAddAssign",327],[10,"OverflowingAdd",332],[10,"OverflowingMul",332],[10,"OverflowingSub",332],[10,"Saturating",338],[10,"SaturatingAdd",338],[10,"SaturatingMul",338],[10,"SaturatingSub",338],[10,"WrappingAdd",347],[10,"WrappingMul",347],[10,"WrappingNeg",347],[10,"WrappingShl",347],[10,"WrappingShr",347],[10,"WrappingSub",347],[10,"Clone",430],[10,"Mul",431],[10,"Pow",359],[10,"Real",364],[10,"Signed",412],[10,"ConstOne",247],[10,"ConstZero",247]],"b":[[67,"impl-Display-for-ParseFloatError"],[68,"impl-Debug-for-ParseFloatError"]]}],\
["palette",{"doc":"A library that makes linear color calculations and …","t":"FEKRKKKKEKKEEEEKEFIFIFIKRFIEKFFIFIFIEEEEFFIIKFFIFIEEYYKEFKRRRRRRKEEEEKRYFIFIOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNOOOCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOCMNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOMNNNNNNMNNNNNNHCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNMNNMNNNNNNNNNNNNMNNNNNNNNNNNCNNNNNNNNNNOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNOOOOOOOMNNNNNNNNNNNNNMNNNNNNNNNNNNNOCONNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCMNNNNNNNMNNNNNNNOOOMNNNNNNNNMNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNOOCOOOOOOOOMNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNOOOOOPKKRPPGFPPPPPPPGFFPPPPPNNNNNNNNNNOOOMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKKPFGKPPNMNMNNNNNNNNNMNNNNNNNOONNNNNNNNKKKKFKKNNNNNNNNMMNMNMNNNMNMNNEEEEKMCMCCCFFFKTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNTTKKKMMNNMNNMMNNNNNFNNNNNNNNNNNNNNNNNNNNNKMMMMMMMMMMMMNMMNMMMMMMMMMMMMMMNMMMMMMMMMMMMMMMMMMMMMMMMMNNMFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSSSSIIIIFKIIIRRNNNNNNNOOOONNNNNNNNOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOONNNNNNNNNNOOOONNNNNNNNNNNNNSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSHGIIPIIFPKRFKKKIRIIRRNNNNNNNNNOOOONNMOOOONNNNNNOCNNNNNNOOOOOMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMOOOONNNMOOOONNNNNNNNNNNNNNNNNNNNNNNFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFFFFFFFFFFFFKNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Alpha","Blend","Clamp","Color","ColorDifference","Component","ComponentWise","FloatComponent","FromColor","FromComponent","FromF64","GammaLuma","GammaLumaa","GammaSrgb","GammaSrgba","GetHue","Gradient","Hsl","Hsla","Hsluv","Hsluva","Hsv","Hsva","Hue","Hue","Hwb","Hwba","IntoColor","IntoComponent","Lab","LabHue","Laba","Lch","Lcha","Lchuv","Lchuva","LinLuma","LinLumaa","LinSrgb","LinSrgba","Luv","LuvHue","Luva","Mat3","Mix","Oklab","OklabHue","Oklaba","Oklch","Oklcha","Packed","Pixel","Pixel","Pixel","RelativeContrast","RgbChannels","RgbHue","Saturate","Scalar","Scalar","Scalar","Scalar","Scalar","Scalar","Shade","Srgb","SrgbLuma","SrgbLumaa","Srgba","WithAlpha","WithAlpha","WithAlpha","Xyz","Xyza","Yxy","Yxya","a","a","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_ne","abs_diff_ne","abs_diff_ne","abs_diff_ne","abs_diff_ne","abs_diff_ne","abs_diff_ne","abs_diff_ne","abs_diff_ne","abs_diff_ne","abs_diff_ne","adapt_from_using","adapt_from_using","adapt_from_using","adapt_from_using","adapt_from_using","adapt_from_using","adapt_from_using","adapt_from_using","adapt_from_using","adapt_from_using","adapt_from_using","adapt_from_using","adapt_from_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","alpha","alpha","alpha","alpha","alpha","alpha","alpha","alpha","alpha","alpha","alpha","alpha","alpha","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","b","b","blackness","blend","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chroma","chroma","chroma","chromatic_adaptation","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp_self","clamp_self","clamp_self","clamp_self","clamp_self","clamp_self","clamp_self","clamp_self","clamp_self","clamp_self","clamp_self","clamp_self","clamp_self","clamp_self","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","color","color","color","color","color","color","color","color","color","color","color","color","color","component_wise","component_wise","component_wise","component_wise","component_wise","component_wise","component_wise","component_wise_self","component_wise_self","component_wise_self","component_wise_self","component_wise_self","component_wise_self","component_wise_self","contrast_ratio","convert","darken","darken_fixed","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","deref","deref_mut","desaturate","desaturate_fixed","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","encoding","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","float","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_color","from_color","from_color","from_color","from_color","from_color","from_color","from_color","from_color","from_color","from_color","from_color","from_color","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_component","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_degrees","from_degrees","from_degrees","from_degrees","from_encoding","from_encoding","from_f64","from_format","from_format","from_linear","from_linear","from_premultiplied","from_radians","from_radians","from_radians","from_radians","from_u32","get_color_difference","get_color_difference","get_color_difference","get_contrast_ratio","get_contrast_ratio","get_contrast_ratio","get_contrast_ratio","get_contrast_ratio","get_contrast_ratio","get_contrast_ratio","get_contrast_ratio","get_contrast_ratio","get_contrast_ratio","get_contrast_ratio","get_contrast_ratio","get_contrast_ratio","get_hue","get_hue","get_hue","get_hue","get_hue","get_hue","get_hue","get_hue","get_hue","get_hue","get_hue","get_hue","gradient","has_enhanced_contrast_large_text","has_enhanced_contrast_large_text","has_enhanced_contrast_text","has_enhanced_contrast_text","has_min_contrast_graphics","has_min_contrast_graphics","has_min_contrast_large_text","has_min_contrast_large_text","has_min_contrast_text","has_min_contrast_text","hue","hue","hue","hue","hue","hue","hue","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_component","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_encoding","into_encoding","into_format","into_format","into_linear","into_linear","into_premultiplied","into_u32","is_within_bounds","is_within_bounds","is_within_bounds","is_within_bounds","is_within_bounds","is_within_bounds","is_within_bounds","is_within_bounds","is_within_bounds","is_within_bounds","is_within_bounds","is_within_bounds","is_within_bounds","is_within_bounds","l","l","l","l","l","l","l","lighten","lighten","lighten","lighten","lighten","lighten","lighten","lighten","lighten","lighten","lighten","lighten","lighten","lighten","lighten_fixed","lighten_fixed","lighten_fixed","lighten_fixed","lighten_fixed","lighten_fixed","lighten_fixed","lighten_fixed","lighten_fixed","lighten_fixed","lighten_fixed","lighten_fixed","lighten_fixed","lighten_fixed","lightness","luma","luma","max_a","max_a","max_alpha","max_b","max_b","max_blackness","max_chroma","max_chroma","max_chroma","max_extended_chroma","max_intensity","max_l","max_l","max_l","max_l","max_l","max_l","max_l","max_lightness","max_luma","max_saturation","max_saturation","max_saturation","max_u","max_v","max_value","max_whiteness","max_x","max_x","max_y","max_y","max_z","min_a","min_a","min_alpha","min_b","min_b","min_blackness","min_chroma","min_chroma","min_chroma","min_l","min_l","min_l","min_l","min_l","min_l","min_l","min_lightness","min_luma","min_saturation","min_saturation","min_saturation","min_u","min_v","min_value","min_whiteness","min_x","min_x","min_y","min_y","min_z","mix","mix","mix","mix","mix","mix","mix","mix","mix","mix","mix","mix","mix","mix","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","named","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","opaque","opaque","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_ne","relative_ne","relative_ne","relative_ne","relative_ne","relative_ne","relative_ne","relative_ne","relative_ne","relative_ne","relative_ne","rgb","saturate","saturate","saturate","saturate","saturate","saturate","saturate","saturate","saturate_fixed","saturate_fixed","saturate_fixed","saturate_fixed","saturate_fixed","saturate_fixed","saturate_fixed","saturate_fixed","saturation","saturation","saturation","shift_hue","shift_hue","shift_hue","shift_hue","shift_hue","shift_hue","shift_hue","shift_hue","shift_hue","split","split","split","split","split","split","split","split","split","split","split","split","split","split","standard","standard","standard","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","to_degrees","to_degrees","to_degrees","to_degrees","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_positive_degrees","to_positive_degrees","to_positive_degrees","to_positive_degrees","to_positive_radians","to_positive_radians","to_positive_radians","to_positive_radians","to_radians","to_radians","to_radians","to_radians","to_raw_degrees","to_raw_degrees","to_raw_degrees","to_raw_degrees","to_raw_radians","to_raw_radians","to_raw_radians","to_raw_radians","transparent","transparent","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_color","try_from_color","try_from_color","try_from_color","try_from_color","try_from_color","try_from_color","try_from_color","try_from_color","try_from_color","try_from_color","try_from_color","try_from_color","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_ne","ulps_ne","ulps_ne","ulps_ne","ulps_ne","ulps_ne","ulps_ne","ulps_ne","ulps_ne","ulps_ne","ulps_ne","v","value","white_point","white_point","white_point","white_point","white_point","white_point","white_point","white_point","whiteness","with_alpha","with_alpha","with_alpha","with_alpha","with_alpha","with_alpha","with_alpha","with_alpha","with_alpha","with_alpha","with_alpha","with_alpha","with_alpha","with_alpha","with_hue","with_hue","with_hue","with_hue","with_hue","with_hue","with_hue","with_hue","with_hue","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","without_alpha","without_alpha","without_alpha","without_alpha","without_alpha","without_alpha","without_alpha","without_alpha","without_alpha","without_alpha","without_alpha","without_alpha","without_alpha","without_alpha","x","x","y","y","z","Add","Blend","BlendFunction","Color","DestinationAlpha","DestinationColor","Equation","Equations","Max","Min","One","OneMinusDestinationAlpha","OneMinusDestinationColor","OneMinusSourceAlpha","OneMinusSourceColor","Parameter","Parameters","PreAlpha","ReverseSubtract","SourceAlpha","SourceColor","Subtract","Zero","abs_diff_eq","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","add","add","add_assign","add_assign","alpha","alpha_equation","alpha_parameters","apply_to","apply_to","as_mut","as_ref","atop","atop","blend","blend","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","burn","burn","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","color","color_equation","color_parameters","component_wise","component_wise_self","darken","darken","default","default_epsilon","default_max_relative","default_max_ulps","deref","deref_mut","destination","difference","difference","div","div","div_assign","div_assign","dodge","dodge","eq","eq","eq","eq","eq","exclusion","exclusion","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_equations","from_parameters","from_premultiplied","from_premultiplied","hard_light","hard_light","inside","inside","into","into","into","into","into","into_color","into_color","into_color","into_color","into_color","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_premultiplied","into_premultiplied","lighten","lighten","mix","mul","mul","mul_assign","mul_assign","multiply","multiply","outside","outside","over","over","overlay","overlay","plus","plus","relative_eq","screen","screen","soft_light","soft_light","source","sub","sub","sub_assign","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","type_id","type_id","type_id","type_id","type_id","ulps_eq","xor","xor","AdaptFrom","AdaptInto","Bradford","ConeResponseMatrices","Method","TransformMatrix","VonKries","XyzScaling","adapt_from","adapt_from_using","adapt_into","adapt_into_using","adapt_into_using","adapt_into_using","borrow","borrow","borrow_mut","borrow_mut","from","from","generate_transform_matrix","get_cone_response","get_cone_response","into","into","into_color","into_color","into_color_unclamped","into_color_unclamped","inv_ma","ma","try_from","try_from","try_into","try_into","try_into_color","try_into_color","type_id","type_id","FromColor","FromColorUnclamped","IntoColor","IntoColorUnclamped","OutOfBounds","TryFromColor","TryIntoColor","adapt_into_using","borrow","borrow_mut","color","description","fmt","fmt","from","from_color","from_color_unclamped","into","into_color","into_color","into_color_unclamped","into_color_unclamped","to_string","try_from","try_from_color","try_into","try_into_color","try_into_color","type_id","F2p2","Gamma","Linear","Srgb","TransferFn","from_linear","gamma","into_linear","linear","pixel","srgb","F2p2","Gamma","GammaFn","Number","VALUE","adapt_into_using","adapt_into_using","adapt_into_using","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","from","from","from","from_linear","into","into","into","into_color","into_color","into_color","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_linear","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","try_into_color","try_into_color","try_into_color","type_id","type_id","type_id","Linear","LinearFn","adapt_into_using","adapt_into_using","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","from_linear","into","into","into_color","into_color","into_color_unclamped","into_color_unclamped","into_linear","to_owned","to_owned","try_from","try_from","try_into","try_into","try_into_color","try_into_color","type_id","type_id","CHANNELS","CHANNELS","Pixel","RawPixel","RawPixelSized","as_mut_ptr","as_ptr","as_raw","as_raw_mut","channels","from_raw","from_raw_mut","from_raw_parts","from_raw_parts_mut","from_raw_slice","from_raw_slice_mut","into_raw","into_raw_slice","into_raw_slice_mut","Srgb","adapt_into_using","blue","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from_linear","green","into","into_color","into_color_unclamped","into_linear","red","to_owned","try_from","try_into","try_into_color","type_id","Float","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","classify","copysign","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","infinity","integer_decode","is_finite","is_infinite","is_nan","is_normal","is_sign_negative","is_sign_positive","is_subnormal","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","nan","neg_infinity","neg_zero","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Gradient","Range","Slice","Take","abs_diff_eq","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default_epsilon","default_max_relative","default_max_ulps","domain","domain","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","get","get","into","into","into","into","into_color","into_color","into_color","into_color","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_iter","named","new","next","next_back","relative_eq","size_hint","slice","slice","take","take","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into_color","try_into_color","try_into_color","try_into_color","type_id","type_id","type_id","type_id","ulps_eq","with_domain","INFERNO","MAGMA","PLASMA","VIRIDIS","GammaLuma","GammaLumaa","LinLuma","LinLumaa","Luma","LumaStandard","Lumaa","SrgbLuma","SrgbLumaa","TransferFn","WhitePoint","abs_diff_eq","adapt_from_using","adapt_into_using","add","add","add_assign","add_assign","alpha","alpha","alpha","alpha","as_mut","as_ref","borrow","borrow_mut","clamp","clamp_self","clone","clone_into","color","color","color","color","component_wise","component_wise_self","default","default_epsilon","default_max_relative","default_max_ulps","div","div","div_assign","div_assign","eq","fmt","fmt","fmt","from","from","from_color","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_components","from_encoding","from_format","from_linear","from_premultiplied","get_contrast_ratio","into","into","into_color","into_color_unclamped","into_components","into_encoding","into_format","into_linear","into_premultiplied","is_within_bounds","lighten","lighten_fixed","luma","luma","luma","luma","max_luma","min_luma","mix","mul","mul","mul_assign","mul_assign","new","relative_eq","split","standard","standard","standard","standard","sub","sub","sub_assign","sub_assign","to_owned","try_from","try_from_color","try_into","try_into_color","type_id","ulps_eq","with_alpha","without_alpha","ALICEBLUE","ANTIQUEWHITE","AQUA","AQUAMARINE","AZURE","BEIGE","BISQUE","BLACK","BLANCHEDALMOND","BLUE","BLUEVIOLET","BROWN","BURLYWOOD","CADETBLUE","CHARTREUSE","CHOCOLATE","CORAL","CORNFLOWERBLUE","CORNSILK","CRIMSON","CYAN","DARKBLUE","DARKCYAN","DARKGOLDENROD","DARKGRAY","DARKGREEN","DARKGREY","DARKKHAKI","DARKMAGENTA","DARKOLIVEGREEN","DARKORANGE","DARKORCHID","DARKRED","DARKSALMON","DARKSEAGREEN","DARKSLATEBLUE","DARKSLATEGRAY","DARKSLATEGREY","DARKTURQUOISE","DARKVIOLET","DEEPPINK","DEEPSKYBLUE","DIMGRAY","DIMGREY","DODGERBLUE","FIREBRICK","FLORALWHITE","FORESTGREEN","FUCHSIA","GAINSBORO","GHOSTWHITE","GOLD","GOLDENROD","GRAY","GREEN","GREENYELLOW","GREY","HONEYDEW","HOTPINK","INDIANRED","INDIGO","IVORY","KHAKI","LAVENDER","LAVENDERBLUSH","LAWNGREEN","LEMONCHIFFON","LIGHTBLUE","LIGHTCORAL","LIGHTCYAN","LIGHTGOLDENRODYELLOW","LIGHTGRAY","LIGHTGREEN","LIGHTGREY","LIGHTPINK","LIGHTSALMON","LIGHTSEAGREEN","LIGHTSKYBLUE","LIGHTSLATEGRAY","LIGHTSLATEGREY","LIGHTSTEELBLUE","LIGHTYELLOW","LIME","LIMEGREEN","LINEN","MAGENTA","MAROON","MEDIUMAQUAMARINE","MEDIUMBLUE","MEDIUMORCHID","MEDIUMPURPLE","MEDIUMSEAGREEN","MEDIUMSLATEBLUE","MEDIUMSPRINGGREEN","MEDIUMTURQUOISE","MEDIUMVIOLETRED","MIDNIGHTBLUE","MINTCREAM","MISTYROSE","MOCCASIN","NAVAJOWHITE","NAVY","OLDLACE","OLIVE","OLIVEDRAB","ORANGE","ORANGERED","ORCHID","PALEGOLDENROD","PALEGREEN","PALETURQUOISE","PALEVIOLETRED","PAPAYAWHIP","PEACHPUFF","PERU","PINK","PLUM","POWDERBLUE","PURPLE","REBECCAPURPLE","RED","ROSYBROWN","ROYALBLUE","SADDLEBROWN","SALMON","SANDYBROWN","SEAGREEN","SEASHELL","SIENNA","SILVER","SKYBLUE","SLATEBLUE","SLATEGRAY","SLATEGREY","SNOW","SPRINGGREEN","STEELBLUE","TAN","TEAL","THISTLE","TOMATO","TURQUOISE","VIOLET","WHEAT","WHITE","WHITESMOKE","YELLOW","YELLOWGREEN","from_str","FromHexError","GammaSrgb","GammaSrgba","HexFormatError","LinSrgb","LinSrgba","Packed","ParseIntError","Primaries","Primaries","Rgb","RgbChannels","RgbSpace","RgbStandard","Rgba","Space","Srgb","Srgba","TransferFn","WhitePoint","abs_diff_eq","adapt_from_using","adapt_into_using","adapt_into_using","adapt_into_using","add","add","add_assign","add_assign","alpha","alpha","alpha","alpha","as_mut","as_ref","blue","blue","blue","blue","blue","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","channel_order","channels","clamp","clamp_self","clone","clone","clone_into","clone_into","color","color","color","color","color","combine_rgb","component_wise","component_wise_self","default","default_epsilon","default_max_relative","default_max_ulps","div","div","div_assign","div_assign","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_color","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_color_unclamped","from_components","from_encoding","from_format","from_linear","from_premultiplied","from_str","from_u32","from_u32","get_contrast_ratio","get_hue","green","green","green","green","green","into","into","into","into","into_color","into_color","into_color","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_components","into_encoding","into_format","into_linear","into_premultiplied","into_u32","into_u32","is_within_bounds","lighten","lighten_fixed","max_blue","max_green","max_red","min_blue","min_green","min_red","mix","mul","mul","mul_assign","mul_assign","new","red","red","red","red","red","relative_eq","source","split","split_rgb","standard","standard","standard","standard","sub","sub","sub_assign","sub_assign","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from_color","try_into","try_into","try_into","try_into_color","try_into_color","try_into_color","type_id","type_id","type_id","ulps_eq","with_alpha","without_alpha","Abgr","Argb","Bgra","Rgba","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","combine_rgb","combine_rgb","combine_rgb","combine_rgb","from","from","from","from","into","into","into","into","into_color","into_color","into_color","into_color","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","split_rgb","split_rgb","split_rgb","split_rgb","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into_color","try_into_color","try_into_color","try_into_color","type_id","type_id","type_id","type_id","A","B","C","D50","D50Degree10","D55","D55Degree10","D65","D65Degree10","D75","D75Degree10","E","F11","F2","F7","WhitePoint","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","into_color_unclamped","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","try_into_color","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"palette"],[1523,"palette::blend"],[1709,"palette::chromatic_adaptation"],[1748,"palette::convert"],[1777,"palette::encoding"],[1788,"palette::encoding::gamma"],[1843,"palette::encoding::linear"],[1879,"palette::encoding::pixel"],[1898,"palette::encoding::srgb"],[1920,"palette::float"],[1980,"palette::gradient"],[2070,"palette::gradient::named"],[2074,"palette::luma"],[2189,"palette::named"],[2338,"palette::rgb"],[2534,"palette::rgb::channels"],[2590,"palette::white_point"],[2862,"approx::abs_diff_eq"],[2863,"core::cmp"],[2864,"core::ops::arith"],[2865,"core::clone"],[2866,"core::ops::arith"],[2867,"core::marker"],[2868,"core::default"],[2869,"core::ops::arith"],[2870,"core::fmt"],[2871,"core::cmp"],[2872,"core::ops::arith"],[2873,"core::ops::arith"],[2874,"core::any"],[2875,"approx::ulps_eq"],[2876,"alloc::string"],[2877,"core::num"],[2878,"core::convert"],[2879,"core::ops::range"],[2880,"core::num::error"],[2881,"core::error"]],"d":["An alpha component wrapper for colors.","","A trait for clamping and checking if colors are within …","The opaque color type, without any transparency.","A trait for calculating the color difference between two …","Common trait for color components.","Perform a unary or binary operation on each component of a …","Common trait for floating point color components.","","Converts from a color component type, while performing the …","A trait for infallible conversion from <code>f64</code>. The conversion …","","","","","A trait for colors where a hue may be calculated.","","HSL color space.","Linear HSL with an alpha component. See the <code>Hsla</code> …","HSLuv color space.","HSLuv with an alpha component. See the <code>Hsluva</code> …","HSV color space.","Linear HSV with an alpha component. See the <code>Hsva</code> …","A trait for colors where the hue can be manipulated …","The kind of hue unit this color space uses.","HWB color space.","Linear HWB with an alpha component. See the <code>Hwba</code> …","","Converts into a color component type, while performing the …","The CIE L*a*b* (CIELAB) color space.","A hue type for the CIE L*a*b* family of color spaces.","CIE L*a*b* (CIELAB) with an alpha component. See the <code>Laba</code> …","CIE L*C*h°, a polar version of CIE L*a*b*.","CIE L*C*h° with an alpha component. See the <code>Lcha</code> …","CIE L*C*uv h°uv, a polar version of CIE L*u*v*.","CIE L*C*uv h°uv with an alpha component. See the <code>Lchuva</code> …","","","","","The CIE L*u*v* (CIELUV) color space.","A hue type for the CIE L*u*v* family of color spaces.","CIE L*u*v* (CIELUV) with an alpha component. See the <code>Luva</code> …","A 9 element array representing a 3x3 matrix.","A trait for linear color interpolation.","The Oklab color space.","A hue type for the Oklab color space.","Oklab with an alpha component. See the <code>Oklaba</code> …","Oklch, a polar version of Oklab.","Oklch with an alpha component. See the <code>Oklcha</code> …","","","","","A trait for calculating relative contrast between two …","","A hue type for the RGB family of color spaces.","A trait for colors where the saturation (or chroma) can be …","The type of the calculated color difference","The type of the contrast ratio.","The type of the mixing factor.","The type of the lighten/darken modifier.","The type of the (de)saturation modifier.","The scalar type for color components.","The <code>Shade</code> trait allows a color to be lightened or darkened.","","","","","A trait for color types that can have or be given …","The color type with transparency applied.","","The CIE 1931 XYZ color space.","CIE 1931 XYZ with an alpha component. See the <code>Xyza</code> …","The CIE 1931 Yxy (xyY)  color space.","CIE 1931 Yxy (xyY) with an alpha component. See the <code>Yxya</code> …","a* goes from red at -128 to green at 127.","a goes from red at -1 to green at 1.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The transparency component. 0.0 is fully transparent and …","The transparency component. 0.0 is fully transparent and …","The transparency component. 0.0 is fully transparent and …","The transparency component. 0.0 is fully transparent and …","The transparency component. 0.0 is fully transparent and …","The transparency component. 0.0 is fully transparent and …","The transparency component. 0.0 is fully transparent and …","The transparency component. 0.0 is fully transparent and …","The transparency component. 0.0 is fully transparent and …","The transparency component. 0.0 is fully transparent and …","The transparency component. 0.0 is fully transparent and …","The transparency component. 0.0 is fully transparent and …","The transparency component. 0.0 is fully transparent and …","","","","","","","","","","","","","","","","","","","","","","","","","","","b* goes from yellow at -128 to blue at 127.","b goes from yellow at -1 to blue at 1.","The blackness of the color. It specifies the amount black …","Color blending and blending equations.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","C* is the colorfulness of the color. It’s similar to …","C*uv is the colorfulness of the color. It’s similar to …","C is the colorfulness of the color, from greyscale at 0 to …","Convert colors from one reference white point to another","Return a new color where the components have been clamped …","","","","","","","","","","","","","","Clamp the color’s components to the nearest valid values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The color.","The color.","The color.","The color.","The color.","The color.","The color.","The color.","The color.","The color.","The color.","The color.","The color.","Perform a binary operation on this and an other color.","","","","","","","Perform a unary operation on this color.","","","","","","","Calculate the ratio between two <code>luma</code> values.","Traits for converting between color spaces.","Scale the color towards the minimum lightness by <code>factor</code>, a …","Darken the color by <code>amount</code>, a value ranging from <code>0.0</code> to <code>1.0</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Scale the color towards the minimum saturation by <code>factor</code>, …","Increase the saturation by <code>amount</code>, a value ranging from <code>0.0</code>…","","","","","","","","","","","","","","","","","","","","","","","","","Various encoding traits, types and standards.","","","","","","","","","","","","","","","","","","","","","","Floating point trait","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchangedonverts <code>other</code> into <code>Self</code>, while performing the appropriate …","Convert from a <code>(hue, saturation, l, alpha)</code> tuple.","Convert from a <code>(red, green, blue, alpha)</code> tuple.","Convert from a <code>(L\\\\*, a\\\\*, b\\\\*, alpha)</code> tuple.","Convert from a <code>(L\\\\*, C\\\\*uv, h°uv, alpha)</code> tuple.","Convert from a <code>(L\\\\*, C\\\\*, h°, alpha)</code> tuple.","Convert from a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.","Convert from a <code>(hue, whiteness, blackness, alpha)</code> tuple.","Convert from a <code>(X, Y, Z, alpha)</code> tuple.","Convert from a <code>(hue, saturation, value, alpha)</code> tuple.","Convert from a <code>(luma, alpha)</code> tuple.","Convert from u <code>(L\\\\*, u\\\\*, v\\\\*, alpha)</code> tuple.","Convert from a <code>(hue, saturation, lightness, alpha)</code> tuple.","Convert from a <code>(L, a, b, alpha)</code> tuple.","Convert from a <code>(L, C, h, alpha)</code> tuple.","Convert from a <code>(hue, saturation, lightness)</code> tuple.","Convert from a <code>(hue, saturation, l)</code> tuple.","Convert from a <code>(hue, saturation, value)</code> tuple.","Convert from a <code>(hue, whiteness, blackness)</code> tuple.","Convert from a <code>(L\\\\*, a\\\\*, b\\\\*)</code> tuple.","Convert from a <code>(L\\\\*, C\\\\*, h°)</code> tuple.","Convert from a <code>(L\\\\*, C\\\\*uv, h°uv)</code> tuple.","Convert from a <code>(L\\\\*, u\\\\*, v\\\\*)</code> tuple.","Convert from a <code>(L, a, b)</code> tuple.","Convert from a <code>(L, C, h)</code> tuple.","Convert from a <code>(X, Y, Z)</code> tuple.","Convert from a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.","Create a new hue from degrees.","Create a new hue from degrees.","Create a new hue from degrees.","Create a new hue from degrees.","Convert luminance from a different encoding with …","Convert RGB from a different encoding with transparency.","Creates a value from an <code>f64</code> constant.","Convert from another component type.","Convert from another component type.","Convert linear RGB to non-linear RGB with transparency.","Convert linear luminance to non-linear luminance with …","","Create a new hue from radians, instead of degrees.","Create a new hue from radians, instead of degrees.","Create a new hue from radians, instead of degrees.","Create a new hue from radians, instead of degrees.","Convert from a packed <code>u32</code> with specifiable component …","Return the difference or distance between two colors","","","Calculate the contrast ratio between two colors.","","","","","","","","","","","","","Calculate a hue if possible.","","","","","","","","","","","","Types for interpolation between multiple colors.","Verify the contrast between two colors satisfies SC 1.4.6 …","Verify the contrast between two colors satisfies SC 1.4.6 …","Verify the contrast between two colors satisfies SC 1.4.6. …","Verify the contrast between two colors satisfies SC 1.4.6. …","Verify the contrast between two colors satisfies SC 1.4.11 …","Verify the contrast between two colors satisfies SC 1.4.11 …","Verify the contrast between two colors satisfies SC 1.4.3 …","Verify the contrast between two colors satisfies SC 1.4.3 …","Verify the contrast between two colors satisfies SC 1.4.3. …","Verify the contrast between two colors satisfies SC 1.4.3. …","The hue of the color, in degrees. Decides if it’s red, …","The hue of the color, in degrees. Decides if it’s red, …","The hue of the color, in degrees. Decides if it’s red, …","The hue of the color, in degrees. Decides if it’s red, …","The hue of the color, in degrees. Decides if it’s red, …","The hue of the color, in degrees. Decides if it’s red, …","h is the hue of the color, in degrees. Decides if it’s …","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts <code>self</code> into <code>T</code>, while performing the appropriate …","Convert to u <code>(L\\\\*, u\\\\*, v\\\\*, alpha)</code> tuple.","Convert to a <code>(hue, whiteness, blackness, alpha)</code> tuple.","Convert to a <code>(L\\\\*, a\\\\*, b\\\\*, alpha)</code> tuple.","Convert to a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.","Convert to a <code>(L, a, b, alpha)</code> tuple.","Convert to a <code>(L\\\\*, C\\\\*, h°, alpha)</code> tuple.","Convert to a <code>(X, Y, Z, alpha)</code> tuple.","Convert to a <code>(hue, saturation, lightness, alpha)</code> tuple.","Convert to a <code>(red, green, blue, alpha)</code> tuple.","Convert to a <code>(hue, saturation, value, alpha)</code> tuple.","Convert to a <code>(L\\\\*, C\\\\*uv, h°uv, alpha)</code> tuple.","Convert to a <code>(L, C, h, alpha)</code> tuple.","Convert to a <code>(hue, saturation, l, alpha)</code> tuple.","Convert to a <code>(luma, alpha)</code> tuple.","Convert to a <code>(hue, saturation, lightness)</code> tuple.","Convert to a <code>(hue, saturation, l)</code> tuple.","Convert to a <code>(hue, saturation, value)</code> tuple.","Convert to a <code>(hue, whiteness, blackness)</code> tuple.","Convert to a <code>(L\\\\*, a\\\\*, b\\\\*)</code> tuple.","Convert to a <code>(L\\\\*, C\\\\*, h°)</code> tuple.","Convert to a <code>(L\\\\*, C\\\\*uv, h°uv)</code> tuple.","Convert to a <code>(L\\\\*, u\\\\*, v\\\\*)</code> tuple.","Convert to a <code>(L, a, b)</code> tuple.","Convert to a <code>(L, C, h)</code> tuple.","Convert to a <code>(X, Y, Z)</code> tuple.","Convert to a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.","Convert the color to a different encoding with …","Convert the color to a different encoding with …","Convert into another component type.","Convert into another component type.","Convert the color to linear luminance with transparency.","Convert the color to linear RGB with transparency.","","Convert to a packed <code>u32</code> with with specifiable component …","Check if the color’s components are within the expected …","","","","","","","","","","","","","","Decides how light the color will look. 0.0 will be black, …","L* is the lightness of the color. 0.0 gives absolute black …","L* is the lightness of the color. 0.0 gives absolute black …","L* is the lightness of the color. 0.0 gives absolute black …","L* is the lightness of the color. 0.0 gives absolute black …","L is the lightness of the color. 0 gives absolute black …","L is the lightness of the color. 0 gives absolute black …","Scale the color towards the maximum lightness by <code>factor</code>, a …","","","","","","","","","","","","","","Lighten the color by <code>amount</code>, a value ranging from <code>0.0</code> to …","","","","","","","","","","","","","","Decides how light the color will look. 0.0 will be black, …","Luminance types.","luma (Y) was a measure of the brightness or luminance of a …","Return the <code>a</code> value maximum.","Return the <code>a</code> value maximum.","Return the <code>alpha</code> value maximum.","Return the <code>b</code> value maximum.","Return the <code>b</code> value maximum.","Return the <code>blackness</code> value maximum.","Return the <code>chroma</code> value maximum. This value does not cover …","Return the <code>chroma</code> value maximum.","Return the <code>chroma</code> value maximum.","Return the <code>chroma</code> extended maximum value. This value …","The highest displayable value this component type can …","Return the <code>l</code> value maximum.","Return the <code>l</code> value maximum.","Return the <code>l</code> value maximum.","Return the <code>l</code> value maximum.","Return the <code>l</code> value maximum.","Return the <code>l</code> value maximum.","Return the <code>l</code> value maximum.","Return the <code>lightness</code> value maximum.","Return the <code>luma</code> value maximum.","Return the <code>saturation</code> value maximum.","Return the <code>saturation</code> value maximum.","Return the <code>saturation</code> value maximum.","Return the <code>u</code> value maximum.","Return the <code>v</code> value maximum.","Return the <code>value</code> value maximum.","Return the <code>whiteness</code> value maximum.","Return the <code>x</code> value maximum.","Return the <code>x</code> value maximum.","Return the <code>y</code> value maximum.","Return the <code>y</code> value maximum.","Return the <code>z</code> value maximum.","Return the <code>a</code> value minimum.","Return the <code>a</code> value minimum.","Return the <code>alpha</code> value minimum.","Return the <code>b</code> value minimum.","Return the <code>b</code> value minimum.","Return the <code>blackness</code> value minimum.","Return the <code>chroma</code> value minimum.","Return the <code>chroma</code> value minimum.","Return the <code>chroma</code> value minimum.","Return the <code>l</code> value minimum.","Return the <code>l</code> value minimum.","Return the <code>l</code> value minimum.","Return the <code>l</code> value minimum.","Return the <code>l</code> value minimum.","Return the <code>l</code> value minimum.","Return the <code>l</code> value minimum.","Return the <code>lightness</code> value minimum.","Return the <code>luma</code> value minimum.","Return the <code>saturation</code> value minimum.","Return the <code>saturation</code> value minimum.","Return the <code>saturation</code> value minimum.","Return the <code>u</code> value minimum.","Return the <code>v</code> value minimum.","Return the <code>value</code> value minimum.","Return the <code>whiteness</code> value minimum.","Return the <code>x</code> value minimum.","Return the <code>x</code> value minimum.","Return the <code>y</code> value minimum.","Return the <code>y</code> value minimum.","Return the <code>z</code> value minimum.","Mix the color with an other color, by <code>factor</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A collection of named color constants. Can be toggled with …","CIE L*a*b* and transparency and white point D65.","HSV and transparency for linear sRGB.","CIE L*u*v* and transparency and white point D65.","CIE Yxy and transparency with white point D65.","HSLuv and transparency with standard D65 whitepoint.","HWB and transparency for linear sRGB.","Non-linear RGB.","HSL and transparency for linear sRGB.","Oklab and transparency.","CIE L*C*h° and transparency with white point D65.","CIE Yxy and transparency with white point D65.","Oklch and transparency.","Create a luminance color with transparency.","CIE L*C*uv h°uv and transparency with white point D65.","HSL for linear sRGB.","HSLuv with standard D65 whitepoint","HSV for linear sRGB.","HWB for linear sRGB.","CIE L*a*b* with white point D65.","CIE L*C*h° with white point D65.","CIE L*C*uv h°uv with white point D65.","CIE L*u*v* with white point D65.","Create an Oklab color.","Create an Oklch color.","CIE XYZ with white point D65.","CIE Yxy with white point D65.","Transforms the color into a fully opaque color with a …","Transforms the color into a fully opaque color with a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","RGB types, spaces and standards.","Scale the color towards the maximum saturation by <code>factor</code>, …","","","","","","","","Increase the saturation by <code>amount</code>, a value ranging from <code>0.0</code>…","","","","","","","","The colorfulness of the color. 0.0 gives gray scale colors …","The colorfulness of the color, as a percentage of the …","The colorfulness of the color. 0.0 gives gray scale colors …","Return a new copy of <code>self</code>, but with the hue shifted by …","","","","","","","","","Splits the color into separate color and transparency …","","","","","","","","","","","","","","The white point and RGB primaries this color is adapted …","The white point and RGB primaries this color is adapted …","The white point and RGB primaries this color is adapted …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the hue as degrees, in the range <code>(-180, 180]</code>.","Get the hue as degrees, in the range <code>(-180, 180]</code>.","Get the hue as degrees, in the range <code>(-180, 180]</code>.","Get the hue as degrees, in the range <code>(-180, 180]</code>.","","","","","","","","","","","","","","","","","","Convert the hue to positive degrees, in the range <code>[0, 360)</code>.","Convert the hue to positive degrees, in the range <code>[0, 360)</code>.","Convert the hue to positive degrees, in the range <code>[0, 360)</code>.","Convert the hue to positive degrees, in the range <code>[0, 360)</code>.","Convert the hue to positive radians, in the range <code>[0, 2π)</code>.","Convert the hue to positive radians, in the range <code>[0, 2π)</code>.","Convert the hue to positive radians, in the range <code>[0, 2π)</code>.","Convert the hue to positive radians, in the range <code>[0, 2π)</code>.","Convert the hue to radians, in the range <code>(-π, π]</code>.","Convert the hue to radians, in the range <code>(-π, π]</code>.","Convert the hue to radians, in the range <code>(-π, π]</code>.","Convert the hue to radians, in the range <code>(-π, π]</code>.","Get the internal representation, without normalizing it.","Get the internal representation, without normalizing it.","Get the internal representation, without normalizing it.","Get the internal representation, without normalizing it.","Get the internal representation as radians, without …","Get the internal representation as radians, without …","Get the internal representation as radians, without …","Get the internal representation as radians, without …","Transforms the color into a fully transparent color. If …","Transforms the color into a fully transparent color. If …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The range of valid u* varies depending on the values of L* …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The range of valid v* varies depending on the values of L* …","Decides how bright the color will look. 0.0 will be black, …","Defines the tristimulus values of the CIE Illuminants.","The white point and RGB primaries this color is adapted …","The white point associated with the color’s illuminant …","The white point associated with the color’s illuminant …","The white point associated with the color’s illuminant …","The white point associated with the color’s illuminant …","The white point associated with the color’s illuminant …","The white point associated with the color’s illuminant …","The whiteness of the color. It specifies the amount white …","Transforms the color into a transparent color with the …","","","","","","","","","","","","","","Return a new copy of <code>self</code>, but with a specific hue.","","","","","","","","","Linear HSL and transparency.","CIE L*C*h° and transparency.","CIE Yxy and transparency.","HSLuv and transparency.","Linear HSV and transparency.","CIE XYZ and transparency.","CIE L*C*uv h°uv and transparency.","CIE L*a*b* and transparency.","CIE L*u*v* and transparency.","Linear HWB and transparency.","Linear HSL.","HSLuv with custom whitepoint.","Linear HSV.","Linear HWB.","CIE L*a*b*.","CIE L*C*h°.","CIE L*C*uv h°uv","CIE L*u*v*.","CIE XYZ.","CIE Yxy.","Removes the transparency from the color. If <code>Self::Color</code> has","","","","","","","","","","","","","","X is the scale of what can be seen as a response curve for …","x chromaticity co-ordinate derived from XYZ color space as …","Y is the luminance of the color, where 0.0 is black and …","y chromaticity co-ordinate derived from XYZ color space as …","Z is the scale of what can be seen as the blue …","Add the source and destination, according to …","A trait for colors that can be blended together.","A trait for custom blend functions.","The core color type. Typically <code>Self</code> for color types …","The destination alpha.","The destination color, or alpha.","A blending equation.","A pair of blending equations and corresponding parameters.","Create a color where each component is the largest of each …","Create a color where each component is the smallest of …","A simple 1.","One minus the destination alpha.","One minus the destination color, or alpha.","One minus the source alpha.","One minus the source color, or alpha.","A blending parameter.","A pair of source and destination parameters.","Premultiplied alpha wrapper.","Subtract the source from the destination, according to …","The source alpha.","The source color, or alpha.","Subtract the destination from the source, according to …","A simple 0.","","","","","","","","","","","The transparency component. 0.0 is fully transparent and …","The equation for the alpha component.","The parameters for the alpha component.","Apply this blend function to a pair of colors.","","","","Place <code>self</code> over only the visible parts of <code>other</code>.","Place <code>self</code> over only the visible parts of <code>other</code>.","Blend self, as the source color, with <code>destination</code>, using …","Blend self, as the source color, with <code>destination</code>, using …","","","","","","","","","","","Darken <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is …","Darken <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is …","","","","","","","","","","","The premultiplied color components (…","The equation for the color components.","The parameters for the color components.","","","Return the darkest parts of <code>self</code> and <code>other</code>.","Return the darkest parts of <code>self</code> and <code>other</code>.","","","","","","","The destination parameter.","Return the absolute difference between <code>self</code> and <code>other</code>. It…","Return the absolute difference between <code>self</code> and <code>other</code>. It…","","","","","Lighten <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is …","Lighten <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is …","","","","","","Similar to <code>difference</code>, but appears to result in a lower …","Similar to <code>difference</code>, but appears to result in a lower …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Create a pair of blending equations, where all the …","Create a pair of additive blending equations with the …","Convert the color from premultiplied alpha.","","Multiply <code>self</code> or <code>other</code> if other is dark, or screen them if …","Multiply <code>self</code> or <code>other</code> if other is dark, or screen them if …","Results in the parts of <code>self</code> that overlaps the visible …","Results in the parts of <code>self</code> that overlaps the visible …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Convert the color to premultiplied alpha.","","Return the lightest parts of <code>self</code> and <code>other</code>.","Return the lightest parts of <code>self</code> and <code>other</code>.","","","","","","Multiply <code>self</code> with <code>other</code>. This uses the alpha component to …","Multiply <code>self</code> with <code>other</code>. This uses the alpha component to …","Results in the parts of <code>self</code> that lies outside the visible …","Results in the parts of <code>self</code> that lies outside the visible …","Place <code>self</code> over <code>other</code>. This is the good old common alpha …","Place <code>self</code> over <code>other</code>. This is the good old common alpha …","Multiply <code>self</code> or <code>other</code> if other is dark, or screen them if …","Multiply <code>self</code> or <code>other</code> if other is dark, or screen them if …","Add <code>self</code> and <code>other</code>. This uses the alpha component to …","Add <code>self</code> and <code>other</code>. This uses the alpha component to …","","Make a color which is at least as light as <code>self</code> or <code>other</code>.","Make a color which is at least as light as <code>self</code> or <code>other</code>.","Lighten <code>other</code> if <code>self</code> is light, or darken <code>other</code> as if it’…","Lighten <code>other</code> if <code>self</code> is light, or darken <code>other</code> as if it’…","The source parameter.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Results in either <code>self</code> or <code>other</code>, where they do not overlap.","Results in either <code>self</code> or <code>other</code>, where they do not overlap.","Trait to convert color from one reference white point to …","Trait to convert color with one reference white point into …","Bradford chromatic adaptation method","Holds the matrix coefficients for the chromatic adaptation …","Chromatic adaptation methods implemented in the library","Generates a conversion matrix to convert the Xyz …","VonKries chromatic adaptation method","XyzScaling chromatic adaptation method","Convert the source color to the destination color using …","Convert the source color to the destination color using …","Convert the source color to the destination color using …","Convert the source color to the destination color using …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Generates a 3x3 transformation matrix to convert color …","Get the cone response functions for the chromatic …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","3x3 matrix for the inverse of the cone response domains","3x3 matrix for the cone response domains","","","","","","","","","A trait for converting one color from another, in a …","A trait for unchecked conversion of one color from another.","A trait for converting a color into another, in a possibly …","A trait for unchecked conversion of a color into another.","The error type for a color conversion that converted a …","A trait for fallible conversion of one color from another.","A trait for fallible conversion of a color into another.","","","","Consume this error and return the wrapped color","","","","Returns the argument unchanged.","Convert from T with values clamped to the color defined …","Convert from T. The resulting color might be invalid in …","Calls <code>U::from(self)</code>.","Convert into T with values clamped to the color defined …","","Convert into T. The resulting color might be invalid in …","","","","Convert from T, returning ok if the color is inside of its …","","Convert into T, returning ok if the color is inside of its …","","","","","","","A transfer function to and from linear space.","Convert the color component <code>x</code> from linear space.","Gamma encoding.","Convert the color component <code>x</code> into linear space.","Linear encoding","Pixel encodings and pixel format conversion.","The sRGB standard.","Represents <code>2.2f64</code>.","Gamma encoding.","The transfer function for gamma encoded colors.","A type level float constant.","The represented number.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","A generic standard with linear components.","Linear color component encoding.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","The guaranteed number of channels in the sequence.","The number of color channels.","Represents colors that can be serialized and deserialized …","A contiguous sequence of pixel channels.","A contiguous sequence of pixel channels with a known …","Convert to a mutable pointer.","Convert to a pointer.","Cast as a reference to raw color components.","Cast as a mutable reference to raw color components.","The length of the sequence.","Cast from a reference to raw color components.","Cast from a mutable reference to raw color components.","Convert from a pointer and a length.","Convert from a mutable pointer and a length.","Cast a slice of raw color components to a slice of colors.","Cast a mutable slice of raw color components to a mutable …","Convert into raw color components.","Cast a slice of colors to a slice of raw color components.","Cast a mutable slice of colors to a mutable slice of raw …","The sRGB color space.","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Generic trait for floating point numbers","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if the number is subnormal.","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns the <code>NaN</code> value.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","A linear interpolation between colors.","A domain range for gradient slices.","A slice of a Gradient that limits its domain.","An iterator over interpolated colors.","","","","","","","","","","","","","","","","","","","","","","","","","Get the limits of this gradient’s domain.","Get the limits of this gradient slice’s domain.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Get a color from the gradient. The color of the closest …","Get a color from the gradient slice. The color of the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","A collection of named gradient constants. Can be toggled …","Create a gradient of evenly spaced colors with the domain […","","","","","Slice this gradient to limit its domain.","Slice this gradient slice to further limit its domain. …","Take <code>n</code> evenly spaced colors from the gradient, as an …","Take <code>n</code> evenly spaced colors from the gradient slice, as an …","","","","","","","","","","","","","","","","","","","","","","Create a gradient of colors with custom spacing and …","New matplotlib colormap by Nathaniel J. Smith, Stefan van …","New matplotlib colormap by Nathaniel J. Smith, Stefan van …","New matplotlib colormap by Nathaniel J. Smith, Stefan van …","New matplotlib colormap by Nathaniel J. Smith, Stefan van …","Gamma 2.2 encoded luminance.","Gamma 2.2 encoded luminance with an alpha component.","Linear luminance.","Linear luminance with an alpha component.","Luminance.","A white point and a transfer function.","Luminance with an alpha component. See the <code>Lumaa</code> …","sRGB encoded luminance.","sRGB encoded luminance with an alpha component.","The transfer function for the luminance component.","The white point of the color space.","","","","","","","","The transparency component. 0.0 is fully transparent and …","The transparency component. 0.0 is fully transparent and …","The transparency component. 0.0 is fully transparent and …","The transparency component. 0.0 is fully transparent and …","Convert to a raw pixel format.","Convert to a raw pixel format.","","","","","","","The color.","The color.","The color.","The color.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Convert from a <code>(luma,)</code> tuple.","Convert luminance from a different encoding.","Convert from another component type.","Convert linear luminance to non-linear luminance.","","","Calls <code>U::from(self)</code>.","","","","Convert to a <code>(luma,)</code> tuple.","Convert the color to a different encoding.","Convert into another component type.","Convert the color to linear luminance.","","","","","The lightness of the color. 0.0 is black and 1.0 is white.","The lightness of the color. 0.0 is black and 1.0 is white.","The lightness of the color. 0.0 is black and 1.0 is white.","The lightness of the color. 0.0 is black and 1.0 is white.","Return the <code>luma</code> value maximum.","Return the <code>luma</code> value minimum.","","","","","","Create a luminance color.","","","The kind of RGB standard. sRGB is the default.","The kind of RGB standard. sRGB is the default.","The kind of RGB standard. sRGB is the default.","The kind of RGB standard. sRGB is the default.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a SVG/CSS3 color by name. Can be toggled with the …","Error type for parsing a string of hexadecimal characters …","Gamma 2.2 encoded sRGB.","Gamma 2.2 encoded sRGB with an alpha component.","The hex value was not in a valid 3 or 6 character format.","Linear sRGB.","Linear sRGB with an alpha component.","RGBA color packed into a 32-bit unsigned integer. Defaults …","An error occurred while parsing the string into a valid …","Represents the red, green and blue primaries of an RGB …","The primaries of the RGB color space.","Generic RGB.","Splits and combines RGB(A) types with some channel …","A set of primaries and a white point.","An RGB space and a transfer function.","Generic RGB with an alpha component. See the <code>Rgba</code> …","The RGB color space.","Non-linear sRGB.","Non-linear sRGB with an alpha component.","The transfer function for the color components.","The white point of the RGB color space.","","","","","","","","","","The transparency component. 0.0 is fully transparent and …","The transparency component. 0.0 is fully transparent and …","The transparency component. 0.0 is fully transparent and …","The transparency component. 0.0 is fully transparent and …","Convert to a raw pixel format.","Convert to a raw pixel format.","Primary blue.","The amount of blue light, where 0.0 is no blue light and …","The amount of blue light, where 0.0 is no blue light and …","The amount of blue light, where 0.0 is no blue light and …","The amount of blue light, where 0.0 is no blue light and …","","","","","","","The channel ordering for red, green, blue, and alpha …","Channel orderings for packed RGBA types.","","","","","","","The color.","The color.","The color.","The color.","The sRGB color packed into a <code>u32</code>.","Create an RGBA color from a <code>(u8, u8, u8, u8)</code> tuple.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Convert from a <code>(red, green, blue)</code> tuple.","Convert RGB from a different encoding.","Convert from another component type.","Convert linear RGB to non-linear RGB.","","","Convert from a packed <code>u32</code> with specifiable component …","Convert from a packed <code>u32</code> with specifiable component …","","","Primary green.","The amount of green light, where 0.0 is no green light and …","The amount of green light, where 0.0 is no green light and …","The amount of green light, where 0.0 is no green light and …","The amount of green light, where 0.0 is no green light and …","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Convert to a <code>(red, green, blue)</code> tuple.","Convert the color to a different encoding.","Convert into another component type.","Convert the color to linear RGB.","","Convert to a packed <code>u32</code> with with specifiable component …","Convert to a packed <code>u32</code> with with specifiable component …","","","","Return the <code>blue</code> value maximum.","Return the <code>green</code> value maximum.","Return the <code>red</code> value maximum.","Return the <code>blue</code> value minimum.","Return the <code>green</code> value minimum.","Return the <code>red</code> value minimum.","","","","","","Create an RGB color.","Primary red.","The amount of red light, where 0.0 is no red light and …","The amount of red light, where 0.0 is no red light and …","The amount of red light, where 0.0 is no red light and …","The amount of red light, where 0.0 is no red light and …","","","","Split RGBA components into a <code>(u8, u8, u8, u8)</code> tuple.","The kind of RGB standard. sRGB is the default.","The kind of RGB standard. sRGB is the default.","The kind of RGB standard. sRGB is the default.","The kind of RGB standard. sRGB is the default.","","","","","","","","","","","","","","","","","","","","","","","","RGBA color packed in ABGR order.","RGBA color packed in ARGB order.","RGBA color packed in BGRA order.","RGBA color packed in RGBA order.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","CIE standard illuminant A","CIE standard illuminant B","CIE standard illuminant C","CIE D series standard illuminant - D50","CIE D series standard illuminant - D50","CIE D series standard illuminant - D55","CIE D series standard illuminant - D55","CIE D series standard illuminant - D65","CIE D series standard illuminant - D65","CIE D series standard illuminant - D75","CIE D series standard illuminant - D75","CIE standard illuminant E","CIE fluorescent illuminant series - F11","CIE fluorescent illuminant series - F2","CIE fluorescent illuminant series - F7","WhitePoint defines the Xyz color co-ordinates for a given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the Xyz chromaticity co-ordinates for the white point.","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,70,77,42,45,39,0,0,0,0,0,0,59,0,0,0,0,0,13,17,1,5,9,11,12,13,14,15,16,17,18,19,20,21,24,25,26,9,13,14,15,16,19,20,21,24,25,26,1,5,9,11,12,13,14,15,16,17,18,19,20,1,5,9,11,12,13,14,15,16,17,18,19,20,21,24,25,26,1,1,5,5,9,9,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,24,24,25,25,26,26,1,1,5,5,9,9,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,24,24,25,25,26,26,157,158,159,160,161,162,163,164,165,166,167,168,1,1,5,9,11,12,13,14,15,16,17,18,19,20,1,5,9,11,12,13,14,15,16,17,18,19,20,13,17,12,0,1,5,9,11,12,13,14,15,16,17,18,19,20,21,24,25,26,1,5,9,11,12,13,14,15,16,17,18,19,20,21,24,25,26,14,15,18,0,36,1,5,9,11,12,13,14,15,16,17,18,19,20,36,1,5,9,11,12,13,14,15,16,17,18,19,20,1,5,9,11,12,13,14,15,16,17,18,19,20,21,24,25,26,1,5,9,11,12,13,14,15,16,17,18,19,20,21,24,25,26,157,158,159,160,161,162,163,164,165,166,167,168,1,39,1,13,16,17,19,20,39,1,13,16,17,19,20,0,0,42,42,1,5,9,11,12,13,14,15,16,17,18,19,20,21,24,25,26,1,5,9,11,12,13,14,15,16,17,18,19,20,21,24,25,26,1,5,9,11,12,13,14,15,16,17,18,19,20,21,24,25,26,1,5,9,11,12,13,14,15,16,17,18,19,20,21,24,25,26,1,1,45,45,1,1,13,13,16,16,17,17,19,19,20,20,1,1,13,13,16,16,17,17,19,19,20,20,0,1,5,9,11,12,13,14,15,16,17,18,19,20,21,21,24,24,25,25,26,26,0,1,1,1,5,9,11,12,13,14,15,16,17,18,19,20,21,24,25,26,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,9,9,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,24,24,25,25,26,26,1,5,9,11,12,13,14,15,16,17,18,19,20,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,63,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,9,11,12,13,14,15,16,17,18,19,20,21,24,25,26,1,1,23,1,1,1,1,1,21,24,25,26,1,69,13,14,70,5,9,11,12,13,14,15,16,17,18,19,20,73,1,5,9,11,12,13,14,15,16,17,18,0,70,70,70,70,70,70,70,70,70,70,5,9,11,12,14,15,18,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,9,9,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,21,21,24,24,24,24,25,25,25,25,26,26,26,26,1,5,9,11,12,13,14,15,16,17,18,19,20,21,24,25,26,1,5,9,11,12,13,14,15,16,17,18,19,20,21,24,25,26,76,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,9,11,12,13,14,15,16,17,18,19,20,1,1,1,1,1,1,1,1,36,1,5,9,11,12,13,14,15,16,17,18,19,20,9,13,14,15,16,17,18,42,1,5,9,11,12,13,14,15,16,17,18,19,20,42,1,5,9,11,12,13,14,15,16,17,18,19,20,5,0,20,13,17,1,13,17,12,14,15,18,14,37,9,13,14,15,16,17,18,5,20,5,9,11,16,16,11,12,19,20,19,20,19,13,17,1,13,17,12,14,15,18,9,13,14,15,16,17,18,5,20,5,9,11,16,16,11,12,19,20,19,20,19,77,1,5,9,11,12,13,14,15,16,17,18,19,20,1,1,13,13,16,16,17,17,19,19,20,20,1,1,13,13,16,16,17,17,19,19,20,20,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,9,11,12,13,14,15,16,17,18,19,20,59,59,1,5,9,11,12,13,14,15,16,17,18,19,20,21,24,25,26,9,13,14,15,16,19,20,21,24,25,26,0,45,1,5,9,11,14,15,18,45,1,5,9,11,14,15,18,5,9,11,84,1,5,9,11,12,14,15,18,59,1,5,9,11,12,13,14,15,16,17,18,19,20,5,11,12,1,1,5,5,9,9,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,24,24,25,25,26,26,1,1,5,5,9,9,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,24,24,25,25,26,26,21,24,25,26,1,5,9,11,12,13,14,15,16,17,18,19,20,21,24,25,26,21,24,25,26,21,24,25,26,21,24,25,26,21,24,25,26,21,24,25,26,59,59,1,5,9,11,12,13,14,15,16,17,18,19,20,21,24,25,26,1,5,9,11,12,13,14,15,16,17,18,19,20,1,5,9,11,12,13,14,15,16,17,18,19,20,21,24,25,26,1,5,9,11,12,13,14,15,16,17,18,19,20,21,24,25,26,1,5,9,11,12,13,14,15,16,17,18,19,20,21,24,25,26,16,1,5,9,11,12,13,14,15,16,17,18,19,20,21,24,25,26,9,13,14,15,16,19,20,21,24,25,26,16,11,0,9,13,14,15,16,19,20,12,59,1,5,9,11,12,13,14,15,16,17,18,19,20,84,1,5,9,11,12,14,15,18,1,1,1,1,1,1,1,1,1,1,5,9,11,12,13,14,15,16,19,20,59,1,5,9,11,12,13,14,15,16,17,18,19,20,19,20,19,20,19,93,0,0,67,95,95,0,0,93,93,95,95,95,95,95,0,0,0,93,95,95,93,95,55,92,93,94,95,55,55,55,55,55,55,92,92,91,92,55,55,67,67,67,67,92,93,94,95,55,92,93,94,95,55,67,67,92,93,94,95,55,92,93,94,95,55,55,92,92,55,55,67,67,55,55,55,55,55,55,94,67,67,55,55,55,55,67,67,92,93,94,95,55,67,67,92,93,94,95,55,92,93,94,95,55,55,92,92,67,55,67,67,67,67,92,93,94,95,55,92,93,94,95,55,92,93,94,95,55,67,55,67,67,55,55,55,55,55,67,67,67,67,67,67,67,67,67,67,55,67,67,67,67,94,55,55,55,55,92,93,94,95,55,92,93,94,95,55,92,93,94,95,55,92,93,94,95,55,92,93,94,95,55,55,67,67,0,0,100,0,0,0,100,100,96,96,97,97,100,99,100,99,100,99,100,99,27,27,100,100,99,100,99,100,99,99,99,100,99,100,99,100,99,100,99,0,0,0,0,0,0,0,88,88,88,88,88,88,88,88,102,103,88,104,88,60,88,88,88,106,88,107,88,88,0,0,0,0,0,169,0,169,0,0,0,0,0,0,0,109,108,110,111,108,110,111,108,110,111,108,110,111,108,110,111,108,110,111,108,110,111,108,110,111,110,108,110,111,108,110,111,108,110,111,110,108,110,111,108,110,111,108,110,111,108,110,111,108,110,111,0,0,66,112,66,112,66,112,66,112,66,112,66,112,66,112,66,112,112,66,112,66,112,66,112,112,66,112,66,112,66,112,66,112,66,112,115,33,0,0,0,34,34,33,33,34,33,33,34,34,33,33,33,33,33,0,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,0,0,121,122,124,125,121,122,124,125,121,122,124,125,121,122,124,125,121,122,124,125,121,121,121,121,122,125,121,122,125,121,122,122,124,125,121,121,121,121,121,122,125,122,124,125,121,122,124,125,121,122,124,125,121,124,0,122,124,124,121,124,122,125,122,125,122,124,125,121,122,124,125,121,122,124,125,121,122,124,125,121,122,124,125,121,121,122,0,0,0,0,0,0,0,0,0,0,0,0,0,57,57,56,56,56,56,56,56,56,170,171,172,173,56,56,56,56,56,56,56,56,170,171,172,173,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,174,175,176,56,56,56,56,56,56,56,56,56,56,56,174,175,176,56,56,56,56,56,56,56,56,56,56,56,56,56,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,0,0,0,136,0,177,0,0,0,0,0,6,0,0,6,177,58,58,134,58,136,58,58,58,58,135,140,139,178,58,58,179,133,138,180,58,134,58,136,134,58,136,134,0,58,58,134,58,134,58,135,140,139,178,134,137,58,58,58,58,58,58,58,58,58,58,134,58,134,58,58,58,136,136,135,135,133,140,140,138,139,139,134,134,134,134,58,58,58,58,136,136,136,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,135,58,58,58,179,133,138,180,58,134,58,58,136,134,58,136,134,58,136,58,58,58,58,58,135,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,179,133,138,180,58,58,136,58,137,133,138,180,58,58,58,58,58,134,58,136,134,58,136,58,134,58,136,134,58,136,134,58,136,58,58,58,0,0,0,0,181,182,183,184,181,182,183,184,181,182,183,184,181,182,183,184,181,182,183,184,181,182,183,184,181,182,183,184,181,182,183,184,181,182,183,184,181,182,183,184,181,182,183,184,181,182,183,184,181,182,183,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,144,145,146,147,62,148,149,150,151,152,153,154,155,156,143,144,145,146,147,62,148,149,150,151,152,153,154,155,156,143,144,145,146,147,62,148,149,150,151,152,153,154,155,156,143,144,145,146,147,62,148,149,150,151,152,153,154,155,156,143,144,145,146,147,62,148,149,150,151,152,153,154,155,156,143,144,145,146,147,62,148,149,150,151,152,153,154,155,156,143,144,145,146,147,62,148,149,150,151,152,153,154,155,156,143,144,145,146,147,62,148,149,150,151,152,153,154,155,156,10,143,144,145,146,147,62,148,149,150,151,152,153,154,155,156,143,144,145,146,147,62,148,149,150,151,152,153,154,155,156,143,144,145,146,147,62,148,149,150,151,152,153,154,155,156,143,144,145,146,147,62,148,149,150,151,152,153,154,155,156,143,144,145,146,147,62,148,149,150,151,152,153,154,155,156,143,144,145,146,147,62,148,149,150,151,152,153,154,155,156,143,144,145,146,147,62,148,149,150,151,152,153,154,155,156,143,144,145,146,147,62,148,149,150,151,152,153,154,155,156,143,144,145,146,147,62,148,149,150,151,152,153,154,155,156],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[1,[-1,-2]],[1,[-1,-2]]],2,[[4,[],[[3,[]]]]],4],[[[5,[-1,-2]],[5,[-1,-2]]],2,[6,7],[8,4]],[[[9,[-1,-2]],[9,[-1,-2]]],2,[10,7],[8,4]],[[[11,[-1,-2]],[11,[-1,-2]]],2,[6,7],[8,4]],[[[12,[-1,-2]],[12,[-1,-2]],-3],2,[6,7],[8,4],[]],[[[13,[-1,-2]],[13,[-1,-2]]],2,[10,7],[8,4]],[[[14,[-1,-2]],[14,[-1,-2]]],2,[10,7],[8,4]],[[[15,[-1,-2]],[15,[-1,-2]]],2,[10,7],[8,4]],[[[16,[-1,-2]],[16,[-1,-2]]],2,[10,7],[8,4]],[[[17,[-1]],[17,[-1]]],2,[8,4]],[[[18,[-1]],[18,[-1]]],2,[8,4]],[[[19,[-1,-2]],[19,[-1,-2]]],2,[10,7],[8,4]],[[[20,[-1,-2]],[20,[-1,-2]]],2,[10,7],[8,4]],[[[21,[-1]],[21,[-1]]],2,[22,23,4]],[[[24,[-1]],[24,[-1]]],2,[22,23,4]],[[[25,[-1]],[25,[-1]]],2,[22,23,4]],[[[26,[-1]],[26,[-1]]],2,[22,23,4]],[[[9,[-1,-2]],[9,[-1,-2]]],2,[10,7],[8,4]],[[[13,[-1,-2]],[13,[-1,-2]]],2,[10,7],[8,4]],[[[14,[-1,-2]],[14,[-1,-2]]],2,[10,7],[8,4]],[[[15,[-1,-2]],[15,[-1,-2]]],2,[10,7],[8,4]],[[[16,[-1,-2]],[16,[-1,-2]]],2,[10,7],[8,4]],[[[19,[-1,-2]],[19,[-1,-2]]],2,[10,7],[8,4]],[[[20,[-1,-2]],[20,[-1,-2]]],2,[10,7],[8,4]],[[[21,[-1]],[21,[-1]]],2,[22,23,4]],[[[24,[-1]],[24,[-1]]],2,[22,23,4]],[[[25,[-1]],[25,[-1]]],2,[22,23,4]],[[[26,[-1]],[26,[-1]]],2,[22,23,4]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[[1,[-2,-1]],-1],-3,[28,29],[[28,[-1]]],[]],[[[1,[-1,-2]],[1,[-1,-2]]],-3,28,22,[]],[[[5,[-1,-2]],-2],-3,6,8,[]],[[[5,[-1,-2]],[5,[-1,-2]]],-3,6,8,[]],[[[9,[-1,-2]],-2],-3,10,8,[]],[[[9,[-1,-2]],[9,[-1,-2]]],-3,10,8,[]],[[[11,[-1,-2]],-2],-3,6,8,[]],[[[11,[-1,-2]],[11,[-1,-2]]],-3,6,8,[]],[[[12,[-1,-2]],[12,[-1,-2]]],-3,6,8,[]],[[[12,[-1,-2]],-2],-3,6,8,[]],[[[13,[-1,-2]],[13,[-1,-2]]],-3,10,8,[]],[[[13,[-1,-2]],-2],-3,10,8,[]],[[[14,[-1,-2]],[14,[-1,-2]]],-3,10,8,[]],[[[14,[-1,-2]],-2],-3,10,8,[]],[[[15,[-1,-2]],[15,[-1,-2]]],-3,10,8,[]],[[[15,[-1,-2]],-2],-3,10,8,[]],[[[16,[-1,-2]],-2],-3,10,8,[]],[[[16,[-1,-2]],[16,[-1,-2]]],-3,10,8,[]],[[[17,[-1]],[17,[-1]]],-2,8,[]],[[[17,[-1]],-1],-2,8,[]],[[[18,[-1]],-1],-2,8,[]],[[[18,[-1]],[18,[-1]]],-2,8,[]],[[[19,[-1,-2]],-2],-3,10,8,[]],[[[19,[-1,-2]],[19,[-1,-2]]],-3,10,8,[]],[[[20,[-1,-2]],[20,[-1,-2]]],-3,10,8,[]],[[[20,[-1,-2]],-2],-3,10,8,[]],[[[21,[-1]],-1],[[21,[-1]]],22],[[[21,[-1]],[21,[-1]]],[[21,[-1]]],22],[[[24,[-1]],-1],[[24,[-1]]],22],[[[24,[-1]],[24,[-1]]],[[24,[-1]]],22],[[[25,[-1]],-1],[[25,[-1]]],22],[[[25,[-1]],[25,[-1]]],[[25,[-1]]],22],[[[26,[-1]],[26,[-1]]],[[26,[-1]]],22],[[[26,[-1]],-1],[[26,[-1]]],22],[[[1,[-1,-2]],[1,[-1,-2]]],30,31,[22,31]],[[[1,[-2,-1]],-1],30,[31,32],[[31,[-1]]]],[[[5,[-1,-2]],[5,[-1,-2]]],30,6,[8,31]],[[[5,[-1,-2]],-2],30,6,[8,31]],[[[9,[-1,-2]],-2],30,10,[8,31]],[[[9,[-1,-2]],[9,[-1,-2]]],30,10,[8,31]],[[[11,[-1,-2]],[11,[-1,-2]]],30,6,[8,31]],[[[11,[-1,-2]],-2],30,6,[8,31]],[[[12,[-1,-2]],-2],30,6,[8,31]],[[[12,[-1,-2]],[12,[-1,-2]]],30,6,[8,31]],[[[13,[-1,-2]],-2],30,10,[8,31]],[[[13,[-1,-2]],[13,[-1,-2]]],30,10,[8,31]],[[[14,[-1,-2]],-2],30,10,[8,31]],[[[14,[-1,-2]],[14,[-1,-2]]],30,10,[8,31]],[[[15,[-1,-2]],[15,[-1,-2]]],30,10,[8,31]],[[[15,[-1,-2]],-2],30,10,[8,31]],[[[16,[-1,-2]],[16,[-1,-2]]],30,10,[8,31]],[[[16,[-1,-2]],-2],30,10,[8,31]],[[[17,[-1]],[17,[-1]]],30,[8,31]],[[[17,[-1]],-1],30,[8,31]],[[[18,[-1]],[18,[-1]]],30,[8,31]],[[[18,[-1]],-1],30,[8,31]],[[[19,[-1,-2]],-2],30,10,[8,31]],[[[19,[-1,-2]],[19,[-1,-2]]],30,10,[8,31]],[[[20,[-1,-2]],-2],30,10,[8,31]],[[[20,[-1,-2]],[20,[-1,-2]]],30,10,[8,31]],[[[21,[-1]],-1],30,[22,31]],[[[21,[-1]],[21,[-1]]],30,[22,31]],[[[24,[-1]],[24,[-1]]],30,[22,31]],[[[24,[-1]],-1],30,[22,31]],[[[25,[-1]],[25,[-1]]],30,[22,31]],[[[25,[-1]],-1],30,[22,31]],[[[26,[-1]],-1],30,[22,31]],[[[26,[-1]],[26,[-1]]],30,[22,31]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[1,[-2,-1]]],-3,[],[[33,[-1]]],[[34,[-1]],35]],[[[5,[-1,-2]]],-3,6,8,[[34,[-2]],35]],[[[9,[-1,-2]]],-3,10,8,[[34,[-2]],35]],[[[11,[-1,-2]]],-3,6,8,[[34,[-2]],35]],[[[12,[-1,-2]]],-3,6,8,[[34,[-2]],35]],[[[13,[-1,-2]]],-3,10,8,[[34,[-2]],35]],[[[14,[-1,-2]]],-3,10,8,[[34,[-2]],35]],[[[15,[-1,-2]]],-3,10,8,[[34,[-2]],35]],[[[16,[-1,-2]]],-3,10,8,[[34,[-2]],35]],[[[17,[-1]]],-2,8,[[34,[-1]],35]],[[[18,[-1]]],-2,8,[[34,[-1]],35]],[[[19,[-1,-2]]],-3,10,8,[[34,[-2]],35]],[[[20,[-1,-2]]],-3,10,8,[[34,[-2]],35]],[[[1,[-2,-1]]],-3,[],[[33,[-1]]],[[34,[-1]],35]],[[[5,[-1,-2]]],-3,6,8,[[34,[-2]],35]],[[[9,[-1,-2]]],-3,10,8,[[34,[-2]],35]],[[[11,[-1,-2]]],-3,6,8,[[34,[-2]],35]],[[[12,[-1,-2]]],-3,6,8,[[34,[-2]],35]],[[[13,[-1,-2]]],-3,10,8,[[34,[-2]],35]],[[[14,[-1,-2]]],-3,10,8,[[34,[-2]],35]],[[[15,[-1,-2]]],-3,10,8,[[34,[-2]],35]],[[[16,[-1,-2]]],-3,10,8,[[34,[-2]],35]],[[[17,[-1]]],-2,8,[[34,[-1]],35]],[[[18,[-1]]],-2,8,[[34,[-1]],35]],[[[19,[-1,-2]]],-3,10,8,[[34,[-2]],35]],[[[20,[-1,-2]]],-3,10,8,[[34,[-2]],35]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[36,36],[[[1,[-1,-2]]],[[1,[-1,-2]]],36,37],[[[5,[-1,-2]]],[[5,[-1,-2]]],6,8],[[[9,[-1,-2]]],[[9,[-1,-2]]],10,8],[[[11,[-1,-2]]],[[11,[-1,-2]]],6,8],[[[12,[-1,-2]]],[[12,[-1,-2]]],6,8],[[[13,[-1,-2]]],[[13,[-1,-2]]],10,8],[[[14,[-1,-2]]],[[14,[-1,-2]]],10,8],[[[15,[-1,-2]]],[[15,[-1,-2]]],10,8],[[[16,[-1,-2]]],[[16,[-1,-2]]],10,8],[[[17,[-1]]],[[17,[-1]]],8],[[[18,[-1]]],[[18,[-1]]],8],[[[19,[-1,-2]]],[[19,[-1,-2]]],10,8],[[[20,[-1,-2]]],[[20,[-1,-2]]],10,8],[36,30],[[[1,[-1,-2]]],30,36,37],[[[5,[-1,-2]]],30,6,8],[[[9,[-1,-2]]],30,10,8],[[[11,[-1,-2]]],30,6,8],[[[12,[-1,-2]]],30,6,8],[[[13,[-1,-2]]],30,10,8],[[[14,[-1,-2]]],30,10,8],[[[15,[-1,-2]]],30,10,8],[[[16,[-1,-2]]],30,10,8],[[[17,[-1]]],30,8],[[[18,[-1]]],30,8],[[[19,[-1,-2]]],30,10,8],[[[20,[-1,-2]]],30,10,8],[[[1,[-1,-2]]],[[1,[-1,-2]]],29,29],[[[5,[-1,-2]]],[[5,[-1,-2]]],6,8],[[[9,[-1,-2]]],[[9,[-1,-2]]],10,8],[[[11,[-1,-2]]],[[11,[-1,-2]]],6,8],[[[12,[-1,-2]]],[[12,[-1,-2]]],6,8],[[[13,[-1,-2]]],[[13,[-1,-2]]],10,8],[[[14,[-1,-2]]],[[14,[-1,-2]]],10,8],[[[15,[-1,-2]]],[[15,[-1,-2]]],10,8],[[[16,[-1,-2]]],[[16,[-1,-2]]],10,8],[[[17,[-1]]],[[17,[-1]]],8],[[[18,[-1]]],[[18,[-1]]],8],[[[19,[-1,-2]]],[[19,[-1,-2]]],10,8],[[[20,[-1,-2]]],[[20,[-1,-2]]],10,8],[[[21,[-1]]],[[21,[-1]]],[29,22]],[[[24,[-1]]],[[24,[-1]]],[29,22]],[[[25,[-1]]],[[25,[-1]]],[29,22]],[[[26,[-1]]],[[26,[-1]]],[29,22]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[39,[],[[38,[-1]]]],[39,[],[[38,[-1]]]],-2],[[39,[],[[38,[-1]]]]],[],[[41,[-1,-1],[[40,[-1]]]]]],[[[1,[-2,-1]],[1,[-2,-1]],-3],[[1,[-2,-1]]],29,[[39,[],[[38,[-1]]]]],[[41,[-1,-1],[[40,[-1]]]]]],[[[13,[-1,-2]],[13,[-1,-2]],-3],[[13,[-1,-2]]],10,8,[[41,[-2,-2],[[40,[-2]]]]]],[[[16,[-1,-2]],[16,[-1,-2]],-3],[[16,[-1,-2]]],10,8,[[41,[-2,-2],[[40,[-2]]]]]],[[[17,[-1]],[17,[-1]],-2],[[17,[-1]]],8,[[41,[-1,-1],[[40,[-1]]]]]],[[[19,[-1,-2]],[19,[-1,-2]],-3],[[19,[-1,-2]]],10,8,[[41,[-2,-2],[[40,[-2]]]]]],[[[20,[-1,-2]],[20,[-1,-2]],-3],[[20,[-1,-2]]],10,8,[[41,[-2,-2],[[40,[-2]]]]]],[[[39,[],[[38,[-1]]]],-2],[[39,[],[[38,[-1]]]]],[],[[41,[-1],[[40,[-1]]]]]],[[[1,[-2,-1]],-3],[[1,[-2,-1]]],29,[[39,[],[[38,[-1]]]]],[[41,[-1],[[40,[-1]]]]]],[[[13,[-1,-2]],-3],[[13,[-1,-2]]],10,8,[[41,[-2],[[40,[-2]]]]]],[[[16,[-1,-2]],-3],[[16,[-1,-2]]],10,8,[[41,[-2],[[40,[-2]]]]]],[[[17,[-1]],-2],[[17,[-1]]],8,[[41,[-1],[[40,[-1]]]]]],[[[19,[-1,-2]],-3],[[19,[-1,-2]]],10,8,[[41,[-2],[[40,[-2]]]]]],[[[20,[-1,-2]],-3],[[20,[-1,-2]]],10,8,[[41,[-2],[[40,[-2]]]]]],[[-1,-1],-1,[]],0,[[[42,[],[[38,[-1]]]],-1],[[42,[],[[38,[-1]]]]],22],[[[42,[],[[38,[-1]]]],-1],[[42,[],[[38,[-1]]]]],22],[[],[[1,[-1,-2]]],43,37],[[],[[5,[-1,-2]]],6,8],[[],[[9,[-1,-2]]],10,8],[[],[[11,[-1,-2]]],6,8],[[],[[12,[-1,-2]]],6,8],[[],[[13,[-1,-2]]],10,8],[[],[[14,[-1,-2]]],10,8],[[],[[15,[-1,-2]]],10,8],[[],[[16,[-1,-2]]],10,8],[[],[[17,[-1]]],8],[[],[[18,[-1]]],8],[[],[[19,[-1,-2]]],10,8],[[],[[20,[-1,-2]]],10,8],[[],[[21,[-1]]],[43,22]],[[],[[24,[-1]]],[43,22]],[[],[[25,[-1]]],[43,22]],[[],[[26,[-1]]],[43,22]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[]],[[],-1,[]],[[],-1,[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[[1,[-1,-2]]],-1,[],[]],[[[1,[-1,-2]]],-1,[],[]],[[[45,[],[[38,[-1]]]],-1],[[45,[],[[38,[-1]]]]],22],[[[45,[],[[38,[-1]]]],-1],[[45,[],[[38,[-1]]]]],22],[[[1,[-1,-2]],[1,[-1,-2]]],-3,46,22,[]],[[[1,[-2,-1]],-1],-3,[46,29],[[46,[-1]]],[]],[[[13,[-1,-2]],[13,[-1,-2]]],-3,10,8,[]],[[[13,[-1,-2]],-2],-3,10,8,[]],[[[16,[-1,-2]],-2],-3,10,8,[]],[[[16,[-1,-2]],[16,[-1,-2]]],-3,10,8,[]],[[[17,[-1]],-1],-2,8,[]],[[[17,[-1]],[17,[-1]]],-2,8,[]],[[[19,[-1,-2]],[19,[-1,-2]]],-3,10,8,[]],[[[19,[-1,-2]],-2],-3,10,8,[]],[[[20,[-1,-2]],[20,[-1,-2]]],-3,10,8,[]],[[[20,[-1,-2]],-2],-3,10,8,[]],[[[1,[-1,-2]],[1,[-1,-2]]],30,47,[22,47]],[[[1,[-2,-1]],-1],30,[47,32],[[47,[-1]]]],[[[13,[-1,-2]],-2],30,10,[8,47]],[[[13,[-1,-2]],[13,[-1,-2]]],30,10,[8,47]],[[[16,[-1,-2]],[16,[-1,-2]]],30,10,[8,47]],[[[16,[-1,-2]],-2],30,10,[8,47]],[[[17,[-1]],-1],30,[8,47]],[[[17,[-1]],[17,[-1]]],30,[8,47]],[[[19,[-1,-2]],[19,[-1,-2]]],30,10,[8,47]],[[[19,[-1,-2]],-2],30,10,[8,47]],[[[20,[-1,-2]],[20,[-1,-2]]],30,10,[8,47]],[[[20,[-1,-2]],-2],30,10,[8,47]],0,[[[1,[-1,-2]],[1,[-1,-2]]],2,7,7],[[[5,[-1,-2]],[5,[-1,-2]]],2,6,[8,7]],[[[9,[-1,-2]],[9,[-1,-2]]],2,10,[8,7]],[[[11,[-1,-2]],[11,[-1,-2]]],2,6,[8,7]],[[[12,[-1,-2]],[12,[-1,-2]]],2,6,[8,7]],[[[13,[-1,-2]],[13,[-1,-2]]],2,10,[8,7]],[[[14,[-1,-2]],[14,[-1,-2]]],2,10,[8,7]],[[[15,[-1,-2]],[15,[-1,-2]]],2,10,[8,7]],[[[16,[-1,-2]],[16,[-1,-2]]],2,10,[8,7]],[[[17,[-1]],[17,[-1]]],2,[8,7]],[[[18,[-1]],[18,[-1]]],2,[8,7]],[[[19,[-1,-2]],[19,[-1,-2]]],2,10,[8,7]],[[[20,[-1,-2]],[20,[-1,-2]]],2,10,[8,7]],[[[21,[-1]],-1],2,[22,23]],[[[21,[-1]],[21,[-1]]],2,[22,23]],[[[24,[-1]],-1],2,[22,23]],[[[24,[-1]],[24,[-1]]],2,[22,23]],[[[25,[-1]],[25,[-1]]],2,[22,23]],[[[25,[-1]],-1],2,[22,23]],[[[26,[-1]],-1],2,[22,23]],[[[26,[-1]],[26,[-1]]],2,[22,23]],0,[[[1,[-1,-2]],48],49,50,50],[[[1,[-1,-2]],48],49,51,51],[[[1,[-1,-2]],48],49,52,52],[[[5,[-1,-2]],48],49,[6,52],[8,52]],[[[9,[-1,-2]],48],49,[10,52],[8,52]],[[[11,[-1,-2]],48],49,[6,52],[8,52]],[[[12,[-1,-2]],48],49,[6,52],[8,52]],[[[13,[-1,-2]],48],49,[10,52],[8,52]],[[[14,[-1,-2]],48],49,[10,52],[8,52]],[[[15,[-1,-2]],48],49,[10,52],[8,52]],[[[16,[-1,-2]],48],49,[10,52],[8,52]],[[[17,[-1]],48],49,[8,52]],[[[18,[-1]],48],49,[8,52]],[[[19,[-1,-2]],48],49,[10,52],[8,52]],[[[20,[-1,-2]],48],49,[10,52],[8,52]],[[[21,[-1]],48],49,[52,22]],[[[24,[-1]],48],49,[52,22]],[[[25,[-1]],48],49,[52,22]],[[[26,[-1]],48],49,[52,22]],[[[30,[-1,-1,-1,-2]]],[[1,[[19,[-3,-1]],-2]]],8,37,10],[[[30,[-1,-1,-2,-3]]],[[1,[[18,[-1]],-3]]],8,[[53,[[26,[-1]]]]],37],[[[30,[-1,-1,-1,-2]]],[[1,[[17,[-1]],-2]]],8,37],[54,-1,[]],[-1,-1,[]],[-1,[[1,[-1,-2]]],[],37],[[[30,[-1,-1,-1,-2]]],[[1,[[16,[-3,-1]],-2]]],8,37,10],[[[55,[-2,-1]]],[[1,[-2,-1]]],22,[[39,[],[[38,[-1]]]]]],[[[30,[-2,-1,-1,-3]]],[[1,[[5,[-4,-1]],-3]]],8,[[53,[[25,[-1]]]]],37,6],[[[30,[-1,-1,-2,-3]]],[[1,[[15,[-4,-1]],-3]]],8,[[53,[[24,[-1]]]]],37,10],[[[30,[-1,-1,-1,-2]]],[[1,[[20,[-3,-1]],-2]]],8,37,10],[[[30,[-2,-1,-1,-3]]],[[1,[[11,[-4,-1]],-3]]],8,[[53,[[25,[-1]]]]],37,6],[[[30,[-1,-2]]],[[1,[[56,[-3,-1]],-2]]],37,37,57],[[[30,[-1,-1,-1,-2]]],[[1,[[13,[-3,-1]],-2]]],8,37,10],[[[30,[-2,-1,-1,-3]]],[[1,[[12,[-4,-1]],-3]]],8,[[53,[[25,[-1]]]]],37,6],[[[30,[-2,-1,-1,-3]]],[[1,[[9,[-4,-1]],-3]]],8,[[53,[[24,[-1]]]]],37,10],[[[30,[-1,-1,-1,-2]]],[[1,[[58,[-3,-1]],-2]]],37,37,6],[[[30,[-1,-1,-2,-3]]],[[1,[[14,[-4,-1]],-3]]],8,[[53,[[21,[-1]]]]],37,10],[[[30,[-2,-1,-1]]],[[5,[-3,-1]]],8,[[53,[[25,[-1]]]]],6],[-1,-1,[]],[[[30,[-2,-1,-1]]],[[9,[-3,-1]]],8,[[53,[[24,[-1]]]]],10],[-1,-1,[]],[-1,-1,[]],[[[30,[-2,-1,-1]]],[[11,[-3,-1]]],8,[[53,[[25,[-1]]]]],6],[-1,-1,[]],[[[30,[-2,-1,-1]]],[[12,[-3,-1]]],8,[[53,[[25,[-1]]]]],6],[[[30,[-1,-1,-1]]],[[13,[-2,-1]]],8,10],[-1,-1,[]],[[[30,[-1,-1,-2]]],[[14,[-3,-1]]],8,[[53,[[21,[-1]]]]],10],[-1,-1,[]],[[[30,[-1,-1,-2]]],[[15,[-3,-1]]],8,[[53,[[24,[-1]]]]],10],[-1,-1,[]],[[[30,[-1,-1,-1]]],[[16,[-2,-1]]],8,10],[-1,-1,[]],[[[30,[-1,-1,-1]]],[[17,[-1]]],8],[-1,-1,[]],[[[30,[-1,-1,-2]]],[[18,[-1]]],8,[[53,[[26,[-1]]]]]],[-1,-1,[]],[[[30,[-1,-1,-1]]],[[19,[-2,-1]]],8,10],[-1,-1,[]],[-1,-1,[]],[[[30,[-1,-1,-1]]],[[20,[-2,-1]]],8,10],[-1,-1,[]],[-1,[[21,[-1]]],22],[-1,[[24,[-1]]],22],[-1,-1,[]],[-1,[[25,[-1]]],22],[-1,-1,[]],[-1,[[26,[-1]]],22],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-2,[[1,[-3,-1]]],37,[[59,[-1]]],[]],[[[19,[-1]]],[[5,[-2,-1]]],[8,8],6],[[[17,[-1]]],[[5,[-2,-1]]],[8,8],6],[[[5,[-1,-2]]],[[5,[-3,-2]]],6,8,6],[[[16,[-1]]],[[5,[-2,-1]]],[8,8],6],[[[15,[-1]]],[[5,[-2,-1]]],[8,8],6],[[[9,[-1]]],[[5,[-2,-1]]],[8,8],6],[[[14,[-1]]],[[5,[-2,-1]]],[8,8],6],[[[58,[-1,-2]]],[[5,[-1,-2]]],6,8],[[[13,[-1]]],[[5,[-2,-1]]],[8,8],6],[[[18,[-1]]],[[5,[-2,-1]]],[8,8],6],[[[20,[-1]]],[[5,[-2,-1]]],[8,8],6],[[[12,[-1,-2]]],[[5,[-1,-2]]],6,[8,8]],[[[1,[-3,-4]]],[[5,[-1,-2]]],6,[8,8],[[60,[[5,[-1,-2]]]]],37],[[[56,[-1,-2]]],[[5,[-3,-2]]],[[57,[],[[61,[]]]]],[8,8],6],[[[11,[-1,-2]]],[[5,[-1,-2]]],6,8],[[[20,[-1,-2]]],[[9,[-1,-2]]],[10,10],[8,8]],[[[16,[-1,-2]]],[[9,[-1,-2]]],[10,10],[8,8]],[[[14,[-1,-2]]],[[9,[-1,-2]]],[10,10],[8,8]],[[[15,[-1,-2]]],[[9,[-1,-2]]],10,8],[[[58,[-1,-2]]],[[9,[-3,-2]]],6,[8,8],[10,10]],[[[9,[-1,-2]]],[[9,[-1,-2]]],10,8],[[[1,[-3,-4]]],[[9,[-1,-2]]],[10,10],[8,8],[[60,[[9,[-1,-2]]]]],37],[[[19,[-1,-2]]],[[9,[-1,-2]]],[10,10],[8,8]],[[[13,[-1,-2]]],[[9,[-1,-2]]],[10,10],[8,8]],[[[17,[-1]]],[[9,[-2,-1]]],[8,8],[10,10]],[[[11,[-1,-2]]],[[9,[-3,-2]]],6,[8,8],[10,10]],[[[18,[-1]]],[[9,[-2,-1]]],[8,8],[10,10]],[[[5,[-1,-2]]],[[9,[-3,-2]]],6,[8,8],[10,10]],[[[56,[-2,-3]]],[[9,[-1,-3]]],[10,10],[[57,[],[[61,[-1]]]]],[8,8]],[[[12,[-1,-2]]],[[9,[-3,-2]]],6,[8,8],[10,10]],[[[12,[-1,-2]]],[[11,[-1,-2]]],6,8],[[[13,[-1]]],[[11,[-2,-1]]],[8,8],6],[[[56,[-1,-2]]],[[11,[-3,-2]]],[[57,[],[[61,[]]]]],[8,8],6],[[[18,[-1]]],[[11,[-2,-1]]],[8,8],6],[[[11,[-1,-2]]],[[11,[-3,-2]]],6,8,6],[[[20,[-1]]],[[11,[-2,-1]]],[8,8],6],[[[14,[-1]]],[[11,[-2,-1]]],[8,8],6],[[[5,[-1,-2]]],[[11,[-1,-2]]],6,8],[[[17,[-1]]],[[11,[-2,-1]]],[8,8],6],[[[19,[-1]]],[[11,[-2,-1]]],[8,8],6],[[[58,[-1,-2]]],[[11,[-1,-2]]],6,8],[[[16,[-1]]],[[11,[-2,-1]]],[8,8],6],[[[1,[-3,-4]]],[[11,[-1,-2]]],6,[8,8],[[60,[[11,[-1,-2]]]]],37],[[[15,[-1]]],[[11,[-2,-1]]],[8,8],6],[[[9,[-1]]],[[11,[-2,-1]]],[8,8],6],[[[19,[-1]]],[[12,[-2,-1]]],[8,8],6],[[[13,[-1]]],[[12,[-2,-1]]],[8,8],6],[[[17,[-1]]],[[12,[-2,-1]]],[8,8],6],[[[20,[-1]]],[[12,[-2,-1]]],[8,8],6],[[[1,[-3,-4]]],[[12,[-1,-2]]],6,[8,8],[[60,[[12,[-1,-2]]]]],37],[[[14,[-1]]],[[12,[-2,-1]]],[8,8],6],[[[58,[-1,-2]]],[[12,[-1,-2]]],6,[8,8]],[[[12,[-1,-2]]],[[12,[-3,-2]]],6,8,6],[[[9,[-1]]],[[12,[-2,-1]]],[8,8],6],[[[56,[-1,-2]]],[[12,[-3,-2]]],[[57,[],[[61,[]]]]],[8,8],6],[[[11,[-1,-2]]],[[12,[-1,-2]]],6,8],[[[18,[-1]]],[[12,[-2,-1]]],[8,8],6],[[[15,[-1]]],[[12,[-2,-1]]],[8,8],6],[[[16,[-1]]],[[12,[-2,-1]]],[8,8],6],[[[5,[-1,-2]]],[[12,[-1,-2]]],6,[8,8]],[[[13,[-1,-2]]],[[13,[-1,-2]]],10,8],[[[12,[-1,-2]]],[[13,[-3,-2]]],6,[8,8],[10,10]],[[[56,[-2,-3]]],[[13,[-1,-3]]],[10,10],[[57,[],[[61,[-1]]]]],[8,8]],[[[15,[-1,-2]]],[[13,[-1,-2]]],[10,10],[8,8]],[[[18,[-1]]],[[13,[-2,-1]]],[8,8],[10,10]],[[[9,[-1,-2]]],[[13,[-1,-2]]],[10,10],[8,8]],[[[14,[-1,-2]]],[[13,[-1,-2]]],10,8],[[[58,[-1,-2]]],[[13,[-3,-2]]],6,[8,8],[10,10]],[[[1,[-3,-4]]],[[13,[-1,-2]]],[10,10],[8,8],[[60,[[13,[-1,-2]]]]],37],[[[17,[-1]]],[[13,[-2,-1]]],[8,8],[10,10]],[[[16,[-1,-2]]],[[13,[-1,-2]]],[10,10],[8,8]],[[[5,[-1,-2]]],[[13,[-3,-2]]],6,[8,8],[10,10]],[[[19,[-1,-2]]],[[13,[-1,-2]]],10,8],[[[11,[-1,-2]]],[[13,[-3,-2]]],6,[8,8],[10,10]],[[[20,[-1,-2]]],[[13,[-1,-2]]],[10,10],[8,8]],[[[15,[-1,-2]]],[[14,[-1,-2]]],[10,10],[8,8]],[[[5,[-1,-2]]],[[14,[-3,-2]]],6,[8,8],[10,10]],[[[56,[-2,-3]]],[[14,[-1,-3]]],[10,10],[[57,[],[[61,[-1]]]]],[8,8]],[[[17,[-1]]],[[14,[-2,-1]]],[8,8],[10,10]],[[[12,[-1,-2]]],[[14,[-3,-2]]],6,[8,8],[10,10]],[[[16,[-1,-2]]],[[14,[-1,-2]]],[10,10],[8,8]],[[[20,[-1,-2]]],[[14,[-1,-2]]],[10,10],[8,8]],[[[13,[-1,-2]]],[[14,[-1,-2]]],10,8],[[[11,[-1,-2]]],[[14,[-3,-2]]],6,[8,8],[10,10]],[[[19,[-1,-2]]],[[14,[-1,-2]]],10,8],[[[14,[-1,-2]]],[[14,[-1,-2]]],10,8],[[[9,[-1,-2]]],[[14,[-1,-2]]],[10,10],[8,8]],[[[1,[-3,-4]]],[[14,[-1,-2]]],[10,10],[8,8],[[60,[[14,[-1,-2]]]]],37],[[[18,[-1]]],[[14,[-2,-1]]],[8,8],[10,10]],[[[58,[-1,-2]]],[[14,[-3,-2]]],6,[8,8],[10,10]],[[[20,[-1,-2]]],[[15,[-1,-2]]],[10,10],[8,8]],[[[17,[-1]]],[[15,[-2,-1]]],[8,8],[10,10]],[[[19,[-1,-2]]],[[15,[-1,-2]]],[10,10],[8,8]],[[[1,[-3,-4]]],[[15,[-1,-2]]],[10,10],[8,8],[[60,[[15,[-1,-2]]]]],37],[[[12,[-1,-2]]],[[15,[-3,-2]]],6,[8,8],[10,10]],[[[18,[-1]]],[[15,[-2,-1]]],[8,8],[10,10]],[[[58,[-1,-2]]],[[15,[-3,-2]]],6,[8,8],[10,10]],[[[5,[-1,-2]]],[[15,[-3,-2]]],6,[8,8],[10,10]],[[[9,[-1,-2]]],[[15,[-1,-2]]],10,8],[[[15,[-1,-2]]],[[15,[-1,-2]]],10,8],[[[11,[-1,-2]]],[[15,[-3,-2]]],6,[8,8],[10,10]],[[[16,[-1,-2]]],[[15,[-1,-2]]],10,8],[[[56,[-2,-3]]],[[15,[-1,-3]]],[10,10],[[57,[],[[61,[-1]]]]],[8,8]],[[[13,[-1,-2]]],[[15,[-1,-2]]],[10,10],[8,8]],[[[14,[-1,-2]]],[[15,[-1,-2]]],[10,10],[8,8]],[[[14,[-1,-2]]],[[16,[-1,-2]]],[10,10],[8,8]],[[[19,[-1,-2]]],[[16,[-1,-2]]],10,8],[[[15,[-1,-2]]],[[16,[-1,-2]]],10,8],[[[58,[-1,-2]]],[[16,[-3,-2]]],6,[8,8],[10,10]],[[[17,[-1]]],[[16,[-2,-1]]],[8,8],[10,10]],[[[11,[-1,-2]]],[[16,[-3,-2]]],6,[8,8],[10,10]],[[[5,[-1,-2]]],[[16,[-3,-2]]],6,[8,8],[10,10]],[[[9,[-1,-2]]],[[16,[-1,-2]]],[10,10],[8,8]],[[[56,[-2,-3]]],[[16,[-1,-3]]],[10,10],[[57,[],[[61,[-1]]]]],[8,8]],[[[16,[-1,-2]]],[[16,[-1,-2]]],10,8],[[[12,[-1,-2]]],[[16,[-3,-2]]],6,[8,8],[10,10]],[[[18,[-1]]],[[16,[-2,-1]]],[8,8],[10,10]],[[[1,[-3,-4]]],[[16,[-1,-2]]],[10,10],[8,8],[[60,[[16,[-1,-2]]]]],37],[[[20,[-1,-2]]],[[16,[-1,-2]]],[10,10],[8,8]],[[[13,[-1,-2]]],[[16,[-1,-2]]],[10,10],[8,8]],[[[11,[-1,-2]]],[[17,[-2]]],6,[8,8]],[[[13,[62,-1]]],[[17,[-1]]],[8,8]],[[[15,[62,-1]]],[[17,[-1]]],[8,8]],[[[17,[-1]]],[[17,[-1]]],8],[[[58,[-1,-2]]],[[17,[-2]]],6,[8,8]],[[[9,[62,-1]]],[[17,[-1]]],[8,8]],[[[18,[-1]]],[[17,[-1]]],8],[[[1,[-2,-3]]],[[17,[-1]]],[8,8],[[60,[[17,[-1]]]]],37],[[[5,[-1,-2]]],[[17,[-2]]],6,[8,8]],[[[20,[62,-1]]],[[17,[-1]]],[8,8]],[[[56,[-1,-2]]],[[17,[-2]]],[[57,[],[[61,[62]]]]],[8,8]],[[[16,[62,-1]]],[[17,[-1]]],[8,8]],[[[19,[62,-1]]],[[17,[-1]]],8],[[[12,[-1,-2]]],[[17,[-2]]],6,[8,8]],[[[14,[62,-1]]],[[17,[-1]]],[8,8]],[[[11,[-1,-2]]],[[18,[-2]]],6,[8,8]],[[[5,[-1,-2]]],[[18,[-2]]],6,[8,8]],[[[16,[62,-1]]],[[18,[-1]]],[8,8]],[[[9,[62,-1]]],[[18,[-1]]],[8,8]],[[[14,[62,-1]]],[[18,[-1]]],[8,8]],[[[1,[-2,-3]]],[[18,[-1]]],[8,8],[[60,[[18,[-1]]]]],37],[[[12,[-1,-2]]],[[18,[-2]]],6,[8,8]],[[[58,[-1,-2]]],[[18,[-2]]],6,[8,8]],[[[13,[62,-1]]],[[18,[-1]]],[8,8]],[[[15,[62,-1]]],[[18,[-1]]],[8,8]],[[[20,[62,-1]]],[[18,[-1]]],[8,8]],[[[19,[62,-1]]],[[18,[-1]]],8],[[[17,[-1]]],[[18,[-1]]],8],[[[56,[-1,-2]]],[[18,[-2]]],[[57,[],[[61,[62]]]]],[8,8]],[[[18,[-1]]],[[18,[-1]]],8],[[[56,[-2,-3]]],[[19,[-1,-3]]],10,[[57,[],[[61,[-1]]]]],8],[[[58,[-1,-2]]],[[19,[-3,-2]]],6,8,10],[[[17,[-1]]],[[19,[62,-1]]],8],[[[9,[-1,-2]]],[[19,[-1,-2]]],[10,10],[8,8]],[[[14,[-1,-2]]],[[19,[-1,-2]]],[10,10],[8,8]],[[[13,[-1,-2]]],[[19,[-1,-2]]],10,8],[[[12,[-1,-2]]],[[19,[-3,-2]]],6,[8,8],[10,10]],[[[18,[-1]]],[[19,[62,-1]]],8],[[[11,[-1,-2]]],[[19,[-3,-2]]],6,[8,8],[10,10]],[[[16,[-1,-2]]],[[19,[-1,-2]]],10,8],[[[1,[-3,-4]]],[[19,[-1,-2]]],[10,10],[8,8],[[60,[[19,[-1,-2]]]]],37],[[[5,[-1,-2]]],[[19,[-3,-2]]],6,[8,8],[10,10]],[[[19,[-1,-2]]],[[19,[-1,-2]]],10,8],[[[15,[-1,-2]]],[[19,[-1,-2]]],[10,10],[8,8]],[[[20,[-1,-2]]],[[19,[-1,-2]]],10,8],[[[19,[-1,-2]]],[[20,[-1,-2]]],10,8],[[[15,[-1,-2]]],[[20,[-1,-2]]],[10,10],[8,8]],[[[58,[-1,-2]]],[[20,[-3,-2]]],6,[8,8],[10,10]],[[[16,[-1,-2]]],[[20,[-1,-2]]],[10,10],[8,8]],[[[17,[-1]]],[[20,[-2,-1]]],[8,8],[10,10]],[[[13,[-1,-2]]],[[20,[-1,-2]]],[10,10],[8,8]],[[[18,[-1]]],[[20,[-2,-1]]],[8,8],[10,10]],[[[1,[-3,-4]]],[[20,[-1,-2]]],[10,10],[8,8],[[60,[[20,[-1,-2]]]]],37],[[[56,[-1,-2]]],[[20,[-2]]],57,8],[[[5,[-1,-2]]],[[20,[-3,-2]]],6,[8,8],[10,10]],[[[9,[-1,-2]]],[[20,[-1,-2]]],[10,10],[8,8]],[[[11,[-1,-2]]],[[20,[-3,-2]]],6,[8,8],[10,10]],[[[12,[-1,-2]]],[[20,[-3,-2]]],6,[8,8],[10,10]],[[[20,[-1,-2]]],[[20,[-1,-2]]],10,8],[[[14,[-1,-2]]],[[20,[-1,-2]]],[10,10],[8,8]],[-1,63,37],[[[30,[-2,-1,-1,-3]]],[[1,[[9,[-4,-1]],-3]]],8,[[53,[[24,[-1]]]]],37,10],[[[30,[-1,-1,-1,-2]]],[[1,[[58,[-3,-1]],-2]]],37,37,6],[[[30,[-1,-1,-1,-2]]],[[1,[[13,[-3,-1]],-2]]],8,37,10],[[[30,[-1,-1,-2,-3]]],[[1,[[15,[-4,-1]],-3]]],8,[[53,[[24,[-1]]]]],37,10],[[[30,[-1,-1,-2,-3]]],[[1,[[14,[-4,-1]],-3]]],8,[[53,[[21,[-1]]]]],37,10],[[[30,[-1,-1,-1,-2]]],[[1,[[20,[-3,-1]],-2]]],8,37,10],[[[30,[-2,-1,-1,-3]]],[[1,[[12,[-4,-1]],-3]]],8,[[53,[[25,[-1]]]]],37,6],[[[30,[-1,-1,-1,-2]]],[[1,[[19,[-3,-1]],-2]]],8,37,10],[[[30,[-2,-1,-1,-3]]],[[1,[[11,[-4,-1]],-3]]],8,[[53,[[25,[-1]]]]],37,6],[[[30,[-1,-2]]],[[1,[[56,[-3,-1]],-2]]],37,37,57],[[[30,[-1,-1,-1,-2]]],[[1,[[16,[-3,-1]],-2]]],8,37,10],[[[30,[-2,-1,-1,-3]]],[[1,[[5,[-4,-1]],-3]]],8,[[53,[[25,[-1]]]]],37,6],[[[30,[-1,-1,-1,-2]]],[[1,[[17,[-1]],-2]]],8,37],[[[30,[-1,-1,-2,-3]]],[[1,[[18,[-1]],-3]]],8,[[53,[[26,[-1]]]]],37],[[[30,[-2,-1,-1]]],[[5,[-3,-1]]],8,[[53,[[25,[-1]]]]],6],[[[30,[-2,-1,-1]]],[[9,[-3,-1]]],8,[[53,[[24,[-1]]]]],10],[[[30,[-2,-1,-1]]],[[11,[-3,-1]]],8,[[53,[[25,[-1]]]]],6],[[[30,[-2,-1,-1]]],[[12,[-3,-1]]],8,[[53,[[25,[-1]]]]],6],[[[30,[-1,-1,-1]]],[[13,[-2,-1]]],8,10],[[[30,[-1,-1,-2]]],[[14,[-3,-1]]],8,[[53,[[21,[-1]]]]],10],[[[30,[-1,-1,-2]]],[[15,[-3,-1]]],8,[[53,[[24,[-1]]]]],10],[[[30,[-1,-1,-1]]],[[16,[-2,-1]]],8,10],[[[30,[-1,-1,-1]]],[[17,[-1]]],8],[[[30,[-1,-1,-2]]],[[18,[-1]]],8,[[53,[[26,[-1]]]]]],[[[30,[-1,-1,-1]]],[[19,[-2,-1]]],8,10],[[[30,[-1,-1,-1]]],[[20,[-2,-1]]],8,10],[-1,[[21,[-1]]],[22,23]],[-1,[[24,[-1]]],[22,23]],[-1,[[25,[-1]]],[22,23]],[-1,[[26,[-1]]],[22,23]],[[[1,[[56,[-1,-2]],-3]]],[[1,[[56,[-4,-2]],-3]]],[[57,[],[[61,[]]]]],8,37,57],[[[1,[[58,[-1,-2]],-3]]],[[1,[[58,[-4,-2]],-3]]],[[6,[],[[64,[]]]]],8,37,6],[65,23],[[[1,[[58,[-1,-2]],-3]]],[[1,[[58,[-1,-4]],-5]]],6,37,37,[[63,[-2]],37],[[63,[-3]],37]],[[[1,[[56,[-1,-2]],-3]]],[[1,[[56,[-1,-4]],-5]]],57,37,37,[[63,[-2]],37],[[63,[-3]],37]],[[[1,[[58,[66,-1]],-2]]],[[1,[[58,[-3,-1]],-2]]],8,37,6],[[[1,[[56,[66,-1]],-2]]],[[1,[[56,[-3,-1]],-2]]],8,37,57],[[[55,[-1]]],[[1,[-2,-1]]],22,67],[-1,[[21,[-1]]],[22,23]],[-1,[[24,[-1]]],[22,23]],[-1,[[25,[-1]]],[22,23]],[-1,[[26,[-1]]],[22,23]],[44,[[1,[[58,[-1,68]],68]]],6],[[[69,[],[[38,[-1]]]],[69,[],[[38,[-1]]]]],-1,8],[[[13,[-1,-2]],[13,[-1,-2]]],-3,10,8,[]],[[[14,[-1,-2]],[14,[-1,-2]]],-3,10,8,[]],[[[70,[],[[38,[-1]]]],[70,[],[[38,[-1]]]]],-1,[23,71]],[[[5,[-1,-2]],[5,[-1,-2]]],-2,6,8],[[[9,[-1,-2]],[9,[-1,-2]]],-2,10,8],[[[11,[-1,-2]],[11,[-1,-2]]],-2,6,8],[[[12,[-1,-2]],[12,[-1,-2]]],-2,6,8],[[[13,[-1,-2]],[13,[-1,-2]]],-2,10,8],[[[14,[-1,-2]],[14,[-1,-2]]],-2,10,8],[[[15,[-1,-2]],[15,[-1,-2]]],-2,10,8],[[[16,[-1,-2]],[16,[-1,-2]]],-2,10,8],[[[17,[-1]],[17,[-1]]],-1,8],[[[18,[-1]],[18,[-1]]],-1,8],[[[19,[-1,-2]],[19,[-1,-2]]],-2,10,8],[[[20,[-1,-2]],[20,[-1,-2]]],-2,10,8],[[[73,[],[[72,[-1]]]]],[[74,[-1]]],[]],[[[1,[-1,-2]]],74,73,[]],[[[5,[-1,-2]]],[[74,[[25,[-2]]]]],6,8],[[[9,[-1,-2]]],[[74,[[24,[-2]]]]],10,8],[[[11,[-1,-2]]],[[74,[[25,[-2]]]]],6,8],[[[12,[-1,-2]]],[[74,[[25,[-2]]]]],6,8],[[[13,[-1,-2]]],[[74,[[21,[-2]]]]],10,8],[[[14,[-1,-2]]],[[74,[[21,[-2]]]]],10,8],[[[15,[-1,-2]]],[[74,[[24,[-2]]]]],10,8],[[[16,[-1,-2]]],[[74,[[24,[-2]]]]],10,8],[[[17,[-1]]],[[74,[[26,[-1]]]]],8],[[[18,[-1]]],[[74,[[26,[-1]]]]],8],0,[[[70,[],[[38,[-1]]]],[70,[],[[38,[-1]]]]],2,[23,71]],[[[70,[],[[38,[-1]]]],[70,[],[[38,[-1]]]]],2,[23,71]],[[[70,[],[[38,[-1]]]],[70,[],[[38,[-1]]]]],2,[23,71]],[[[70,[],[[38,[-1]]]],[70,[],[[38,[-1]]]]],2,[23,71]],[[[70,[],[[38,[-1]]]],[70,[],[[38,[-1]]]]],2,[23,71]],[[[70,[],[[38,[-1]]]],[70,[],[[38,[-1]]]]],2,[23,71]],[[[70,[],[[38,[-1]]]],[70,[],[[38,[-1]]]]],2,[23,71]],[[[70,[],[[38,[-1]]]],[70,[],[[38,[-1]]]]],2,[23,71]],[[[70,[],[[38,[-1]]]],[70,[],[[38,[-1]]]]],2,[23,71]],[[[70,[],[[38,[-1]]]],[70,[],[[38,[-1]]]]],2,[23,71]],0,0,0,0,0,0,0,[[[1,[[19,[-1,-2]],-3]]],[[30,[-2,-2,-2,-3]]],10,8,37],[[[1,[[5,[-1,-2]],-3]]],[[30,[[25,[-2]],-2,-2,-3]]],6,8,37],[[[1,[[18,[-1]],-2]]],[[30,[-1,-1,[26,[-1]],-2]]],8,37],[[[1,[[16,[-1,-2]],-3]]],[[30,[-2,-2,-2,-3]]],10,8,37],[[[1,[[11,[-1,-2]],-3]]],[[30,[[25,[-2]],-2,-2,-3]]],6,8,37],[[[1,[[13,[-1,-2]],-3]]],[[30,[-2,-2,-2,-3]]],10,8,37],[[[1,[[56,[-1,-2]],-3]]],[[30,[-2,-3]]],57,37,37],[[[1,[[14,[-1,-2]],-3]]],[[30,[-2,-2,[21,[-2]],-3]]],10,8,37],[[[1,[[17,[-1]],-2]]],[[30,[-1,-1,-1,-2]]],8,37],[[[1,[[15,[-1,-2]],-3]]],[[30,[-2,-2,[24,[-2]],-3]]],10,8,37],[[[1,[[9,[-1,-2]],-3]]],[[30,[[24,[-2]],-2,-2,-3]]],10,8,37],[[[1,[[12,[-1,-2]],-3]]],[[30,[[25,[-2]],-2,-2,-3]]],6,8,37],[-1,-2,[],[]],[[[1,[[58,[-1,-2]],-3]]],[[30,[-2,-2,-2,-3]]],6,37,37],[[[1,[[20,[-1,-2]],-3]]],[[30,[-2,-2,-2,-3]]],10,8,37],[-1,-2,[],[]],[[[5,[-1,-2]]],[[30,[[25,[-2]],-2,-2]]],6,8],[-1,-2,[],[]],[[[9,[-1,-2]]],[[30,[[24,[-2]],-2,-2]]],10,8],[-1,-2,[],[]],[[[11,[-1,-2]]],[[30,[[25,[-2]],-2,-2]]],6,8],[-1,-2,[],[]],[[[12,[-1,-2]]],[[30,[[25,[-2]],-2,-2]]],6,8],[[[13,[-1,-2]]],[[30,[-2,-2,-2]]],10,8],[-1,-2,[],[]],[[[14,[-1,-2]]],[[30,[-2,-2,[21,[-2]]]]],10,8],[-1,-2,[],[]],[-1,-2,[],[]],[[[15,[-1,-2]]],[[30,[-2,-2,[24,[-2]]]]],10,8],[-1,-2,[],[]],[[[16,[-1,-2]]],[[30,[-2,-2,-2]]],10,8],[-1,-2,[],[]],[[[17,[-1]]],[[30,[-1,-1,-1]]],8],[-1,-2,[],[]],[[[18,[-1]]],[[30,[-1,-1,[26,[-1]]]]],8],[-1,-2,[],[]],[[[19,[-1,-2]]],[[30,[-2,-2,-2]]],10,8],[-1,-2,[],[]],[[[20,[-1,-2]]],[[30,[-2,-2,-2]]],10,8],[[[21,[75]]],75],[[[21,[65]]],75],[[[21,[65]]],65],[-1,-2,[],[]],[[[24,[65]]],65],[[[24,[65]]],75],[-1,-2,[],[]],[[[24,[75]]],75],[[[25,[75]]],75],[-1,-2,[],[]],[[[25,[65]]],75],[[[25,[65]]],65],[[[26,[75]]],75],[[[26,[65]]],75],[-1,-2,[],[]],[[[26,[65]]],65],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[76,-1,37],[[[1,[[16,[-1,-2]],-3]]],[[30,[-2,-2,-2,-3]]],10,8,37],[[[1,[[12,[-1,-2]],-3]]],[[30,[[25,[-2]],-2,-2,-3]]],6,8,37],[[[1,[[13,[-1,-2]],-3]]],[[30,[-2,-2,-2,-3]]],10,8,37],[[[1,[[20,[-1,-2]],-3]]],[[30,[-2,-2,-2,-3]]],10,8,37],[[[1,[[17,[-1]],-2]]],[[30,[-1,-1,-1,-2]]],8,37],[[[1,[[14,[-1,-2]],-3]]],[[30,[-2,-2,[21,[-2]],-3]]],10,8,37],[[[1,[[19,[-1,-2]],-3]]],[[30,[-2,-2,-2,-3]]],10,8,37],[[[1,[[5,[-1,-2]],-3]]],[[30,[[25,[-2]],-2,-2,-3]]],6,8,37],[[[1,[[58,[-1,-2]],-3]]],[[30,[-2,-2,-2,-3]]],6,37,37],[[[1,[[11,[-1,-2]],-3]]],[[30,[[25,[-2]],-2,-2,-3]]],6,8,37],[[[1,[[15,[-1,-2]],-3]]],[[30,[-2,-2,[24,[-2]],-3]]],10,8,37],[[[1,[[18,[-1]],-2]]],[[30,[-1,-1,[26,[-1]],-2]]],8,37],[[[1,[[9,[-1,-2]],-3]]],[[30,[[24,[-2]],-2,-2,-3]]],10,8,37],[[[1,[[56,[-1,-2]],-3]]],[[30,[-2,-3]]],57,37,37],[[[5,[-1,-2]]],[[30,[[25,[-2]],-2,-2]]],6,8],[[[9,[-1,-2]]],[[30,[[24,[-2]],-2,-2]]],10,8],[[[11,[-1,-2]]],[[30,[[25,[-2]],-2,-2]]],6,8],[[[12,[-1,-2]]],[[30,[[25,[-2]],-2,-2]]],6,8],[[[13,[-1,-2]]],[[30,[-2,-2,-2]]],10,8],[[[14,[-1,-2]]],[[30,[-2,-2,[21,[-2]]]]],10,8],[[[15,[-1,-2]]],[[30,[-2,-2,[24,[-2]]]]],10,8],[[[16,[-1,-2]]],[[30,[-2,-2,-2]]],10,8],[[[17,[-1]]],[[30,[-1,-1,-1]]],8],[[[18,[-1]]],[[30,[-1,-1,[26,[-1]]]]],8],[[[19,[-1,-2]]],[[30,[-2,-2,-2]]],10,8],[[[20,[-1,-2]]],[[30,[-2,-2,-2]]],10,8],[[[1,[[58,[-1,-2]],-3]]],[[1,[[58,[-4,-2]],-3]]],6,8,37,[[6,[],[[64,[]]]]]],[[[1,[[56,[-1,-2]],-3]]],[[1,[[56,[-4,-2]],-3]]],57,8,37,[[57,[],[[61,[]]]]]],[[[1,[[58,[-1,-2]],-3]]],[[1,[[58,[-1,-4]],-5]]],6,37,37,[37,[63,[-2]]],[37,[63,[-3]]]],[[[1,[[56,[-1,-2]],-3]]],[[1,[[56,[-1,-4]],-5]]],57,37,37,[37,[63,[-2]]],[37,[63,[-3]]]],[[[1,[[56,[-1,-2]],-3]]],[[1,[[56,[66,-2]],-3]]],57,8,37],[[[1,[[58,[-1,-2]],-3]]],[[1,[[58,[66,-2]],-3]]],6,8,37],[[[1,[-1,-2]]],[[55,[-2]]],67,22],[[[1,[[58,[-1,68]],68]]],44,6],[36,2],[[[1,[-1,-2]]],2,36,37],[[[5,[-1,-2]]],2,6,8],[[[9,[-1,-2]]],2,10,8],[[[11,[-1,-2]]],2,6,8],[[[12,[-1,-2]]],2,6,8],[[[13,[-1,-2]]],2,10,8],[[[14,[-1,-2]]],2,10,8],[[[15,[-1,-2]]],2,10,8],[[[16,[-1,-2]]],2,10,8],[[[17,[-1]]],2,8],[[[18,[-1]]],2,8],[[[19,[-1,-2]]],2,10,8],[[[20,[-1,-2]]],2,10,8],0,0,0,0,0,0,0,[[[42,[],[[38,[-1]]]],-1],[[42,[],[[38,[-1]]]]],22],[[[1,[-1]]],[[1,[-1]]],42],[[[5,[-1,-2]],-2],[[5,[-1,-2]]],6,8],[[[9,[-1,-2]],-2],[[9,[-1,-2]]],10,8],[[[11,[-1,-2]],-2],[[11,[-1,-2]]],6,8],[[[12,[-1,-2]],-2],[[12,[-1,-2]]],6,8],[[[13,[-1,-2]],-2],[[13,[-1,-2]]],10,8],[[[14,[-1,-2]],-2],[[14,[-1,-2]]],10,8],[[[15,[-1,-2]],-2],[[15,[-1,-2]]],10,8],[[[16,[-1,-2]],-2],[[16,[-1,-2]]],10,8],[[[17,[-1]],-1],[[17,[-1]]],8],[[[18,[-1]],-1],[[18,[-1]]],8],[[[19,[-1,-2]],-2],[[19,[-1,-2]]],10,8],[[[20,[-1,-2]],-2],[[20,[-1,-2]]],10,8],[[[42,[],[[38,[-1]]]],-1],[[42,[],[[38,[-1]]]]],22],[[[1,[-1]]],[[1,[-1]]],42],[[[5,[-1,-2]],-2],[[5,[-1,-2]]],6,8],[[[9,[-1,-2]],-2],[[9,[-1,-2]]],10,8],[[[11,[-1,-2]],-2],[[11,[-1,-2]]],6,8],[[[12,[-1,-2]],-2],[[12,[-1,-2]]],6,8],[[[13,[-1,-2]],-2],[[13,[-1,-2]]],10,8],[[[14,[-1,-2]],-2],[[14,[-1,-2]]],10,8],[[[15,[-1,-2]],-2],[[15,[-1,-2]]],10,8],[[[16,[-1,-2]],-2],[[16,[-1,-2]]],10,8],[[[17,[-1]],-1],[[17,[-1]]],8],[[[18,[-1]],-1],[[18,[-1]]],8],[[[19,[-1,-2]],-2],[[19,[-1,-2]]],10,8],[[[20,[-1,-2]],-2],[[20,[-1,-2]]],10,8],0,0,0,[[],-1,8],[[],-1,8],[[],-1,37],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],37],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,37],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[],-1,8],[[[77,[],[[38,[-1]]]],[77,[],[[38,[-1]]]],-1],[[77,[],[[38,[-1]]]]],22],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],77],[[[5,[-1,-2]],[5,[-1,-2]],-2],[[5,[-1,-2]]],6,8],[[[9,[-1,-2]],[9,[-1,-2]],-2],[[9,[-1,-2]]],10,8],[[[11,[-1,-2]],[11,[-1,-2]],-2],[[11,[-1,-2]]],6,8],[[[12,[-1,-2]],[12,[-1,-2]],-2],[[12,[-1,-2]]],6,8],[[[13,[-1,-2]],[13,[-1,-2]],-2],[[13,[-1,-2]]],10,8],[[[14,[-1,-2]],[14,[-1,-2]],-2],[[14,[-1,-2]]],10,8],[[[15,[-1,-2]],[15,[-1,-2]],-2],[[15,[-1,-2]]],10,8],[[[16,[-1,-2]],[16,[-1,-2]],-2],[[16,[-1,-2]]],10,8],[[[17,[-1]],[17,[-1]],-1],[[17,[-1]]],8],[[[18,[-1]],[18,[-1]],-1],[[18,[-1]]],8],[[[19,[-1,-2]],[19,[-1,-2]],-2],[[19,[-1,-2]]],10,8],[[[20,[-1,-2]],[20,[-1,-2]],-2],[[20,[-1,-2]]],10,8],[[[1,[-2,-1]],-1],-3,[78,29],[[78,[-1]]],[]],[[[1,[-1,-2]],[1,[-1,-2]]],-3,78,22,[]],[[[13,[-1,-2]],[13,[-1,-2]]],-3,10,8,[]],[[[13,[-1,-2]],-2],-3,10,8,[]],[[[16,[-1,-2]],[16,[-1,-2]]],-3,10,8,[]],[[[16,[-1,-2]],-2],-3,10,8,[]],[[[17,[-1]],-1],-2,8,[]],[[[17,[-1]],[17,[-1]]],-2,8,[]],[[[19,[-1,-2]],[19,[-1,-2]]],-3,10,8,[]],[[[19,[-1,-2]],-2],-3,10,8,[]],[[[20,[-1,-2]],[20,[-1,-2]]],-3,10,8,[]],[[[20,[-1,-2]],-2],-3,10,8,[]],[[[1,[-1,-2]],[1,[-1,-2]]],30,79,[22,79]],[[[1,[-2,-1]],-1],30,[79,32],[[79,[-1]]]],[[[13,[-1,-2]],-2],30,10,[8,79]],[[[13,[-1,-2]],[13,[-1,-2]]],30,10,[8,79]],[[[16,[-1,-2]],[16,[-1,-2]]],30,10,[8,79]],[[[16,[-1,-2]],-2],30,10,[8,79]],[[[17,[-1]],[17,[-1]]],30,[8,79]],[[[17,[-1]],-1],30,[8,79]],[[[19,[-1,-2]],-2],30,10,[8,79]],[[[19,[-1,-2]],[19,[-1,-2]]],30,10,[8,79]],[[[20,[-1,-2]],[20,[-1,-2]]],30,10,[8,79]],[[[20,[-1,-2]],-2],30,10,[8,79]],0,[[-1,-1,-1,-2],[[1,[[13,[62,-1]],-2]]],8,37],[[-2,-1,-1,-3],[[1,[[11,[80,-1]],-3]]],8,[[53,[[25,[-1]]]]],37],[[-1,-1,-1,-2],[[1,[[16,[62,-1]],-2]]],8,37],[[-1,-1,-1,-2],[[1,[[19,[62,-1]],-2]]],8,37],[[-2,-1,-1,-3],[[1,[[9,[62,-1]],-3]]],8,[[53,[[24,[-1]]]]],37],[[-2,-1,-1,-3],[[1,[[12,[80,-1]],-3]]],8,[[53,[[25,[-1]]]]],37],[[-1,-1,-1,-2],[[1,[[58,[-3,-1]],-2]]],37,37,6],[[-2,-1,-1,-3],[[1,[[5,[80,-1]],-3]]],8,[[53,[[25,[-1]]]]],37],[[-1,-1,-1,-2],[[1,[[17,[-1]],-2]]],8,37],[[-1,-1,-2,-3],[[1,[[14,[62,-1]],-3]]],8,[[53,[[21,[-1]]]]],37],[[-1,-1,-1,-2],[[1,[[20,[62,-1]],-2]]],8,37],[[-1,-1,-2,-3],[[1,[[18,[-1]],-3]]],8,[[53,[[26,[-1]]]]],37],[[-1,-2],[[1,[[56,[-3,-1]],-2]]],37,37,57],[[-1,-1,-2,-3],[[1,[[15,[62,-1]],-3]]],8,[[53,[[24,[-1]]]]],37],[[-2,-1,-1],[[5,[80,-1]]],8,[[53,[[25,[-1]]]]]],[[-2,-1,-1],[[9,[62,-1]]],8,[[53,[[24,[-1]]]]]],[[-2,-1,-1],[[11,[80,-1]]],8,[[53,[[25,[-1]]]]]],[[-2,-1,-1],[[12,[80,-1]]],8,[[53,[[25,[-1]]]]]],[[-1,-1,-1],[[13,[62,-1]]],8],[[-1,-1,-2],[[14,[62,-1]]],8,[[53,[[21,[-1]]]]]],[[-1,-1,-2],[[15,[62,-1]]],8,[[53,[[24,[-1]]]]]],[[-1,-1,-1],[[16,[62,-1]]],8],[[-1,-1,-1],[[17,[-1]]],8],[[-1,-1,-2],[[18,[-1]]],8,[[53,[[26,[-1]]]]]],[[-1,-1,-1],[[19,[62,-1]]],8],[[-1,-1,-1],[[20,[62,-1]]],8],[[[59,[],[[81,[-1]],[82,[-2]]]]],-2,[],[[59,[-3],[[81,[-1]],[82,[-2]]]]],37],[[[59,[],[[81,[-1]],[82,[-2]]]]],-2,[],[[59,[-3],[[81,[-1]],[82,[-2]]]]],37],[[[1,[-1,-2]],[1,[-1,-2]],-3,-3],2,[[83,[],[[3,[]]]]],83,[]],[[[5,[-1,-2]],[5,[-1,-2]],-3,-3],2,[6,7],[8,83],[]],[[[9,[-1,-2]],[9,[-1,-2]]],2,[10,7],[8,83]],[[[11,[-1,-2]],[11,[-1,-2]],-3,-3],2,[6,7],[8,83],[]],[[[12,[-1,-2]],[12,[-1,-2]],-3,-3],2,[6,7],[8,83],[]],[[[13,[-1,-2]],[13,[-1,-2]]],2,[10,7],[8,83]],[[[14,[-1,-2]],[14,[-1,-2]]],2,[10,7],[8,83]],[[[15,[-1,-2]],[15,[-1,-2]]],2,[10,7],[8,83]],[[[16,[-1,-2]],[16,[-1,-2]]],2,[10,7],[8,83]],[[[17,[-1]],[17,[-1]]],2,[8,83]],[[[18,[-1]],[18,[-1]]],2,[8,83]],[[[19,[-1,-2]],[19,[-1,-2]]],2,[10,7],[8,83]],[[[20,[-1,-2]],[20,[-1,-2]]],2,[10,7],[8,83]],[[[21,[-1]],[21,[-1]]],2,[22,23,83]],[[[24,[-1]],[24,[-1]]],2,[22,23,83]],[[[25,[-1]],[25,[-1]]],2,[22,23,83]],[[[26,[-1]],[26,[-1]]],2,[22,23,83]],[[[9,[-1,-2]],[9,[-1,-2]]],2,[10,7],[8,83]],[[[13,[-1,-2]],[13,[-1,-2]]],2,[10,7],[8,83]],[[[14,[-1,-2]],[14,[-1,-2]]],2,[10,7],[8,83]],[[[15,[-1,-2]],[15,[-1,-2]]],2,[10,7],[8,83]],[[[16,[-1,-2]],[16,[-1,-2]]],2,[10,7],[8,83]],[[[19,[-1,-2]],[19,[-1,-2]]],2,[10,7],[8,83]],[[[20,[-1,-2]],[20,[-1,-2]]],2,[10,7],[8,83]],[[[21,[-1]],[21,[-1]],-2,-2],2,[22,23,83],[]],[[[24,[-1]],[24,[-1]],-2,-2],2,[22,23,83],[]],[[[25,[-1]],[25,[-1]],-2,-2],2,[22,23,83],[]],[[[26,[-1]],[26,[-1]],-2,-2],2,[22,23,83],[]],0,[[[45,[],[[38,[-1]]]],-1],[[45,[],[[38,[-1]]]]],22],[[[1,[-1]]],[[1,[-1]]],45],[[[5,[-1,-2]],-2],[[5,[-1,-2]]],6,8],[[[9,[-1,-2]],-2],[[9,[-1,-2]]],10,8],[[[11,[-1,-2]],-2],[[11,[-1,-2]]],6,8],[[[14,[-1,-2]],-2],[[14,[-1,-2]]],10,8],[[[15,[-1,-2]],-2],[[15,[-1,-2]]],10,8],[[[18,[-1]],-1],[[18,[-1]]],8],[[[45,[],[[38,[-1]]]],-1],[[45,[],[[38,[-1]]]]],22],[[[1,[-1]]],[[1,[-1]]],45],[[[5,[-1,-2]],-2],[[5,[-1,-2]]],6,8],[[[9,[-1,-2]],-2],[[9,[-1,-2]]],10,8],[[[11,[-1,-2]],-2],[[11,[-1,-2]]],6,8],[[[14,[-1,-2]],-2],[[14,[-1,-2]]],10,8],[[[15,[-1,-2]],-2],[[15,[-1,-2]]],10,8],[[[18,[-1]],-1],[[18,[-1]]],8],0,0,0,[[84,-2],84,[],[[53,[-1]]]],[[[1,[-1,-2]],-3],[[1,[-1,-2]]],84,29,53],[[[5,[-1,-2]],-4],[[5,[-1,-2]]],6,8,[],[[53,[-3]]]],[[[9,[-1,-2]],-4],[[9,[-1,-2]]],10,8,[],[[53,[-3]]]],[[[11,[-1,-2]],-4],[[11,[-1,-2]]],6,8,[],[[53,[-3]]]],[[[12,[-1,-2]],-4],[[12,[-1,-2]]],6,8,[],[[53,[-3]]]],[[[14,[-1,-2]],-4],[[14,[-1,-2]]],10,8,[],[[53,[-3]]]],[[[15,[-1,-2]],-4],[[15,[-1,-2]]],10,8,[],[[53,[-3]]]],[[[18,[-1]],-3],[[18,[-1]]],8,[],[[53,[-2]]]],[[[59,[],[[81,[-1]],[82,[-2]]]]],[[30,[-1,-3]]],[],[[59,[-3],[[81,[-1]],[82,[-2]]]]],37],[[[1,[-1,-2]]],[[30,[-3,-2]]],[],37,[]],[[[5,[-1,-2]]],[[30,[-3,-4]]],6,8,[],37],[[[9,[-1,-2]]],[[30,[-3,-4]]],10,8,[],37],[[[11,[-1,-2]]],[[30,[-3,-4]]],6,8,[],37],[[[12,[-1,-2]]],[[30,[-3,-4]]],6,8,[],37],[[[13,[-1,-2]]],[[30,[-3,-4]]],10,8,[],37],[[[14,[-1,-2]]],[[30,[-3,-4]]],10,8,[],37],[[[15,[-1,-2]]],[[30,[-3,-4]]],10,8,[],37],[[[16,[-1,-2]]],[[30,[-3,-4]]],10,8,[],37],[[[17,[-1]]],[[30,[-2,-3]]],8,[],37],[[[18,[-1]]],[[30,[-2,-3]]],8,[],37],[[[19,[-1,-2]]],[[30,[-3,-4]]],10,8,[],37],[[[20,[-1,-2]]],[[30,[-3,-4]]],10,8,[],37],0,0,0,[[[1,[-1,-2]],[1,[-1,-2]]],-3,85,22,[]],[[[1,[-2,-1]],-1],-3,[85,29],[[85,[-1]]],[]],[[[5,[-1,-2]],[5,[-1,-2]]],-3,6,8,[]],[[[5,[-1,-2]],-2],-3,6,8,[]],[[[9,[-1,-2]],-2],-3,10,8,[]],[[[9,[-1,-2]],[9,[-1,-2]]],-3,10,8,[]],[[[11,[-1,-2]],[11,[-1,-2]]],-3,6,8,[]],[[[11,[-1,-2]],-2],-3,6,8,[]],[[[12,[-1,-2]],[12,[-1,-2]]],-3,6,8,[]],[[[12,[-1,-2]],-2],-3,6,8,[]],[[[13,[-1,-2]],-2],-3,10,8,[]],[[[13,[-1,-2]],[13,[-1,-2]]],-3,10,8,[]],[[[14,[-1,-2]],-2],-3,10,8,[]],[[[14,[-1,-2]],[14,[-1,-2]]],-3,10,8,[]],[[[15,[-1,-2]],-2],-3,10,8,[]],[[[15,[-1,-2]],[15,[-1,-2]]],-3,10,8,[]],[[[16,[-1,-2]],[16,[-1,-2]]],-3,10,8,[]],[[[16,[-1,-2]],-2],-3,10,8,[]],[[[17,[-1]],[17,[-1]]],-2,8,[]],[[[17,[-1]],-1],-2,8,[]],[[[18,[-1]],[18,[-1]]],-2,8,[]],[[[18,[-1]],-1],-2,8,[]],[[[19,[-1,-2]],-2],-3,10,8,[]],[[[19,[-1,-2]],[19,[-1,-2]]],-3,10,8,[]],[[[20,[-1,-2]],-2],-3,10,8,[]],[[[20,[-1,-2]],[20,[-1,-2]]],-3,10,8,[]],[[[21,[-1]],-1],[[21,[-1]]],22],[[[21,[-1]],[21,[-1]]],[[21,[-1]]],22],[[[24,[-1]],[24,[-1]]],[[24,[-1]]],22],[[[24,[-1]],-1],[[24,[-1]]],22],[[[25,[-1]],-1],[[25,[-1]]],22],[[[25,[-1]],[25,[-1]]],[[25,[-1]]],22],[[[26,[-1]],[26,[-1]]],[[26,[-1]]],22],[[[26,[-1]],-1],[[26,[-1]]],22],[[[1,[-2,-1]],-1],30,[86,32],[[86,[-1]]]],[[[1,[-1,-2]],[1,[-1,-2]]],30,86,[22,86]],[[[5,[-1,-2]],[5,[-1,-2]]],30,6,[8,86]],[[[5,[-1,-2]],-2],30,6,[8,86]],[[[9,[-1,-2]],-2],30,10,[8,86]],[[[9,[-1,-2]],[9,[-1,-2]]],30,10,[8,86]],[[[11,[-1,-2]],-2],30,6,[8,86]],[[[11,[-1,-2]],[11,[-1,-2]]],30,6,[8,86]],[[[12,[-1,-2]],-2],30,6,[8,86]],[[[12,[-1,-2]],[12,[-1,-2]]],30,6,[8,86]],[[[13,[-1,-2]],[13,[-1,-2]]],30,10,[8,86]],[[[13,[-1,-2]],-2],30,10,[8,86]],[[[14,[-1,-2]],-2],30,10,[8,86]],[[[14,[-1,-2]],[14,[-1,-2]]],30,10,[8,86]],[[[15,[-1,-2]],-2],30,10,[8,86]],[[[15,[-1,-2]],[15,[-1,-2]]],30,10,[8,86]],[[[16,[-1,-2]],[16,[-1,-2]]],30,10,[8,86]],[[[16,[-1,-2]],-2],30,10,[8,86]],[[[17,[-1]],-1],30,[8,86]],[[[17,[-1]],[17,[-1]]],30,[8,86]],[[[18,[-1]],-1],30,[8,86]],[[[18,[-1]],[18,[-1]]],30,[8,86]],[[[19,[-1,-2]],-2],30,10,[8,86]],[[[19,[-1,-2]],[19,[-1,-2]]],30,10,[8,86]],[[[20,[-1,-2]],[20,[-1,-2]]],30,10,[8,86]],[[[20,[-1,-2]],-2],30,10,[8,86]],[[[21,[-1]],[21,[-1]]],30,[22,86]],[[[21,[-1]],-1],30,[22,86]],[[[24,[-1]],[24,[-1]]],30,[22,86]],[[[24,[-1]],-1],30,[22,86]],[[[25,[-1]],[25,[-1]]],30,[22,86]],[[[25,[-1]],-1],30,[22,86]],[[[26,[-1]],[26,[-1]]],30,[22,86]],[[[26,[-1]],-1],30,[22,86]],[[[21,[-1]]],-1,[22,23]],[[[24,[-1]]],-1,[22,23]],[[[25,[-1]]],-1,[22,23]],[[[26,[-1]]],-1,[22,23]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[21,[-1]]],-1,[22,23]],[[[24,[-1]]],-1,[22,23]],[[[25,[-1]]],-1,[22,23]],[[[26,[-1]]],-1,[22,23]],[[[21,[-1]]],-1,[22,23]],[[[24,[-1]]],-1,[22,23]],[[[25,[-1]]],-1,[22,23]],[[[26,[-1]]],-1,[22,23]],[[[21,[-1]]],-1,[22,23]],[[[24,[-1]]],-1,[22,23]],[[[25,[-1]]],-1,[22,23]],[[[26,[-1]]],-1,[22,23]],[[[21,[-1]]],-1,[22,23]],[[[24,[-1]]],-1,[22,23]],[[[25,[-1]]],-1,[22,23]],[[[26,[-1]]],-1,[22,23]],[[[21,[-1]]],-1,[22,23]],[[[24,[-1]]],-1,[22,23]],[[[25,[-1]]],-1,[22,23]],[[[26,[-1]]],-1,[22,23]],[[[59,[],[[81,[-1]],[82,[-2]]]]],-2,[],[[59,[-3],[[81,[-1]],[82,[-2]]]]],37],[[[59,[],[[81,[-1]],[82,[-2]]]]],-2,[],[[59,[-3],[[81,[-1]],[82,[-2]]]]],37],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],0,[[[1,[-1,-2]],[1,[-1,-2]],-3,44],2,[[90,[],[[3,[]]]]],90,[]],[[[5,[-1,-2]],[5,[-1,-2]],-3,44],2,[6,7],[8,90],[]],[[[9,[-1,-2]],[9,[-1,-2]],44],2,[10,7],[8,90]],[[[11,[-1,-2]],[11,[-1,-2]],-3,44],2,[6,7],[8,90],[]],[[[12,[-1,-2]],[12,[-1,-2]],-3,44],2,[6,7],[8,90],[]],[[[13,[-1,-2]],[13,[-1,-2]],44],2,[10,7],[8,90]],[[[14,[-1,-2]],[14,[-1,-2]],44],2,[10,7],[8,90]],[[[15,[-1,-2]],[15,[-1,-2]],44],2,[10,7],[8,90]],[[[16,[-1,-2]],[16,[-1,-2]],44],2,[10,7],[8,90]],[[[17,[-1]],[17,[-1]],44],2,[8,90]],[[[18,[-1]],[18,[-1]],44],2,[8,90]],[[[19,[-1,-2]],[19,[-1,-2]],44],2,[10,7],[8,90]],[[[20,[-1,-2]],[20,[-1,-2]],44],2,[10,7],[8,90]],[[[21,[-1]],[21,[-1]],44],2,[22,23,90]],[[[24,[-1]],[24,[-1]],44],2,[22,23,90]],[[[25,[-1]],[25,[-1]],44],2,[22,23,90]],[[[26,[-1]],[26,[-1]],44],2,[22,23,90]],[[[9,[-1,-2]],[9,[-1,-2]],44],2,[10,7],[8,90]],[[[13,[-1,-2]],[13,[-1,-2]],44],2,[10,7],[8,90]],[[[14,[-1,-2]],[14,[-1,-2]],44],2,[10,7],[8,90]],[[[15,[-1,-2]],[15,[-1,-2]],44],2,[10,7],[8,90]],[[[16,[-1,-2]],[16,[-1,-2]],44],2,[10,7],[8,90]],[[[19,[-1,-2]],[19,[-1,-2]],44],2,[10,7],[8,90]],[[[20,[-1,-2]],[20,[-1,-2]],44],2,[10,7],[8,90]],[[[21,[-1]],[21,[-1]],-2,44],2,[22,23,90],[]],[[[24,[-1]],[24,[-1]],-2,44],2,[22,23,90],[]],[[[25,[-1]],[25,[-1]],-2,44],2,[22,23,90],[]],[[[26,[-1]],[26,[-1]],-2,44],2,[22,23,90],[]],0,0,0,0,0,0,0,0,0,0,0,[[[59,[],[[81,[-1]],[82,[-2]]]],-3],-2,[],[[59,[-3],[[81,[-1]],[82,[-2]]]]],37],[[[1,[-1,-2]],-2],-3,[],37,[]],[[[5,[-1,-2]],-3],-4,6,8,37,[]],[[[9,[-1,-2]],-3],-4,10,8,37,[]],[[[11,[-1,-2]],-3],-4,6,8,37,[]],[[[12,[-1,-2]],-3],-4,6,8,37,[]],[[[13,[-1,-2]],-3],-4,10,8,37,[]],[[[14,[-1,-2]],-3],-4,10,8,37,[]],[[[15,[-1,-2]],-3],-4,10,8,37,[]],[[[16,[-1,-2]],-3],-4,10,8,37,[]],[[[17,[-1]],-2],-3,8,37,[]],[[[18,[-1]],-2],-3,8,37,[]],[[[19,[-1,-2]],-3],-4,10,8,37,[]],[[[20,[-1,-2]],-3],-4,10,8,37,[]],[[84,-2],84,[],[[53,[-1]]]],[[[1,[-1,-2]],-3],[[1,[-1,-2]]],84,29,53],[[[5,[-1,-2]],-4],[[5,[-1,-2]]],6,8,[],[[53,[-3]]]],[[[9,[-1,-2]],-4],[[9,[-1,-2]]],10,8,[],[[53,[-3]]]],[[[11,[-1,-2]],-4],[[11,[-1,-2]]],6,8,[],[[53,[-3]]]],[[[12,[-1,-2]],-4],[[12,[-1,-2]]],6,8,[],[[53,[-3]]]],[[[14,[-1,-2]],-4],[[14,[-1,-2]]],10,8,[],[[53,[-3]]]],[[[15,[-1,-2]],-4],[[15,[-1,-2]]],10,8,[],[[53,[-3]]]],[[[18,[-1]],-3],[[18,[-1]]],8,[],[[53,[-2]]]],[[-2,-1,-1,-3],[[1,[[5,[-4,-1]],-3]]],8,[[53,[[25,[-1]]]]],37,6],[[-1,-1,-2,-3],[[1,[[14,[-4,-1]],-3]]],8,[[53,[[21,[-1]]]]],37,10],[[-1,-1,-1,-2],[[1,[[20,[-3,-1]],-2]]],8,37,10],[[-2,-1,-1,-3],[[1,[[9,[-4,-1]],-3]]],8,[[53,[[24,[-1]]]]],37,10],[[-2,-1,-1,-3],[[1,[[11,[-4,-1]],-3]]],8,[[53,[[25,[-1]]]]],37,6],[[-1,-1,-1,-2],[[1,[[19,[-3,-1]],-2]]],8,37,10],[[-1,-1,-2,-3],[[1,[[15,[-4,-1]],-3]]],8,[[53,[[24,[-1]]]]],37,10],[[-1,-1,-1,-2],[[1,[[13,[-3,-1]],-2]]],8,37,10],[[-1,-1,-1,-2],[[1,[[16,[-3,-1]],-2]]],8,37,10],[[-2,-1,-1,-3],[[1,[[12,[-4,-1]],-3]]],8,[[53,[[25,[-1]]]]],37,6],[[-2,-1,-1],[[5,[-3,-1]]],8,[[53,[[25,[-1]]]]],6],[[-2,-1,-1],[[9,[-3,-1]]],8,[[53,[[24,[-1]]]]],10],[[-2,-1,-1],[[11,[-3,-1]]],8,[[53,[[25,[-1]]]]],6],[[-2,-1,-1],[[12,[-3,-1]]],8,[[53,[[25,[-1]]]]],6],[[-1,-1,-1],[[13,[-2,-1]]],8,10],[[-1,-1,-2],[[14,[-3,-1]]],8,[[53,[[21,[-1]]]]],10],[[-1,-1,-2],[[15,[-3,-1]]],8,[[53,[[24,[-1]]]]],10],[[-1,-1,-1],[[16,[-2,-1]]],8,10],[[-1,-1,-1],[[19,[-2,-1]]],8,10],[[-1,-1,-1],[[20,[-2,-1]]],8,10],[[[59,[],[[81,[-1]],[82,[-2]]]]],-1,[],[[59,[-3],[[81,[-1]],[82,[-2]]]]],37],[[[1,[-1,-2]]],-3,[],37,[]],[[[5,[-1,-2]]],-3,6,8,[]],[[[9,[-1,-2]]],-3,10,8,[]],[[[11,[-1,-2]]],-3,6,8,[]],[[[12,[-1,-2]]],-3,6,8,[]],[[[13,[-1,-2]]],-3,10,8,[]],[[[14,[-1,-2]]],-3,10,8,[]],[[[15,[-1,-2]]],-3,10,8,[]],[[[16,[-1,-2]]],-3,10,8,[]],[[[17,[-1]]],-2,8,[]],[[[18,[-1]]],-2,8,[]],[[[19,[-1,-2]]],-3,10,8,[]],[[[20,[-1,-2]]],-3,10,8,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[55,[-1,-2]],[55,[-1,-2]],-3],2,[[4,[],[[3,[]]]]],[4,22],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[[55,[-2,-1]],-1],-3,22,[[28,[-1]]],[]],[[[55,[-1,-2]],[55,[-1,-2]]],-3,28,22,[]],[[[55,[-2,-1]],-1],30,[22,31],[[31,[-1]]]],[[[55,[-1,-2]],[55,[-1,-2]]],30,31,[22,31]],0,0,0,[[91,[55,[-1]],[55,[-1]]],[[55,[-1]]],[[67,[],[[81,[]]]],39]],[[92,[55,[-1]],[55,[-1]]],[[55,[-1]]],[[67,[],[[81,[]]]],39,29]],[[[55,[-2,-1]]],-3,22,[[33,[-1]]],[[34,[-1]],35]],[[[55,[-2,-1]]],-3,22,[[33,[-1]]],[[34,[-1]],35]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]],-2],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39],[[91,[-1]]]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]],-2],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39],[[91,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[92,92],[93,93],[94,94],[95,95],[[[55,[-1,-2]]],[[55,[-1,-2]]],29,[29,22]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],0,0,0,[[[55,[-2,-1]],[55,[-2,-1]],-3],[[55,[-2,-1]]],22,[[39,[],[[38,[-1]]]]],[[41,[-1,-1],[[40,[-1]]]]]],[[[55,[-2,-1]],-3],[[55,[-2,-1]]],22,[[39,[],[[38,[-1]]]]],[[41,[-1],[[40,[-1]]]]]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[],[[55,[-1,-2]]],43,22],[[],-1,[]],[[],-1,[]],[[],44],[[[55,[-1,-2]]],-1,[],22],[[[55,[-1,-2]]],-1,[],22],0,[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[55,[-2,-1]],-1],-3,22,[[46,[-1]]],[]],[[[55,[-1,-2]],[55,[-1,-2]]],-3,46,22,[]],[[[55,[-2,-1]],-1],30,[22,47],[[47,[-1]]]],[[[55,[-1,-2]],[55,[-1,-2]]],30,47,[22,47]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[92,92],2],[[93,93],2],[[94,94],2],[[95,95],2],[[[55,[-1,-2]],[55,[-1,-2]]],2,7,[22,7]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[92,48],49],[[93,48],49],[[94,48],49],[[95,48],49],[[[55,[-1,-2]],48],49,52,[52,22]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[1,[-2,-1]]],[[55,[-2,-1]]],22,[[39,[],[[38,[-1]]]]]],[-1,-1,[]],[[93,93],92],[[95,95],92],[[[55,[-1]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[55,[-1,-2]]],[[55,[-1,-2]]],[[67,[],[[81,[]]]],[39,[],[[38,[]]]]],22],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[67,[],[[81,[-1]]]]],[[55,[-1]]],[[67,[],[[81,[-1]]]],39]],[[[55,[-1,-2]]],[[55,[-1,-2]]],[[67,[],[[81,[]]]],[39,[],[[38,[]]]]],22],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[55,[-1]],[55,[-1]]],[[55,[-1]]],77],[[[55,[-2,-1]],-1],-3,22,[[78,[-1]]],[]],[[[55,[-1,-2]],[55,[-1,-2]]],-3,78,22,[]],[[[55,[-2,-1]],-1],30,[22,79],[[79,[-1]]]],[[[55,[-1,-2]],[55,[-1,-2]]],30,79,[22,79]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[55,[-1,-2]],[55,[-1,-2]],-3,-3],2,[[83,[],[[3,[]]]]],[83,22],[]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],0,[[[55,[-1,-2]],[55,[-1,-2]]],-3,85,22,[]],[[[55,[-2,-1]],-1],-3,22,[[85,[-1]]],[]],[[[55,[-1,-2]],[55,[-1,-2]]],30,86,[22,86]],[[[55,[-2,-1]],-1],30,[22,86],[[86,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[[[55,[-1,-2]],[55,[-1,-2]],-3,44],2,[[90,[],[[3,[]]]]],[90,22],[]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],[[[67,[],[[81,[-1]]]],[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]]],[[67,[],[[81,[-1]]]],39]],0,0,0,0,0,0,0,0,[-1,96,[]],[[-1,-5],96,[],10,10,8,[[27,[-2,-3,-4]]]],[97,-1,[]],[[97,-4],-5,10,10,8,[[27,[-1,-2,-3]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[27,[[98,[-1]]],8],[27,[[99,[-1]]],8],[100,[[99,[-1]]],8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,89,[]],[-1,89,[]],0,0,0,0,0,0,0,[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[88,[-1]]],-1,[]],[[[88,[-1]]],101,52],[[[88,[-1]],48],49,[]],[[[88,[-1]],48],49,52],[-1,-1,[]],[-1,102,[]],[-1,103,[]],[-1,-2,[],[]],[104,-1,[]],[-1,-2,[],[]],[60,-1,[]],[-1,-2,[],[]],[-1,105,[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[106,[88,[106]]]]],[]],[-1,[[87,[-2]]],[],[]],[107,[[87,[-1,[88,[-1]]]]],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,89,[]],0,0,0,0,0,[-1,-1,[22,23]],0,[-1,-1,[22,23]],0,0,0,0,0,0,0,0,[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[108,[-1,-2]]],[[108,[-1,-2]]],29,[29,109]],[[[110,[-1]]],[[110,[-1]]],[29,109]],[111,111],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[[108,[-1,-2]],[108,[-1,-2]]],2,7,[7,109]],[[[110,[-1]],[110,[-1]]],2,[7,109]],[[111,111],2],[[[108,[-1,-2]],48],49,52,[52,109]],[[[110,[-1]],48],49,[52,109]],[[111,48],49],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[22,23]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[22,23]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],0,0,[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[66,[-1]]],[[66,[-1]]],29],[112,112],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[[66,[-1]],[66,[-1]]],2,7],[[112,112],2],[[[66,[-1]],48],49,52],[[112,48],49],[-1,-1,[]],[-1,-1,[]],[-1,-1,22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,89,[]],[-1,89,[]],0,0,0,0,0,[34],[34],[33,-2,[],[[34,[-1]],35]],[33,-2,[],[[34,[-1]],35]],[34,113],[-2,33,[],[[34,[-1]],35]],[-2,33,[],[[34,[-1]],35]],[113,34],[113,34],[[[114,[-1]]],[[114,[33]]],[]],[[[114,[-1]]],[[114,[33]]],[]],[33,-2,[],[[115,[-1]]]],[[[114,[33]]],[[114,[-1]]],[]],[[[114,[33]]],[[114,[-1]]],[]],0,[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[],[[20,[-1,-2]]],10,8],[-1,-2,[],[]],[-1,-2,[],[]],[80,80],[[-1,-2],30,[],[]],[[80,80],2],[[80,48],49],[-1,-1,[]],[-1,-1,[22,23]],[[],[[20,[-1,-2]]],10,8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[22,23]],[[],[[20,[-1,-2]]],10,8],[-1,-2,[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,89,[]],0,[22,22],[[22,22],22],[22,22],[22,22],[22,22],[22,22],[22,22],[[22,22],22],[22,22],[22,22],[22,22],[22,116],[[22,22],22],[22,22],[22,22],[[],22],[22,22],[22,22],[22,22],[22,22],[22,22],[[22,22],22],[[],22],[22,[[30,[117,118,119]]]],[22,2],[22,2],[22,2],[22,2],[22,2],[22,2],[22,2],[22,22],[22,22],[[22,22],22],[22,22],[22,22],[[22,22],22],[[],22],[[22,22],22],[[],22],[[],22],[[22,22,22],22],[[],22],[[],22],[[],22],[[22,22],22],[[22,120],22],[22,22],[22,22],[22,22],[22,22],[22,[[30,[22,22]]]],[22,22],[22,22],[22,22],[22,22],[22,22],[22,22],[22,22],0,0,0,0,[[[121,[-1]],[121,[-1]]],2,[4,22]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[122,[-1,-2]]],[[122,[-1,-2]]],[77,29,29],[[123,[[114,[[30,[-1]]]]]],29]],[[[124,[-1,-2]]],[[124,[-1,-2]]],[77,29,29],[[123,[[114,[[30,[-1]]]]]],29]],[[[125,[-1,-2]]],[[125,[-1,-2]]],[77,29,29],[[123,[[114,[[30,[-1]]]]]],29]],[[[121,[-1]]],[[121,[-1]]],[29,22]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[],-1,[]],[[],-1,[]],[[],44],[[[122,[-1,-2]]],30,[77,29],[[123,[[114,[[30,[-1]]]]]]]],[[[125,[-1,-2]]],30,[77,29],[[123,[[114,[[30,[-1]]]]]]]],[[[121,[-1]],[121,[-1]]],2,[7,22]],[[[122,[-1,-2]],48],49,[77,29,52],[[123,[[114,[[30,[-1]]]]]],52]],[[[125,[-1,-2]],48],49,[77,29,52],[[123,[[114,[[30,[-1]]]]]],52]],[[[121,[-1]],48],49,[52,22]],[-1,-1,[]],[-2,[[122,[-1,-2]]],[77,29],[[123,[[114,[[30,[-1]]]]]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[126,[-1]]],[[121,[-1]]],22],[[[127,[-1]]],[[121,[-1]]],22],[128,[[121,[-1]]],22],[[[129,[-1]]],[[121,[-1]]],22],[[[122,[-1,-2]]],-1,[77,29],[[123,[[114,[[30,[-1]]]]]]]],[[[125,[-1,-2]]],-1,[77,29],[[123,[[114,[[30,[-1]]]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-2,[[122,[-1]]],[77,29],[[131,[],[[130,[-1]]]]]],[[[124,[-1,-2]]],[[74,[-1]]],[77,29],[[123,[[114,[[30,[-1]]]]]]]],[[[124,[-1,-2]]],[[74,[-3]]],[77,29],[[123,[[114,[[30,[-1]]]]]]],[]],[[[121,[-1]],[121,[-1]],-2,-2],2,[83,22],[]],[[[124,[-1,-2]]],[[30,[113,[74,[113]]]]],[77,29],[[123,[[114,[[30,[-1]]]]]]]],[[[122,[-1,-2]],-3],[[125,[-1,-2]]],[77,29],[[123,[[114,[[30,[-1]]]]]]],[[53,[121]]]],[[[125,[-1,-2]],-3],[[125,[-1,-2]]],[77,29],[[123,[[114,[[30,[-1]]]]]]],[[53,[121]]]],[[[122,[-1,-2]],113],[[124,[-1,-2]]],[77,29],[[123,[[114,[[30,[-1]]]]]]]],[[[125,[-1,-2]],113],[[124,[-1,-2]]],[77,29],[[123,[[114,[[30,[-1]]]]]],29]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[[[121,[-1]],[121,[-1]],-2,44],2,[90,22],[]],[-2,[[122,[-1,-2]]],[77,29],[[123,[[114,[[30,[-1]]]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[56,[-1,-2]],[56,[-1,-2]],-3],2,[57,7],[37,4],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[[56,[-1,-2]],[56,[-1,-2]]],-3,[[57,[],[[132,[112]]]]],[37,28],[]],[[[56,[-1,-2]],-2],-3,[[57,[],[[132,[112]]]]],[37,28],[]],[[[56,[-1,-2]],[56,[-1,-2]]],30,[[57,[],[[132,[112]]]]],[37,31]],[[[56,[-1,-2]],-2],30,[[57,[],[[132,[112]]]]],[37,31]],0,0,0,0,[[[56,[-1,-2]]],-3,57,37,[[34,[-2]],35]],[[[56,[-1,-2]]],-3,57,37,[[34,[-2]],35]],[-1,-2,[],[]],[-1,-2,[],[]],[[[56,[-1,-2]]],[[56,[-1,-2]]],57,37],[[[56,[-1,-2]]],30,57,37],[[[56,[-1,-2]]],[[56,[-1,-2]]],57,37],[[-1,-2],30,[],[]],0,0,0,0,[[[56,[-1,-2]],[56,[-1,-2]],-3],[[56,[-1,-2]]],57,37,[[41,[-2,-2],[[40,[-2]]]]]],[[[56,[-1,-2]],-3],[[56,[-1,-2]]],57,37,[[41,[-2],[[40,[-2]]]]]],[[],[[56,[-1,-2]]],57,37],[[],-1,[]],[[],-1,[]],[[],44],[[[56,[-1,-2]],[56,[-1,-2]]],-3,[[57,[],[[132,[112]]]]],[37,46],[]],[[[56,[-1,-2]],-2],-3,[[57,[],[[132,[112]]]]],[37,46],[]],[[[56,[-1,-2]],-2],30,[[57,[],[[132,[112]]]]],[37,47]],[[[56,[-1,-2]],[56,[-1,-2]]],30,[[57,[],[[132,[112]]]]],[37,47]],[[[56,[-1,-2]],[56,[-1,-2]]],2,57,[37,7]],[[[56,[-1,-2]],48],49,57,[37,50]],[[[56,[-1,-2]],48],49,57,[37,51]],[[[56,[-1,-2]],48],49,[57,52],[37,52]],[-1,-1,[]],[[[30,[-1]]],[[56,[-2,-1]]],37,57],[-1,-2,[],[]],[[[20,[-1]]],[[56,[-2,-1]]],8,57],[[[19,[-1]]],[[56,[-2,-1]]],8,57],[[[58,[-1,-2]]],[[56,[-3,-2]]],6,[37,8],57],[[[56,[-1,-2]]],[[56,[-3,-2]]],[[57,[],[[61,[]]]]],8,57],[[[5,[-1,-2]]],[[56,[-3,-2]]],6,[37,8],57],[[[15,[-1]]],[[56,[-2,-1]]],[37,8],57],[[[9,[-1]]],[[56,[-2,-1]]],[37,8],57],[[[17,[-1]]],[[56,[-2,-1]]],[37,8],57],[[[18,[-1]]],[[56,[-2,-1]]],[37,8],57],[[[1,[-3,-4]]],[[56,[-1,-2]]],57,[37,8],[[60,[[56,[-1,-2]]]]],37],[[[11,[-1,-2]]],[[56,[-3,-2]]],6,[37,8],57],[[[16,[-1]]],[[56,[-2,-1]]],[37,8],57],[[[12,[-1,-2]]],[[56,[-3,-2]]],6,[37,8],57],[[[14,[-1]]],[[56,[-2,-1]]],[37,8],57],[[[13,[-1]]],[[56,[-2,-1]]],[37,8],57],[[[30,[-1]]],[[56,[-2,-1]]],37,57],[[[56,[-1,-2]]],[[56,[-3,-2]]],[[57,[],[[61,[]]]]],8,57],[[[56,[-1,-2]]],[[56,[-1,-3]]],57,37,[[63,[-2]],37]],[[[56,[66,-1]]],[[56,[-2,-1]]],8,57],[[[55,[[56,[-1,-2]],-2]]],[[56,[-1,-2]]],[[57,[],[[132,[112]]]]],8],[[[56,[-1,-2]],[56,[-1,-2]]],-2,57,8],[-1,-2,[],[]],[[[56,[-1,-2]]],[[30,[-2]]],57,37],[-1,-2,[],[]],[-1,-2,[],[]],[[[56,[-1,-2]]],[[30,[-2]]],57,37],[[[56,[-1,-2]]],[[56,[-3,-2]]],57,8,[[57,[],[[61,[]]]]]],[[[56,[-1,-2]]],[[56,[-1,-3]]],57,37,[37,[63,[-2]]]],[[[56,[-1,-2]]],[[56,[66,-2]]],57,8],[[[56,[-1,-2]]],[[55,[[56,[-1,-2]],-2]]],[[57,[],[[132,[112]]]]],8],[[[56,[-1,-2]]],2,57,37],[[[56,[-1,-2]],-2],[[56,[-1,-2]]],[[57,[],[[132,[112]]]]],8],[[[56,[-1,-2]],-2],[[56,[-1,-2]]],[[57,[],[[132,[112]]]]],8],0,0,0,0,[[],-1,37],[[],-1,37],[[[56,[-1,-2]],[56,[-1,-2]],-2],[[56,[-1,-2]]],[[57,[],[[132,[112]]]]],8],[[[56,[-1,-2]],[56,[-1,-2]]],-3,[[57,[],[[132,[112]]]]],[37,78],[]],[[[56,[-1,-2]],-2],-3,[[57,[],[[132,[112]]]]],[37,78],[]],[[[56,[-1,-2]],[56,[-1,-2]]],30,[[57,[],[[132,[112]]]]],[37,79]],[[[56,[-1,-2]],-2],30,[[57,[],[[132,[112]]]]],[37,79]],[-1,[[56,[-2,-1]]],37,57],[[[56,[-1,-2]],[56,[-1,-2]],-3,-3],2,[57,7],[37,83],[]],[[[56,[-1,-2]]],[[30,[-3,-4]]],57,37,[],37],0,0,0,0,[[[56,[-1,-2]],[56,[-1,-2]]],-3,[[57,[],[[132,[112]]]]],[37,85],[]],[[[56,[-1,-2]],-2],-3,[[57,[],[[132,[112]]]]],[37,85],[]],[[[56,[-1,-2]],-2],30,[[57,[],[[132,[112]]]]],[37,86]],[[[56,[-1,-2]],[56,[-1,-2]]],30,[[57,[],[[132,[112]]]]],[37,86]],[-1,-2,[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,89,[]],[[[56,[-1,-2]],[56,[-1,-2]],-3,44],2,[57,7],[37,90],[]],[[[56,[-1,-2]],-3],-4,57,37,37,[]],[[[56,[-1,-2]]],-3,57,37,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[101,[[74,[[133,[68]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[58,[-1,-2]],[58,[-1,-2]],-3],2,[6,7],[37,4],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[[58,[-1,-2]],[58,[-1,-2]]],-3,[[6,[],[[132,[112]]]]],[37,28],[]],[[[58,[-1,-2]],-2],-3,[[6,[],[[132,[112]]]]],[37,28],[]],[[[58,[-1,-2]],[58,[-1,-2]]],30,[[6,[],[[132,[112]]]]],[37,31]],[[[58,[-1,-2]],-2],30,[[6,[],[[132,[112]]]]],[37,31]],0,0,0,0,[[[58,[-1,-2]]],-3,6,37,[[34,[-2]],35]],[[[58,[-1,-2]]],-3,6,37,[[34,[-2]],35]],[[],[[20,[-1,-2]]],10,8],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[58,[-1,-2]]],[[58,[-1,-2]]],6,37],[[[58,[-1,-2]]],30,6,37],[[[134,[-1]]],[[134,[-1]]],[]],[[[58,[-1,-2]]],[[58,[-1,-2]]],6,37],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],0,0,0,0,0,[[[30,[68,68,68,68]]],[[135,[-1,68]]],6],[[[58,[-1,-2]],[58,[-1,-2]],-3],[[58,[-1,-2]]],6,37,[[41,[-2,-2],[[40,[-2]]]]]],[[[58,[-1,-2]],-3],[[58,[-1,-2]]],6,37,[[41,[-2],[[40,[-2]]]]]],[[],[[58,[-1,-2]]],6,37],[[],-1,[]],[[],-1,[]],[[],44],[[[58,[-1,-2]],[58,[-1,-2]]],-3,[[6,[],[[132,[112]]]]],[37,46],[]],[[[58,[-1,-2]],-2],-3,[[6,[],[[132,[112]]]]],[37,46],[]],[[[58,[-1,-2]],-2],30,[[6,[],[[132,[112]]]]],[37,47]],[[[58,[-1,-2]],[58,[-1,-2]]],30,[[6,[],[[132,[112]]]]],[37,47]],[[[134,[-1]],[134,[-1]]],2,7],[[[58,[-1,-2]],[58,[-1,-2]]],2,6,[37,7]],[[[134,[-1]],48],49,52],[[[58,[-1,-2]],48],49,[52,6],[52,37]],[[[58,[-1,-2]],48],49,6,[37,51]],[[[58,[-1,-2]],48],49,6,[37,50]],[[136,48],49],[[136,48],49],[44,[[135,[-1,68]]],6],[[[134,[-1]]],[[135,[-2,68]]],137,6],[[[138,[-1]]],[[133,[-2]]],8,[37,[63,[-1]]]],[[[139,[-1]]],[[140,[-2]]],8,[37,[63,[-1]]]],[[[138,[-1]]],[[140,[-2]]],8,[37,[63,[-1]]]],[[[133,[-1]]],[[138,[-2]]],8,[37,[63,[-1]]]],[[[140,[-1]]],[[139,[-2]]],8,[37,[63,[-1]]]],[[[133,[-1]]],[[139,[-2]]],8,[37,[63,[-1]]]],[[[58,[-1,68]]],[[134,[-2]]],6,137],[[[135,[-1,68]]],[[134,[-2]]],6,137],[-1,-1,[]],[44,[[134,[-1]]],137],[-1,-1,[]],[44,[[58,[-1,68]]],6],[[[134,[-1]]],[[58,[-2,68]]],137,6],[[[30,[-1,-1,-1]]],[[58,[-2,-1]]],37,6],[101,136],[-1,-1,[]],[141,136],[-1,-2,[],[]],[[[18,[-1]]],[[58,[-2,-1]]],[8,37],6],[[[15,[-1]]],[[58,[-2,-1]]],[8,37],6],[[[16,[-1]]],[[58,[-2,-1]]],[8,37],6],[[[11,[-1,-2]]],[[58,[-1,-2]]],6,8],[[[5,[-1,-2]]],[[58,[-1,-2]]],6,8],[[[17,[-1]]],[[58,[-2,-1]]],[8,37],6],[[[20,[-1]]],[[58,[-2,-1]]],[8,37],6],[[[14,[-1]]],[[58,[-2,-1]]],[8,37],6],[[[58,[-1,-2]]],[[58,[-3,-2]]],6,8,6],[[[13,[-1]]],[[58,[-2,-1]]],[8,37],6],[[[12,[-1,-2]]],[[58,[-1,-2]]],6,[8,37]],[[[19,[-1]]],[[58,[-2,-1]]],8,6],[[[9,[-1]]],[[58,[-2,-1]]],[8,37],6],[[[56,[-1,-2]]],[[58,[-3,-2]]],[[57,[],[[61,[]]]]],8,6],[[[1,[-3,-4]]],[[58,[-1,-2]]],6,[8,37],[[60,[[58,[-1,-2]]]]],37],[[[30,[-1,-1,-1]]],[[58,[-2,-1]]],37,6],[[[58,[-1,-2]]],[[58,[-3,-2]]],[[6,[],[[64,[]]]]],8,6],[[[58,[-1,-2]]],[[58,[-1,-3]]],6,37,[[63,[-2]],37]],[[[58,[66,-1]]],[[58,[-2,-1]]],8,6],[[[55,[[58,[-1,-2]],-2]]],[[58,[-1,-2]]],[[6,[],[[132,[112]]]]],8],[101,[[87,[[58,[-1,68]],-2]]],6,[]],[44,[[135,[-1,68]]],6],[44,[[58,[-1,68]]],6],[[[58,[-1,-2]],[58,[-1,-2]]],-2,6,8],[[[58,[-1,-2]]],[[74,[[25,[-2]]]]],[[6,[],[[132,[112]]]]],8],[[],[[20,[-1,-2]]],10,8],0,0,0,0,[-1,-2,[],[]],[[[58,[-1,-2]]],[[30,[-2,-2,-2]]],6,37],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[58,[-1,-2]]],[[30,[-2,-2,-2]]],6,37],[[[58,[-1,-2]]],[[58,[-3,-2]]],6,8,[[6,[],[[64,[]]]]]],[[[58,[-1,-2]]],[[58,[-1,-3]]],6,37,[37,[63,[-2]]]],[[[58,[-1,-2]]],[[58,[66,-2]]],6,8],[[[58,[-1,-2]]],[[55,[[58,[-1,-2]],-2]]],[[6,[],[[132,[112]]]]],8],[[[135,[-1,68]]],44,6],[[[58,[-1,68]]],44,6],[[[58,[-1,-2]]],2,6,37],[[[58,[-1,-2]],-2],[[58,[-1,-2]]],[[6,[],[[132,[112]]]]],8],[[[58,[-1,-2]],-2],[[58,[-1,-2]]],[[6,[],[[132,[112]]]]],8],[[],-1,37],[[],-1,37],[[],-1,37],[[],-1,37],[[],-1,37],[[],-1,37],[[[58,[-1,-2]],[58,[-1,-2]],-2],[[58,[-1,-2]]],[[6,[],[[132,[112]]]]],8],[[[58,[-1,-2]],[58,[-1,-2]]],-3,[[6,[],[[132,[112]]]]],[37,78],[]],[[[58,[-1,-2]],-2],-3,[[6,[],[[132,[112]]]]],[37,78],[]],[[[58,[-1,-2]],[58,[-1,-2]]],30,[[6,[],[[132,[112]]]]],[37,79]],[[[58,[-1,-2]],-2],30,[[6,[],[[132,[112]]]]],[37,79]],[[-1,-1,-1],[[58,[-2,-1]]],37,6],[[],[[20,[-1,-2]]],10,8],0,0,0,0,[[[58,[-1,-2]],[58,[-1,-2]],-3,-3],2,[6,7],[37,83],[]],[136,[[74,[142]]]],[[[58,[-1,-2]]],[[30,[-3,-4]]],6,37,[],37],[[[135,[-1,68]]],[[30,[68,68,68,68]]],6],0,0,0,0,[[[58,[-1,-2]],[58,[-1,-2]]],-3,[[6,[],[[132,[112]]]]],[37,85],[]],[[[58,[-1,-2]],-2],-3,[[6,[],[[132,[112]]]]],[37,85],[]],[[[58,[-1,-2]],[58,[-1,-2]]],30,[[6,[],[[132,[112]]]]],[37,86]],[[[58,[-1,-2]],-2],30,[[6,[],[[132,[112]]]]],[37,86]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,105,[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[[[58,[-1,-2]],[58,[-1,-2]],-3,44],2,[6,7],[37,90],[]],[[[58,[-1,-2]],-3],-4,6,37,37,[]],[[[58,[-1,-2]]],-3,6,37,[]],0,0,0,0,[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[30,[68,68,68,68]]],[[135,[-1,68]]],6],[[[30,[68,68,68,68]]],[[135,[-1,68]]],6],[[[30,[68,68,68,68]]],[[135,[-1,68]]],6],[[[30,[68,68,68,68]]],[[135,[-1,68]]],6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[135,[-1,68]]],[[30,[68,68,68,68]]],6],[[[135,[-1,68]]],[[30,[68,68,68,68]]],6],[[[135,[-1,68]]],[[30,[68,68,68,68]]],6],[[[135,[-1,68]]],[[30,[68,68,68,68]]],6],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[27,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[143,143],[144,144],[145,145],[146,146],[147,147],[62,62],[148,148],[149,149],[150,150],[151,151],[152,152],[153,153],[154,154],[155,155],[156,156],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[143,143],2],[[144,144],2],[[145,145],2],[[146,146],2],[[147,147],2],[[62,62],2],[[148,148],2],[[149,149],2],[[150,150],2],[[151,151],2],[[152,152],2],[[153,153],2],[[154,154],2],[[155,155],2],[[156,156],2],[[143,48],49],[[144,48],49],[[145,48],49],[[146,48],49],[[147,48],49],[[62,48],49],[[148,48],49],[[149,48],49],[[150,48],49],[[151,48],49],[[152,48],49],[[153,48],49],[[154,48],49],[[155,48],49],[[156,48],49],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[19,[-1,-2]]],10,8],[[],[[19,[-1,-2]]],10,8],[[],[[19,[-1,-2]]],10,8],[[],[[19,[-1,-2]]],10,8],[[],[[19,[-1,-2]]],10,8],[[],[[19,[-1,-2]]],10,8],[[],[[19,[-1,-2]]],10,8],[[],[[19,[-1,-2]]],10,8],[[],[[19,[-1,-2]]],10,8],[[],[[19,[-1,-2]]],10,8],[[],[[19,[-1,-2]]],10,8],[[],[[19,[-1,-2]]],10,8],[[],[[19,[-1,-2]]],10,8],[[],[[19,[-1,-2]]],10,8],[[],[[19,[-1,-2]]],10,8],[[],[[19,[-1,-2]]],10,8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,[[87,[-2,[88,[-2]]]]],[],[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]],[-1,89,[]]],"c":[],"p":[[5,"Alpha",0],[1,"bool"],[17,"Epsilon"],[10,"AbsDiffEq",2862],[5,"Hsl",0],[10,"RgbStandard",2338],[10,"PartialEq",2863],[10,"FloatComponent",0],[5,"Hsluv",0],[10,"WhitePoint",2590],[5,"Hsv",0],[5,"Hwb",0],[5,"Lab",0],[5,"Lch",0],[5,"Lchuv",0],[5,"Luv",0],[5,"Oklab",0],[5,"Oklch",0],[5,"Xyz",0],[5,"Yxy",0],[5,"LabHue",0],[10,"Float",1920],[10,"FromF64",0],[5,"LuvHue",0],[5,"RgbHue",0],[5,"OklabHue",0],[10,"TransformMatrix",1709],[10,"Add",2864],[10,"Clone",2865],[1,"tuple"],[10,"AddAssign",2864],[10,"Copy",2866],[10,"Pixel",1879],[10,"RawPixel",1879],[10,"Sized",2866],[10,"Clamp",0],[10,"Component",0],[17,"Scalar"],[10,"ComponentWise",0],[17,"Output"],[10,"FnMut",2867],[10,"Shade",0],[10,"Default",2868],[1,"u32"],[10,"Saturate",0],[10,"Div",2864],[10,"DivAssign",2864],[5,"Formatter",2869],[8,"Result",2869],[10,"LowerHex",2869],[10,"UpperHex",2869],[10,"Debug",2869],[10,"Into",2870],[1,"never"],[5,"PreAlpha",1523],[5,"Luma",2074],[10,"LumaStandard",2074],[5,"Rgb",2338],[10,"WithAlpha",0],[10,"IntoColorUnclamped",1748],[17,"WhitePoint"],[5,"D65",2590],[10,"FromComponent",0],[17,"Space"],[1,"f64"],[5,"Linear",1843],[10,"Blend",1523],[1,"u8"],[10,"ColorDifference",0],[10,"RelativeContrast",0],[10,"PartialOrd",2863],[17,"Hue"],[10,"GetHue",0],[6,"Option",2871],[1,"f32"],[10,"IntoComponent",0],[10,"Mix",0],[10,"Mul",2864],[10,"MulAssign",2864],[5,"Srgb",1898],[17,"Color"],[17,"WithAlpha"],[10,"RelativeEq",2872],[10,"Hue",0],[10,"Sub",2864],[10,"SubAssign",2864],[6,"Result",2873],[5,"OutOfBounds",1748],[5,"TypeId",2874],[10,"UlpsEq",2875],[10,"BlendFunction",1523],[5,"Equations",1523],[6,"Equation",1523],[5,"Parameters",1523],[6,"Parameter",1523],[10,"AdaptFrom",1709],[10,"AdaptInto",1709],[8,"Mat3",0],[5,"ConeResponseMatrices",1709],[6,"Method",1709],[1,"str"],[10,"FromColor",1748],[10,"FromColorUnclamped",1748],[10,"IntoColor",1748],[5,"String",2876],[10,"TryFromColor",1748],[10,"TryIntoColor",1748],[5,"Gamma",1788],[10,"Number",1788],[5,"GammaFn",1788],[5,"F2p2",1788],[5,"LinearFn",1843],[1,"usize"],[1,"slice"],[10,"RawPixelSized",1879],[6,"FpCategory",2877],[1,"u64"],[1,"i16"],[1,"i8"],[1,"i32"],[5,"Range",1980],[5,"Gradient",1980],[10,"AsRef",2870],[5,"Take",1980],[5,"Slice",1980],[5,"RangeFrom",2878],[5,"Range",2878],[5,"RangeFull",2878],[5,"RangeTo",2878],[17,"Item"],[10,"IntoIterator",2879],[17,"TransferFn"],[8,"Srgb",2338],[5,"Packed",2338],[8,"Rgba",2338],[6,"FromHexError",2338],[10,"RgbChannels",2338],[8,"LinSrgb",2338],[8,"LinSrgba",2338],[8,"Srgba",2338],[5,"ParseIntError",2880],[10,"Error",2881],[5,"A",2590],[5,"B",2590],[5,"C",2590],[5,"D50",2590],[5,"D55",2590],[5,"D75",2590],[5,"E",2590],[5,"F2",2590],[5,"F7",2590],[5,"F11",2590],[5,"D50Degree10",2590],[5,"D55Degree10",2590],[5,"D65Degree10",2590],[5,"D75Degree10",2590],[8,"Hsla",0],[8,"Hsluva",0],[8,"Hsva",0],[8,"Hwba",0],[8,"Laba",0],[8,"Lcha",0],[8,"Lchuva",0],[8,"Luva",0],[8,"Oklaba",0],[8,"Oklcha",0],[8,"Xyza",0],[8,"Yxya",0],[10,"TransferFn",1777],[8,"Lumaa",2074],[8,"SrgbLumaa",2074],[8,"LinLumaa",2074],[8,"GammaLumaa",2074],[8,"SrgbLuma",2074],[8,"LinLuma",2074],[8,"GammaLuma",2074],[10,"RgbSpace",2338],[8,"GammaSrgba",2338],[10,"Primaries",2338],[8,"GammaSrgb",2338],[5,"Abgr",2534],[5,"Argb",2534],[5,"Bgra",2534],[5,"Rgba",2534]],"b":[[136,"impl-Add%3CT%3E-for-Alpha%3CC,+T%3E"],[137,"impl-Add-for-Alpha%3CC,+T%3E"],[138,"impl-Add%3CT%3E-for-Hsl%3CS,+T%3E"],[139,"impl-Add-for-Hsl%3CS,+T%3E"],[140,"impl-Add%3CT%3E-for-Hsluv%3CWp,+T%3E"],[141,"impl-Add-for-Hsluv%3CWp,+T%3E"],[142,"impl-Add%3CT%3E-for-Hsv%3CS,+T%3E"],[143,"impl-Add-for-Hsv%3CS,+T%3E"],[144,"impl-Add-for-Hwb%3CS,+T%3E"],[145,"impl-Add%3CT%3E-for-Hwb%3CS,+T%3E"],[146,"impl-Add-for-Lab%3CWp,+T%3E"],[147,"impl-Add%3CT%3E-for-Lab%3CWp,+T%3E"],[148,"impl-Add-for-Lch%3CWp,+T%3E"],[149,"impl-Add%3CT%3E-for-Lch%3CWp,+T%3E"],[150,"impl-Add-for-Lchuv%3CWp,+T%3E"],[151,"impl-Add%3CT%3E-for-Lchuv%3CWp,+T%3E"],[152,"impl-Add%3CT%3E-for-Luv%3CWp,+T%3E"],[153,"impl-Add-for-Luv%3CWp,+T%3E"],[154,"impl-Add-for-Oklab%3CT%3E"],[155,"impl-Add%3CT%3E-for-Oklab%3CT%3E"],[156,"impl-Add%3CT%3E-for-Oklch%3CT%3E"],[157,"impl-Add-for-Oklch%3CT%3E"],[158,"impl-Add%3CT%3E-for-Xyz%3CWp,+T%3E"],[159,"impl-Add-for-Xyz%3CWp,+T%3E"],[160,"impl-Add-for-Yxy%3CWp,+T%3E"],[161,"impl-Add%3CT%3E-for-Yxy%3CWp,+T%3E"],[162,"impl-Add%3CT%3E-for-LabHue%3CT%3E"],[163,"impl-Add-for-LabHue%3CT%3E"],[164,"impl-Add%3CT%3E-for-LuvHue%3CT%3E"],[165,"impl-Add-for-LuvHue%3CT%3E"],[166,"impl-Add%3CT%3E-for-RgbHue%3CT%3E"],[167,"impl-Add-for-RgbHue%3CT%3E"],[168,"impl-Add-for-OklabHue%3CT%3E"],[169,"impl-Add%3CT%3E-for-OklabHue%3CT%3E"],[170,"impl-AddAssign-for-Alpha%3CC,+T%3E"],[171,"impl-AddAssign%3CT%3E-for-Alpha%3CC,+T%3E"],[172,"impl-AddAssign-for-Hsl%3CS,+T%3E"],[173,"impl-AddAssign%3CT%3E-for-Hsl%3CS,+T%3E"],[174,"impl-AddAssign%3CT%3E-for-Hsluv%3CWp,+T%3E"],[175,"impl-AddAssign-for-Hsluv%3CWp,+T%3E"],[176,"impl-AddAssign-for-Hsv%3CS,+T%3E"],[177,"impl-AddAssign%3CT%3E-for-Hsv%3CS,+T%3E"],[178,"impl-AddAssign%3CT%3E-for-Hwb%3CS,+T%3E"],[179,"impl-AddAssign-for-Hwb%3CS,+T%3E"],[180,"impl-AddAssign%3CT%3E-for-Lab%3CWp,+T%3E"],[181,"impl-AddAssign-for-Lab%3CWp,+T%3E"],[182,"impl-AddAssign%3CT%3E-for-Lch%3CWp,+T%3E"],[183,"impl-AddAssign-for-Lch%3CWp,+T%3E"],[184,"impl-AddAssign-for-Lchuv%3CWp,+T%3E"],[185,"impl-AddAssign%3CT%3E-for-Lchuv%3CWp,+T%3E"],[186,"impl-AddAssign-for-Luv%3CWp,+T%3E"],[187,"impl-AddAssign%3CT%3E-for-Luv%3CWp,+T%3E"],[188,"impl-AddAssign-for-Oklab%3CT%3E"],[189,"impl-AddAssign%3CT%3E-for-Oklab%3CT%3E"],[190,"impl-AddAssign-for-Oklch%3CT%3E"],[191,"impl-AddAssign%3CT%3E-for-Oklch%3CT%3E"],[192,"impl-AddAssign%3CT%3E-for-Xyz%3CWp,+T%3E"],[193,"impl-AddAssign-for-Xyz%3CWp,+T%3E"],[194,"impl-AddAssign%3CT%3E-for-Yxy%3CWp,+T%3E"],[195,"impl-AddAssign-for-Yxy%3CWp,+T%3E"],[196,"impl-AddAssign%3CT%3E-for-LabHue%3CT%3E"],[197,"impl-AddAssign-for-LabHue%3CT%3E"],[198,"impl-AddAssign-for-LuvHue%3CT%3E"],[199,"impl-AddAssign%3CT%3E-for-LuvHue%3CT%3E"],[200,"impl-AddAssign-for-RgbHue%3CT%3E"],[201,"impl-AddAssign%3CT%3E-for-RgbHue%3CT%3E"],[202,"impl-AddAssign%3CT%3E-for-OklabHue%3CT%3E"],[203,"impl-AddAssign-for-OklabHue%3CT%3E"],[450,"impl-Div-for-Alpha%3CC,+T%3E"],[451,"impl-Div%3CT%3E-for-Alpha%3CC,+T%3E"],[452,"impl-Div-for-Lab%3CWp,+T%3E"],[453,"impl-Div%3CT%3E-for-Lab%3CWp,+T%3E"],[454,"impl-Div%3CT%3E-for-Luv%3CWp,+T%3E"],[455,"impl-Div-for-Luv%3CWp,+T%3E"],[456,"impl-Div%3CT%3E-for-Oklab%3CT%3E"],[457,"impl-Div-for-Oklab%3CT%3E"],[458,"impl-Div-for-Xyz%3CWp,+T%3E"],[459,"impl-Div%3CT%3E-for-Xyz%3CWp,+T%3E"],[460,"impl-Div-for-Yxy%3CWp,+T%3E"],[461,"impl-Div%3CT%3E-for-Yxy%3CWp,+T%3E"],[462,"impl-DivAssign-for-Alpha%3CC,+T%3E"],[463,"impl-DivAssign%3CT%3E-for-Alpha%3CC,+T%3E"],[464,"impl-DivAssign%3CT%3E-for-Lab%3CWp,+T%3E"],[465,"impl-DivAssign-for-Lab%3CWp,+T%3E"],[466,"impl-DivAssign-for-Luv%3CWp,+T%3E"],[467,"impl-DivAssign%3CT%3E-for-Luv%3CWp,+T%3E"],[468,"impl-DivAssign%3CT%3E-for-Oklab%3CT%3E"],[469,"impl-DivAssign-for-Oklab%3CT%3E"],[470,"impl-DivAssign-for-Xyz%3CWp,+T%3E"],[471,"impl-DivAssign%3CT%3E-for-Xyz%3CWp,+T%3E"],[472,"impl-DivAssign-for-Yxy%3CWp,+T%3E"],[473,"impl-DivAssign%3CT%3E-for-Yxy%3CWp,+T%3E"],[488,"impl-PartialEq%3CT%3E-for-LabHue%3CT%3E"],[489,"impl-PartialEq-for-LabHue%3CT%3E"],[490,"impl-PartialEq%3CT%3E-for-LuvHue%3CT%3E"],[491,"impl-PartialEq-for-LuvHue%3CT%3E"],[492,"impl-PartialEq-for-RgbHue%3CT%3E"],[493,"impl-PartialEq%3CT%3E-for-RgbHue%3CT%3E"],[494,"impl-PartialEq%3CT%3E-for-OklabHue%3CT%3E"],[495,"impl-PartialEq-for-OklabHue%3CT%3E"],[497,"impl-LowerHex-for-Alpha%3CC,+T%3E"],[498,"impl-UpperHex-for-Alpha%3CC,+T%3E"],[499,"impl-Debug-for-Alpha%3CC,+T%3E"],[516,"impl-From%3C(T,+T,+T,+A)%3E-for-Alpha%3CXyz%3CWp,+T%3E,+A%3E"],[517,"impl-From%3C(T,+T,+H,+A)%3E-for-Alpha%3COklch%3CT%3E,+A%3E"],[518,"impl-From%3C(T,+T,+T,+A)%3E-for-Alpha%3COklab%3CT%3E,+A%3E"],[521,"impl-From%3CC%3E-for-Alpha%3CC,+T%3E"],[522,"impl-From%3C(T,+T,+T,+A)%3E-for-Alpha%3CLuv%3CWp,+T%3E,+A%3E"],[523,"impl-From%3CPreAlpha%3CC,+T%3E%3E-for-Alpha%3CC,+T%3E"],[524,"impl-From%3C(H,+T,+T,+A)%3E-for-Alpha%3CHsl%3CS,+T%3E,+A%3E"],[525,"impl-From%3C(T,+T,+H,+A)%3E-for-Alpha%3CLchuv%3CWp,+T%3E,+A%3E"],[526,"impl-From%3C(T,+T,+T,+A)%3E-for-Alpha%3CYxy%3CWp,+T%3E,+A%3E"],[527,"impl-From%3C(H,+T,+T,+A)%3E-for-Alpha%3CHsv%3CS,+T%3E,+A%3E"],[528,"impl-From%3C(T,+A)%3E-for-Alpha%3CLuma%3CS,+T%3E,+A%3E"],[529,"impl-From%3C(T,+T,+T,+A)%3E-for-Alpha%3CLab%3CWp,+T%3E,+A%3E"],[530,"impl-From%3C(H,+T,+T,+A)%3E-for-Alpha%3CHwb%3CS,+T%3E,+A%3E"],[531,"impl-From%3C(H,+T,+T,+A)%3E-for-Alpha%3CHsluv%3CWp,+T%3E,+A%3E"],[532,"impl-From%3C(T,+T,+T,+A)%3E-for-Alpha%3CRgb%3CS,+T%3E,+A%3E"],[533,"impl-From%3C(T,+T,+H,+A)%3E-for-Alpha%3CLch%3CWp,+T%3E,+A%3E"],[580,"impl-FromColorUnclamped%3CXyz%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Hsl%3CS,+T%3E"],[581,"impl-FromColorUnclamped%3COklab%3CT%3E%3E-for-Hsl%3CS,+T%3E"],[582,"impl-FromColorUnclamped%3CHsl%3CS1,+T%3E%3E-for-Hsl%3CS2,+T%3E"],[583,"impl-FromColorUnclamped%3CLuv%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Hsl%3CS,+T%3E"],[584,"impl-FromColorUnclamped%3CLchuv%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Hsl%3CS,+T%3E"],[585,"impl-FromColorUnclamped%3CHsluv%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Hsl%3CS,+T%3E"],[586,"impl-FromColorUnclamped%3CLch%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Hsl%3CS,+T%3E"],[587,"impl-FromColorUnclamped%3CRgb%3CS,+T%3E%3E-for-Hsl%3CS,+T%3E"],[588,"impl-FromColorUnclamped%3CLab%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Hsl%3CS,+T%3E"],[589,"impl-FromColorUnclamped%3COklch%3CT%3E%3E-for-Hsl%3CS,+T%3E"],[590,"impl-FromColorUnclamped%3CYxy%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Hsl%3CS,+T%3E"],[591,"impl-FromColorUnclamped%3CHwb%3CS,+T%3E%3E-for-Hsl%3CS,+T%3E"],[592,"impl-FromColorUnclamped%3CAlpha%3C_C,+_A%3E%3E-for-Hsl%3CS,+T%3E"],[593,"impl-FromColorUnclamped%3CLuma%3C_S,+T%3E%3E-for-Hsl%3CS,+T%3E"],[594,"impl-FromColorUnclamped%3CHsv%3CS,+T%3E%3E-for-Hsl%3CS,+T%3E"],[595,"impl-FromColorUnclamped%3CYxy%3CWp,+T%3E%3E-for-Hsluv%3CWp,+T%3E"],[596,"impl-FromColorUnclamped%3CLuv%3CWp,+T%3E%3E-for-Hsluv%3CWp,+T%3E"],[597,"impl-FromColorUnclamped%3CLch%3CWp,+T%3E%3E-for-Hsluv%3CWp,+T%3E"],[598,"impl-FromColorUnclamped%3CLchuv%3CWp,+T%3E%3E-for-Hsluv%3CWp,+T%3E"],[599,"impl-FromColorUnclamped%3CRgb%3C_S,+T%3E%3E-for-Hsluv%3CWp,+T%3E"],[600,"impl-FromColorUnclamped%3CHsluv%3CWp,+T%3E%3E-for-Hsluv%3CWp,+T%3E"],[601,"impl-FromColorUnclamped%3CAlpha%3C_C,+_A%3E%3E-for-Hsluv%3CWp,+T%3E"],[602,"impl-FromColorUnclamped%3CXyz%3CWp,+T%3E%3E-for-Hsluv%3CWp,+T%3E"],[603,"impl-FromColorUnclamped%3CLab%3CWp,+T%3E%3E-for-Hsluv%3CWp,+T%3E"],[604,"impl-FromColorUnclamped%3COklab%3CT%3E%3E-for-Hsluv%3CWp,+T%3E"],[605,"impl-FromColorUnclamped%3CHsv%3C_S,+T%3E%3E-for-Hsluv%3CWp,+T%3E"],[606,"impl-FromColorUnclamped%3COklch%3CT%3E%3E-for-Hsluv%3CWp,+T%3E"],[607,"impl-FromColorUnclamped%3CHsl%3C_S,+T%3E%3E-for-Hsluv%3CWp,+T%3E"],[608,"impl-FromColorUnclamped%3CLuma%3C_S,+T%3E%3E-for-Hsluv%3CWp,+T%3E"],[609,"impl-FromColorUnclamped%3CHwb%3C_S,+T%3E%3E-for-Hsluv%3CWp,+T%3E"],[610,"impl-FromColorUnclamped%3CHwb%3CS,+T%3E%3E-for-Hsv%3CS,+T%3E"],[611,"impl-FromColorUnclamped%3CLab%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Hsv%3CS,+T%3E"],[612,"impl-FromColorUnclamped%3CLuma%3C_S,+T%3E%3E-for-Hsv%3CS,+T%3E"],[613,"impl-FromColorUnclamped%3COklch%3CT%3E%3E-for-Hsv%3CS,+T%3E"],[614,"impl-FromColorUnclamped%3CHsv%3CS1,+T%3E%3E-for-Hsv%3CS2,+T%3E"],[615,"impl-FromColorUnclamped%3CYxy%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Hsv%3CS,+T%3E"],[616,"impl-FromColorUnclamped%3CLch%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Hsv%3CS,+T%3E"],[617,"impl-FromColorUnclamped%3CHsl%3CS,+T%3E%3E-for-Hsv%3CS,+T%3E"],[618,"impl-FromColorUnclamped%3COklab%3CT%3E%3E-for-Hsv%3CS,+T%3E"],[619,"impl-FromColorUnclamped%3CXyz%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Hsv%3CS,+T%3E"],[620,"impl-FromColorUnclamped%3CRgb%3CS,+T%3E%3E-for-Hsv%3CS,+T%3E"],[621,"impl-FromColorUnclamped%3CLuv%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Hsv%3CS,+T%3E"],[622,"impl-FromColorUnclamped%3CAlpha%3C_C,+_A%3E%3E-for-Hsv%3CS,+T%3E"],[623,"impl-FromColorUnclamped%3CLchuv%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Hsv%3CS,+T%3E"],[624,"impl-FromColorUnclamped%3CHsluv%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Hsv%3CS,+T%3E"],[625,"impl-FromColorUnclamped%3CXyz%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Hwb%3CS,+T%3E"],[626,"impl-FromColorUnclamped%3CLab%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Hwb%3CS,+T%3E"],[627,"impl-FromColorUnclamped%3COklab%3CT%3E%3E-for-Hwb%3CS,+T%3E"],[628,"impl-FromColorUnclamped%3CYxy%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Hwb%3CS,+T%3E"],[629,"impl-FromColorUnclamped%3CAlpha%3C_C,+_A%3E%3E-for-Hwb%3CS,+T%3E"],[630,"impl-FromColorUnclamped%3CLch%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Hwb%3CS,+T%3E"],[631,"impl-FromColorUnclamped%3CRgb%3CS,+T%3E%3E-for-Hwb%3CS,+T%3E"],[632,"impl-FromColorUnclamped%3CHwb%3CS1,+T%3E%3E-for-Hwb%3CS2,+T%3E"],[633,"impl-FromColorUnclamped%3CHsluv%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Hwb%3CS,+T%3E"],[634,"impl-FromColorUnclamped%3CLuma%3C_S,+T%3E%3E-for-Hwb%3CS,+T%3E"],[635,"impl-FromColorUnclamped%3CHsv%3CS,+T%3E%3E-for-Hwb%3CS,+T%3E"],[636,"impl-FromColorUnclamped%3COklch%3CT%3E%3E-for-Hwb%3CS,+T%3E"],[637,"impl-FromColorUnclamped%3CLchuv%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Hwb%3CS,+T%3E"],[638,"impl-FromColorUnclamped%3CLuv%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Hwb%3CS,+T%3E"],[639,"impl-FromColorUnclamped%3CHsl%3CS,+T%3E%3E-for-Hwb%3CS,+T%3E"],[640,"impl-FromColorUnclamped%3CLab%3CWp,+T%3E%3E-for-Lab%3CWp,+T%3E"],[641,"impl-FromColorUnclamped%3CHwb%3C_S,+T%3E%3E-for-Lab%3CWp,+T%3E"],[642,"impl-FromColorUnclamped%3CLuma%3C_S,+T%3E%3E-for-Lab%3CWp,+T%3E"],[643,"impl-FromColorUnclamped%3CLchuv%3CWp,+T%3E%3E-for-Lab%3CWp,+T%3E"],[644,"impl-FromColorUnclamped%3COklch%3CT%3E%3E-for-Lab%3CWp,+T%3E"],[645,"impl-FromColorUnclamped%3CHsluv%3CWp,+T%3E%3E-for-Lab%3CWp,+T%3E"],[646,"impl-FromColorUnclamped%3CLch%3CWp,+T%3E%3E-for-Lab%3CWp,+T%3E"],[647,"impl-FromColorUnclamped%3CRgb%3C_S,+T%3E%3E-for-Lab%3CWp,+T%3E"],[648,"impl-FromColorUnclamped%3CAlpha%3C_C,+_A%3E%3E-for-Lab%3CWp,+T%3E"],[649,"impl-FromColorUnclamped%3COklab%3CT%3E%3E-for-Lab%3CWp,+T%3E"],[650,"impl-FromColorUnclamped%3CLuv%3CWp,+T%3E%3E-for-Lab%3CWp,+T%3E"],[651,"impl-FromColorUnclamped%3CHsl%3C_S,+T%3E%3E-for-Lab%3CWp,+T%3E"],[652,"impl-FromColorUnclamped%3CXyz%3CWp,+T%3E%3E-for-Lab%3CWp,+T%3E"],[653,"impl-FromColorUnclamped%3CHsv%3C_S,+T%3E%3E-for-Lab%3CWp,+T%3E"],[654,"impl-FromColorUnclamped%3CYxy%3CWp,+T%3E%3E-for-Lab%3CWp,+T%3E"],[655,"impl-FromColorUnclamped%3CLchuv%3CWp,+T%3E%3E-for-Lch%3CWp,+T%3E"],[656,"impl-FromColorUnclamped%3CHsl%3C_S,+T%3E%3E-for-Lch%3CWp,+T%3E"],[657,"impl-FromColorUnclamped%3CLuma%3C_S,+T%3E%3E-for-Lch%3CWp,+T%3E"],[658,"impl-FromColorUnclamped%3COklab%3CT%3E%3E-for-Lch%3CWp,+T%3E"],[659,"impl-FromColorUnclamped%3CHwb%3C_S,+T%3E%3E-for-Lch%3CWp,+T%3E"],[660,"impl-FromColorUnclamped%3CLuv%3CWp,+T%3E%3E-for-Lch%3CWp,+T%3E"],[661,"impl-FromColorUnclamped%3CYxy%3CWp,+T%3E%3E-for-Lch%3CWp,+T%3E"],[662,"impl-FromColorUnclamped%3CLab%3CWp,+T%3E%3E-for-Lch%3CWp,+T%3E"],[663,"impl-FromColorUnclamped%3CHsv%3C_S,+T%3E%3E-for-Lch%3CWp,+T%3E"],[664,"impl-FromColorUnclamped%3CXyz%3CWp,+T%3E%3E-for-Lch%3CWp,+T%3E"],[665,"impl-FromColorUnclamped%3CLch%3CWp,+T%3E%3E-for-Lch%3CWp,+T%3E"],[666,"impl-FromColorUnclamped%3CHsluv%3CWp,+T%3E%3E-for-Lch%3CWp,+T%3E"],[667,"impl-FromColorUnclamped%3CAlpha%3C_C,+_A%3E%3E-for-Lch%3CWp,+T%3E"],[668,"impl-FromColorUnclamped%3COklch%3CT%3E%3E-for-Lch%3CWp,+T%3E"],[669,"impl-FromColorUnclamped%3CRgb%3C_S,+T%3E%3E-for-Lch%3CWp,+T%3E"],[670,"impl-FromColorUnclamped%3CYxy%3CWp,+T%3E%3E-for-Lchuv%3CWp,+T%3E"],[671,"impl-FromColorUnclamped%3COklab%3CT%3E%3E-for-Lchuv%3CWp,+T%3E"],[672,"impl-FromColorUnclamped%3CXyz%3CWp,+T%3E%3E-for-Lchuv%3CWp,+T%3E"],[673,"impl-FromColorUnclamped%3CAlpha%3C_C,+_A%3E%3E-for-Lchuv%3CWp,+T%3E"],[674,"impl-FromColorUnclamped%3CHwb%3C_S,+T%3E%3E-for-Lchuv%3CWp,+T%3E"],[675,"impl-FromColorUnclamped%3COklch%3CT%3E%3E-for-Lchuv%3CWp,+T%3E"],[676,"impl-FromColorUnclamped%3CRgb%3C_S,+T%3E%3E-for-Lchuv%3CWp,+T%3E"],[677,"impl-FromColorUnclamped%3CHsl%3C_S,+T%3E%3E-for-Lchuv%3CWp,+T%3E"],[678,"impl-FromColorUnclamped%3CHsluv%3CWp,+T%3E%3E-for-Lchuv%3CWp,+T%3E"],[679,"impl-FromColorUnclamped%3CLchuv%3CWp,+T%3E%3E-for-Lchuv%3CWp,+T%3E"],[680,"impl-FromColorUnclamped%3CHsv%3C_S,+T%3E%3E-for-Lchuv%3CWp,+T%3E"],[681,"impl-FromColorUnclamped%3CLuv%3CWp,+T%3E%3E-for-Lchuv%3CWp,+T%3E"],[682,"impl-FromColorUnclamped%3CLuma%3C_S,+T%3E%3E-for-Lchuv%3CWp,+T%3E"],[683,"impl-FromColorUnclamped%3CLab%3CWp,+T%3E%3E-for-Lchuv%3CWp,+T%3E"],[684,"impl-FromColorUnclamped%3CLch%3CWp,+T%3E%3E-for-Lchuv%3CWp,+T%3E"],[685,"impl-FromColorUnclamped%3CLch%3CWp,+T%3E%3E-for-Luv%3CWp,+T%3E"],[686,"impl-FromColorUnclamped%3CXyz%3CWp,+T%3E%3E-for-Luv%3CWp,+T%3E"],[687,"impl-FromColorUnclamped%3CLchuv%3CWp,+T%3E%3E-for-Luv%3CWp,+T%3E"],[688,"impl-FromColorUnclamped%3CRgb%3C_S,+T%3E%3E-for-Luv%3CWp,+T%3E"],[689,"impl-FromColorUnclamped%3COklab%3CT%3E%3E-for-Luv%3CWp,+T%3E"],[690,"impl-FromColorUnclamped%3CHsv%3C_S,+T%3E%3E-for-Luv%3CWp,+T%3E"],[691,"impl-FromColorUnclamped%3CHsl%3C_S,+T%3E%3E-for-Luv%3CWp,+T%3E"],[692,"impl-FromColorUnclamped%3CHsluv%3CWp,+T%3E%3E-for-Luv%3CWp,+T%3E"],[693,"impl-FromColorUnclamped%3CLuma%3C_S,+T%3E%3E-for-Luv%3CWp,+T%3E"],[694,"impl-FromColorUnclamped%3CLuv%3CWp,+T%3E%3E-for-Luv%3CWp,+T%3E"],[695,"impl-FromColorUnclamped%3CHwb%3C_S,+T%3E%3E-for-Luv%3CWp,+T%3E"],[696,"impl-FromColorUnclamped%3COklch%3CT%3E%3E-for-Luv%3CWp,+T%3E"],[697,"impl-FromColorUnclamped%3CAlpha%3C_C,+_A%3E%3E-for-Luv%3CWp,+T%3E"],[698,"impl-FromColorUnclamped%3CYxy%3CWp,+T%3E%3E-for-Luv%3CWp,+T%3E"],[699,"impl-FromColorUnclamped%3CLab%3CWp,+T%3E%3E-for-Luv%3CWp,+T%3E"],[700,"impl-FromColorUnclamped%3CHsv%3C_S,+T%3E%3E-for-Oklab%3CT%3E"],[701,"impl-FromColorUnclamped%3CLab%3CD65,+T%3E%3E-for-Oklab%3CT%3E"],[702,"impl-FromColorUnclamped%3CLchuv%3CD65,+T%3E%3E-for-Oklab%3CT%3E"],[703,"impl-FromColorUnclamped%3COklab%3CT%3E%3E-for-Oklab%3CT%3E"],[704,"impl-FromColorUnclamped%3CRgb%3C_S,+T%3E%3E-for-Oklab%3CT%3E"],[705,"impl-FromColorUnclamped%3CHsluv%3CD65,+T%3E%3E-for-Oklab%3CT%3E"],[706,"impl-FromColorUnclamped%3COklch%3CT%3E%3E-for-Oklab%3CT%3E"],[707,"impl-FromColorUnclamped%3CAlpha%3C_C,+_A%3E%3E-for-Oklab%3CT%3E"],[708,"impl-FromColorUnclamped%3CHsl%3C_S,+T%3E%3E-for-Oklab%3CT%3E"],[709,"impl-FromColorUnclamped%3CYxy%3CD65,+T%3E%3E-for-Oklab%3CT%3E"],[710,"impl-FromColorUnclamped%3CLuma%3C_S,+T%3E%3E-for-Oklab%3CT%3E"],[711,"impl-FromColorUnclamped%3CLuv%3CD65,+T%3E%3E-for-Oklab%3CT%3E"],[712,"impl-FromColorUnclamped%3CXyz%3CD65,+T%3E%3E-for-Oklab%3CT%3E"],[713,"impl-FromColorUnclamped%3CHwb%3C_S,+T%3E%3E-for-Oklab%3CT%3E"],[714,"impl-FromColorUnclamped%3CLch%3CD65,+T%3E%3E-for-Oklab%3CT%3E"],[715,"impl-FromColorUnclamped%3CHsv%3C_S,+T%3E%3E-for-Oklch%3CT%3E"],[716,"impl-FromColorUnclamped%3CHsl%3C_S,+T%3E%3E-for-Oklch%3CT%3E"],[717,"impl-FromColorUnclamped%3CLuv%3CD65,+T%3E%3E-for-Oklch%3CT%3E"],[718,"impl-FromColorUnclamped%3CHsluv%3CD65,+T%3E%3E-for-Oklch%3CT%3E"],[719,"impl-FromColorUnclamped%3CLch%3CD65,+T%3E%3E-for-Oklch%3CT%3E"],[720,"impl-FromColorUnclamped%3CAlpha%3C_C,+_A%3E%3E-for-Oklch%3CT%3E"],[721,"impl-FromColorUnclamped%3CHwb%3C_S,+T%3E%3E-for-Oklch%3CT%3E"],[722,"impl-FromColorUnclamped%3CRgb%3C_S,+T%3E%3E-for-Oklch%3CT%3E"],[723,"impl-FromColorUnclamped%3CLab%3CD65,+T%3E%3E-for-Oklch%3CT%3E"],[724,"impl-FromColorUnclamped%3CLchuv%3CD65,+T%3E%3E-for-Oklch%3CT%3E"],[725,"impl-FromColorUnclamped%3CYxy%3CD65,+T%3E%3E-for-Oklch%3CT%3E"],[726,"impl-FromColorUnclamped%3CXyz%3CD65,+T%3E%3E-for-Oklch%3CT%3E"],[727,"impl-FromColorUnclamped%3COklab%3CT%3E%3E-for-Oklch%3CT%3E"],[728,"impl-FromColorUnclamped%3CLuma%3C_S,+T%3E%3E-for-Oklch%3CT%3E"],[729,"impl-FromColorUnclamped%3COklch%3CT%3E%3E-for-Oklch%3CT%3E"],[730,"impl-FromColorUnclamped%3CLuma%3CS,+T%3E%3E-for-Xyz%3CWp,+T%3E"],[731,"impl-FromColorUnclamped%3CRgb%3CS,+T%3E%3E-for-Xyz%3CWp,+T%3E"],[732,"impl-FromColorUnclamped%3COklab%3CT%3E%3E-for-Xyz%3CD65,+T%3E"],[733,"impl-FromColorUnclamped%3CHsluv%3CWp,+T%3E%3E-for-Xyz%3CWp,+T%3E"],[734,"impl-FromColorUnclamped%3CLch%3CWp,+T%3E%3E-for-Xyz%3CWp,+T%3E"],[735,"impl-FromColorUnclamped%3CLab%3CWp,+T%3E%3E-for-Xyz%3CWp,+T%3E"],[736,"impl-FromColorUnclamped%3CHwb%3C_S,+T%3E%3E-for-Xyz%3CWp,+T%3E"],[737,"impl-FromColorUnclamped%3COklch%3CT%3E%3E-for-Xyz%3CD65,+T%3E"],[738,"impl-FromColorUnclamped%3CHsv%3C_S,+T%3E%3E-for-Xyz%3CWp,+T%3E"],[739,"impl-FromColorUnclamped%3CLuv%3CWp,+T%3E%3E-for-Xyz%3CWp,+T%3E"],[740,"impl-FromColorUnclamped%3CAlpha%3C_C,+_A%3E%3E-for-Xyz%3CWp,+T%3E"],[741,"impl-FromColorUnclamped%3CHsl%3C_S,+T%3E%3E-for-Xyz%3CWp,+T%3E"],[742,"impl-FromColorUnclamped%3CXyz%3CWp,+T%3E%3E-for-Xyz%3CWp,+T%3E"],[743,"impl-FromColorUnclamped%3CLchuv%3CWp,+T%3E%3E-for-Xyz%3CWp,+T%3E"],[744,"impl-FromColorUnclamped%3CYxy%3CWp,+T%3E%3E-for-Xyz%3CWp,+T%3E"],[745,"impl-FromColorUnclamped%3CXyz%3CWp,+T%3E%3E-for-Yxy%3CWp,+T%3E"],[746,"impl-FromColorUnclamped%3CLchuv%3CWp,+T%3E%3E-for-Yxy%3CWp,+T%3E"],[747,"impl-FromColorUnclamped%3CRgb%3C_S,+T%3E%3E-for-Yxy%3CWp,+T%3E"],[748,"impl-FromColorUnclamped%3CLuv%3CWp,+T%3E%3E-for-Yxy%3CWp,+T%3E"],[749,"impl-FromColorUnclamped%3COklab%3CT%3E%3E-for-Yxy%3CWp,+T%3E"],[750,"impl-FromColorUnclamped%3CLab%3CWp,+T%3E%3E-for-Yxy%3CWp,+T%3E"],[751,"impl-FromColorUnclamped%3COklch%3CT%3E%3E-for-Yxy%3CWp,+T%3E"],[752,"impl-FromColorUnclamped%3CAlpha%3C_C,+_A%3E%3E-for-Yxy%3CWp,+T%3E"],[753,"impl-FromColorUnclamped%3CLuma%3CS,+T%3E%3E-for-Yxy%3C%3CS+as+LumaStandard%3E::WhitePoint,+T%3E"],[754,"impl-FromColorUnclamped%3CHsl%3C_S,+T%3E%3E-for-Yxy%3CWp,+T%3E"],[755,"impl-FromColorUnclamped%3CHsluv%3CWp,+T%3E%3E-for-Yxy%3CWp,+T%3E"],[756,"impl-FromColorUnclamped%3CHsv%3C_S,+T%3E%3E-for-Yxy%3CWp,+T%3E"],[757,"impl-FromColorUnclamped%3CHwb%3C_S,+T%3E%3E-for-Yxy%3CWp,+T%3E"],[758,"impl-FromColorUnclamped%3CYxy%3CWp,+T%3E%3E-for-Yxy%3CWp,+T%3E"],[759,"impl-FromColorUnclamped%3CLch%3CWp,+T%3E%3E-for-Yxy%3CWp,+T%3E"],[761,"impl-Alpha%3CHsluv%3CWp,+T%3E,+A%3E"],[762,"impl-Alpha%3CRgb%3CS,+T%3E,+A%3E"],[763,"impl-Alpha%3CLab%3CWp,+T%3E,+A%3E"],[764,"impl-Alpha%3CLchuv%3CWp,+T%3E,+A%3E"],[765,"impl-Alpha%3CLch%3CWp,+T%3E,+A%3E"],[766,"impl-Alpha%3CYxy%3CWp,+T%3E,+A%3E"],[767,"impl-Alpha%3CHwb%3CS,+T%3E,+A%3E"],[768,"impl-Alpha%3CXyz%3CWp,+T%3E,+A%3E"],[769,"impl-Alpha%3CHsv%3CS,+T%3E,+A%3E"],[770,"impl-Alpha%3CLuma%3CS,+T%3E,+A%3E"],[771,"impl-Alpha%3CLuv%3CWp,+T%3E,+A%3E"],[772,"impl-Alpha%3CHsl%3CS,+T%3E,+A%3E"],[773,"impl-Alpha%3COklab%3CT%3E,+A%3E"],[774,"impl-Alpha%3COklch%3CT%3E,+A%3E"],[791,"impl-Alpha%3CLuma%3CS,+T%3E,+A%3E"],[792,"impl-Alpha%3CRgb%3CS,+T%3E,+A%3E"],[794,"impl-Alpha%3CRgb%3CS,+T%3E,+A%3E"],[795,"impl-Alpha%3CLuma%3CS,+T%3E,+A%3E"],[796,"impl-Alpha%3CRgb%3CS,+T%3E,+A%3E"],[797,"impl-Alpha%3CLuma%3CS,+T%3E,+A%3E"],[850,"impl-Into%3C(T,+T,+T,+A)%3E-for-Alpha%3CXyz%3CWp,+T%3E,+A%3E"],[851,"impl-Into%3C(RgbHue%3CT%3E,+T,+T,+A)%3E-for-Alpha%3CHsl%3CS,+T%3E,+A%3E"],[852,"impl-Into%3C(T,+T,+OklabHue%3CT%3E,+A)%3E-for-Alpha%3COklch%3CT%3E,+A%3E"],[853,"impl-Into%3C(T,+T,+T,+A)%3E-for-Alpha%3CLuv%3CWp,+T%3E,+A%3E"],[854,"impl-Into%3C(RgbHue%3CT%3E,+T,+T,+A)%3E-for-Alpha%3CHsv%3CS,+T%3E,+A%3E"],[855,"impl-Into%3C(T,+T,+T,+A)%3E-for-Alpha%3CLab%3CWp,+T%3E,+A%3E"],[856,"impl-Into%3C(T,+A)%3E-for-Alpha%3CLuma%3CS,+T%3E,+A%3E"],[857,"impl-Into%3C(T,+T,+LabHue%3CT%3E,+A)%3E-for-Alpha%3CLch%3CWp,+T%3E,+A%3E"],[858,"impl-Into%3C(T,+T,+T,+A)%3E-for-Alpha%3COklab%3CT%3E,+A%3E"],[859,"impl-Into%3C(T,+T,+LuvHue%3CT%3E,+A)%3E-for-Alpha%3CLchuv%3CWp,+T%3E,+A%3E"],[860,"impl-Into%3C(LuvHue%3CT%3E,+T,+T,+A)%3E-for-Alpha%3CHsluv%3CWp,+T%3E,+A%3E"],[861,"impl-Into%3C(RgbHue%3CT%3E,+T,+T,+A)%3E-for-Alpha%3CHwb%3CS,+T%3E,+A%3E"],[863,"impl-Into%3C(T,+T,+T,+A)%3E-for-Alpha%3CRgb%3CS,+T%3E,+A%3E"],[864,"impl-Into%3C(T,+T,+T,+A)%3E-for-Alpha%3CYxy%3CWp,+T%3E,+A%3E"],[889,"impl-Into%3Cf32%3E-for-LabHue"],[890,"impl-Into%3Cf32%3E-for-LabHue%3Cf64%3E"],[891,"impl-Into%3Cf64%3E-for-LabHue%3Cf64%3E"],[893,"impl-Into%3Cf64%3E-for-LuvHue%3Cf64%3E"],[894,"impl-Into%3Cf32%3E-for-LuvHue%3Cf64%3E"],[896,"impl-Into%3Cf32%3E-for-LuvHue"],[897,"impl-Into%3Cf32%3E-for-RgbHue"],[899,"impl-Into%3Cf32%3E-for-RgbHue%3Cf64%3E"],[900,"impl-Into%3Cf64%3E-for-RgbHue%3Cf64%3E"],[901,"impl-Into%3Cf32%3E-for-OklabHue"],[902,"impl-Into%3Cf32%3E-for-OklabHue%3Cf64%3E"],[904,"impl-Into%3Cf64%3E-for-OklabHue%3Cf64%3E"],[940,"impl-Alpha%3CLuv%3CWp,+T%3E,+A%3E"],[941,"impl-Alpha%3CHwb%3CS,+T%3E,+A%3E"],[942,"impl-Alpha%3CLab%3CWp,+T%3E,+A%3E"],[943,"impl-Alpha%3CYxy%3CWp,+T%3E,+A%3E"],[944,"impl-Alpha%3COklab%3CT%3E,+A%3E"],[945,"impl-Alpha%3CLch%3CWp,+T%3E,+A%3E"],[946,"impl-Alpha%3CXyz%3CWp,+T%3E,+A%3E"],[947,"impl-Alpha%3CHsl%3CS,+T%3E,+A%3E"],[948,"impl-Alpha%3CRgb%3CS,+T%3E,+A%3E"],[949,"impl-Alpha%3CHsv%3CS,+T%3E,+A%3E"],[950,"impl-Alpha%3CLchuv%3CWp,+T%3E,+A%3E"],[951,"impl-Alpha%3COklch%3CT%3E,+A%3E"],[952,"impl-Alpha%3CHsluv%3CWp,+T%3E,+A%3E"],[953,"impl-Alpha%3CLuma%3CS,+T%3E,+A%3E"],[966,"impl-Alpha%3CRgb%3CS,+T%3E,+A%3E"],[967,"impl-Alpha%3CLuma%3CS,+T%3E,+A%3E"],[968,"impl-Alpha%3CRgb%3CS,+T%3E,+A%3E"],[969,"impl-Alpha%3CLuma%3CS,+T%3E,+A%3E"],[970,"impl-Alpha%3CLuma%3CS,+T%3E,+A%3E"],[971,"impl-Alpha%3CRgb%3CS,+T%3E,+A%3E"],[1102,"impl-Mul%3CT%3E-for-Alpha%3CC,+T%3E"],[1103,"impl-Mul-for-Alpha%3CC,+T%3E"],[1104,"impl-Mul-for-Lab%3CWp,+T%3E"],[1105,"impl-Mul%3CT%3E-for-Lab%3CWp,+T%3E"],[1106,"impl-Mul-for-Luv%3CWp,+T%3E"],[1107,"impl-Mul%3CT%3E-for-Luv%3CWp,+T%3E"],[1108,"impl-Mul%3CT%3E-for-Oklab%3CT%3E"],[1109,"impl-Mul-for-Oklab%3CT%3E"],[1110,"impl-Mul-for-Xyz%3CWp,+T%3E"],[1111,"impl-Mul%3CT%3E-for-Xyz%3CWp,+T%3E"],[1112,"impl-Mul-for-Yxy%3CWp,+T%3E"],[1113,"impl-Mul%3CT%3E-for-Yxy%3CWp,+T%3E"],[1114,"impl-MulAssign-for-Alpha%3CC,+T%3E"],[1115,"impl-MulAssign%3CT%3E-for-Alpha%3CC,+T%3E"],[1116,"impl-MulAssign%3CT%3E-for-Lab%3CWp,+T%3E"],[1117,"impl-MulAssign-for-Lab%3CWp,+T%3E"],[1118,"impl-MulAssign-for-Luv%3CWp,+T%3E"],[1119,"impl-MulAssign%3CT%3E-for-Luv%3CWp,+T%3E"],[1120,"impl-MulAssign-for-Oklab%3CT%3E"],[1121,"impl-MulAssign%3CT%3E-for-Oklab%3CT%3E"],[1122,"impl-MulAssign%3CT%3E-for-Xyz%3CWp,+T%3E"],[1123,"impl-MulAssign-for-Xyz%3CWp,+T%3E"],[1124,"impl-MulAssign-for-Yxy%3CWp,+T%3E"],[1125,"impl-MulAssign%3CT%3E-for-Yxy%3CWp,+T%3E"],[1127,"impl-Alpha%3CLab%3CD65,+T%3E,+A%3E"],[1128,"impl-Alpha%3CHsv%3CSrgb,+T%3E,+A%3E"],[1129,"impl-Alpha%3CLuv%3CD65,+T%3E,+A%3E"],[1130,"impl-Alpha%3CXyz%3CD65,+T%3E,+A%3E"],[1131,"impl-Alpha%3CHsluv%3CD65,+T%3E,+A%3E"],[1132,"impl-Alpha%3CHwb%3CSrgb,+T%3E,+A%3E"],[1133,"impl-Alpha%3CRgb%3CS,+T%3E,+A%3E"],[1134,"impl-Alpha%3CHsl%3CSrgb,+T%3E,+A%3E"],[1135,"impl-Alpha%3COklab%3CT%3E,+A%3E"],[1136,"impl-Alpha%3CLch%3CD65,+T%3E,+A%3E"],[1137,"impl-Alpha%3CYxy%3CD65,+T%3E,+A%3E"],[1138,"impl-Alpha%3COklch%3CT%3E,+A%3E"],[1139,"impl-Alpha%3CLuma%3CS,+T%3E,+A%3E"],[1140,"impl-Alpha%3CLchuv%3CD65,+T%3E,+A%3E"],[1229,"impl-Sub-for-Alpha%3CC,+T%3E"],[1230,"impl-Sub%3CT%3E-for-Alpha%3CC,+T%3E"],[1231,"impl-Sub-for-Hsl%3CS,+T%3E"],[1232,"impl-Sub%3CT%3E-for-Hsl%3CS,+T%3E"],[1233,"impl-Sub%3CT%3E-for-Hsluv%3CWp,+T%3E"],[1234,"impl-Sub-for-Hsluv%3CWp,+T%3E"],[1235,"impl-Sub-for-Hsv%3CS,+T%3E"],[1236,"impl-Sub%3CT%3E-for-Hsv%3CS,+T%3E"],[1237,"impl-Sub-for-Hwb%3CS,+T%3E"],[1238,"impl-Sub%3CT%3E-for-Hwb%3CS,+T%3E"],[1239,"impl-Sub%3CT%3E-for-Lab%3CWp,+T%3E"],[1240,"impl-Sub-for-Lab%3CWp,+T%3E"],[1241,"impl-Sub%3CT%3E-for-Lch%3CWp,+T%3E"],[1242,"impl-Sub-for-Lch%3CWp,+T%3E"],[1243,"impl-Sub%3CT%3E-for-Lchuv%3CWp,+T%3E"],[1244,"impl-Sub-for-Lchuv%3CWp,+T%3E"],[1245,"impl-Sub-for-Luv%3CWp,+T%3E"],[1246,"impl-Sub%3CT%3E-for-Luv%3CWp,+T%3E"],[1247,"impl-Sub-for-Oklab%3CT%3E"],[1248,"impl-Sub%3CT%3E-for-Oklab%3CT%3E"],[1249,"impl-Sub-for-Oklch%3CT%3E"],[1250,"impl-Sub%3CT%3E-for-Oklch%3CT%3E"],[1251,"impl-Sub%3CT%3E-for-Xyz%3CWp,+T%3E"],[1252,"impl-Sub-for-Xyz%3CWp,+T%3E"],[1253,"impl-Sub%3CT%3E-for-Yxy%3CWp,+T%3E"],[1254,"impl-Sub-for-Yxy%3CWp,+T%3E"],[1255,"impl-Sub%3CT%3E-for-LabHue%3CT%3E"],[1256,"impl-Sub-for-LabHue%3CT%3E"],[1257,"impl-Sub-for-LuvHue%3CT%3E"],[1258,"impl-Sub%3CT%3E-for-LuvHue%3CT%3E"],[1259,"impl-Sub%3CT%3E-for-RgbHue%3CT%3E"],[1260,"impl-Sub-for-RgbHue%3CT%3E"],[1261,"impl-Sub-for-OklabHue%3CT%3E"],[1262,"impl-Sub%3CT%3E-for-OklabHue%3CT%3E"],[1263,"impl-SubAssign%3CT%3E-for-Alpha%3CC,+T%3E"],[1264,"impl-SubAssign-for-Alpha%3CC,+T%3E"],[1265,"impl-SubAssign-for-Hsl%3CS,+T%3E"],[1266,"impl-SubAssign%3CT%3E-for-Hsl%3CS,+T%3E"],[1267,"impl-SubAssign%3CT%3E-for-Hsluv%3CWp,+T%3E"],[1268,"impl-SubAssign-for-Hsluv%3CWp,+T%3E"],[1269,"impl-SubAssign%3CT%3E-for-Hsv%3CS,+T%3E"],[1270,"impl-SubAssign-for-Hsv%3CS,+T%3E"],[1271,"impl-SubAssign%3CT%3E-for-Hwb%3CS,+T%3E"],[1272,"impl-SubAssign-for-Hwb%3CS,+T%3E"],[1273,"impl-SubAssign-for-Lab%3CWp,+T%3E"],[1274,"impl-SubAssign%3CT%3E-for-Lab%3CWp,+T%3E"],[1275,"impl-SubAssign%3CT%3E-for-Lch%3CWp,+T%3E"],[1276,"impl-SubAssign-for-Lch%3CWp,+T%3E"],[1277,"impl-SubAssign%3CT%3E-for-Lchuv%3CWp,+T%3E"],[1278,"impl-SubAssign-for-Lchuv%3CWp,+T%3E"],[1279,"impl-SubAssign-for-Luv%3CWp,+T%3E"],[1280,"impl-SubAssign%3CT%3E-for-Luv%3CWp,+T%3E"],[1281,"impl-SubAssign%3CT%3E-for-Oklab%3CT%3E"],[1282,"impl-SubAssign-for-Oklab%3CT%3E"],[1283,"impl-SubAssign%3CT%3E-for-Oklch%3CT%3E"],[1284,"impl-SubAssign-for-Oklch%3CT%3E"],[1285,"impl-SubAssign%3CT%3E-for-Xyz%3CWp,+T%3E"],[1286,"impl-SubAssign-for-Xyz%3CWp,+T%3E"],[1287,"impl-SubAssign-for-Yxy%3CWp,+T%3E"],[1288,"impl-SubAssign%3CT%3E-for-Yxy%3CWp,+T%3E"],[1289,"impl-SubAssign-for-LabHue%3CT%3E"],[1290,"impl-SubAssign%3CT%3E-for-LabHue%3CT%3E"],[1291,"impl-SubAssign-for-LuvHue%3CT%3E"],[1292,"impl-SubAssign%3CT%3E-for-LuvHue%3CT%3E"],[1293,"impl-SubAssign-for-RgbHue%3CT%3E"],[1294,"impl-SubAssign%3CT%3E-for-RgbHue%3CT%3E"],[1295,"impl-SubAssign-for-OklabHue%3CT%3E"],[1296,"impl-SubAssign%3CT%3E-for-OklabHue%3CT%3E"],[1484,"impl-Alpha%3CHsl%3CS,+T%3E,+A%3E"],[1485,"impl-Alpha%3CLch%3CWp,+T%3E,+A%3E"],[1486,"impl-Alpha%3CYxy%3CWp,+T%3E,+A%3E"],[1487,"impl-Alpha%3CHsluv%3CWp,+T%3E,+A%3E"],[1488,"impl-Alpha%3CHsv%3CS,+T%3E,+A%3E"],[1489,"impl-Alpha%3CXyz%3CWp,+T%3E,+A%3E"],[1490,"impl-Alpha%3CLchuv%3CWp,+T%3E,+A%3E"],[1491,"impl-Alpha%3CLab%3CWp,+T%3E,+A%3E"],[1492,"impl-Alpha%3CLuv%3CWp,+T%3E,+A%3E"],[1493,"impl-Alpha%3CHwb%3CS,+T%3E,+A%3E"],[1552,"impl-Add%3CT%3E-for-PreAlpha%3CC,+T%3E"],[1553,"impl-Add-for-PreAlpha%3CC,+T%3E"],[1554,"impl-AddAssign%3CT%3E-for-PreAlpha%3CC,+T%3E"],[1555,"impl-AddAssign-for-PreAlpha%3CC,+T%3E"],[1605,"impl-Div%3CT%3E-for-PreAlpha%3CC,+T%3E"],[1606,"impl-Div-for-PreAlpha%3CC,+T%3E"],[1607,"impl-DivAssign%3CT%3E-for-PreAlpha%3CC,+T%3E"],[1608,"impl-DivAssign-for-PreAlpha%3CC,+T%3E"],[1657,"impl-Mul%3CT%3E-for-PreAlpha%3CC,+T%3E"],[1658,"impl-Mul-for-PreAlpha%3CC,+T%3E"],[1659,"impl-MulAssign%3CT%3E-for-PreAlpha%3CC,+T%3E"],[1660,"impl-MulAssign-for-PreAlpha%3CC,+T%3E"],[1677,"impl-Sub-for-PreAlpha%3CC,+T%3E"],[1678,"impl-Sub%3CT%3E-for-PreAlpha%3CC,+T%3E"],[1679,"impl-SubAssign-for-PreAlpha%3CC,+T%3E"],[1680,"impl-SubAssign%3CT%3E-for-PreAlpha%3CC,+T%3E"],[1760,"impl-Display-for-OutOfBounds%3CT%3E"],[1761,"impl-Debug-for-OutOfBounds%3CT%3E"],[2019,"impl-From%3CRangeFrom%3CT%3E%3E-for-Range%3CT%3E"],[2020,"impl-From%3CRange%3CT%3E%3E-for-Range%3CT%3E"],[2021,"impl-From%3CRangeFull%3E-for-Range%3CT%3E"],[2022,"impl-From%3CRangeTo%3CT%3E%3E-for-Range%3CT%3E"],[2088,"impl-Add-for-Luma%3CS,+T%3E"],[2089,"impl-Add%3CT%3E-for-Luma%3CS,+T%3E"],[2090,"impl-AddAssign-for-Luma%3CS,+T%3E"],[2091,"impl-AddAssign%3CT%3E-for-Luma%3CS,+T%3E"],[2114,"impl-Div-for-Luma%3CS,+T%3E"],[2115,"impl-Div%3CT%3E-for-Luma%3CS,+T%3E"],[2116,"impl-DivAssign%3CT%3E-for-Luma%3CS,+T%3E"],[2117,"impl-DivAssign-for-Luma%3CS,+T%3E"],[2119,"impl-LowerHex-for-Luma%3CS,+T%3E"],[2120,"impl-UpperHex-for-Luma%3CS,+T%3E"],[2121,"impl-Debug-for-Luma%3CS,+T%3E"],[2125,"impl-FromColorUnclamped%3CYxy%3C%3CS+as+LumaStandard%3E::WhitePoint,+T%3E%3E-for-Luma%3CS,+T%3E"],[2126,"impl-FromColorUnclamped%3CXyz%3C%3CS+as+LumaStandard%3E::WhitePoint,+T%3E%3E-for-Luma%3CS,+T%3E"],[2127,"impl-FromColorUnclamped%3CRgb%3C_S,+T%3E%3E-for-Luma%3CS,+T%3E"],[2128,"impl-FromColorUnclamped%3CLuma%3CS2,+T%3E%3E-for-Luma%3CS1,+T%3E"],[2129,"impl-FromColorUnclamped%3CHsl%3C_S,+T%3E%3E-for-Luma%3CS,+T%3E"],[2130,"impl-FromColorUnclamped%3CLchuv%3C%3CS+as+LumaStandard%3E::WhitePoint,+T%3E%3E-for-Luma%3CS,+T%3E"],[2131,"impl-FromColorUnclamped%3CHsluv%3C%3CS+as+LumaStandard%3E::WhitePoint,+T%3E%3E-for-Luma%3CS,+T%3E"],[2132,"impl-FromColorUnclamped%3COklab%3CT%3E%3E-for-Luma%3CS,+T%3E"],[2133,"impl-FromColorUnclamped%3COklch%3CT%3E%3E-for-Luma%3CS,+T%3E"],[2134,"impl-FromColorUnclamped%3CAlpha%3C_C,+_A%3E%3E-for-Luma%3CS,+T%3E"],[2135,"impl-FromColorUnclamped%3CHsv%3C_S,+T%3E%3E-for-Luma%3CS,+T%3E"],[2136,"impl-FromColorUnclamped%3CLuv%3C%3CS+as+LumaStandard%3E::WhitePoint,+T%3E%3E-for-Luma%3CS,+T%3E"],[2137,"impl-FromColorUnclamped%3CHwb%3C_S,+T%3E%3E-for-Luma%3CS,+T%3E"],[2138,"impl-FromColorUnclamped%3CLch%3C%3CS+as+LumaStandard%3E::WhitePoint,+T%3E%3E-for-Luma%3CS,+T%3E"],[2139,"impl-FromColorUnclamped%3CLab%3C%3CS+as+LumaStandard%3E::WhitePoint,+T%3E%3E-for-Luma%3CS,+T%3E"],[2165,"impl-Mul-for-Luma%3CS,+T%3E"],[2166,"impl-Mul%3CT%3E-for-Luma%3CS,+T%3E"],[2167,"impl-MulAssign-for-Luma%3CS,+T%3E"],[2168,"impl-MulAssign%3CT%3E-for-Luma%3CS,+T%3E"],[2176,"impl-Sub-for-Luma%3CS,+T%3E"],[2177,"impl-Sub%3CT%3E-for-Luma%3CS,+T%3E"],[2178,"impl-SubAssign%3CT%3E-for-Luma%3CS,+T%3E"],[2179,"impl-SubAssign-for-Luma%3CS,+T%3E"],[2363,"impl-Add-for-Rgb%3CS,+T%3E"],[2364,"impl-Add%3CT%3E-for-Rgb%3CS,+T%3E"],[2365,"impl-AddAssign-for-Rgb%3CS,+T%3E"],[2366,"impl-AddAssign%3CT%3E-for-Rgb%3CS,+T%3E"],[2404,"impl-Div-for-Rgb%3CS,+T%3E"],[2405,"impl-Div%3CT%3E-for-Rgb%3CS,+T%3E"],[2406,"impl-DivAssign%3CT%3E-for-Rgb%3CS,+T%3E"],[2407,"impl-DivAssign-for-Rgb%3CS,+T%3E"],[2411,"impl-Debug-for-Rgb%3CS,+T%3E"],[2412,"impl-UpperHex-for-Rgb%3CS,+T%3E"],[2413,"impl-LowerHex-for-Rgb%3CS,+T%3E"],[2414,"impl-Debug-for-FromHexError"],[2415,"impl-Display-for-FromHexError"],[2416,"impl-From%3Cu32%3E-for-Alpha%3CRgb%3CS,+u8%3E,+u8%3E"],[2417,"impl-From%3CPacked%3CC%3E%3E-for-Alpha%3CRgb%3CS,+u8%3E,+u8%3E"],[2419,"impl-From%3CAlpha%3CRgb%3CLinear%3CSrgb%3E,+T%3E,+T%3E%3E-for-Alpha%3CRgb%3CSrgb,+U%3E,+U%3E"],[2420,"impl-From%3CRgb%3CLinear%3CSrgb%3E,+T%3E%3E-for-Alpha%3CRgb%3CSrgb,+U%3E,+U%3E"],[2422,"impl-From%3CAlpha%3CRgb%3CSrgb,+T%3E,+T%3E%3E-for-Alpha%3CRgb%3CLinear%3CSrgb%3E,+U%3E,+U%3E"],[2423,"impl-From%3CRgb%3CSrgb,+T%3E%3E-for-Alpha%3CRgb%3CLinear%3CSrgb%3E,+U%3E,+U%3E"],[2424,"impl-From%3CRgb%3CS,+u8%3E%3E-for-Packed%3CC%3E"],[2425,"impl-From%3CAlpha%3CRgb%3CS,+u8%3E,+u8%3E%3E-for-Packed%3CC%3E"],[2427,"impl-From%3Cu32%3E-for-Packed%3CC%3E"],[2429,"impl-From%3Cu32%3E-for-Rgb%3CS,+u8%3E"],[2430,"impl-From%3CPacked%3CC%3E%3E-for-Rgb%3CS,+u8%3E"],[2431,"impl-From%3C(T,+T,+T)%3E-for-Rgb%3CS,+T%3E"],[2432,"impl-From%3C%26str%3E-for-FromHexError"],[2434,"impl-From%3CParseIntError%3E-for-FromHexError"],[2436,"impl-FromColorUnclamped%3COklch%3CT%3E%3E-for-Rgb%3CS,+T%3E"],[2437,"impl-FromColorUnclamped%3CLchuv%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Rgb%3CS,+T%3E"],[2438,"impl-FromColorUnclamped%3CLuv%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Rgb%3CS,+T%3E"],[2439,"impl-FromColorUnclamped%3CHsv%3CS,+T%3E%3E-for-Rgb%3CS,+T%3E"],[2440,"impl-FromColorUnclamped%3CHsl%3CS,+T%3E%3E-for-Rgb%3CS,+T%3E"],[2441,"impl-FromColorUnclamped%3COklab%3CT%3E%3E-for-Rgb%3CS,+T%3E"],[2442,"impl-FromColorUnclamped%3CYxy%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Rgb%3CS,+T%3E"],[2443,"impl-FromColorUnclamped%3CLch%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Rgb%3CS,+T%3E"],[2444,"impl-FromColorUnclamped%3CRgb%3CS2,+T%3E%3E-for-Rgb%3CS1,+T%3E"],[2445,"impl-FromColorUnclamped%3CLab%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Rgb%3CS,+T%3E"],[2446,"impl-FromColorUnclamped%3CHwb%3CS,+T%3E%3E-for-Rgb%3CS,+T%3E"],[2447,"impl-FromColorUnclamped%3CXyz%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Rgb%3CS,+T%3E"],[2448,"impl-FromColorUnclamped%3CHsluv%3C%3C%3CS+as+RgbStandard%3E::Space+as+RgbSpace%3E::WhitePoint,+T%3E%3E-for-Rgb%3CS,+T%3E"],[2449,"impl-FromColorUnclamped%3CLuma%3CSt,+T%3E%3E-for-Rgb%3CS,+T%3E"],[2450,"impl-FromColorUnclamped%3CAlpha%3C_C,+_A%3E%3E-for-Rgb%3CS,+T%3E"],[2493,"impl-Mul-for-Rgb%3CS,+T%3E"],[2494,"impl-Mul%3CT%3E-for-Rgb%3CS,+T%3E"],[2495,"impl-MulAssign-for-Rgb%3CS,+T%3E"],[2496,"impl-MulAssign%3CT%3E-for-Rgb%3CS,+T%3E"],[2511,"impl-Sub-for-Rgb%3CS,+T%3E"],[2512,"impl-Sub%3CT%3E-for-Rgb%3CS,+T%3E"],[2513,"impl-SubAssign-for-Rgb%3CS,+T%3E"],[2514,"impl-SubAssign%3CT%3E-for-Rgb%3CS,+T%3E"]],"a":{"gray":[2078],"grey":[2078],"hsb":[21],"linear":[2076,2077,2342,2343],"wcag":[54],"xyy":[74]}}],\
["palette_derive",{"doc":"Derives traits from the palette crate.","t":"YYY","n":["FromColorUnclamped","Pixel","WithAlpha"],"q":[[0,"palette_derive"]],"d":["","",""],"i":[0,0,0],"f":[0,0,0],"c":[],"p":[],"b":[]}],\
["phf",{"doc":"Rust-PHF is a library to generate efficient lookup tables …","t":"FFFKFNNNNNNNNNNNNNNNNNNNNNNNNNNNCCCMNQQQQCNNNNNNNNNNNNFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNN","n":["Map","OrderedMap","OrderedSet","PhfHash","Set","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","fmt","fmt","fmt","fmt","from","from","from","from","index","index","into","into","into","into","into_iter","into_iter","into_iter","into_iter","map","ordered_map","ordered_set","phf_hash","phf_hash_slice","phf_map","phf_ordered_map","phf_ordered_set","phf_set","set","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Entries","Keys","Map","Values","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","contains_key","entries","fmt","fmt","fmt","from","from","from","get","get_entry","get_key","into","into","into","into_iter","into_iter","into_iter","is_empty","keys","len","new","next","next","next","next_back","next_back","next_back","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","values","Entries","Keys","OrderedMap","Values","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","contains_key","entries","fmt","fmt","fmt","from","from","from","get","get_entry","get_index","get_key","index","into","into","into","into_iter","into_iter","into_iter","is_empty","keys","len","next","next","next","next_back","next_back","next_back","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","values","Iter","OrderedSet","borrow","borrow_mut","clone","contains","fmt","from","get_index","get_key","index","into","into_iter","is_disjoint","is_empty","is_subset","is_superset","iter","len","next","next_back","size_hint","try_from","try_into","type_id","Iter","Set","borrow","borrow_mut","clone","contains","fmt","from","get_key","into","into_iter","is_disjoint","is_empty","is_subset","is_superset","iter","len","next","next_back","size_hint","try_from","try_into","type_id"],"q":[[0,"phf"],[54,"phf::map"],[107,"phf::ordered_map"],[161,"phf::ordered_set"],[186,"phf::set"],[209,"core::fmt"],[210,"core::fmt"],[211,"core::marker"],[212,"phf_shared"],[213,"core::hash"],[214,"core::result"],[215,"core::any"],[216,"core::option"]],"d":["An immutable map constructed at compile time.","An order-preserving immutable map constructed at compile …","An order-preserving immutable set constructed at compile …","A trait implemented by types which can be used in PHF data …","An immutable set constructed at compile time.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","An immutable map constructed at compile time.","An order-preserving immutable map constructed at compile …","An order-preserving immutable set constructed at compile …","Feeds the value into the state given, updating the hasher …","Feeds a slice of this type into the state provided.","Macro to create a <code>static</code> (compile-time) <code>Map</code>.","Macro to create a <code>static</code> (compile-time) <code>OrderedMap</code>.","Macro to create a <code>static</code> (compile-time) <code>OrderedSet</code>.","Macro to create a <code>static</code> (compile-time) <code>Set</code>.","An immutable set constructed at compile time.","","","","","","","","","","","","","An iterator over the key/value pairs in a <code>Map</code>.","An iterator over the keys in a <code>Map</code>.","An immutable map constructed at compile time.","An iterator over the values in a <code>Map</code>.","","","","","","","","","","Determines if <code>key</code> is in the <code>Map</code>.","Returns an iterator over the key/value pairs in the map.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the value that <code>key</code> maps to.","Like <code>get</code>, but returns both the key and the value.","Returns a reference to the map’s internal static …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns true if the <code>Map</code> is empty.","Returns an iterator over the keys in the map.","Returns the number of entries in the <code>Map</code>.","Create a new, empty, immutable map.","","","","","","","","","","","","","","","","","","","Returns an iterator over the values in the map.","An iterator over the entries in a <code>OrderedMap</code>.","An iterator over the keys in a <code>OrderedMap</code>.","An order-preserving immutable map constructed at compile …","An iterator over the values in a <code>OrderedMap</code>.","","","","","","","","","","Determines if <code>key</code> is in the <code>OrderedMap</code>.","Returns an iterator over the key/value pairs in the map.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the value that <code>key</code> maps to.","Like <code>get</code>, but returns both the key and the value.","Returns the index of the key within the list used to …","Returns a reference to the map’s internal static …","Returns references to both the key and values at an index …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns true if the <code>OrderedMap</code> is empty.","Returns an iterator over the keys in the map.","Returns the number of entries in the <code>OrderedMap</code>.","","","","","","","","","","","","","","","","","","","Returns an iterator over the values in the map.","An iterator over the values in a <code>OrderedSet</code>.","An order-preserving immutable set constructed at compile …","","","","Returns true if <code>value</code> is in the <code>OrderedSet</code>.","","Returns the argument unchanged.","Returns the index of the key within the list used to …","Returns a reference to the set’s internal static …","Returns a reference to the key at an index within the list …","Calls <code>U::from(self)</code>.","","Returns true if <code>other</code> shares no elements with <code>self</code>.","Returns true if the <code>OrderedSet</code> contains no elements.","Returns true if <code>other</code> contains all values in <code>self</code>.","Returns true if <code>self</code> contains all values in <code>other</code>.","Returns an iterator over the values in the set.","Returns the number of elements in the <code>OrderedSet</code>.","","","","","","","An iterator over the values in a <code>Set</code>.","An immutable set constructed at compile time.","","","","Returns true if <code>value</code> is in the <code>Set</code>.","","Returns the argument unchanged.","Returns a reference to the set’s internal static …","Calls <code>U::from(self)</code>.","","Returns true if <code>other</code> shares no elements with <code>self</code>.","Returns true if the <code>Set</code> contains no elements.","Returns true if <code>other</code> contains all values in <code>self</code>.","Returns true if <code>self</code> contains all values in <code>other</code>.","Returns an iterator over the values in the set.","Returns the number of elements in the <code>Set</code>.","","","","","",""],"i":[0,0,0,0,0,1,5,6,7,1,5,6,7,1,1,5,6,7,1,5,6,7,1,5,1,5,6,7,1,5,6,7,0,0,0,9,9,0,0,0,0,0,1,5,6,7,1,5,6,7,1,5,6,7,0,0,0,0,12,21,22,12,21,22,12,21,22,1,1,12,21,22,12,21,22,1,1,1,12,21,22,12,21,22,1,1,1,1,12,21,22,12,21,22,12,21,22,12,21,22,12,21,22,12,21,22,1,0,0,0,0,13,26,27,13,26,27,13,26,27,5,5,13,26,27,13,26,27,5,5,5,5,5,13,26,27,13,26,27,5,5,5,13,26,27,13,26,27,13,26,27,13,26,27,13,26,27,13,26,27,5,0,0,14,14,14,6,14,14,6,6,6,14,14,6,6,6,6,6,6,14,14,14,14,14,14,0,0,15,15,15,7,15,15,7,15,15,7,7,7,7,7,7,15,15,15,15,15,15],"f":[0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[1,[-1,-2]]],[],[]],[[[1,[-1,-2]],2],3,4,4],[[[5,[-1,-2]],2],3,4,4],[[[6,[-1]],2],3,4],[[[7,[-1]],2],3,4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[1,[-2,-3]],-1],-3,[8,9,10],[[11,[-1]]],[]],[[[5,[-2,-3]],-1],-3,[8,9,10],[[11,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1,-2]]],[[12,[-1,-2]]],[],[]],[[[5,[-1,-2]]],[[13,[-1,-2]]],[],[]],[[[6,[-1]]],[[14,[-1]]],[]],[[[7,[-1]]],[[15,[-1]]],[]],0,0,0,[[9,-1],16,17],[[[18,[9]],-1],16,17],0,0,0,0,0,[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[12,[-1,-2]]],[[12,[-1,-2]]],[],[]],[[[21,[-1,-2]]],[[21,[-1,-2]]],[],[]],[[[22,[-1,-2]]],[[22,[-1,-2]]],[],[]],[[[1,[-2,-3]],-1],23,[8,9,10],[[11,[-1]]],[]],[[[1,[-1,-2]]],[[12,[-1,-2]]],[],[]],[[[12,[-1,-2]],2],3,4,4],[[[21,[-1,-2]],2],3,4,[]],[[[22,[-1,-2]],2],3,[],4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[1,[-2,-3]],-1],[[24,[-3]]],[8,9,10],[[11,[-1]]],[]],[[[1,[-2,-3]],-1],[[24,[[16,[-2,-3]]]]],[8,9,10],[[11,[-1]]],[]],[[[1,[-2,-3]],-1],[[24,[-2]]],[8,9,10],[[11,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1,-2]]],23,[],[]],[[[1,[-1,-2]]],[[21,[-1,-2]]],[],[]],[[[1,[-1,-2]]],25,[],[]],[[],[[1,[-1,-2]]],[],[]],[[[12,[-1,-2]]],[[24,[[16,[-1,-2]]]]],[],[]],[[[21,[-1,-2]]],[[24,[-1]]],[],[]],[[[22,[-1,-2]]],[[24,[-2]]],[],[]],[[[12,[-1,-2]]],[[24,[[16,[-1,-2]]]]],[],[]],[[[21,[-1,-2]]],[[24,[-1]]],[],[]],[[[22,[-1,-2]]],[[24,[-2]]],[],[]],[[[12,[-1,-2]]],[[16,[25,[24,[25]]]]],[],[]],[[[21,[-1,-2]]],[[16,[25,[24,[25]]]]],[],[]],[[[22,[-1,-2]]],[[16,[25,[24,[25]]]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[[[1,[-1,-2]]],[[22,[-1,-2]]],[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[13,[-1,-2]]],[[13,[-1,-2]]],[],[]],[[[26,[-1,-2]]],[[26,[-1,-2]]],[],[]],[[[27,[-1,-2]]],[[27,[-1,-2]]],[],[]],[[[5,[-2,-3]],-1],23,[8,9,10],[[11,[-1]]],[]],[[[5,[-1,-2]]],[[13,[-1,-2]]],[],[]],[[[13,[-1,-2]],2],3,4,4],[[[26,[-1,-2]],2],3,4,[]],[[[27,[-1,-2]],2],3,[],4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[5,[-2,-3]],-1],[[24,[-3]]],[8,9,10],[[11,[-1]]],[]],[[[5,[-2,-3]],-1],[[24,[[16,[-2,-3]]]]],[8,9,10],[[11,[-1]]],[]],[[[5,[-2,-3]],-1],[[24,[25]]],[8,9,10],[[11,[-1]]],[]],[[[5,[-2,-3]],-1],[[24,[-2]]],[8,9,10],[[11,[-1]]],[]],[[[5,[-1,-2]],25],[[24,[[16,[-1,-2]]]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[5,[-1,-2]]],23,[],[]],[[[5,[-1,-2]]],[[26,[-1,-2]]],[],[]],[[[5,[-1,-2]]],25,[],[]],[[[13,[-1,-2]]],[[24,[[16,[-1,-2]]]]],[],[]],[[[26,[-1,-2]]],[[24,[-1]]],[],[]],[[[27,[-1,-2]]],[[24,[-2]]],[],[]],[[[13,[-1,-2]]],[[24,[[16,[-1,-2]]]]],[],[]],[[[26,[-1,-2]]],[[24,[-1]]],[],[]],[[[27,[-1,-2]]],[[24,[-2]]],[],[]],[[[13,[-1,-2]]],[[16,[25,[24,[25]]]]],[],[]],[[[26,[-1,-2]]],[[16,[25,[24,[25]]]]],[],[]],[[[27,[-1,-2]]],[[16,[25,[24,[25]]]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[[[5,[-1,-2]]],[[27,[-1,-2]]],[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[14,[-1]]],[[14,[-1]]],[]],[[[6,[-2]],-1],23,[8,9,10],[[11,[-1]]]],[[[14,[-1]],2],3,4],[-1,-1,[]],[[[6,[-2]],-1],[[24,[25]]],[8,9,10],[[11,[-1]]]],[[[6,[-2]],-1],[[24,[-2]]],[8,9,10],[[11,[-1]]]],[[[6,[-1]],25],[[24,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-1]],[6,[-1]]],23,[]],[[[6,[-1]]],23,[]],[[[6,[-1]],[6,[-1]]],23,[]],[[[6,[-1]],[6,[-1]]],23,[]],[[[6,[-1]]],[[14,[-1]]],[]],[[[6,[-1]]],25,[]],[[[14,[-1]]],[[24,[-1]]],[]],[[[14,[-1]]],[[24,[-1]]],[]],[[[14,[-1]]],[[16,[25,[24,[25]]]]],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[15,[-1]]],[[15,[-1]]],[]],[[[7,[-2]],-1],23,[8,9,10],[[11,[-1]]]],[[[15,[-1]],2],3,4],[-1,-1,[]],[[[7,[-2]],-1],[[24,[-2]]],[8,9,10],[[11,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[7,[-1]],[7,[-1]]],23,[]],[[[7,[-1]]],23,[]],[[[7,[-1]],[7,[-1]]],23,[]],[[[7,[-1]],[7,[-1]]],23,[]],[[[7,[-1]]],[[15,[-1]]],[]],[[[7,[-1]]],25,[]],[[[15,[-1]]],[[24,[-1]]],[]],[[[15,[-1]]],[[24,[-1]]],[]],[[[15,[-1]]],[[16,[25,[24,[25]]]]],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]]],"c":[],"p":[[5,"Map",0],[5,"Formatter",209],[8,"Result",209],[10,"Debug",209],[5,"OrderedMap",0],[5,"OrderedSet",0],[5,"Set",0],[10,"Eq",210],[10,"PhfHash",0],[10,"Sized",211],[10,"PhfBorrow",212],[5,"Entries",54],[5,"Entries",107],[5,"Iter",161],[5,"Iter",186],[1,"tuple"],[10,"Hasher",213],[1,"slice"],[6,"Result",214],[5,"TypeId",215],[5,"Keys",54],[5,"Values",54],[1,"bool"],[6,"Option",216],[1,"usize"],[5,"Keys",107],[5,"Values",107]],"b":[[23,"impl-Index%3C%26T%3E-for-OrderedMap%3CK,+V%3E"],[132,"impl-OrderedMap%3CK,+V%3E"]]}],\
["phf_generator",{"doc":"See the <code>phf</code> crate’s documentation for details.","t":"FNNONHNOONNN","n":["HashState","borrow","borrow_mut","disps","from","generate_hash","into","key","map","try_from","try_into","type_id"],"q":[[0,"phf_generator"],[12,"phf_shared"],[13,"core::result"],[14,"core::any"]],"d":["","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,2,2,2,2,0,2,2,2,2,2,2],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-1,[]],[[[1,[-1]]],2,3],[-1,-2,[],[]],0,0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,5,[]]],"c":[],"p":[[1,"slice"],[5,"HashState",0],[10,"PhfHash",12],[6,"Result",13],[5,"TypeId",14]],"b":[]}],\
["phf_macros",{"doc":"A set of macros to generate Rust source for PHF data …","t":"QQQQ","n":["phf_map","phf_ordered_map","phf_ordered_set","phf_set"],"q":[[0,"phf_macros"]],"d":["","","",""],"i":[0,0,0,0],"f":[0,0,0,0],"c":[],"p":[],"b":[]}],\
["phf_shared",{"doc":"See the <code>phf</code> crate’s documentation for details.","t":"KIFKKMNNHOOMNOHHNMNNNN","n":["FmtConst","HashKey","Hashes","PhfBorrow","PhfHash","borrow","borrow","borrow_mut","displace","f1","f2","fmt_const","from","g","get_index","hash","into","phf_hash","phf_hash_slice","try_from","try_into","type_id"],"q":[[0,"phf_shared"],[22,"core::marker"],[23,"core::fmt"],[24,"core::fmt"],[25,"core::result"],[26,"core::any"]],"d":["Trait for printing types with <code>const</code> constructors, used by …","A central typedef for hash keys","","Identical to <code>std::borrow::Borrow</code> except omitting blanket …","A trait implemented by types which can be used in PHF data …","Convert a reference to <code>self</code> to a reference to the borrowed …","","","","","","Print a <code>const</code> expression representing this value.","Returns the argument unchanged.","","Return an index into <code>phf_generator::HashState::map</code>.","<code>key</code> is from <code>phf_generator::HashState</code>.","Calls <code>U::from(self)</code>.","Feeds the value into the state given, updating the hasher …","Feeds a slice of this type into the state provided.","","",""],"i":[0,0,0,0,0,1,7,7,0,7,7,4,7,7,0,0,7,12,12,7,7,7],"f":[0,0,0,0,0,[1,-1,2],[-1,-2,[],[]],[-1,-2,[],[]],[[3,3,3,3],3],0,0,[[4,5],6],[-1,-1,[]],0,[[7,[9,[[8,[3,3]]]],10],3],[[-1,11],7,[2,12]],[-1,-2,[],[]],[[12,-1],8,13],[[[9,[12]],-1],8,13],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]]],"c":[],"p":[[10,"PhfBorrow",0],[10,"Sized",22],[1,"u32"],[10,"FmtConst",0],[5,"Formatter",23],[8,"Result",23],[5,"Hashes",0],[1,"tuple"],[1,"slice"],[1,"usize"],[8,"HashKey",0],[10,"PhfHash",0],[10,"Hasher",24],[6,"Result",25],[5,"TypeId",26]],"b":[]}],\
["proc_macro2",{"doc":"github crates-io docs-rs","t":"PPPGFPFPPFFPPPFPGFFGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNFENNNNNNNNNNNNNN","n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delim_span","delimiter","eq","eq","eq","eq","extend","extend","extra","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","new_raw","partial_cmp","resolved_at","set_span","set_span","set_span","set_span","set_span","source_text","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","DelimSpan","borrow","borrow_mut","clone","clone_into","close","fmt","from","into","join","open","to_owned","try_from","try_into","type_id","IntoIter","TokenStream","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","size_hint","to_owned","try_from","try_into","type_id"],"q":[[0,"proc_macro2"],[228,"proc_macro2::extra"],[243,"proc_macro2::token_stream"],[259,"core::cmp"],[260,"core::marker"],[261,"core::convert"],[262,"core::iter::traits::collect"],[263,"core::fmt"],[264,"core::fmt"],[265,"proc_macro"],[266,"core::hash"],[267,"core::option"],[268,"alloc::string"],[269,"core::ops::range"],[270,"core::any"]],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>Ø ... Ø</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural macro.","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns an object that holds this group’s <code>span_open()</code> and","Returns the punctuation used as the delimiter for this …","","","","","","","Items which do not have a correspondence to any API in the …","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the source text behind a span. This preserves the …","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of this …","Returns the span pointing to the opening delimiter of this …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","An object that holds a <code>Group</code>’s <code>span_open()</code> and …","","","","","Returns a span for the closing punctuation of the group …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns a span covering the entire delimited group.","Returns a span for the opening punctuation of the group …","","","","","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[11,10,10,0,0,8,0,8,11,0,0,8,10,10,0,8,0,0,0,0,1,24,7,6,8,9,10,1,11,12,5,24,7,6,8,9,10,1,11,12,5,5,6,5,7,6,8,9,10,1,11,12,5,7,6,8,9,10,1,11,12,5,12,7,9,9,10,11,12,12,7,7,0,5,5,5,5,24,24,7,7,6,8,8,9,9,10,1,1,11,12,12,5,5,24,7,7,7,6,6,8,8,8,8,8,9,10,1,11,12,5,7,7,7,5,12,5,5,5,5,5,5,5,5,5,5,24,7,6,8,9,10,1,11,12,5,7,7,5,5,6,6,6,7,9,1,12,12,12,6,8,9,1,12,5,6,1,24,8,9,1,12,5,9,9,9,5,5,7,6,8,9,10,1,11,12,5,24,7,8,9,1,12,5,0,24,7,6,8,9,10,1,11,12,5,24,7,6,8,9,10,1,11,12,5,24,7,6,8,9,10,1,11,12,5,5,5,5,5,5,5,5,5,5,5,6,5,5,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[3]]],5],[[],6],[2,5],[7,7],[6,6],[8,8],[9,9],[10,10],[1,1],[11,11],[12,12],[5,5],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[12,12],14],[[],7],[9,15],[9,10],[[10,10],16],[[11,11],16],[[12,-1],16,[17,[19,[18]]]],[[12,12],16],[[7,-1],13,[[21,[],[[20,[8]]]]]],[[7,-1],13,[[21,[],[[20,[7]]]]]],0,[22,5],[22,5],[23,5],[23,5],[[24,25],26],[[24,25],26],[[7,25],26],[[7,25],26],[[6,25],26],[[8,25],26],[[8,25],26],[[9,25],26],[[9,25],26],[[10,25],26],[[1,25],26],[[1,25],26],[[11,25],26],[[12,25],26],[[12,25],26],[[5,25],26],[[5,25],26],[-1,-1,[]],[-1,-1,[]],[27,7],[8,7],[28,6],[-1,-1,[]],[1,8],[-1,-1,[]],[12,8],[5,8],[9,8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,7,[[21,[],[[20,[7]]]]]],[-1,7,[[21,[],[[20,[8]]]]]],[18,[[29,[7,24]]]],[18,[[29,[5,24]]]],[[12,-1],13,30],[31,5],[31,5],[32,5],[32,5],[33,5],[33,5],[34,5],[34,5],[35,5],[35,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,36],[7,16],[37,5],[37,5],[[6,6],[[38,[6]]]],[[6,6],6],[[],6],[[],7],[[10,7],9],[[2,11],1],[[18,6],12],[[18,6],12],[[12,12],[[38,[14]]]],[[6,6],6],[[8,6],13],[[9,6],13],[[1,6],13],[[12,6],13],[[5,6],13],[6,[[38,[39]]]],[1,11],[24,6],[8,6],[9,6],[1,6],[12,6],[5,6],[9,6],[9,6],[9,7],[18,5],[[5,-1],[[38,[6]]],[[41,[40]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],0,[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[43,5],[43,5],[44,5],[44,5],[45,5],[45,5],[46,5],[46,5],[3,5],[3,5],[6,28],[40,5],[40,5],0,[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[[-1,-2],13,[],[]],[15,6],[[15,25],26],[-1,-1,[]],[-1,-2,[],[]],[15,6],[15,6],[-1,-2,[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,42,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[36,36],[[-1,-2],13,[],[]],[[36,25],26],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[36,[[38,[8]]]],[36,[[13,[40,[38,[40]]]]]],[-1,-2,[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,42,[]]],"c":[],"p":[[5,"Punct",0],[1,"char"],[1,"u8"],[1,"slice"],[5,"Literal",0],[5,"Span",0],[5,"TokenStream",0],[6,"TokenTree",0],[5,"Group",0],[6,"Delimiter",0],[6,"Spacing",0],[5,"Ident",0],[1,"tuple"],[6,"Ordering",259],[5,"DelimSpan",228],[1,"bool"],[10,"Sized",260],[1,"str"],[10,"AsRef",261],[17,"Item"],[10,"IntoIterator",262],[1,"f32"],[1,"f64"],[5,"LexError",0],[5,"Formatter",263],[8,"Result",263],[5,"TokenStream",264],[5,"Span",264],[6,"Result",265],[10,"Hasher",266],[1,"i128"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"i8"],[5,"IntoIter",243],[1,"isize"],[6,"Option",267],[5,"String",268],[1,"usize"],[10,"RangeBounds",269],[5,"TypeId",270],[1,"u128"],[1,"u16"],[1,"u32"],[1,"u64"]],"b":[[68,"impl-PartialEq%3CT%3E-for-Ident"],[69,"impl-PartialEq-for-Ident"],[70,"impl-Extend%3CTokenTree%3E-for-TokenStream"],[71,"impl-Extend%3CTokenStream%3E-for-TokenStream"],[77,"impl-Debug-for-LexError"],[78,"impl-Display-for-LexError"],[79,"impl-Debug-for-TokenStream"],[80,"impl-Display-for-TokenStream"],[82,"impl-Debug-for-TokenTree"],[83,"impl-Display-for-TokenTree"],[84,"impl-Debug-for-Group"],[85,"impl-Display-for-Group"],[87,"impl-Debug-for-Punct"],[88,"impl-Display-for-Punct"],[90,"impl-Debug-for-Ident"],[91,"impl-Display-for-Ident"],[92,"impl-Debug-for-Literal"],[93,"impl-Display-for-Literal"],[96,"impl-From%3CTokenStream%3E-for-TokenStream"],[97,"impl-From%3CTokenTree%3E-for-TokenStream"],[100,"impl-From%3CPunct%3E-for-TokenTree"],[102,"impl-From%3CIdent%3E-for-TokenTree"],[103,"impl-From%3CLiteral%3E-for-TokenTree"],[104,"impl-From%3CGroup%3E-for-TokenTree"],[111,"impl-FromIterator%3CTokenStream%3E-for-TokenStream"],[112,"impl-FromIterator%3CTokenTree%3E-for-TokenStream"]]}],\
["pwm_pca9685",{"doc":"This is a platform agnostic Rust driver for the PCA9685 …","t":"FPPPPPPPPPPPPPPPPPPGPGGPPPPPPPGPGGFGPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Address","All","AllCall","C0","C1","C10","C11","C12","C13","C14","C15","C2","C3","C4","C5","C6","C7","C8","C9","Channel","Direct","DisabledOutputValue","Error","HighImpedance","I2C","InvalidInputData","Inverted","OnAck","OnStop","OpenDrain","OutputDriver","OutputDriver","OutputLogicState","OutputStateChange","Pca9685","ProgrammableAddress","Subaddress1","Subaddress2","Subaddress3","TotemPole","Zero","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","destroy","disable","disable_programmable_address","enable","enable_programmable_address","enable_restart_and_disable","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","nb","new","reset_internal_driver_state","restart","restart_nonblocking","set_address","set_all_on_off","set_channel_full_off","set_channel_full_on","set_channel_off","set_channel_on","set_channel_on_off","set_disabled_output_value","set_output_change_behavior","set_output_driver","set_output_logic_state","set_prescale","set_programmable_address","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","use_external_clock"],"q":[[0,"pwm_pca9685"],[177,"core::default"],[178,"embedded_hal::blocking::i2c"],[179,"embedded_hal::blocking::i2c"],[180,"core::fmt"],[181,"core::fmt"],[182,"embedded_hal::blocking::delay"],[183,"nb"],[184,"core::any"]],"d":["I2C device address","All channels","LED all call address","Channel 0","Channel 1","Channel 10","Channel 11","Channel 12","Channel 13","Channel 14","Channel 15","Channel 2","Channel 3","Channel 4","Channel 5","Channel 6","Channel 7","Channel 8","Channel 9","Output channel selection","Output logic state is not inverted (default).","Value set to all outputs when the output drivers are …","All possible errors in this crate","Set all outputs to high-impedance.","I²C bus error","Invalid input data provided","Output logic state is inverted.","Outputs change on ACK.","Outputs change on STOP. (default)","Open-drain configuration","Output driver configuration","Set all outputs to a value dependent on the <code>OutputDriver</code> …","Output logic state inversion","Output state change behavior","PCA9685 PWM/Servo/LED controller.","Additional programmable address types (volatile …","Subaddress 1","Subaddress 2","Subaddress 3","Totem pole configuration (default).","Set all outputs to 0 (default).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Destroy driver instance, return I²C bus instance.","Disable the controller (sleep).","Disable responding to programmable address","Enable the controller.","Enable responding to programmable address","Put the controller to sleep while keeping the PWM register …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new instance of the device.","Reset the internal state of this driver to the default …","Re-enable the controller after a sleep with restart …","Re-enable the controller after a sleep with restart …","Sets the address used by the driver for communication.","Set the <code>ON</code> and <code>OFF</code> counter for each channel at once.","Set the channel always off.","Set the channel always on.","Set the <code>OFF</code> counter for the selected channel.","Set the <code>ON</code> counter for the selected channel.","Set the <code>ON</code> and <code>OFF</code> counters for the selected channel.","Set the output value when outputs are disabled (<code>OE</code> = 1).","Set the output change behavior. Either byte-by-byte or all …","Set the output driver configuration.","Set the output logic state","Set the prescale value.","Set one of the programmable addresses.","","","","","","","","","","Will return an empty error for a value outside the range […","","Will return an empty error for a value outside the range […","Will return an empty error for a value outside the range […","","","","","","","","","","","","","","","","","","","","","","","","","Enable using the EXTCLK pin as clock source input."],"i":[0,1,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,0,5,14,14,2,3,3,4,0,5,0,0,0,0,6,6,6,4,5,9,14,1,2,3,4,5,6,7,9,14,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,9,2,3,4,5,7,9,9,9,9,9,9,1,2,3,4,5,6,7,9,14,1,2,3,4,5,6,7,9,14,1,2,3,4,5,6,7,7,7,9,14,1,2,3,4,5,6,7,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,2,3,4,5,6,7,9,14,1,1,1,1,2,3,4,5,6,7,9,14,1,2,3,4,5,6,7,9,14,1,2,3,4,5,6,7,9],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[],[[9,[-1]]],10],[[],2],[[],3],[[],4],[[],5],[[],7],[[[9,[-2]]],-2,[],[[12,[],[[11,[-1]]]],[13,[],[[11,[-1]]]]]],[[[9,[-2]]],[[15,[8,[14,[-1]]]]],[],[[12,[],[[11,[-1]]]],[13,[],[[11,[-1]]]]]],[[[9,[-2]],6],[[15,[8,[14,[-1]]]]],[],[[12,[],[[11,[-1]]]],[13,[],[[11,[-1]]]]]],[[[9,[-2]]],[[15,[8,[14,[-1]]]]],[],[[12,[],[[11,[-1]]]],[13,[],[[11,[-1]]]]]],[[[9,[-2]],6],[[15,[8,[14,[-1]]]]],[],[[12,[],[[11,[-1]]]],[13,[],[[11,[-1]]]]]],[[[9,[-2]]],[[15,[8,[14,[-1]]]]],[],[[12,[],[[11,[-1]]]],[13,[],[[11,[-1]]]]]],[[1,1],16],[[2,2],16],[[3,3],16],[[4,4],16],[[5,5],16],[[6,6],16],[[7,7],16],[[[9,[-1]],17],18,19],[[[14,[-1]],17],18,19],[[1,17],18],[[2,17],18],[[3,17],18],[[4,17],18],[[5,17],18],[[6,17],18],[[7,17],18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[20,7],[[[8,[16,16,16,16,16,16]]],7],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[-2,-3],[[15,[[9,[-2]],[14,[-1]]]]],[],[[12,[],[[11,[-1]]]],[13,[],[[11,[-1]]]]],[[21,[7]]]],[[[9,[-2]]],8,[],[[12,[],[[11,[-1]]]],[13,[],[[11,[-1]]]]]],[[[9,[-2]],-3],[[15,[8,[14,[-1]]]]],[],[[12,[],[[11,[-1]]]],[13,[],[[11,[-1]]]]],[[23,[22]]]],[[[9,[-2]]],[[24,[8,[14,[-1]]]]],[],[[12,[],[[11,[-1]]]],[13,[],[[11,[-1]]]]]],[[[9,[-2]],-3],[[15,[8,[14,[-1]]]]],[],[[12,[],[[11,[-1]]]],[13,[],[[11,[-1]]]]],[[21,[7]]]],[[[9,[-2]],[25,[22]],[25,[22]]],[[15,[8,[14,[-1]]]]],[],[[12,[],[[11,[-1]]]],[13,[],[[11,[-1]]]]]],[[[9,[-2]],1],[[15,[8,[14,[-1]]]]],[],[[12,[],[[11,[-1]]]],[13,[],[[11,[-1]]]]]],[[[9,[-2]],1,22],[[15,[8,[14,[-1]]]]],[],[[12,[],[[11,[-1]]]],[13,[],[[11,[-1]]]]]],[[[9,[-2]],1,22],[[15,[8,[14,[-1]]]]],[],[[12,[],[[11,[-1]]]],[13,[],[[11,[-1]]]]]],[[[9,[-2]],1,22],[[15,[8,[14,[-1]]]]],[],[[12,[],[[11,[-1]]]],[13,[],[[11,[-1]]]]]],[[[9,[-2]],1,22,22],[[15,[8,[14,[-1]]]]],[],[[12,[],[[11,[-1]]]],[13,[],[[11,[-1]]]]]],[[[9,[-2]],5],[[15,[8,[14,[-1]]]]],[],[[12,[],[[11,[-1]]]],[13,[],[[11,[-1]]]]]],[[[9,[-2]],3],[[15,[8,[14,[-1]]]]],[],[[12,[],[[11,[-1]]]],[13,[],[[11,[-1]]]]]],[[[9,[-2]],4],[[15,[8,[14,[-1]]]]],[],[[12,[],[[11,[-1]]]],[13,[],[[11,[-1]]]]]],[[[9,[-2]],2],[[15,[8,[14,[-1]]]]],[],[[12,[],[[11,[-1]]]],[13,[],[[11,[-1]]]]]],[[[9,[-2]],20],[[15,[8,[14,[-1]]]]],[],[[12,[],[[11,[-1]]]],[13,[],[[11,[-1]]]]]],[[[9,[-2]],6,-3],[[15,[8,[14,[-1]]]]],[],[[12,[],[[11,[-1]]]],[13,[],[[11,[-1]]]]],[[21,[7]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[20,[[15,[1,-1]]],[]],[-1,[[15,[-2]]],[],[]],[26,[[15,[1,-1]]],[]],[22,[[15,[1,-1]]],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[[[9,[-2]]],[[15,[8,[14,[-1]]]]],[],[[12,[],[[11,[-1]]]],[13,[],[[11,[-1]]]]]]],"c":[],"p":[[6,"Channel",0],[6,"OutputLogicState",0],[6,"OutputStateChange",0],[6,"OutputDriver",0],[6,"DisabledOutputValue",0],[6,"ProgrammableAddress",0],[5,"Address",0],[1,"tuple"],[5,"Pca9685",0],[10,"Default",177],[17,"Error"],[10,"Write",178],[10,"WriteRead",178],[6,"Error",0],[6,"Result",179],[1,"bool"],[5,"Formatter",180],[8,"Result",180],[10,"Debug",180],[1,"u8"],[10,"Into",181],[1,"u16"],[10,"DelayUs",182],[8,"Result",183],[1,"array"],[1,"usize"],[5,"TypeId",184]],"b":[[109,"impl-From%3Cu8%3E-for-Address"],[110,"impl-From%3C(bool,+bool,+bool,+bool,+bool,+bool)%3E-for-Address"],[148,"impl-TryFrom%3Cu8%3E-for-Channel"],[150,"impl-TryFrom%3Cusize%3E-for-Channel"],[151,"impl-TryFrom%3Cu16%3E-for-Channel"]]}],\
["quote",{"doc":"github crates-io docs-rs","t":"KKKMMMMMQNNQQNNNNM","n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":[[0,"quote"],[18,"proc_macro2"],[19,"core::convert"],[20,"core::iter::traits::collect"],[21,"core::fmt"],[22,"core::fmt"]],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,1,1,1,1,7,0,6,6,0,0,7,7,6,6,6],"f":[0,0,0,[[1,-1],2,[[4,[3]]]],[[1,-1],2,5],[[1,-1,-2],2,5,6],[[1,-1,-2],2,5,6],[[7,8],9],0,[6,10],[6,10],0,0,[7,[[12,[11]]]],[7,[[12,[11]]]],[6,10],[6,10],[[6,10],2]],"c":[],"p":[[10,"TokenStreamExt",0],[1,"tuple"],[6,"TokenTree",18],[10,"Into",19],[10,"IntoIterator",20],[10,"ToTokens",0],[10,"IdentFragment",0],[5,"Formatter",21],[8,"Result",21],[5,"TokenStream",18],[5,"Span",18],[6,"Option",22]],"b":[]}],\
["radium",{"doc":"<code>radium</code> provides a series of helpers for a uniform API over …","t":"RKMMMMMMMMMMMMQMMCMMMCKKIIIIIIIIIIII","n":["Item","Radium","compare_and_swap","compare_exchange","compare_exchange_weak","fence","fetch_add","fetch_and","fetch_nand","fetch_or","fetch_sub","fetch_update","fetch_xor","get_mut","if_atomic","into_inner","load","marker","new","store","swap","types","BitOps","NumericOps","RadiumBool","RadiumI16","RadiumI32","RadiumI64","RadiumI8","RadiumIsize","RadiumPtr","RadiumU16","RadiumU32","RadiumU64","RadiumU8","RadiumUsize"],"q":[[0,"radium"],[22,"radium::marker"],[24,"radium::types"],[36,"core::sync::atomic"],[37,"core::result"],[38,"core::option"],[39,"core::ops::function"]],"d":["","A maybe-atomic shared mutable fundamental type <code>T</code>.","Stores a value into this object if the currently-stored …","Stores a value into this object if the currently-stored …","Stores a value into this object if the currently-stored …","If the underlying value is atomic, calls <code>fence</code> with the …","Adds <code>value</code> to the currently-stored value, wrapping on …","Performs a bitwise “and” on the currently-stored value …","Performs a bitwise “nand” on the currently-stored …","Performs a bitwise “or” on the currently-stored value …","Subtracts <code>value</code> from the currently-stored value, wrapping …","Fetches the value, and applies a function to it that …","Performs a bitwise “xor” on the currently-stored value …","Returns a mutable reference to the underlying value.","Conditional compilation based on the presence of atomic …","Consumes the wrapper and returns the contained value.","Load a value from this object.","Marker traits used by <code>Radium</code>.","Creates a new value of this type.","Store a value in this object.","Swap with the value stored in this object.","Best-effort atomic types","Types supporting maybe-atomic bitwise operations.","Types supporting maybe-atomic arithmetic operations.","Best-effort atomic <code>bool</code> type.","Best-effort atomic <code>i16</code> type.","Best-effort atomic <code>i32</code> type.","Best-effort atomic <code>i64</code> type.","Best-effort atomic <code>i8</code> type.","Best-effort atomic <code>isize</code> type.","Best-effort atomic pointer type.","Best-effort atomic <code>u16</code> type.","Best-effort atomic <code>u32</code> type.","Best-effort atomic <code>u64</code> type.","Best-effort atomic <code>u8</code> type.","Best-effort atomic <code>usize</code> type."],"i":[2,0,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,[[[2,[],[[1,[-1]]]],-1,-1,3],-1,[]],[[[2,[],[[1,[-1]]]],-1,-1,3,3],[[4,[-1,-1]]],[]],[[[2,[],[[1,[-1]]]],-1,-1,3,3],[[4,[-1,-1]]],[]],[3,5],[[[2,[],[[1,[-1]]]],-1,3],-1,[]],[[[2,[],[[1,[-1]]]],-1,3],-1,[]],[[[2,[],[[1,[-1]]]],-1,3],-1,[]],[[[2,[],[[1,[-1]]]],-1,3],-1,[]],[[[2,[],[[1,[-1]]]],-1,3],-1,[]],[[[2,[],[[1,[-1]]]],3,3,-2],[[4,[-1,-1]]],[],[[8,[-1],[[6,[[7,[-1]]]]]]]],[[[2,[],[[1,[-1]]]],-1,3],-1,[]],[[[2,[],[[1,[-1]]]]],-1,[]],0,[[[2,[],[[1,[-1]]]]],-1,[]],[[[2,[],[[1,[-1]]]],3],-1,[]],0,[-1,[[2,[],[[1,[-1]]]]],[]],[[[2,[],[[1,[-1]]]],-1,3],5,[]],[[[2,[],[[1,[-1]]]],-1,3],-1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[2],"p":[[17,"Item"],[10,"Radium",0],[6,"Ordering",36],[6,"Result",37],[1,"tuple"],[17,"Output"],[6,"Option",38],[10,"FnMut",39]],"b":[]}],\
["rand",{"doc":"Utilities for random number generation","t":"TKFKTKKRKNNNCNNMNNNNNMNNNNNNNNNMMCNCNNNNNCMNNMNNNFFGFFKPFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCKKKRFFFFFKRMNNNNNNNNNNNNNNNNNNNNNNNNNNMMNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNEEEEEEEEFNNNNNNNNNNCNNNNNNFNNNNNNNNNNNNNNNRKKMNNMNMM","n":["CUSTOM_START","CryptoRng","Error","Fill","INTERNAL_START","Rng","RngCore","Seed","SeedableRng","borrow","borrow_mut","code","distributions","fill","fill","fill_bytes","fmt","fmt","from","from","from_rng","from_seed","gen","gen","gen_bool","gen_bool","gen_range","gen_range","gen_ratio","gen_ratio","into","next_u32","next_u64","prelude","raw_os_error","rngs","sample","sample","sample_iter","sample_iter","seed_from_u64","seq","try_fill","try_fill","try_fill","try_fill_bytes","try_from","try_into","type_id","Alphanumeric","Bernoulli","BernoulliError","DistIter","DistMap","Distribution","InvalidProbability","Open01","OpenClosed01","Slice","Standard","Uniform","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_ratio","into","into","into","into","into","into","into","into","into","into","into_iter","map","map","new","new","next","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_iter","sample_iter","size_hint","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uniform","SampleBorrow","SampleRange","SampleUniform","Sampler","Uniform","UniformChar","UniformDuration","UniformFloat","UniformInt","UniformSampler","X","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","is_empty","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","CryptoRng","Distribution","IteratorRandom","Rng","RngCore","SeedableRng","SliceRandom","SmallRng","SmallRng","borrow","borrow_mut","clone","eq","fill_bytes","fmt","from","from_rng","from_seed","into","mock","next_u32","next_u64","try_fill_bytes","try_from","try_into","type_id","StepRng","borrow","borrow_mut","clone","eq","fill_bytes","fmt","from","into","new","next_u32","next_u64","try_fill_bytes","try_from","try_into","type_id","Item","IteratorRandom","SliceRandom","choose","choose","choose_multiple_fill","choose_mut","choose_stable","partial_shuffle","shuffle"],"q":[[0,"rand"],[49,"rand::distributions"],[246,"rand::distributions::uniform"],[379,"rand::prelude"],[387,"rand::rngs"],[405,"rand::rngs::mock"],[421,"rand::seq"],[431,"core::num::nonzero"],[432,"core::option"],[433,"core::marker"],[434,"core::fmt"],[435,"core::fmt"],[436,"core::default"],[437,"core::convert"],[438,"core::any"],[439,"core::clone"],[440,"core::cmp"],[441,"core::fmt"],[442,"core::ops::range"],[443,"core::num::wrapping"],[444,"core::num::nonzero"]],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an <code>RngCore</code> or …","Error type of random number generators","Types which may be filled with random data","Codes below this point represent OS Errors (i.e. positive …","An automatically-implemented extension trait on <code>RngCore</code> …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","","","Retrieve the error code, if any.","Generating random samples from probability distributions","Fill any type implementing <code>Fill</code> with random data","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> with random data.","","","","Returns the argument unchanged.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Return a random value supporting the <code>Standard</code> distribution.","Return a random value supporting the <code>Standard</code> distribution.","Return a bool with a probability <code>p</code> of being true.","Return a bool with a probability <code>p</code> of being true.","Generate a random value in the given range.","Generate a random value in the given range.","Return a bool with a probability of <code>numerator/denominator</code> …","Return a bool with a probability of <code>numerator/denominator</code> …","Calls <code>U::from(self)</code>.","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","Convenience re-export of common members","Extract the raw OS error code (if this error came from the …","Random number generators and adapters","Sample a new value, using the given distribution.","Sample a new value, using the given distribution.","Create an iterator that generates values using the given …","Create an iterator that generates values using the given …","Create a new PRNG using a <code>u64</code> seed.","Sequence-related functionality","Fill self with random data","Fill any type implementing <code>Fill</code> with random data","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> entirely with random data.","","","","Sample a <code>u8</code>, uniformly distributed over ASCII letters and …","The Bernoulli distribution.","Error type returned from <code>Bernoulli::new</code>.","An iterator that generates random values of <code>T</code> with …","A distribution of values of type <code>S</code> derived from the …","Types (distributions) that can be used to create a random …","<code>p &lt; 0</code> or <code>p &gt; 1</code>.","A distribution to sample floating point numbers uniformly …","A distribution to sample floating point numbers uniformly …","A distribution to sample items uniformly from a slice.","A generic random value distribution, implemented for many …","Sample values uniformly between two bounds.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Construct a new <code>Bernoulli</code> with the probability of success …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a distribution of values of ‘S’ by mapping the …","Create a distribution of values of ‘S’ by mapping the …","Construct a new <code>Bernoulli</code> with the given probability of …","Create a new <code>Slice</code> instance which samples uniformly from …","","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an iterator that generates random values of <code>T</code>, …","Create an iterator that generates random values of <code>T</code>, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A distribution uniformly sampling numbers within a given …","Helper trait similar to <code>Borrow</code> but implemented only for …","Range that supports generating a single sample efficiently.","Helper trait for creating objects using the correct …","The <code>UniformSampler</code> implementation supporting type <code>X</code>.","Sample values uniformly between two bounds.","The back-end implementing <code>UniformSampler</code> for <code>char</code>.","The back-end implementing <code>UniformSampler</code> for <code>Duration</code>.","The back-end implementing <code>UniformSampler</code> for …","The back-end implementing <code>UniformSampler</code> for integer types.","Helper trait handling actual uniform sampling.","The type sampled by this implementation.","Immutably borrows from an owned value. See <code>Borrow::borrow</code>","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check whether the range is empty.","Construct self, with inclusive lower bound and exclusive …","Create a new <code>Uniform</code> instance which samples uniformly from …","","","","","","","","","","","","","","","","","Construct self, with inclusive bounds <code>[low, high]</code>.","Create a new <code>Uniform</code> instance which samples uniformly from …","","","","","","","","","","","","","","","","","Sample a value.","","","","","","","","","","","","","","","","","Generate a sample from the given range.","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A small-state, fast non-crypto PRNG","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Mock random number generator","","","","","","","A simple implementation of <code>RngCore</code> for testing purposes.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a <code>StepRng</code>, yielding an arithmetic sequence starting …","","","","","","","The element type.","Extension trait on iterators, providing random sampling …","Extension trait on slices, providing random mutation and …","Returns a reference to one random element of the slice, or …","Choose one element at random from the iterator.","Collects values at random from the iterator into a …","Returns a mutable reference to one random element of the …","Choose one element at random from the iterator.","Shuffle a slice in place, but exit early.","Shuffle a mutable slice in place."],"i":[1,0,0,0,1,0,0,15,0,1,1,1,0,4,4,8,1,1,1,1,15,15,4,4,4,4,4,4,4,4,1,8,8,0,1,0,4,4,4,4,15,0,6,4,4,8,1,1,1,0,0,0,0,0,0,29,0,0,0,0,0,28,29,26,40,30,31,32,33,35,36,28,29,26,40,30,31,32,33,35,36,28,29,30,31,32,33,35,36,28,29,35,28,29,29,26,40,30,31,32,33,35,36,28,29,26,40,30,31,32,33,35,35,35,36,28,28,29,26,40,30,31,32,33,35,36,26,25,25,28,33,26,25,28,40,30,30,31,31,32,33,35,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,25,25,26,28,29,26,40,30,31,32,33,35,36,28,29,26,40,30,31,32,33,35,36,28,29,26,40,30,31,32,33,35,36,0,0,0,0,20,0,0,0,0,0,0,68,62,63,64,65,66,63,64,65,66,63,64,65,66,63,65,63,64,65,66,63,64,65,66,63,64,65,66,21,68,35,63,63,63,63,63,63,63,63,63,63,63,63,64,65,65,66,68,35,63,63,63,63,63,63,63,63,63,63,63,63,64,65,65,66,68,63,63,63,63,63,63,63,63,63,63,63,63,64,65,65,66,21,68,63,63,63,63,63,63,63,63,63,63,63,63,65,65,68,63,63,63,63,63,63,63,63,63,63,63,63,63,64,65,66,63,64,65,66,63,64,65,66,0,0,0,0,0,0,0,0,0,70,70,70,70,70,70,70,70,70,70,0,70,70,70,70,70,70,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,73,0,0,73,74,74,73,74,73,73],"f":[0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,[[3,[2]]]],0,[[4,-1],5,[6,7]],[[4,-1],5,[6,7]],[[8,[10,[9]]],5],[[1,11],[[13,[5,12]]]],[[1,11],[[13,[5,12]]]],[2,1],[-1,-1,[]],[-1,[[13,[[15,[],[[14,[-2]]]],1]]],8,[7,16,[17,[[10,[9]]]]]],[-1,[[15,[],[[14,[-1]]]]],[7,16,[17,[[10,[9]]]]]],[4,-1,[]],[4,-1,[]],[[4,18],19],[[4,18],19],[[4,-2],-1,20,[[21,[-1]]]],[[4,-2],-1,20,[[21,[-1]]]],[[4,22,22],19],[[4,22,22],19],[-1,-2,[],[]],[8,22],[8,23],0,[1,[[3,[24]]]],0,[[4,-2],-1,[],[[25,[-1]]]],[[4,-2],-1,[],[[25,[-1]]]],[[4,-2],[[26,[-2,4,-1]]],[],[[25,[-1]]]],[[4,-2],[[26,[-2,4,-1]]],[],[[25,[-1]]]],[23,[[15,[],[[14,[-1]]]]],[7,16,[17,[[10,[9]]]]]],0,[[6,-1],[[13,[5,1]]],[4,7]],[[4,-1],[[13,[5,1]]],[6,7]],[[4,-1],[[13,[5,1]]],[6,7]],[[8,[10,[9]]],[[13,[5,1]]]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,27,[]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[28,28],[29,29],[30,30],[31,31],[32,32],[[[33,[-1]]],[[33,[-1]]],34],[[[35,[-1]]],[[35,[-1]]],[34,20]],[36,36],[[28,28],19],[[29,29],19],[[[35,[-1]],[35,[-1]]],19,[37,20]],[[28,11],38],[[29,11],38],[[29,11],38],[[[26,[-1,-2,-3]],11],38,39,39,39],[[[40,[-1,-2,-3,-4]],11],38,39,39,39,39],[[30,11],38],[[31,11],38],[[32,11],38],[[[33,[-1]],11],38,39],[[[35,[-1]],11],38,[39,20]],[[36,11],38],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[41,[-1]]],[[35,[-1]]],20],[[[42,[-1]]],[[35,[-1]]],20],[-1,-1,[]],[[22,22],[[13,[28,29]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[25,-3],[[40,[25,-3,-1,-2]]],[],[],[[44,[-1],[[43,[-2]]]]]],[[25,-3],[[40,[25,-3,-1,-2]]],[],[],[[44,[-1],[[43,[-2]]]]]],[18,[[13,[28,29]]]],[[[10,[-1]]],[[13,[[33,[-1]],0]]],[]],[[[26,[-2,-3,-1]]],[[3,[-1]]],[],[[25,[-1]]],4],[[25,-1],-2,[4,7],[]],[[28,-1],19,[4,7]],[[[40,[-2,-4,-1,-3]],-5],-3,[],[[25,[-1]]],[],[[44,[-1],[[43,[-3]]]]],[4,7]],[[30,-1],45,[4,7]],[[30,-1],18,[4,7]],[[31,-1],45,[4,7]],[[31,-1],18,[4,7]],[[32,-1],9,[4,7]],[[[33,[-1]],-2],-1,[],[4,7]],[[[35,[-1]],-2],-1,20,[4,7]],[[36,-1],46,[4,7]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],[[3,[-2]]],[4,7],[]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],[[5,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[4,7],[],[],[],[],[],[],[],[],[],[]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],48,[4,7]],[[36,-1],18,[4,7]],[[36,-1],49,[4,7]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],[[50,[-2]]],[4,7],[]],[[36,-1],[[5,[-2,-3]]],[4,7],[],[]],[[36,-1],51,[4,7]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],23,[4,7]],[[36,-1],[[5,[-2,-3,-4,-5]]],[4,7],[],[],[],[]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],52,[4,7]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],53,[4,7]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],2,[4,7]],[[36,-1],54,[4,7]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],55,[4,7]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],56,[4,7]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],[[5,[-2,-3,-4]]],[4,7],[],[],[]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],57,[4,7]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],22,[4,7]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],[[5,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[4,7],[],[],[],[],[],[],[],[],[]],[[36,-1],[[5,[-2]]],[4,7],[]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],19,[4,7]],[[36,-1],[[5,[-2,-3,-4,-5,-6,-7,-8,-9]]],[4,7],[],[],[],[],[],[],[],[]],[[36,-1],[[5,[-2,-3,-4,-5,-6,-7]]],[4,7],[],[],[],[],[],[]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],58,[4,7]],[[36,-1],9,[4,7]],[[36,-1],[[5,[-2,-3,-4,-5,-6]]],[4,7],[],[],[],[],[]],[[36,-1],[[5,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[4,7],[],[],[],[],[],[],[],[],[],[],[]],[[36,-1],[[5,[-2,-3,-4,-5,-6,-7,-8]]],[4,7],[],[],[],[],[],[],[]],[[36,-1],59,[4,7]],[[36,-1],45,[4,7]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],60,[4,7]],[[36,-1],61,[4,7]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],5,[4,7]],[[36,-1],[[5,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[4,7],[],[],[],[],[],[],[],[],[],[],[],[]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],24,[4,7]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],[[47,[-2]]],[4,7],[]],[[36,-1],[[47,[-2]]],[4,7],[]],[[25,-1],[[26,[25,-1,-2]]],4,[]],[[25,-1],[[26,[25,-1,-2]]],4,[]],[[[26,[-2,-3,-1]]],[[5,[61,[3,[61]]]]],[],[[25,[-1]]],4],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],0,0,0,0,0,0,0,0,0,0,0,0,[62,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[63,[-1]]],[[63,[-1]]],34],[64,64],[[[65,[-1]]],[[65,[-1]]],34],[66,66],[[[63,[-1]],[63,[-1]]],19,37],[[[65,[-1]],[65,[-1]]],19,37],[[[63,[-1]],11],38,39],[[64,11],38],[[[65,[-1]],11],38,39],[[66,11],38],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[21,19],[[-2,-3],[[68,[],[[67,[-1]]]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[35,[-1]]],20,[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[63,[22]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[63,[48]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[63,[24]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[63,[23]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[63,[55]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[63,[61]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[63,[51]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[63,[56]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[63,[60]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[63,[9]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[63,[49]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[63,[46]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],64,[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[65,[18]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[65,[45]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],66,[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[68,[],[[67,[-1]]]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[35,[-1]]],20,[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[63,[60]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[63,[49]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[63,[48]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[63,[51]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[63,[55]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[63,[24]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[63,[23]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[63,[9]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[63,[61]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[63,[56]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[63,[22]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[63,[46]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],64,[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[65,[18]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],[[65,[45]]],[],[[62,[-1]],7],[[62,[-1]],7]],[[-2,-3],66,[],[[62,[-1]],7],[[62,[-1]],7]],[[[68,[],[[67,[-1]]]],-2],-1,[],[4,7]],[[[63,[48]],-1],-2,[4,7],[]],[[[63,[46]],-1],-2,[4,7],[]],[[[63,[55]],-1],-2,[4,7],[]],[[[63,[24]],-1],-2,[4,7],[]],[[[63,[23]],-1],-2,[4,7],[]],[[[63,[22]],-1],-2,[4,7],[]],[[[63,[61]],-1],-2,[4,7],[]],[[[63,[49]],-1],-2,[4,7],[]],[[[63,[9]],-1],-2,[4,7],[]],[[[63,[60]],-1],-2,[4,7],[]],[[[63,[51]],-1],-2,[4,7],[]],[[[63,[56]],-1],-2,[4,7],[]],[[64,-1],-2,[4,7],[]],[[[65,[45]],-1],-2,[4,7],[]],[[[65,[18]],-1],-2,[4,7],[]],[[66,-1],69,[4,7]],[[21,-1],-2,[8,7],[]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[62,[-1]],7],[[62,[-1]],7],[4,7]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[70,70],[[70,70],19],[[70,[10,[9]]],5],[[70,11],38],[-1,-1,[]],[-1,[[13,[70,1]]],8],[-1,70,[]],[-1,-2,[],[]],0,[70,22],[70,23],[[70,[10,[9]]],[[13,[5,1]]]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,27,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[71,71],[[71,71],19],[[71,[10,[9]]],5],[[71,11],38],[-1,-1,[]],[-1,-2,[],[]],[[23,23],71],[71,22],[71,23],[[71,[10,[9]]],[[13,[5,1]]]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,27,[]],0,0,0,[[[73,[],[[72,[-1]]]],-2],[[3,[-1]]],[],[4,7]],[[74,-1],[[3,[-2]]],[4,7],[]],[[74,-1,[10,[-2]]],61,[4,7],[]],[[[73,[],[[72,[-1]]]],-2],[[3,[-1]]],[],[4,7]],[[74,-1],[[3,[-2]]],[4,7],[]],[[[73,[],[[72,[-1]]]],-2,61],[[5,[[10,[-1]],[10,[-1]]]]],[],[4,7]],[[[73,[],[[72,[-1]]]],-2],5,[],[4,7]]],"c":[],"p":[[5,"Error",0],[5,"NonZeroU32",431],[6,"Option",432],[10,"Rng",0],[1,"tuple"],[10,"Fill",0],[10,"Sized",433],[10,"RngCore",0],[1,"u8"],[1,"slice"],[5,"Formatter",434],[5,"Error",434],[6,"Result",435],[17,"Seed"],[10,"SeedableRng",0],[10,"Default",436],[10,"AsMut",437],[1,"f64"],[1,"bool"],[10,"SampleUniform",246],[10,"SampleRange",246],[1,"u32"],[1,"u64"],[1,"i32"],[10,"Distribution",49],[5,"DistIter",49],[5,"TypeId",438],[5,"Bernoulli",49],[6,"BernoulliError",49],[5,"OpenClosed01",49],[5,"Open01",49],[5,"Alphanumeric",49],[5,"Slice",49],[10,"Clone",439],[5,"Uniform",49],[5,"Standard",49],[10,"PartialEq",440],[8,"Result",434],[10,"Debug",434],[5,"DistMap",49],[5,"RangeInclusive",441],[5,"Range",441],[17,"Output"],[10,"Fn",442],[1,"f32"],[1,"u128"],[1,"array"],[1,"i128"],[1,"i64"],[5,"Wrapping",443],[1,"u16"],[5,"NonZeroU128",431],[5,"NonZeroUsize",431],[5,"NonZeroU64",431],[1,"i8"],[1,"i16"],[5,"NonZeroU8",431],[5,"NonZeroU16",431],[1,"char"],[1,"isize"],[1,"usize"],[10,"SampleBorrow",246],[5,"UniformInt",246],[5,"UniformChar",246],[5,"UniformFloat",246],[5,"UniformDuration",246],[17,"X"],[10,"UniformSampler",246],[5,"Duration",444],[5,"SmallRng",387],[5,"StepRng",405],[17,"Item"],[10,"SliceRandom",421],[10,"IteratorRandom",421]],"b":[[16,"impl-Display-for-Error"],[17,"impl-Debug-for-Error"],[93,"impl-Debug-for-BernoulliError"],[94,"impl-Display-for-BernoulliError"],[112,"impl-From%3CRangeInclusive%3CX%3E%3E-for-Uniform%3CX%3E"],[113,"impl-From%3CRange%3CX%3E%3E-for-Uniform%3CX%3E"],[135,"impl-Distribution%3Cf32%3E-for-OpenClosed01"],[136,"impl-Distribution%3Cf64%3E-for-OpenClosed01"],[137,"impl-Distribution%3Cf32%3E-for-Open01"],[138,"impl-Distribution%3Cf64%3E-for-Open01"],[142,"impl-Distribution%3Cu128%3E-for-Standard"],[143,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[144,"impl-Distribution%3COption%3CT%3E%3E-for-Standard"],[145,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[146,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[147,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J)%3E-for-Standard"],[148,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[149,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[150,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[151,"impl-Distribution%3Ci128%3E-for-Standard"],[152,"impl-Distribution%3Cf64%3E-for-Standard"],[153,"impl-Distribution%3Ci64%3E-for-Standard"],[154,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[155,"impl-Distribution%3CWrapping%3CT%3E%3E-for-Standard"],[156,"impl-Distribution%3C(A,+B)%3E-for-Standard"],[157,"impl-Distribution%3Cu16%3E-for-Standard"],[158,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[159,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[160,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[161,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[162,"impl-Distribution%3Cu64%3E-for-Standard"],[163,"impl-Distribution%3C(A,+B,+C,+D)%3E-for-Standard"],[164,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[165,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[166,"impl-Distribution%3CNonZeroU128%3E-for-Standard"],[167,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[168,"impl-Distribution%3CNonZeroUsize%3E-for-Standard"],[169,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[170,"impl-Distribution%3CNonZeroU32%3E-for-Standard"],[171,"impl-Distribution%3CNonZeroU64%3E-for-Standard"],[172,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[173,"impl-Distribution%3Ci8%3E-for-Standard"],[174,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[175,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[176,"impl-Distribution%3Ci16%3E-for-Standard"],[177,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[178,"impl-Distribution%3C(A,+B,+C)%3E-for-Standard"],[179,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[180,"impl-Distribution%3CNonZeroU8%3E-for-Standard"],[181,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[182,"impl-Distribution%3Cu32%3E-for-Standard"],[183,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[184,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H,+I)%3E-for-Standard"],[185,"impl-Distribution%3C(A,)%3E-for-Standard"],[186,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[187,"impl-Distribution%3Cbool%3E-for-Standard"],[188,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H)%3E-for-Standard"],[189,"impl-Distribution%3C(A,+B,+C,+D,+E,+F)%3E-for-Standard"],[190,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[191,"impl-Distribution%3CNonZeroU16%3E-for-Standard"],[192,"impl-Distribution%3Cu8%3E-for-Standard"],[193,"impl-Distribution%3C(A,+B,+C,+D,+E)%3E-for-Standard"],[194,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K)%3E-for-Standard"],[195,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G)%3E-for-Standard"],[196,"impl-Distribution%3Cchar%3E-for-Standard"],[197,"impl-Distribution%3Cf32%3E-for-Standard"],[198,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[199,"impl-Distribution%3Cisize%3E-for-Standard"],[200,"impl-Distribution%3Cusize%3E-for-Standard"],[201,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[202,"impl-Distribution%3C()%3E-for-Standard"],[203,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L)%3E-for-Standard"],[204,"impl-Distribution%3C%5BT;+32%5D%3E-for-Standard"],[205,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[206,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[207,"impl-Distribution%3Ci32%3E-for-Standard"],[208,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[209,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[210,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[211,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[287,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[288,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[289,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[290,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[291,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[292,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[293,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[294,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[295,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[296,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[297,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[298,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[300,"impl-UniformSampler-for-UniformFloat%3Cf64%3E"],[301,"impl-UniformSampler-for-UniformFloat%3Cf32%3E"],[305,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[306,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[307,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[308,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[309,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[310,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[311,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[312,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[313,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[314,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[315,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[316,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[318,"impl-UniformSampler-for-UniformFloat%3Cf64%3E"],[319,"impl-UniformSampler-for-UniformFloat%3Cf32%3E"],[322,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[323,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[324,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[325,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[326,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[327,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[328,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[329,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[330,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[331,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[332,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[333,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[335,"impl-UniformSampler-for-UniformFloat%3Cf32%3E"],[336,"impl-UniformSampler-for-UniformFloat%3Cf64%3E"],[340,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[341,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[342,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[343,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[344,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[345,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[346,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[347,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[348,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[349,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[350,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[351,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[352,"impl-UniformSampler-for-UniformFloat%3Cf32%3E"],[353,"impl-UniformSampler-for-UniformFloat%3Cf64%3E"],[355,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[356,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[357,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[358,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[359,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[360,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[361,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[362,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[363,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[364,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[365,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[366,"impl-UniformSampler-for-UniformInt%3Cu8%3E"]]}],\
["rand_core",{"doc":"Random number generation traits","t":"TKKFTKRKMCNNNMNNNNNMCNCMMNNMNNNFFKRRNNNNNNNOONNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNHHHHHHHH","n":["CUSTOM_START","CryptoRng","CryptoRngCore","Error","INTERNAL_START","RngCore","Seed","SeedableRng","as_rngcore","block","borrow","borrow_mut","code","fill_bytes","fmt","fmt","from","from","from_rng","from_seed","impls","into","le","next_u32","next_u64","raw_os_error","seed_from_u64","try_fill_bytes","try_from","try_into","type_id","BlockRng","BlockRng64","BlockRngCore","Item","Results","as_rngcore","borrow","borrow","borrow_mut","borrow_mut","clone","clone","core","core","fill_bytes","fill_bytes","fmt","fmt","from","from","from_rng","from_rng","from_seed","from_seed","generate","generate_and_set","generate_and_set","index","index","into","into","new","new","next_u32","next_u32","next_u64","next_u64","reset","reset","seed_from_u64","seed_from_u64","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","fill_bytes_via_next","fill_via_u32_chunks","fill_via_u64_chunks","next_u32_via_fill","next_u64_via_fill","next_u64_via_u32","read_u32_into","read_u64_into"],"q":[[0,"rand_core"],[31,"rand_core::block"],[80,"rand_core::impls"],[86,"rand_core::le"],[88,"core::num::nonzero"],[89,"core::option"],[90,"core::fmt"],[91,"core::fmt"],[92,"core::marker"],[93,"core::default"],[94,"core::convert"],[95,"core::any"],[96,"core::clone"],[97,"core::fmt"]],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an <code>RngCore</code> or …","An extension trait that is automatically implemented for …","Error type of random number generators","Codes below this point represent OS Errors (i.e. positive …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","Upcast to an <code>RngCore</code> trait object.","The <code>BlockRngCore</code> trait and implementation helpers","","","Retrieve the error code, if any.","Fill <code>dest</code> with random data.","","","Returns the argument unchanged.","","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Helper functions for implementing <code>RngCore</code> functions.","Calls <code>U::from(self)</code>.","Little-Endian utilities","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","Extract the raw OS error code (if this error came from the …","Create a new PRNG using a <code>u64</code> seed.","Fill <code>dest</code> entirely with random data.","","","","A wrapper type implementing <code>RngCore</code> for some type …","A wrapper type implementing <code>RngCore</code> for some type …","A trait for RNGs which do not generate random numbers …","Results element type, e.g. <code>u32</code>.","Results type. This is the ‘block’ an RNG implementing …","","","","","","","","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Generate a new block of results.","Generate a new set of results immediately, setting the …","Generate a new set of results immediately, setting the …","Get the index into the result buffer.","Get the index into the result buffer.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>BlockRng</code> from an existing RNG implementing …","Create a new <code>BlockRng</code> from an existing RNG implementing …","","","","","Reset the number of available results. This will force a …","Reset the number of available results. This will force a …","","","","","","","","","","","Implement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>next_u32</code>, little-endian order.","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>."],"i":[3,0,0,0,3,0,12,0,1,0,3,3,3,2,3,3,3,3,12,12,0,3,0,2,2,3,12,2,3,3,3,0,0,0,23,23,21,21,24,21,24,21,24,21,24,21,24,21,24,21,24,21,24,21,24,23,21,24,21,24,21,24,21,24,21,24,21,24,21,24,21,24,21,24,21,24,21,24,21,24,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,[1,2],0,[-1,-2,[],[]],[-1,-2,[],[]],[3,[[5,[4]]]],[[2,[7,[6]]],8],[[3,9],10],[[3,9],10],[-1,-1,[]],[4,3],[-1,[[13,[[12,[],[[11,[-2]]]],3]]],2,[14,15,[16,[[7,[6]]]]]],[-1,[[12,[],[[11,[-1]]]]],[14,15,[16,[[7,[6]]]]]],0,[-1,-2,[],[]],0,[2,17],[2,18],[3,[[5,[19]]]],[18,[[12,[],[[11,[-1]]]]],[14,15,[16,[[7,[6]]]]]],[[2,[7,[6]]],[[13,[8,3]]]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,20,[]],0,0,0,0,0,[-1,2,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[21,[-1]]],[[21,[-1]]],[22,23,14]],[[[24,[-1]]],[[24,[-1]]],[22,23,14]],0,0,[[[21,[-1]],[7,[6]]],8,[[23,[],[[25,[17]]]]]],[[[24,[-1]],[7,[6]]],8,[[23,[],[[25,[18]]]]]],[[[21,[-1]],9],10,[23,26]],[[[24,[-1]],9],10,[23,26]],[-1,-1,[]],[-1,-1,[]],[-1,[[13,[[21,[-2]],3]]],2,[23,12]],[-1,[[13,[[24,[-2]],3]]],2,[23,12]],[-1,[[21,[-2]]],[],[23,12]],[-1,[[24,[-2]]],[],[23,12]],[[[23,[],[[25,[-1]],[27,[-2]]]],-2],8,[],[[28,[[7,[-1]]]],[16,[[7,[-1]]]],15]],[[[21,[-1]],29],8,23],[[[24,[-1]],29],8,23],[[[21,[-1]]],29,23],[[[24,[-1]]],29,23],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[21,[-1]]],23],[-1,[[24,[-1]]],23],[[[21,[-1]]],17,[[23,[],[[25,[17]]]]]],[[[24,[-1]]],17,[[23,[],[[25,[18]]]]]],[[[21,[-1]]],18,[[23,[],[[25,[17]]]]]],[[[24,[-1]]],18,[[23,[],[[25,[18]]]]]],[[[21,[-1]]],8,23],[[[24,[-1]]],8,23],[18,[[21,[-1]]],[23,12]],[18,[[24,[-1]]],[23,12]],[[[21,[-1]],[7,[6]]],[[13,[8,3]]],[[23,[],[[25,[17]]]]]],[[[24,[-1]],[7,[6]]],[[13,[8,3]]],[[23,[],[[25,[18]]]]]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[[-1,[7,[6]]],8,[2,14]],[[[7,[17]],[7,[6]]],[[8,[29,29]]]],[[[7,[18]],[7,[6]]],[[8,[29,29]]]],[-1,17,[2,14]],[-1,18,[2,14]],[-1,18,[2,14]],[[[7,[6]],[7,[17]]],8],[[[7,[6]],[7,[18]]],8]],"c":[],"p":[[10,"CryptoRngCore",0],[10,"RngCore",0],[5,"Error",0],[5,"NonZeroU32",88],[6,"Option",89],[1,"u8"],[1,"slice"],[1,"tuple"],[5,"Formatter",90],[8,"Result",90],[17,"Seed"],[10,"SeedableRng",0],[6,"Result",91],[10,"Sized",92],[10,"Default",93],[10,"AsMut",94],[1,"u32"],[1,"u64"],[1,"i32"],[5,"TypeId",95],[5,"BlockRng",31],[10,"Clone",96],[10,"BlockRngCore",31],[5,"BlockRng64",31],[17,"Item"],[10,"Debug",90],[17,"Results"],[10,"AsRef",94],[1,"usize"]],"b":[[14,"impl-Display-for-Error"],[15,"impl-Debug-for-Error"]]}],\
["rppal",{"doc":"RPPAL provides access to the Raspberry Pi’s GPIO, I2C, …","t":"CCCCCCPPPPPPPPPGPFPPFPFGPGPPPFPFPPPGIPPGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFPGPFPPPIPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGPGPPPPGFPPINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPGPPGPPGPPGPPPPPPPGPIFGFPPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPFPGGPPPPPPPPPPPPPPPPPPPIGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPGPPPPPPPPPPPPGGGPIPFPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["gpio","i2c","pwm","spi","system","uart","Alt0","Alt1","Alt2","Alt3","Alt4","Alt5","Both","Disabled","Err","Error","FallingEdge","Gpio","High","Input","InputPin","Io","IoPin","Level","Low","Mode","Off","Ok","Output","OutputPin","PermissionDenied","Pin","PinNotAvailable","PullDown","PullUp","PullUpDown","Result","RisingEdge","ThreadPanic","Trigger","UnknownModel","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_async_interrupt","clear_interrupt","clear_pwm","clear_pwm","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","get","into","into","into","into","into","into","into","into","into","into","into_input","into_input_pulldown","into_input_pullup","into_io","into_output","into_output_high","into_output_low","is_high","is_high","is_low","is_low","is_set_high","is_set_low","mode","mode","new","not","pin","pin","pin","pin","poll_interrupt","poll_interrupts","read","read","read","reset_on_drop","reset_on_drop","reset_on_drop","set_async_interrupt","set_high","set_high","set_interrupt","set_low","set_low","set_mode","set_pullupdown","set_pwm","set_pwm","set_pwm_frequency","set_pwm_frequency","set_reset_on_drop","set_reset_on_drop","set_reset_on_drop","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","write","Capabilities","Err","Error","FeatureNotSupported","I2c","InvalidSlaveAddress","Io","Ok","Result","UnknownModel","addr_10bit","block_read","block_write","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bus","capabilities","clock_speed","clone","clone_into","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","i2c_block_read","i2c_block_write","into","into","into","new","read","set_addr_10bit","set_slave_address","set_smbus_pec","set_timeout","smbus_block_process_call","smbus_block_read","smbus_block_read","smbus_block_write","smbus_block_write","smbus_host_notify","smbus_pec","smbus_process_call","smbus_process_call","smbus_process_call_swapped","smbus_quick_command","smbus_quick_command","smbus_read_byte","smbus_read_byte","smbus_read_word","smbus_read_word","smbus_read_word_swapped","smbus_receive_byte","smbus_receive_byte","smbus_send_byte","smbus_send_byte","smbus_write_byte","smbus_write_byte","smbus_write_word","smbus_write_word","smbus_write_word_swapped","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_bus","write","write_read","Channel","Err","Error","Inverse","Io","Normal","Ok","Polarity","Pwm","Pwm0","Pwm1","Result","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","disable","drop","duty_cycle","enable","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frequency","from","from","from","from","from","into","into","into","into","is_enabled","new","period","polarity","pulse_width","reset_on_drop","set_duty_cycle","set_frequency","set_period","set_polarity","set_pulse_width","set_reset_on_drop","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_frequency","with_period","ActiveHigh","ActiveLow","BitOrder","BitOrderNotSupported","BitsPerWordNotSupported","Bus","ClockSpeedNotSupported","Err","Error","Io","LsbFirst","Mode","Mode0","Mode1","Mode2","Mode3","ModeNotSupported","MsbFirst","Ok","Polarity","PolarityNotSupported","Result","Segment","SlaveSelect","Spi","Spi0","Spi1","Spi2","Spi3","Spi4","Spi5","Spi6","Ss0","Ss1","Ss10","Ss11","Ss12","Ss13","Ss14","Ss15","Ss2","Ss3","Ss4","Ss5","Ss6","Ss7","Ss8","Ss9","bit_order","bits_per_word","bits_per_word","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clock_speed","clock_speed","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","delay","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","is_empty","len","mode","new","new","read","reverse_bits","set_bit_order","set_bits_per_word","set_bits_per_word","set_clock_speed","set_clock_speed","set_delay","set_mode","set_ss_change","set_ss_polarity","ss_change","ss_polarity","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","transfer","transfer_segments","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_read","with_settings","with_write","write","Bcm2711","Bcm2835","Bcm2836","Bcm2837A1","Bcm2837B0","DeviceInfo","Err","Error","Model","Ok","RaspberryPi2B","RaspberryPi3APlus","RaspberryPi3B","RaspberryPi3BPlus","RaspberryPi400","RaspberryPi4B","RaspberryPiA","RaspberryPiAPlus","RaspberryPiBPlus","RaspberryPiBRev1","RaspberryPiBRev2","RaspberryPiComputeModule","RaspberryPiComputeModule3","RaspberryPiComputeModule3Plus","RaspberryPiComputeModule4","RaspberryPiZero","RaspberryPiZero2W","RaspberryPiZeroW","Result","SoC","UnknownModel","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","model","new","soc","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Both","Err","Error","Even","Gpio","Input","InvalidValue","Io","Mark","Mark","None","None","Odd","Ok","Output","Parity","ParityCheck","Queue","Replace","Result","Space","Status","Strip","Uart","baud_rate","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cts","data_bits","dcd","drain","dsr","dtr","eq","eq","eq","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","hardware_flow_control","input_len","into","into","into","into","into","into","is_read_blocking","is_write_blocking","new","output_len","parity","parity_check","read","ri","rts","send_start","send_stop","set_baud_rate","set_data_bits","set_dtr","set_hardware_flow_control","set_parity","set_parity_check","set_read_mode","set_rts","set_software_flow_control","set_stop_bits","set_write_mode","software_flow_control","status","stop_bits","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","with_path","write"],"q":[[0,"rppal"],[6,"rppal::gpio"],[222,"rppal::i2c"],[307,"rppal::pwm"],[385,"rppal::spi"],[564,"rppal::system"],[648,"rppal::uart"],[780,"core::fmt"],[781,"core::fmt"],[782,"core::time"],[783,"core::option"],[784,"core::ops::function"],[785,"core::marker"],[786,"alloc::string"],[787,"core::result"],[788,"core::any"],[789,"std::path"],[790,"core::convert"]],"d":["Interface for the GPIO peripheral.","Interface for the I2C peripheral.","Interface for the PWM peripheral.","Interface for the main and auxiliary SPI peripherals.","Raspberry Pi system-related tools.","Interface for the UART peripherals and any USB to serial …","","","","","","","","","Contains the error value","Errors that can occur when accessing the GPIO peripheral.","","Provides access to the Raspberry Pi’s GPIO peripheral.","","","GPIO pin configured as input.","I/O error.","GPIO pin that can be (re)configured for any mode or …","Pin logic levels.","","Pin modes.","","Contains the success value","","GPIO pin configured as output.","Permission denied when opening <code>/dev/gpiomem</code>, <code>/dev/mem</code> or …","Unconfigured GPIO pin.","Pin is not available.","","","Built-in pull-up/pull-down resistor states.","Result type returned from methods that can have …","","Thread panicked.","Interrupt trigger conditions.","Unknown model.","","","","","","","","","","","","","","","","","","","","","Removes a previously configured asynchronous interrupt …","Removes a previously configured synchronous interrupt …","Stops a previously configured software-based PWM signal.","Stops a previously configured software-based PWM signal.","","","","","","","","","","","","Resets the pin’s mode and disables the built-in …","Resets the pin’s mode and disables the built-in …","Resets the pin’s mode and disables the built-in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a <code>Pin</code> for the specified BCM GPIO pin number.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>Pin</code> and returns an <code>InputPin</code>. Sets the mode to …","Consumes the <code>Pin</code> and returns an <code>InputPin</code>. Sets the mode to …","Consumes the <code>Pin</code> and returns an <code>InputPin</code>. Sets the mode to …","Consumes the <code>Pin</code> and returns an <code>IoPin</code>. Sets the mode to …","Consumes the <code>Pin</code> and returns an <code>OutputPin</code>. Sets the mode …","Consumes the <code>Pin</code> and returns an <code>OutputPin</code>. Changes the …","Consumes the <code>Pin</code> and returns an <code>OutputPin</code>. Changes the …","Reads the pin’s logic level, and returns <code>true</code> if it’s …","Reads the pin’s logic level, and returns <code>true</code> if it’s …","Reads the pin’s logic level, and returns <code>true</code> if it’s …","Reads the pin’s logic level, and returns <code>true</code> if it’s …","Returns <code>true</code> if the pin’s output state is set to <code>High</code>.","Returns <code>true</code> if the pin’s output state is set to <code>Low</code>.","Returns the pin’s mode.","Returns the pin’s mode.","Constructs a new <code>Gpio</code>.","","Returns the GPIO pin number.","Returns the GPIO pin number.","Returns the GPIO pin number.","Returns the GPIO pin number.","Blocks until an interrupt is triggered on the pin, or a …","Blocks until an interrupt is triggered on any of the …","Reads the pin’s logic level.","Reads the pin’s logic level.","Reads the pin’s logic level.","Returns the value of <code>reset_on_drop</code>.","Returns the value of <code>reset_on_drop</code>.","Returns the value of <code>reset_on_drop</code>.","Configures an asynchronous interrupt trigger, which …","Sets the pin’s output state to <code>High</code>.","Sets the pin’s output state to <code>High</code>.","Configures a synchronous interrupt trigger.","Sets the pin’s output state to <code>Low</code>.","Sets the pin’s output state to <code>Low</code>.","Sets the pin’s mode.","Configures the built-in pull-up/pull-down resistors.","Configures a software-based PWM signal.","Configures a software-based PWM signal.","Configures a software-based PWM signal.","Configures a software-based PWM signal.","When enabled, resets the pin’s mode to its original …","When enabled, resets the pin’s mode to its original …","When enabled, resets the pin’s mode to its original …","","","","","","","","","","","Toggles the pin’s output state between <code>Low</code> and <code>High</code>.","Toggles the pin’s output state between <code>Low</code> and <code>High</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets the pin’s output state.","Sets the pin’s output state.","Lists the features supported by the underlying drivers.","Contains the error value","Errors that can occur when accessing the I2C peripheral.","I2C/SMBus feature not supported.","Provides access to the Raspberry Pi’s I2C peripheral.","Invalid slave address.","I/O error.","Contains the success value","Result type returned from methods that can have <code>i2c::Error</code>…","Unknown model.","Indicates whether 10-bit addresses are supported.","Sends an 8-bit <code>command</code>, and then fills a multi-byte <code>buffer</code> …","Sends an 8-bit <code>command</code> followed by a multi-byte <code>buffer</code>.","","","","","","","Returns the I2C bus ID.","Returns information on the functionality supported by the …","Returns the clock frequency in hertz (Hz).","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Indicates whether I2C Block Read is supported.","Indicates whether I2C Block Write is supported.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a new <code>I2c</code>.","Receives incoming data from the slave device and writes it …","Enables or disables 10-bit addressing.","Sets a 7-bit or 10-bit slave address.","Enables or disables SMBus Packet Error Checking.","Sets the maximum duration of a transaction in milliseconds …","Indicates whether SMBus Block Process Call is supported.","Indicates whether SMBus Block Read is supported.","Sends an 8-bit <code>command</code>, and then receives an 8-bit byte …","Indicates whether SMBus Block Write is supported.","Sends an 8-bit <code>command</code> and an 8-bit byte count along with …","Indicates whether SMBus Host Notify is supported.","Indicates whether SMBus Packet Error Checking is supported.","Indicates whether SMBus Process Call is supported.","Sends an 8-bit <code>command</code> and a 16-bit <code>value</code>, and then …","Sends an 8-bit <code>command</code> and a 16-bit <code>value</code>, and then …","Indicates whether SMBus Quick Command is supported.","Sends a 1-bit <code>command</code> in place of the R/W bit.","Indicates whether SMBus Read Byte is supported.","Sends an 8-bit <code>command</code>, and receives an 8-bit value.","Indicates whether SMBus Read Word is supported.","Sends an 8-bit <code>command</code>, and receives a 16-bit value.","Sends an 8-bit <code>command</code>, and receives a 16-bit <code>value</code> in a …","Indicates whether SMBus Receive Byte is supported.","Receives an 8-bit value.","Indicates whether SMBus Send Byte is supported.","Sends an 8-bit <code>value</code>.","Indicates whether SMBus Write Byte is supported.","Sends an 8-bit <code>command</code> and an 8-bit <code>value</code>.","Indicates whether SMBus Write Word is supported.","Sends an 8-bit <code>command</code> and a 16-bit <code>value</code>.","Sends an 8-bit <code>command</code> and a 16-bit <code>value</code> in a …","","","","","","","","","","","","Constructs a new <code>I2c</code> using the specified bus.","Sends the outgoing data contained in <code>buffer</code> to the slave …","Sends the outgoing data contained in <code>write_buffer</code> to the …","PWM channels.","Contains the error value","Errors that can occur when accessing the PWM peripheral.","","I/O error.","","Contains the success value","Output polarities.","Provides access to the Raspberry Pi’s PWM peripheral.","","","Result type returned from methods that can have <code>pwm::Error</code>…","","","","","","","","","","","","","Disables the PWM channel.","","Returns the duty cycle.","Enables the PWM channel.","","","","","","","","","","Returns the frequency.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the PWM channel is enabled.","Constructs a new <code>Pwm</code>.","Returns the period.","Returns the polarity.","Returns the pulse width.","Returns the value of <code>reset_on_drop</code>.","Sets the duty cycle.","Sets the frequency and duty cycle.","Sets the period.","Sets the polarity.","Sets the pulse width.","When enabled, disables the PWM channel when the <code>Pwm</code> …","","","","","","","","","","","","","","","","","","Constructs a new <code>Pwm</code> using the specified settings.","Constructs a new <code>Pwm</code> using the specified settings.","","","Bit orders.","The specified bit order is not supported.","The specified number of bits per word is not supported.","SPI buses.","The specified clock speed is not supported.","Contains the error value","Errors that can occur when accessing the SPI peripheral.","I/O error.","","SPI modes indicating the clock polarity and phase.","","","","","The specified mode is not supported.","","Contains the success value","Slave Select polarities.","The specified Slave Select polarity is not supported.","Result type returned from methods that can have <code>spi::Error</code>…","Part of a multi-segment transfer.","Slave Select pins.","Provides access to the Raspberry Pi’s SPI peripherals.","","","","","","","","","","","","","","","","","","","","","","","","Gets the bit order.","Gets the number of bits per word.","Gets the number of bits per word for this segment.","","","","","","","","","","","","","","","","","Gets the clock frequency in hertz (Hz).","Gets the custom clock speed in hertz (Hz) for this segment.","","","","","","","","","","","","","Gets the delay in microseconds (µs) for this segment.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if this segment won’t transfer any bytes.","Returns the number of bytes that will be transferred.","Gets the SPI mode.","Constructs a new <code>Spi</code>.","Constructs a new <code>Segment</code> with the default settings, and …","Receives incoming data from the slave device and writes it …","Reverses the bits of each byte in <code>buffer</code>.","Sets the order in which bits are shifted out and in.","Sets the number of bits per word.","Sets the number of bits per word for this segment.","Sets the clock frequency in hertz (Hz).","Sets a custom clock speed in hertz (Hz) for this segment.","Sets a delay in microseconds (µs) for this segment.","Sets the SPI mode.","Changes Slave Select’s behavior for this segment.","Sets Slave Select polarity.","Gets the state of Slave Select change for this segment.","Gets the Slave Select polarity.","","","","","","","","","","","","","Sends and receives data at the same time.","Transfers multiple half-duplex or full-duplex segments.","","","","","","","","","","","","","","","","","","","","","","","","","Constructs a new <code>Segment</code> with the default settings, and …","Constructs a new <code>Segment</code> with the specified settings.","Constructs a new <code>Segment</code> with the default settings, and …","Sends the outgoing data contained in <code>buffer</code> to the slave …","","","","","","Retrieves Raspberry Pi device information.","Contains the error value","Errors that can occur when trying to identify the …","Identifiable Raspberry Pi models.","Contains the success value","","","","","","","","","","","","","","","","","","","Result type returned from methods that can have …","Identifiable Raspberry Pi SoCs.","Unknown model.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the Raspberry Pi’s model.","Constructs a new <code>DeviceInfo</code>.","Returns the Raspberry Pi’s SoC.","","","","","","","","","","","","","","","","","","","Both queues.","Contains the error value","Errors that can occur when accessing the UART peripheral.","Even parity.","GPIO error.","Input queue.","Invalid or unsupported value.","I/O error.","Sets parity bit to <code>1</code>.","Marks bytes with parity errors with a preceding <code>255</code> and <code>0</code> …","No parity bit.","Ignores parity errors.","Odd parity.","Contains the success value","Output queue.","Parity bit modes.","Parity check modes.","Queue types.","Replaces bytes with parity errors with a <code>0</code> byte.","Result type returned from methods that can have <code>uart::Error</code>…","Sets parity bit to <code>0</code>.","Control signal status.","Removes bytes with parity errors from the input queue.","Provides access to the Raspberry Pi’s UART peripherals …","Returns the line speed in baud (Bd).","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if CTS is active.","Returns the number of data bits.","Returns <code>true</code> if DCD is active.","Blocks until all data in the output queue has been …","Returns <code>true</code> if DSR is active.","Returns <code>true</code> if DTR is active.","","","","Discards all data in the input and/or output queue.","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns <code>true</code> if RTS/CTS hardware flow control is enabled.","Returns the number of bytes waiting in the input queue.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if <code>read</code> is configured to block when needed.","Returns <code>true</code> if <code>write</code> is configured to block when needed.","Constructs a new <code>Uart</code>.","Returns the number of bytes waiting in the output queue.","Returns the parity bit mode.","Returns the parity check mode for incoming data.","Receives incoming data from the external device and stores …","Returns <code>true</code> if RI is active.","Returns <code>true</code> if RTS is active.","Requests the external device to resume its transmission …","Requests the external device to pause its transmission …","Sets the line speed in baud (Bd).","Sets the number of data bits.","Sets DTR to active (<code>true</code>) or inactive (<code>false</code>).","Enables or disables RTS/CTS hardware flow control.","Sets the parity bit mode.","Configures parity checking for incoming data.","Sets the blocking mode for subsequent calls to <code>read</code>.","Sets RTS to active (<code>true</code>) or inactive (<code>false</code>).","Enables or disables XON/XOFF software flow control.","Sets the number of stop bits.","Sets the blocking mode for subsequent calls to <code>write</code>.","Returns <code>true</code> if XON/XOFF software flow control is enabled.","Returns the status of the control signals.","Returns the number of stop bits.","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs a new <code>Uart</code> connected to the serial character …","Sends the contents of <code>buffer</code> to the external device."],"i":[0,0,0,0,0,0,6,6,6,6,6,6,9,9,3,0,9,0,7,6,0,15,0,0,7,0,8,3,6,0,15,0,15,8,8,0,0,9,15,0,15,11,1,4,5,15,6,7,8,9,10,11,1,4,5,15,6,7,8,9,10,1,1,4,5,6,7,8,9,10,6,7,8,9,10,11,1,4,5,11,11,11,1,1,1,4,4,4,5,5,5,6,7,8,9,11,1,4,5,15,15,6,6,7,7,8,8,9,9,10,11,1,4,5,15,15,15,6,7,7,8,9,10,10,11,1,4,5,15,6,7,8,9,10,11,11,11,11,11,11,11,1,5,1,5,4,4,11,5,10,7,11,1,4,5,1,10,11,1,5,1,4,5,1,4,5,1,4,5,5,5,4,5,4,5,1,4,5,6,7,8,9,10,15,6,7,8,9,4,5,11,1,4,5,15,6,7,8,9,10,11,1,4,5,15,6,7,8,9,10,11,1,4,5,15,6,7,8,9,10,4,5,0,30,0,32,0,32,32,30,0,32,28,29,29,28,32,29,28,32,29,29,29,29,28,28,28,28,32,32,29,28,32,32,32,29,28,28,28,32,29,29,29,29,29,29,29,28,28,29,28,29,28,28,28,29,29,28,29,28,29,28,29,29,28,29,28,29,28,29,28,29,29,28,32,28,32,29,28,32,29,28,32,29,29,29,29,0,38,0,36,39,36,38,0,0,35,35,0,39,35,36,37,39,35,36,37,35,36,35,36,37,37,37,37,35,36,39,39,35,35,36,36,37,37,39,39,35,36,37,39,35,36,37,37,37,37,37,37,37,37,37,37,37,37,37,35,36,39,35,36,39,35,36,37,39,35,36,37,39,35,36,37,37,37,46,46,0,48,48,0,48,42,0,48,41,0,47,47,47,47,48,41,42,0,48,0,0,0,0,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,40,40,43,40,43,48,44,45,46,47,41,40,43,48,44,45,46,47,41,40,43,43,44,45,46,47,41,43,44,45,46,47,41,43,43,44,45,46,47,41,40,43,48,48,44,44,45,45,46,46,47,47,41,41,40,43,48,48,44,45,46,47,41,40,43,48,44,45,46,47,41,43,43,40,40,43,40,0,40,40,43,40,43,43,40,43,40,43,40,43,44,45,46,47,41,48,44,45,46,47,41,40,40,40,43,48,44,45,46,47,41,40,43,48,44,45,46,47,41,40,43,48,44,45,46,47,41,43,43,43,40,50,50,50,50,50,0,52,0,0,52,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,0,16,16,49,50,51,16,49,50,51,49,50,51,49,50,51,49,50,51,16,16,49,49,50,50,51,16,49,50,51,16,49,50,51,51,51,51,49,50,51,16,49,50,16,49,50,51,16,49,50,51,16,49,50,51,56,58,0,54,59,56,59,59,54,55,54,55,54,58,56,0,0,0,55,0,54,0,55,0,53,57,59,54,55,56,53,57,59,54,55,56,53,54,55,56,54,55,56,57,53,57,53,57,57,54,55,56,53,57,59,59,54,54,55,55,56,56,53,57,59,59,59,59,54,55,56,53,53,53,57,59,54,55,56,53,53,53,53,53,53,53,53,57,57,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,54,55,56,59,54,55,56,57,59,54,55,56,53,57,59,54,55,56,53,57,59,54,55,56,53,53,53],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,[[3,[2]]]],[1,[[3,[2]]]],[4,[[3,[2]]]],[5,[[3,[2]]]],[6,6],[7,7],[8,8],[9,9],[10,10],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[11,2],[1,2],[4,2],[5,2],[[11,11],12],[[11,11],12],[[11,11],12],[[1,1],12],[[1,1],12],[[1,1],12],[[4,4],12],[[4,4],12],[[4,4],12],[[5,5],12],[[5,5],12],[[5,5],12],[[6,6],12],[[7,7],12],[[8,8],12],[[9,9],12],[[11,13],14],[[1,13],14],[[4,13],14],[[5,13],14],[[15,13],14],[[15,13],14],[[6,13],14],[[6,13],14],[[7,13],14],[[7,13],14],[[8,13],14],[[8,13],14],[[9,13],14],[[9,13],14],[[10,13],14],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[16,15],[-1,-1,[]],[17,15],[-1,-1,[]],[-1,-1,[]],[18,7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[10,18],[[3,[11]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[11,1],[11,1],[11,1],[[11,6],5],[11,4],[11,4],[11,4],[1,12],[5,12],[1,12],[5,12],[4,12],[4,12],[11,6],[5,6],[[],[[3,[10]]]],[7,7],[11,18],[1,18],[4,18],[5,18],[[1,12,[20,[19]]],[[3,[[20,[7]]]]]],[[10,[21,[1]],12,[20,[19]]],[[3,[[20,[[2,[1,7]]]]]]]],[11,7],[1,7],[5,7],[1,12],[4,12],[5,12],[[1,9,-1],[[3,[2]]],[[22,[7]],23]],[4,2],[5,2],[[1,9],[[3,[2]]]],[4,2],[5,2],[[5,6],2],[[5,8],2],[[4,19,19],[[3,[2]]]],[[5,19,19],[[3,[2]]]],[[4,24,24],[[3,[2]]]],[[5,24,24],[[3,[2]]]],[[1,12],2],[[4,12],2],[[5,12],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[4,2],[5,2],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[[4,7],2],[[5,7],2],0,0,0,0,0,0,0,0,0,0,[28,12],[[29,18,[21,[18]]],[[30,[2]]]],[[29,18,[21,[18]]],[[30,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[29,18],[29,28],[29,[[30,[31]]]],[28,28],[[-1,-2],2,[],[]],[[28,28],12],[[28,13],14],[[32,13],14],[[32,13],14],[[29,13],14],[-1,-1,[]],[17,32],[16,32],[-1,-1,[]],[-1,-1,[]],[28,12],[28,12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[30,[29]]]],[[29,[21,[18]]],[[30,[33]]]],[[29,12],[[30,[2]]]],[[29,34],[[30,[2]]]],[[29,12],[[30,[2]]]],[[29,31],[[30,[2]]]],[28,12],[28,12],[[29,18,[21,[18]]],[[30,[33]]]],[28,12],[[29,18,[21,[18]]],[[30,[2]]]],[28,12],[28,12],[28,12],[[29,18,34],[[30,[34]]]],[[29,18,34],[[30,[34]]]],[28,12],[[29,12],[[30,[2]]]],[28,12],[[29,18],[[30,[18]]]],[28,12],[[29,18],[[30,[34]]]],[[29,18],[[30,[34]]]],[28,12],[29,[[30,[18]]]],[28,12],[[29,18],[[30,[2]]]],[28,12],[[29,18,18],[[30,[2]]]],[28,12],[[29,18,34],[[30,[2]]]],[[29,18,34],[[30,[2]]]],[-1,-2,[],[]],[-1,25,[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[18,[[30,[29]]]],[[29,[21,[18]]],[[30,[33]]]],[[29,[21,[18]],[21,[18]]],[[30,[2]]]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[35,35],[36,36],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[37,[[38,[2]]]],[37,2],[37,[[38,[24]]]],[37,[[38,[2]]]],[[35,35],12],[[36,36],12],[[39,13],14],[[39,13],14],[[35,13],14],[[35,13],14],[[36,13],14],[[36,13],14],[[37,13],14],[37,[[38,[24]]]],[17,39],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[37,[[38,[12]]]],[35,[[38,[37]]]],[37,[[38,[19]]]],[37,[[38,[36]]]],[37,[[38,[19]]]],[37,12],[[37,24],[[38,[2]]]],[[37,24,24],[[38,[2]]]],[[37,19],[[38,[2]]]],[[37,36],[[38,[2]]]],[[37,19],[[38,[2]]]],[[37,12],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[[35,24,24,36,12],[[38,[37]]]],[[35,19,19,36,12],[[38,[37]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[40,[[42,[41]]]],[40,[[42,[18]]]],[43,18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[40,[[42,[31]]]],[43,31],[43,43],[44,44],[45,45],[46,46],[47,47],[41,41],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[43,34],[[43,43],12],[[44,44],12],[[45,45],12],[[46,46],12],[[47,47],12],[[41,41],12],[[40,13],14],[[43,13],14],[[48,13],14],[[48,13],14],[[44,13],14],[[44,13],14],[[45,13],14],[[45,13],14],[[46,13],14],[[46,13],14],[[47,13],14],[[47,13],14],[[41,13],14],[[41,13],14],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[17,48],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[43,12],[43,33],[40,[[42,[47]]]],[[44,45,31,47],[[42,[40]]]],[[[21,[18]],[21,[18]]],43],[[40,[21,[18]]],[[42,[33]]]],[[[21,[18]]],2],[[40,41],[[42,[2]]]],[[40,18],[[42,[2]]]],[[43,18],2],[[40,31],[[42,[2]]]],[[43,31],2],[[43,34],2],[[40,47],[[42,[2]]]],[[43,12],2],[[40,46],[[42,[2]]]],[43,12],[40,[[42,[46]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[[40,[21,[18]],[21,[18]]],[[42,[33]]]],[[40,[21,[43]]],[[42,[2]]]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[[[21,[18]]],43],[[[20,[[21,[18]]]],[20,[[21,[18]]]],31,34,18,12],43],[[[21,[18]]],43],[[40,[21,[18]]],[[42,[33]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[49,49],[50,50],[51,51],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[49,49],12],[[50,50],12],[[51,51],12],[[16,13],14],[[16,13],14],[[49,13],14],[[49,13],14],[[50,13],14],[[50,13],14],[[51,13],14],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[51,49],[[],[[52,[51]]]],[51,50],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[53,31],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[54,54],[55,55],[56,56],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[57,12],[53,18],[57,12],[53,[[58,[2]]]],[57,12],[57,12],[[54,54],12],[[55,55],12],[[56,56],12],[[53,56],[[58,[2]]]],[[57,13],14],[[59,13],14],[[59,13],14],[[54,13],14],[[54,13],14],[[55,13],14],[[55,13],14],[[56,13],14],[[56,13],14],[[53,13],14],[-1,-1,[]],[15,59],[17,59],[16,59],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[53,12],[53,[[58,[33]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[53,12],[53,12],[[31,54,18,18],[[58,[53]]]],[53,[[58,[33]]]],[53,54],[53,55],[[53,[21,[18]]],[[58,[33]]]],[57,12],[57,12],[53,[[58,[2]]]],[53,[[58,[2]]]],[[53,31],[[58,[2]]]],[[53,18],[[58,[2]]]],[[53,12],[[58,[2]]]],[[53,12],[[58,[2]]]],[[53,54],[[58,[2]]]],[[53,55],[[58,[2]]]],[[53,18,19],[[58,[2]]]],[[53,12],[[58,[2]]]],[[53,12],[[58,[2]]]],[[53,18],[[58,[2]]]],[[53,12],[[58,[2]]]],[53,12],[53,[[58,[57]]]],[53,18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[[-1,31,54,18,18],[[58,[53]]],[[61,[60]]]],[[53,[21,[18]]],[[58,[33]]]]],"c":[],"p":[[5,"InputPin",6],[1,"tuple"],[8,"Result",6],[5,"OutputPin",6],[5,"IoPin",6],[6,"Mode",6],[6,"Level",6],[6,"PullUpDown",6],[6,"Trigger",6],[5,"Gpio",6],[5,"Pin",6],[1,"bool"],[5,"Formatter",780],[8,"Result",780],[6,"Error",6],[6,"Error",564],[5,"Error",781],[1,"u8"],[5,"Duration",782],[6,"Option",783],[1,"slice"],[10,"FnMut",784],[10,"Send",785],[1,"f64"],[5,"String",786],[6,"Result",787],[5,"TypeId",788],[5,"Capabilities",222],[5,"I2c",222],[8,"Result",222],[1,"u32"],[6,"Error",222],[1,"usize"],[1,"u16"],[6,"Channel",307],[6,"Polarity",307],[5,"Pwm",307],[8,"Result",307],[6,"Error",307],[5,"Spi",385],[6,"BitOrder",385],[8,"Result",385],[5,"Segment",385],[6,"Bus",385],[6,"SlaveSelect",385],[6,"Polarity",385],[6,"Mode",385],[6,"Error",385],[6,"Model",564],[6,"SoC",564],[5,"DeviceInfo",564],[8,"Result",564],[5,"Uart",648],[6,"Parity",648],[6,"ParityCheck",648],[6,"Queue",648],[5,"Status",648],[8,"Result",648],[6,"Error",648],[5,"Path",789],[10,"AsRef",790]],"b":[[79,"impl-PartialEq%3C%26Pin%3E-for-Pin"],[80,"impl-PartialEq-for-Pin"],[81,"impl-PartialEq%3CPin%3E-for-%26Pin"],[82,"impl-PartialEq%3CInputPin%3E-for-%26InputPin"],[83,"impl-PartialEq-for-InputPin"],[84,"impl-PartialEq%3C%26InputPin%3E-for-InputPin"],[85,"impl-PartialEq%3C%26OutputPin%3E-for-OutputPin"],[86,"impl-PartialEq-for-OutputPin"],[87,"impl-PartialEq%3COutputPin%3E-for-%26OutputPin"],[88,"impl-PartialEq%3CIoPin%3E-for-%26IoPin"],[89,"impl-PartialEq%3C%26IoPin%3E-for-IoPin"],[90,"impl-PartialEq-for-IoPin"],[99,"impl-Display-for-Error"],[100,"impl-Debug-for-Error"],[101,"impl-Display-for-Mode"],[102,"impl-Debug-for-Mode"],[103,"impl-Debug-for-Level"],[104,"impl-Display-for-Level"],[105,"impl-Display-for-PullUpDown"],[106,"impl-Debug-for-PullUpDown"],[107,"impl-Debug-for-Trigger"],[108,"impl-Display-for-Trigger"],[114,"impl-From%3CError%3E-for-Error"],[116,"impl-From%3CError%3E-for-Error"],[248,"impl-Debug-for-Error"],[249,"impl-Display-for-Error"],[252,"impl-From%3CError%3E-for-Error"],[253,"impl-From%3CError%3E-for-Error"],[337,"impl-Debug-for-Error"],[338,"impl-Display-for-Error"],[339,"impl-Debug-for-Channel"],[340,"impl-Display-for-Channel"],[341,"impl-Debug-for-Polarity"],[342,"impl-Display-for-Polarity"],[475,"impl-Debug-for-Error"],[476,"impl-Display-for-Error"],[477,"impl-Debug-for-Bus"],[478,"impl-Display-for-Bus"],[479,"impl-Display-for-SlaveSelect"],[480,"impl-Debug-for-SlaveSelect"],[481,"impl-Debug-for-Polarity"],[482,"impl-Display-for-Polarity"],[483,"impl-Display-for-Mode"],[484,"impl-Debug-for-Mode"],[485,"impl-Debug-for-BitOrder"],[486,"impl-Display-for-BitOrder"],[612,"impl-Display-for-Error"],[613,"impl-Debug-for-Error"],[614,"impl-Debug-for-Model"],[615,"impl-Display-for-Model"],[616,"impl-Debug-for-SoC"],[617,"impl-Display-for-SoC"],[702,"impl-Display-for-Error"],[703,"impl-Debug-for-Error"],[704,"impl-Debug-for-Parity"],[705,"impl-Display-for-Parity"],[706,"impl-Display-for-ParityCheck"],[707,"impl-Debug-for-ParityCheck"],[708,"impl-Debug-for-Queue"],[709,"impl-Display-for-Queue"],[712,"impl-From%3CError%3E-for-Error"],[713,"impl-From%3CError%3E-for-Error"],[714,"impl-From%3CError%3E-for-Error"]]}],\
["serde",{"doc":"Serde","t":"KKRRRKRRRRRRRKNNNCMMMMMMMMMNMMMMMMMMMMMMMMMNMMMMMMQNNCMMMMMMNMMMMMMMMMMMMMMMMNMMMMMMMPPPKKKKRPKKRRRRRKPFKPKPPPPPKPEPPPGPPPRRRKKNNNNNNNNMNMMNMMMMMMMMNMMMMMMMMMMMMMMMNMMMMMMNNNMNMNNNNNNNNNMNNNNNNMNMNNNMNMNNMNNNNNNNMNNMNNCNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFFFFFFFFFFFFFFFFFFFFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKRRRRRRRRFRRRRRRRRKKRKRKRKRKRKRKRKENNNNNMMMMMMMMNNNNNNNNNNMMMMMMNNNMMMMMMNNNNNMMMMMNMMMMMMMMMMMMNMMMMMMMMNNNNNN","n":["Deserialize","Deserializer","Error","Error","Ok","Serialize","SerializeMap","SerializeSeq","SerializeStruct","SerializeStructVariant","SerializeTuple","SerializeTupleStruct","SerializeTupleVariant","Serializer","collect_map","collect_seq","collect_str","de","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","forward_to_deserialize_any","is_human_readable","is_human_readable","ser","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","Bool","Bytes","Char","Deserialize","DeserializeOwned","DeserializeSeed","Deserializer","Deserializer","Enum","EnumAccess","Error","Error","Error","Error","Error","Error","Expected","Float","IgnoredAny","IntoDeserializer","Map","MapAccess","NewtypeStruct","NewtypeVariant","Option","Other","Seq","SeqAccess","Signed","StdError","Str","StructVariant","TupleVariant","Unexpected","Unit","UnitVariant","Unsigned","Value","Value","Variant","VariantAccess","Visitor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","custom","default","deserialize","deserialize","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","duplicate_field","eq","eq","expecting","expecting","fmt","fmt","fmt","fmt","fmt","fmt","from","from","into","into","into_deserializer","invalid_length","invalid_type","invalid_value","is_human_readable","missing_field","newtype_variant","newtype_variant_seed","next_element","next_element_seed","next_entry","next_entry_seed","next_key","next_key_seed","next_value","next_value_seed","size_hint","size_hint","struct_variant","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","tuple_variant","type_id","type_id","unit_variant","unknown_field","unknown_variant","value","variant","variant_seed","visit_bool","visit_bool","visit_borrowed_bytes","visit_borrowed_str","visit_byte_buf","visit_bytes","visit_bytes","visit_char","visit_enum","visit_enum","visit_f32","visit_f64","visit_f64","visit_i128","visit_i128","visit_i16","visit_i32","visit_i64","visit_i64","visit_i8","visit_map","visit_map","visit_newtype_struct","visit_newtype_struct","visit_none","visit_none","visit_seq","visit_seq","visit_some","visit_some","visit_str","visit_str","visit_string","visit_u128","visit_u128","visit_u16","visit_u32","visit_u64","visit_u64","visit_u8","visit_unit","visit_unit","BoolDeserializer","BorrowedBytesDeserializer","BorrowedStrDeserializer","BytesDeserializer","CharDeserializer","CowStrDeserializer","EnumAccessDeserializer","Error","F32Deserializer","F64Deserializer","I128Deserializer","I16Deserializer","I32Deserializer","I64Deserializer","I8Deserializer","IsizeDeserializer","MapAccessDeserializer","MapDeserializer","SeqAccessDeserializer","SeqDeserializer","StrDeserializer","StringDeserializer","U128Deserializer","U16Deserializer","U32Deserializer","U64Deserializer","U8Deserializer","UnitDeserializer","UsizeDeserializer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","custom","custom","description","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","end","end","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next_element_seed","next_element_seed","next_entry_seed","next_key_seed","next_value_seed","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","Error","Error","Error","Error","Error","Error","Error","Error","Error","Impossible","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Serialize","SerializeMap","SerializeMap","SerializeSeq","SerializeSeq","SerializeStruct","SerializeStruct","SerializeStructVariant","SerializeStructVariant","SerializeTuple","SerializeTuple","SerializeTupleStruct","SerializeTupleStruct","SerializeTupleVariant","SerializeTupleVariant","Serializer","StdError","borrow","borrow_mut","collect_map","collect_seq","collect_str","custom","end","end","end","end","end","end","end","end","end","end","end","end","end","end","from","into","is_human_readable","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_element","serialize_element","serialize_entry","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","serialize_value","skip_field","skip_field","try_from","try_into","type_id"],"q":[[0,"serde"],[85,"serde::de"],[263,"serde::de::value"],[1529,"serde::ser"],[1640,"core::result"],[1641,"core::iter::traits::collect"],[1642,"core::fmt"],[1643,"core::marker"],[1644,"core::option"],[1645,"core::fmt"],[1646,"core::any"],[1647,"alloc::vec"],[1648,"core::iter::traits::iterator"],[1649,"core::clone"],[1650,"core::fmt"]],"d":["A <strong>data structure</strong> that can be deserialized from any data …","A <strong>data format</strong> that can deserialize any data structure …","The error type that can be returned if some error occurs …","The error type when some error occurs during serialization.","The output type produced by this <code>Serializer</code> during …","A <strong>data structure</strong> that can be serialized into any data …","Type returned from <code>serialize_map</code> for serializing the …","Type returned from <code>serialize_seq</code> for serializing the …","Type returned from <code>serialize_struct</code> for serializing the …","Type returned from <code>serialize_struct_variant</code> for …","Type returned from <code>serialize_tuple</code> for serializing the …","Type returned from <code>serialize_tuple_struct</code> for serializing …","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Generic data structure deserialization framework.","Deserialize this value from the given Serde deserializer.","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Helper macro when implementing the <code>Deserializer</code> part of a …","Determine whether <code>Deserialize</code> implementations should …","Determine whether <code>Serialize</code> implementations should …","Generic data structure serialization framework.","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","The input contained a boolean value that was not expected.","The input contained a <code>&amp;[u8]</code> or <code>Vec&lt;u8&gt;</code> that was not …","The input contained a <code>char</code> that was not expected.","A <strong>data structure</strong> that can be deserialized from any data …","A data structure that can be deserialized without …","<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …","A <strong>data format</strong> that can deserialize any data structure …","The type of the deserializer being converted into.","The input contained an enum that was not expected.","Provides a <code>Visitor</code> access to the data of an enum in the …","The <code>Error</code> trait allows <code>Deserialize</code> implementations to …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …","The input contained a floating point <code>f32</code> or <code>f64</code> that was …","An efficient way of discarding data from a deserializer.","Converts an existing value into a <code>Deserializer</code> from which …","The input contained a map that was not expected.","Provides a <code>Visitor</code> access to each entry of a map in the …","The input contained a newtype struct that was not expected.","The input contained a newtype variant that was not …","The input contained an <code>Option&lt;T&gt;</code> that was not expected.","A message stating what uncategorized thing the input …","The input contained a sequence that was not expected.","Provides a <code>Visitor</code> access to each element of a sequence in …","The input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> …","","The input contained a <code>&amp;str</code> or <code>String</code> that was not expected.","The input contained a struct variant that was not expected.","The input contained a tuple variant that was not expected.","<code>Unexpected</code> represents an unexpected invocation of any one …","The input contained a unit <code>()</code> that was not expected.","The input contained a unit variant that was not expected.","The input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or <code>u64</code>…","The type produced by using this seed.","The value produced by this visitor.","The <code>Visitor</code> that will be used to deserialize the content …","<code>VariantAccess</code> is a visitor that is created by the …","This trait represents a visitor that walks through a …","","","","","","","","","Raised when there is general error when deserializing a …","","Deserialize this value from the given Serde deserializer.","Equivalent to the more common <code>Deserialize::deserialize</code> …","","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Raised when a <code>Deserialize</code> struct type received more than …","","","Format a message stating what data this Visitor expects to …","","Format an explanation of what data was being expected. …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this value into a deserializer.","Raised when deserializing a sequence or map and the input …","Raised when a <code>Deserialize</code> receives a type different from …","Raised when a <code>Deserialize</code> receives a value of the right …","Determine whether <code>Deserialize</code> implementations should …","Raised when a <code>Deserialize</code> struct type expected to receive …","Called when deserializing a variant with a single value.","Called when deserializing a variant with a single value.","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns a <code>Ok(value)</code> for the next value in the map.","This returns a <code>Ok(value)</code> for the next value in the map.","Returns the number of elements remaining in the sequence, …","Returns the number of entries remaining in the map, if …","Called when deserializing a struct-like variant.","","","","","","","","Called when deserializing a tuple-like variant.","","","Called when deserializing a variant with no values.","Raised when a <code>Deserialize</code> struct type received a field …","Raised when a <code>Deserialize</code> enum type received a variant …","Building blocks for deserializing basic values using the …","<code>variant</code> is called to identify which variant to deserialize.","<code>variant</code> is called to identify which variant to deserialize.","The input contains a boolean.","","The input contains a byte array that lives at least as …","The input contains a string that lives at least as long as …","The input contains a byte array and ownership of the byte …","The input contains a byte array. The lifetime of the byte …","","The input contains a <code>char</code>.","The input contains an enum.","","The input contains an <code>f32</code>.","The input contains an <code>f64</code>.","","The input contains a <code>i128</code>.","","The input contains an <code>i16</code>.","The input contains an <code>i32</code>.","The input contains an <code>i64</code>.","","The input contains an <code>i8</code>.","The input contains a key-value map.","","The input contains a newtype struct.","","The input contains an optional that is absent.","","The input contains a sequence of elements.","","The input contains an optional that is present.","","The input contains a string. The lifetime of the string is …","","The input contains a string and ownership of the string is …","The input contains a <code>u128</code>.","","The input contains a <code>u16</code>.","The input contains a <code>u32</code>.","The input contains a <code>u64</code>.","","The input contains a <code>u8</code>.","The input contains a unit <code>()</code>.","","A deserializer holding a <code>bool</code>.","A deserializer holding a <code>&amp;[u8]</code> with a lifetime tied to …","A deserializer holding a <code>&amp;str</code> with a lifetime tied to …","A deserializer holding a <code>&amp;[u8]</code>. Always calls …","A deserializer holding a <code>char</code>.","A deserializer holding a <code>Cow&lt;str&gt;</code>.","A deserializer holding an <code>EnumAccess</code>.","A minimal representation of all possible errors that can …","A deserializer holding an <code>f32</code>.","A deserializer holding an <code>f64</code>.","A deserializer holding an <code>i128</code>.","A deserializer holding an <code>i16</code>.","A deserializer holding an <code>i32</code>.","A deserializer holding an <code>i64</code>.","A deserializer holding an <code>i8</code>.","A deserializer holding an <code>isize</code>.","A deserializer holding a <code>MapAccess</code>.","A deserializer that iterates over a map.","A deserializer holding a <code>SeqAccess</code>.","A deserializer that iterates over a sequence.","A deserializer holding a <code>&amp;str</code>.","A deserializer holding a <code>String</code>.","A deserializer holding a <code>u128</code>.","A deserializer holding a <code>u16</code>.","A deserializer holding a <code>u32</code>.","A deserializer holding a <code>u64</code>.","A deserializer holding a <code>u8</code>.","A deserializer holding a <code>()</code>.","A deserializer holding a <code>usize</codeheck for remaining elements after passing a …","Check for remaining elements after passing a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create a new borrowed deserializer from the given string.","","","Create a new deserializer from the given bytes.","Create a new borrowed deserializer from the given borrowed …","Construct a new <code>MapDeserializer&lt;I, E&gt;</code>.","","","","","","","","","","","","","","","","Construct a new <code>SeqDeserializer&lt;I, E&gt;</code>.","Construct a new <code>SeqAccessDeserializer&lt;A&gt;</code>.","Construct a new <code>MapAccessDeserializer&lt;A&gt;</code>.","Construct a new <code>EnumAccessDeserializer&lt;A&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait used by <code>Serialize</code> implementations to generically …","The error type when some error occurs during serialization.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Helper type for implementing a <code>Serializer</code> that does not …","The output type produced by this <code>Serializer</code> during …","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","A <strong>data structure</strong> that can be serialized into any data …","Returned from <code>Serializer::serialize_map</code>.","Type returned from <code>serialize_map</code> for serializing the …","Returned from <code>Serializer::serialize_seq</code>.","Type returned from <code>serialize_seq</code> for serializing the …","Returned from <code>Serializer::serialize_struct</code>.","Type returned from <code>serialize_struct</code> for serializing the …","Returned from <code>Serializer::serialize_struct_variant</code>.","Type returned from <code>serialize_struct_variant</code> for …","Returned from <code>Serializer::serialize_tuple</code>.","Type returned from <code>serialize_tuple</code> for serializing the …","Returned from <code>Serializer::serialize_tuple_struct</code>.","Type returned from <code>serialize_tuple_struct</code> for serializing …","Returned from <code>Serializer::serialize_tuple_variant</code>.","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","","","","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Used when a <code>Serialize</code> implementation encounters any error …","Finish serializing a sequence.","Finish serializing a tuple.","Finish serializing a tuple struct.","Finish serializing a tuple variant.","Finish serializing a map.","Finish serializing a struct.","Finish serializing a struct variant.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Determine whether <code>Serialize</code> implementations should …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize a sequence element.","Serialize a tuple element.","","","Serialize a map entry consisting of a key and a value.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize a tuple struct field.","Serialize a tuple variant field.","Serialize a struct field.","Serialize a struct variant field.","","","","","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Serialize a map key.","","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","Serialize a map value.","","Indicate that a struct field has been skipped.","Indicate that a struct variant field has been skipped.","","",""],"i":[0,0,27,10,10,0,10,10,10,10,10,10,10,0,10,10,10,0,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,27,10,0,20,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,49,49,49,0,0,0,0,57,49,0,0,27,59,60,64,58,0,49,0,0,49,0,49,49,49,49,49,0,49,0,49,49,49,0,49,49,49,51,29,64,0,0,48,49,48,49,48,49,48,49,28,48,26,51,48,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,48,49,29,48,54,54,48,48,49,49,48,49,48,49,57,28,28,28,27,28,58,58,59,59,60,60,60,60,60,60,59,60,58,48,49,49,48,49,48,49,58,48,49,58,28,28,0,64,64,29,48,29,29,29,29,48,29,29,48,29,29,48,29,48,29,29,29,48,29,29,48,29,48,29,48,29,48,29,48,29,48,29,29,48,29,29,29,48,29,29,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,77,77,77,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,74,93,77,66,67,68,69,70,71,72,73,74,77,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,74,93,74,74,74,74,74,93,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,77,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,66,67,68,69,70,71,72,73,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,67,68,69,70,71,95,0,10,13,14,15,16,17,18,19,0,10,13,14,15,16,17,18,19,0,0,10,0,10,0,10,0,10,0,10,0,10,0,10,0,0,100,100,10,10,10,12,13,14,15,16,17,18,19,100,100,100,100,100,100,100,100,100,10,20,10,10,10,13,14,100,100,17,10,10,15,16,18,19,100,100,100,100,10,10,10,10,10,17,100,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,17,100,18,19,100,100,100],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],-12],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]],20,20,[[23,[],[[21,[[22,[-10,-11]]]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],-10],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]],23],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],-10],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]],[24,25]],0,[-1,[[11,[26]]],27],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],30,[31,[30]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],30,-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],30,[31,[30]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],32,-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],30,32,-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],30,-2],[[11,[-1]]],28,29],0,[[[27,[],[[2,[-1]]]]],33,28],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]]],33,[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],0,[[20,-1],11,10],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],33],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],[31,[34]]],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],35],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],36],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],37],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],38],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],39],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],40],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],41],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],42],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],[43,[32]]],[[11,[-7,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,-10],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]],[20,25]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,44,30,-10],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]],[20,25]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]]],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],[43,[32]]],[[11,[-3,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],-10],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]],[20,25]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,32],[[11,[-8,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,44,30,32],[[11,[-9,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],32],[[11,[-4,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,32],[[11,[-5,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,44,30,32],[[11,[-6,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],45],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],46],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],44],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],47],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],34],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]]],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,44,30],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[48,48],[49,49],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[-1,28,24],[[],48],[-1,[[11,[26]]],27],[[[51,[],[[50,[-1]]]],-2],[[11,[-1]]],[],27],[-1,[[11,[48]]],27],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],30,[31,[30]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],30,-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],30,[31,[30]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],32,-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],30,32,-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],-2],[[11,[-1]]],28,29],[[[27,[],[[2,[-1]]]],30,-2],[[11,[-1]]],28,29],[30,28],[[48,48],33],[[49,49],33],[[[29,[],[[50,[-1]]]],52],53,[]],[[48,52],53],[[54,52],53],[[54,52],53],[[48,52],53],[[-1,52],[[11,[22,55]]],[]],[[49,52],53],[[49,52],53],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[57,[],[[56,[-1]]]]],-1,[[27,[],[[2,[-2]]]]],28],[[32,54],28],[[49,54],28],[[49,54],28],[[[27,[],[[2,[-1]]]]],33,28],[30,28],[[[58,[],[[2,[-1]]]]],[[11,[-2,-1]]],28,26],[[[58,[],[[2,[-1]]]],-2],[[11,[-1]]],28,51],[[[59,[],[[2,[-1]]]]],[[11,[[43,[-2]],-1]]],28,26],[[[59,[],[[2,[-1]]]],-2],[[11,[43,-1]]],28,51],[[[60,[],[[2,[-1]]]]],[[11,[[43,[[22,[-2,-3]]]],-1]]],28,26,26],[[[60,[],[[2,[-1]]]],-2,-3],[[11,[[43,[22]],-1]]],28,51,51],[[[60,[],[[2,[-1]]]]],[[11,[[43,[-2]],-1]]],28,26],[[[60,[],[[2,[-1]]]],-2],[[11,[43,-1]]],28,51],[[[60,[],[[2,[-1]]]]],[[11,[-2,-1]]],28,26],[[[60,[],[[2,[-1]]]],-2],[[11,[-1]]],28,51],[[[59,[],[[2,[-1]]]]],[[43,[32]]],28],[[[60,[],[[2,[-1]]]]],[[43,[32]]],28],[[[58,[],[[2,[-1]]]],[31,[30]],-2],[[11,[-1]]],28,29],[-1,-2,[],[]],[-1,-2,[],[]],[-1,61,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[[[58,[],[[2,[-1]]]],32,-2],[[11,[-1]]],28,29],[-1,62,[]],[-1,62,[]],[[[58,[],[[2,[-1]]]]],[[11,[22,-1]]],28],[[30,[31,[30]]],28],[[30,[31,[30]]],28],0,[[[64,[],[[2,[-1]],[63,[-2]]]]],[[11,[[22,[-3,-2]],-1]]],28,[[58,[],[[2,[-1]]]]],26],[[[64,[],[[2,[-1]],[63,[-2]]]],-3],[[11,[[22,[-2]],-1]]],28,[[58,[],[[2,[-1]]]]],51],[[[29,[],[[50,[-1]]]],33],[[11,[-1,-2]]],[],28],[[48,33],[[11,[-1,-2]]],[],[]],[[[29,[],[[50,[-1]]]],[31,[34]]],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]],30],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]],[65,[34]]],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]],[31,[34]]],[[11,[-1,-2]]],[],28],[[48,[31,[34]]],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]],35],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]],-2],[[11,[-1]]],[],64],[[48,-1],[[11,[-2]]],64,[]],[[[29,[],[[50,[-1]]]],36],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]],37],[[11,[-1,-2]]],[],28],[[48,37],[[11,[-1,-2]]],[],[]],[[[29,[],[[50,[-1]]]],38],[[11,[-1,-2]]],[],28],[[48,38],[[11,[-1,-2]]],[],[]],[[[29,[],[[50,[-1]]]],39],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]],40],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]],41],[[11,[-1,-2]]],[],28],[[48,41],[[11,[-1,-2]]],[],[]],[[[29,[],[[50,[-1]]]],42],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]],-2],[[11,[-1]]],[],60],[[48,-1],[[11,[-2]]],60,[]],[[[29,[],[[50,[-1]]]],-2],[[11,[-1]]],[],27],[[48,-1],[[11,[-2]]],27,[]],[[[29,[],[[50,[-1]]]]],[[11,[-1,-2]]],[],28],[48,[[11,[-1,-2]]],[],[]],[[[29,[],[[50,[-1]]]],-2],[[11,[-1]]],[],59],[[48,-1],[[11,[-2]]],59,[]],[[[29,[],[[50,[-1]]]],-2],[[11,[-1]]],[],27],[[48,-1],[[11,[-2]]],27,[]],[[[29,[],[[50,[-1]]]],30],[[11,[-1,-2]]],[],28],[[48,30],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]],61],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]],45],[[11,[-1,-2]]],[],28],[[48,45],[[11,[-1,-2]]],[],[]],[[[29,[],[[50,[-1]]]],46],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]],44],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]],47],[[11,[-1,-2]]],[],28],[[48,47],[[11,[-1,-2]]],[],[]],[[[29,[],[[50,[-1]]]],34],[[11,[-1,-2]]],[],28],[[[29,[],[[50,[-1]]]]],[[11,[-1,-2]]],[],28],[48,[[11,[-1,-2]]],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[66,[-1]]],[[66,[-1]]],[]],[[[67,[-1]]],[[67,[-1]]],[]],[[[68,[-1]]],[[68,[-1]]],[]],[[[69,[-1]]],[[69,[-1]]],[]],[[[70,[-1]]],[[70,[-1]]],[]],[[[71,[-1]]],[[71,[-1]]],[]],[[[72,[-1]]],[[72,[-1]]],[]],[[[73,[-1]]],[[73,[-1]]],[]],[[[74,[-1,-2]]],[[74,[-1,-2]]],[75,76],[]],[77,77],[[[78,[-1]]],[[78,[-1]]],[]],[[[79,[-1]]],[[79,[-1]]],[]],[[[80,[-1]]],[[80,[-1]]],[]],[[[81,[-1]]],[[81,[-1]]],[]],[[[82,[-1]]],[[82,[-1]]],[]],[[[83,[-1]]],[[83,[-1]]],[]],[[[84,[-1]]],[[84,[-1]]],[]],[[[85,[-1]]],[[85,[-1]]],[]],[[[86,[-1]]],[[86,[-1]]],[]],[[[87,[-1]]],[[87,[-1]]],[]],[[[88,[-1]]],[[88,[-1]]],[]],[[[89,[-1]]],[[89,[-1]]],[]],[[[90,[-1]]],[[90,[-1]]],[]],[[[91,[-1]]],[[91,[-1]]],[]],[[[92,[-1]]],[[92,[-1]]],[]],[[[93,[-1,-2]]],[[93,[-1,-2]]],76,76],[[[94,[-1]]],[[94,[-1]]],76],[[[95,[-1]]],[[95,[-1]]],76],[[[96,[-1]]],[[96,[-1]]],76],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[-1,77,24],[-1,77,24],[77,30],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],30,[31,[30]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],30,[31,[30]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],30,[31,[30]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],30,[31,[30]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],30,[31,[30]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],30,-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],30,-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],30,-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],30,-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],30,-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],30,[31,[30]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],30,[31,[30]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],30,[31,[30]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],30,[31,[30]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],30,[31,[30]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],30,[31,[30]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],32,-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],32,-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],32,-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],32,-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],32,-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],32,-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],30,32,-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],30,32,-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],30,32,-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],30,32,-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],30,32,-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],30,32,-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],-2],[[11,[-3]]],64,29,[]],[[[66,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[67,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[68,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[69,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[70,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[71,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[72,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[73,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[74,[-1,-2]],30,-3],[[11,[-4]]],75,28,29,[]],[[[78,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[79,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[80,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[81,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[82,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[83,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[84,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[85,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[86,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[87,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[88,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[89,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[90,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[91,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[92,[-1]],30,-2],[[11,[-3]]],28,29,[]],[[[93,[-3,-1]],30,-4],[[11,[-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],29,[]],[[[94,[-1]],30,-2],[[11,[-3]]],59,29,[]],[[[95,[-1]],30,-2],[[11,[-3]]],60,29,[]],[[[96,[-1]],30,-2],[[11,[-3]]],64,29,[]],[[[74,[-1,-2]]],[[11,[22,-2]]],75,28],[[[93,[-1,-2]]],[[11,[22,-2]]],75,28],[[77,77],33],[[[66,[-1]],52],53,[]],[[[67,[-1]],52],53,[]],[[[68,[-1]],52],53,[]],[[[69,[-1]],52],53,[]],[[[70,[-1]],52],53,[]],[[[71,[-1]],52],53,[]],[[[72,[-1]],52],53,[]],[[[73,[-1]],52],53,[]],[[[74,[-1,-2]],52],53,[75,97],[]],[[77,52],53],[[77,52],53],[[[78,[-1]],52],53,[]],[[[79,[-1]],52],53,[]],[[[80,[-1]],52],53,[]],[[[81,[-1]],52],53,[]],[[[82,[-1]],52],53,[]],[[[83,[-1]],52],53,[]],[[[84,[-1]],52],53,[]],[[[85,[-1]],52],53,[]],[[[86,[-1]],52],53,[]],[[[87,[-1]],52],53,[]],[[[88,[-1]],52],53,[]],[[[89,[-1]],52],53,[]],[[[90,[-1]],52],53,[]],[[[91,[-1]],52],53,[]],[[[92,[-1]],52],53,[]],[[[93,[-1,-2]],52],53,97,[]],[[[94,[-1]],52],53,97],[[[95,[-1]],52],53,97],[[[96,[-1]],52],53,97],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[66,[-1]]],[]],[44,[[67,[-1]]],[]],[30,[[68,[-1]]],[]],[30,[[69,[-1]]],[]],[61,[[70,[-1]]],[]],[[[98,[30]]],[[71,[-1]]],[]],[[[31,[34]]],[[72,[-1]]],[]],[[[31,[34]]],[[73,[-1]]],[]],[-1,[[74,[-1,-2]]],75,[]],[33,[[78,[-1]]],[]],[42,[[79,[-1]]],[]],[39,[[80,[-1]]],[]],[40,[[81,[-1]]],[]],[41,[[82,[-1]]],[]],[38,[[83,[-1]]],[]],[99,[[84,[-1]]],[]],[34,[[85,[-1]]],[]],[46,[[86,[-1]]],[]],[47,[[87,[-1]]],[]],[45,[[88,[-1]]],[]],[32,[[89,[-1]]],[]],[36,[[90,[-1]]],[]],[37,[[91,[-1]]],[]],[35,[[92,[-1]]],[]],[-1,[[93,[-1,-2]]],75,[]],[-1,[[94,[-1]]],[]],[-1,[[95,[-1]]],[]],[-1,[[96,[-1]]],[]],[[[74,[-1,-2]],-3],[[11,[43,-4]]],75,28,51,[]],[[[93,[-3,-1]],-4],[[11,[43,-5]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]],51,[]],[[[74,[-1,-2]],-3,-4],[[11,[[43,[22]],-5]]],75,28,51,51,[]],[[[74,[-1,-2]],-3],[[11,[43,-4]]],75,28,51,[]],[[[74,[-1,-2]],-3],[[11,[-4]]],75,28,51,[]],[[[74,[-1,-2]]],[[43,[32]]],75,28],[[[74,[-1,-2]]],[[43,[32]]],75,28],[[[93,[-3,-1]]],[[43,[32]]],28,[[57,[-1]]],[[75,[],[[21,[-2]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,61,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[-1,62,[]],[[[67,[-1]],-2],[[11,[[22,[-3]],-4]]],28,51,[],[]],[[[68,[-1]],-2],[[11,[[22,[-3]],-4]]],28,51,[],[]],[[[69,[-1]],-2],[[11,[[22,[-3]],-4]]],28,51,[],[]],[[[70,[-1]],-2],[[11,[[22,[-3]],-4]]],28,51,[],[]],[[[71,[-1]],-2],[[11,[[22,[-3]],-4]]],28,51,[],[]],[[[95,[-1]],-2],[[11,[[22,[-3]],-4]]],60,51,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],-12],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]],20,20,[[23,[],[[21,[[22,[-10,-11]]]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],-10],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]],23],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],-10],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]],[24,25]],[-1,12,24],[[[13,[],[[1,[-1]],[2,[-2]]]]],[[11,[-1,-2]]],[],12],[[[14,[],[[1,[-1]],[2,[-2]]]]],[[11,[-1,-2]]],[],12],[[[15,[],[[1,[-1]],[2,[-2]]]]],[[11,[-1,-2]]],[],12],[[[16,[],[[1,[-1]],[2,[-2]]]]],[[11,[-1,-2]]],[],12],[[[17,[],[[1,[-1]],[2,[-2]]]]],[[11,[-1,-2]]],[],12],[[[18,[],[[1,[-1]],[2,[-2]]]]],[[11,[-1,-2]]],[],12],[[[19,[],[[1,[-1]],[2,[-2]]]]],[[11,[-1,-2]]],[],12],[[[100,[-1,-2]]],[[11,[-1,-2]]],[],12],[[[100,[-1,-2]]],[[11,[-1,-2]]],[],12],[[[100,[-1,-2]]],[[11,[-1,-2]]],[],12],[[[100,[-1,-2]]],[[11,[-1,-2]]],[],12],[[[100,[-1,-2]]],[[11,[-1,-2]]],[],12],[[[100,[-1,-2]]],[[11,[-1,-2]]],[],12],[[[100,[-1,-2]]],[[11,[-1,-2]]],[],12],[-1,-1,[]],[-1,-2,[],[]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]]],33,[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[20,-1],11,10],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],33],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],[31,[34]]],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],35],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[13,[],[[1,[-1]],[2,[-2]]]],-3],[[11,[22,-2]]],[],12,[20,25]],[[[14,[],[[1,[-1]],[2,[-2]]]],-3],[[11,[22,-2]]],[],12,[20,25]],[[[100,[-1,-2]],-3],[[11,[22,-2]]],[],12,[20,25]],[[[100,[-1,-2]],-3],[[11,[22,-2]]],[],12,[20,25]],[[[17,[],[[1,[-1]],[2,[-2]]]],-3,-4],[[11,[22,-2]]],[],12,[20,25],[20,25]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],36],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],37],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[15,[],[[1,[-1]],[2,[-2]]]],-3],[[11,[22,-2]]],[],12,[20,25]],[[[16,[],[[1,[-1]],[2,[-2]]]],-3],[[11,[22,-2]]],[],12,[20,25]],[[[18,[],[[1,[-1]],[2,[-2]]]],30,-3],[[11,[22,-2]]],[],12,[20,25]],[[[19,[],[[1,[-1]],[2,[-2]]]],30,-3],[[11,[22,-2]]],[],12,[20,25]],[[[100,[-1,-2]],30,-3],[[11,[22,-2]]],[],12,[20,25]],[[[100,[-1,-2]],-3],[[11,[22,-2]]],[],12,[20,25]],[[[100,[-1,-2]],30,-3],[[11,[22,-2]]],[],12,[20,25]],[[[100,[-1,-2]],-3],[[11,[22,-2]]],[],12,[20,25]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],38],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],39],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],40],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],41],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],42],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[17,[],[[1,[-1]],[2,[-2]]]],-3],[[11,[22,-2]]],[],12,[20,25]],[[[100,[-1,-2]],-3],[[11,[22,-2]]],[],12,[20,25]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],[43,[32]]],[[11,[-7,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,-10],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]],[20,25]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,44,30,-10],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]],[20,25]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]]],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],[43,[32]]],[[11,[-3,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],-10],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]],[20,25]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,32],[[11,[-8,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,44,30,32],[[11,[-9,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],32],[[11,[-4,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,32],[[11,[-5,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,44,30,32],[[11,[-6,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],45],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],46],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],44],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],47],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],34],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]]],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[10,[],[[1,[-1]],[2,[-2]],[3,[-3]],[4,[-4]],[5,[-5]],[6,[-6]],[7,[-7]],[8,[-8]],[9,[-9]]]],30,44,30],[[11,[-1,-2]]],[],12,[[13,[],[[1,[-1]],[2,[-2]]]]],[[14,[],[[1,[-1]],[2,[-2]]]]],[[15,[],[[1,[-1]],[2,[-2]]]]],[[16,[],[[1,[-1]],[2,[-2]]]]],[[17,[],[[1,[-1]],[2,[-2]]]]],[[18,[],[[1,[-1]],[2,[-2]]]]],[[19,[],[[1,[-1]],[2,[-2]]]]]],[[[17,[],[[1,[-1]],[2,[-2]]]],-3],[[11,[22,-2]]],[],12,[20,25]],[[[100,[-1,-2]],-3],[[11,[22,-2]]],[],12,[20,25]],[[[18,[],[[1,[-1]],[2,[-2]]]],30],[[11,[22,-2]]],[],12],[[[19,[],[[1,[-1]],[2,[-2]]]],30],[[11,[22,-2]]],[],12],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,62,[]]],"c":[],"p":[[17,"Ok"],[17,"Error"],[17,"SerializeSeq"],[17,"SerializeTuple"],[17,"SerializeTupleStruct"],[17,"SerializeTupleVariant"],[17,"SerializeMap"],[17,"SerializeStruct"],[17,"SerializeStructVariant"],[10,"Serializer",0],[6,"Result",1640],[10,"Error",1529],[10,"SerializeSeq",1529],[10,"SerializeTuple",1529],[10,"SerializeTupleStruct",1529],[10,"SerializeTupleVariant",1529],[10,"SerializeMap",1529],[10,"SerializeStruct",1529],[10,"SerializeStructVariant",1529],[10,"Serialize",0],[17,"Item"],[1,"tuple"],[10,"IntoIterator",1641],[10,"Display",1642],[10,"Sized",1643],[10,"Deserialize",0],[10,"Deserializer",0],[10,"Error",85],[10,"Visitor",85],[1,"str"],[1,"slice"],[1,"usize"],[1,"bool"],[1,"u8"],[1,"char"],[1,"f32"],[1,"f64"],[1,"i128"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"i8"],[6,"Option",1644],[1,"u32"],[1,"u128"],[1,"u16"],[1,"u64"],[5,"IgnoredAny",85],[6,"Unexpected",85],[17,"Value"],[10,"DeserializeSeed",85],[5,"Formatter",1642],[8,"Result",1642],[10,"Expected",85],[5,"Error",1642],[17,"Deserializer"],[10,"IntoDeserializer",85],[10,"VariantAccess",85],[10,"SeqAccess",85],[10,"MapAccess",85],[5,"String",1645],[5,"TypeId",1646],[17,"Variant"],[10,"EnumAccess",85],[5,"Vec",1647],[5,"UnitDeserializer",263],[5,"U32Deserializer",263],[5,"StrDeserializer",263],[5,"BorrowedStrDeserializer",263],[5,"StringDeserializer",263],[5,"CowStrDeserializer",263],[5,"BytesDeserializer",263],[5,"BorrowedBytesDeserializer",263],[5,"MapDeserializer",263],[10,"Iterator",1648],[10,"Clone",1649],[5,"Error",263],[5,"BoolDeserializer",263],[5,"I8Deserializer",263],[5,"I16Deserializer",263],[5,"I32Deserializer",263],[5,"I64Deserializer",263],[5,"I128Deserializer",263],[5,"IsizeDeserializer",263],[5,"U8Deserializer",263],[5,"U16Deserializer",263],[5,"U64Deserializer",263],[5,"U128Deserializer",263],[5,"UsizeDeserializer",263],[5,"F32Deserializer",263],[5,"F64Deserializer",263],[5,"CharDeserializer",263],[5,"SeqDeserializer",263],[5,"SeqAccessDeserializer",263],[5,"MapAccessDeserializer",263],[5,"EnumAccessDeserializer",263],[10,"Debug",1642],[6,"Cow",1650],[1,"isize"],[5,"Impossible",1529]],"b":[[180,"impl-Debug-for-Unexpected%3C\'a%3E"],[181,"impl-Display-for-Unexpected%3C\'a%3E"],[408,"impl-Error-for-Error"],[409,"impl-Error-for-Error"],[1291,"impl-Display-for-Error"],[1292,"impl-Debug-for-Error"],[1403,"impl-SeqAccess%3C\'de%3E-for-MapDeserializer%3C\'de,+I,+E%3E"],[1404,"impl-MapAccess%3C\'de%3E-for-MapDeserializer%3C\'de,+I,+E%3E"],[1577,"impl-SerializeTupleStruct-for-Impossible%3COk,+Error%3E"],[1578,"impl-SerializeStructVariant-for-Impossible%3COk,+Error%3E"],[1579,"impl-SerializeTuple-for-Impossible%3COk,+Error%3E"],[1580,"impl-SerializeSeq-for-Impossible%3COk,+Error%3E"],[1581,"impl-SerializeMap-for-Impossible%3COk,+Error%3E"],[1582,"impl-SerializeTupleVariant-for-Impossible%3COk,+Error%3E"],[1583,"impl-SerializeStruct-for-Impossible%3COk,+Error%3E"],[1593,"impl-SerializeTuple-for-Impossible%3COk,+Error%3E"],[1594,"impl-SerializeSeq-for-Impossible%3COk,+Error%3E"],[1602,"impl-SerializeStruct-for-Impossible%3COk,+Error%3E"],[1603,"impl-SerializeTupleStruct-for-Impossible%3COk,+Error%3E"],[1604,"impl-SerializeStructVariant-for-Impossible%3COk,+Error%3E"],[1605,"impl-SerializeTupleVariant-for-Impossible%3COk,+Error%3E"]]}],\
["serial_core",{"doc":"","t":"PPPPPPPPPPPPGPPPPGPFGGPPPPPPPGPPPFIKKKRPPGMNONNNNNNNNNNNNNNNNMNONNNNNNNNNNNNNNMNNNNNNNNMNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNOCMMMMMMMMMMMNMNMMMNMNMMMNMMNMNOMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMEE","n":["Baud110","Baud115200","Baud1200","Baud19200","Baud2400","Baud300","Baud38400","Baud4800","Baud57600","Baud600","Baud9600","BaudOther","BaudRate","Bits5","Bits6","Bits7","Bits8","CharSize","Err","Error","ErrorKind","FlowControl","FlowHardware","FlowNone","FlowSoftware","InvalidInput","Io","NoDevice","Ok","Parity","ParityEven","ParityNone","ParityOdd","PortSettings","Result","SerialDevice","SerialPort","SerialPortSettings","Settings","Stop1","Stop2","StopBits","baud_rate","baud_rate","baud_rate","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","char_size","char_size","char_size","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","configure","description","eq","eq","eq","eq","eq","eq","eq","flow_control","flow_control","flow_control","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_speed","into","into","into","into","into","into","into","into","kind","new","parity","parity","parity","prelude","read_cd","read_cd","read_cts","read_cts","read_dsr","read_dsr","read_ri","read_ri","read_settings","reconfigure","set_baud_rate","set_baud_rate","set_char_size","set_char_size","set_dtr","set_dtr","set_flow_control","set_flow_control","set_parity","set_parity","set_rts","set_rts","set_stop_bits","set_stop_bits","set_timeout","set_timeout","speed","stop_bits","stop_bits","stop_bits","timeout","timeout","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write_settings","SerialPort","SerialPortSettings"],"q":[[0,"serial_core"],[188,"serial_core::prelude"],[190,"core::option"],[191,"core::fmt"],[192,"core::fmt"],[193,"std::io::error"],[194,"alloc::string"],[195,"core::convert"],[196,"core::ops::function"],[197,"core::time"],[198,"core::any"]],"d":["110 baud.","115,200 baud.","1200 baud.","19,200 baud.","2400 baud.","300 baud.","38,400 baud.","4800 baud.","57,600 baud.","600 baud.","9600 baud.","Non-standard baud rates.","Serial port baud rates.","5 bits per character.","6 bits per character.","7 bits per character.","8 bits per character.","Number of bits per character.","Contains the error value","An error type for serial port operations.","Categories of errors that can occur when interacting with …","Flow control modes.","Flow control using RTS/CTS signals.","No flow control.","Flow control using XON/XOFF bytes.","A parameter was incorrect.","An I/O error occured.","The device is not available.","Contains the success value","Parity checking modes.","Parity bit sets even number of 1 bits.","No parity bit.","Parity bit sets odd number of 1 bits.","A device-indepenent implementation of serial port settings.","A type for results generated by interacting with serial …","A trait for implementing serial devices.","A trait for serial port devices.","A trait for objects that implement serial port …","A type that implements the settings for the serial port …","One stop bit.","Two stop bits.","Number of stop bits.","Returns the current baud rate.","","Baud rate.","","","","","","","","","","","","","","","","","Returns the character size.","","Character size.","","","","","","","","","","","","","","","Configures a serial port device.","","","","","","","","","Returns the flow control mode.","","Flow control mode.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>BaudRate</code> for a particular speed.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the corresponding <code>ErrorKind</code> for this error.","","Returns the parity-checking mode.","","Parity checking mode.","A module that exports traits that are useful to have in …","Reads the state of the CD (Carrier Detect) control signal.","Reads the state of the CD (Carrier Detect) control signal.","Reads the state of the CTS (Clear To Send) control signal.","Reads the state of the CTS (Clear To Send) control signal.","Reads the state of the DSR (Data Set Ready) control signal.","Reads the state of the DSR (Data Set Ready) control signal.","Reads the state of the RI (Ring Indicator) control signal.","Reads the state of the RI (Ring Indicator) control signal.","Returns the device’s current settings.","Alter the serial port’s configuration.","Sets the baud rate.","","Sets the character size.","","Sets the state of the DTR (Data Terminal Ready) control …","Sets the state of the DTR (Data Terminal Ready) control …","Sets the flow control mode.","","Sets the parity-checking mode.","","Sets the state of the RTS (Request To Send) control signal.","Sets the state of the RTS (Request To Send) control signal.","Sets the number of stop bits.","","Sets the timeout for future I/O operations.","Sets the timeout for future I/O operations.","Returns the baud rate as an integer.","Returns the number of stop bits.","","Number of stop bits.","Returns the current timeout.","Returns the current timeout.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Applies new settings to the serial device.","",""],"i":[2,2,2,2,2,2,2,2,2,2,2,2,0,5,5,5,5,0,12,0,0,0,9,9,9,6,6,6,12,0,7,7,7,0,0,0,0,0,25,8,8,0,1,4,4,6,13,2,5,7,8,9,4,6,13,2,5,7,8,9,4,1,4,4,6,2,5,7,8,9,4,6,2,5,7,8,9,4,11,13,6,2,5,7,8,9,4,1,4,4,6,13,13,2,5,7,8,9,4,6,13,13,2,5,7,8,9,4,2,6,13,2,5,7,8,9,4,13,13,1,4,4,0,25,11,25,11,25,11,25,11,25,11,1,4,1,4,25,11,1,4,1,4,25,11,1,4,25,11,2,1,4,4,25,11,6,2,5,7,8,9,4,13,6,13,2,5,7,8,9,4,6,13,2,5,7,8,9,4,6,13,2,5,7,8,9,4,25,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[3,[2]]]],[4,[[3,[2]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,[[3,[5]]]],[4,[[3,[5]]]],0,[6,6],[2,2],[5,5],[7,7],[8,8],[9,9],[4,4],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[11,4],[[12,[10]]]],[13,14],[[6,6],15],[[2,2],15],[[5,5],15],[[7,7],15],[[8,8],15],[[9,9],15],[[4,4],15],[1,[[3,[9]]]],[4,[[3,[9]]]],0,[[6,16],17],[[13,16],[[19,[10,18]]]],[[13,16],17],[[2,16],17],[[5,16],17],[[7,16],17],[[8,16],17],[[9,16],17],[[4,16],17],[-1,-1,[]],[-1,-1,[]],[20,13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[21,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[13,6],[[6,-1],13,[[23,[22]]]],[1,[[3,[7]]]],[4,[[3,[7]]]],0,0,[[[25,[],[[24,[-1]]]]],[[12,[15]]],1],[11,[[12,[15]]]],[[[25,[],[[24,[-1]]]]],[[12,[15]]],1],[11,[[12,[15]]]],[[[25,[],[[24,[-1]]]]],[[12,[15]]],1],[11,[[12,[15]]]],[[[25,[],[[24,[-1]]]]],[[12,[15]]],1],[11,[[12,[15]]]],[[[25,[],[[24,[-1]]]]],[[12,[-1]]],1],[[11,26],[[12,[10]]]],[[1,2],[[12,[10]]]],[[4,2],[[12,[10]]]],[[1,5],10],[[4,5],10],[[[25,[],[[24,[-1]]]],15],[[12,[10]]],1],[[11,15],[[12,[10]]]],[[1,9],10],[[4,9],10],[[1,7],10],[[4,7],10],[[[25,[],[[24,[-1]]]],15],[[12,[10]]],1],[[11,15],[[12,[10]]]],[[1,8],10],[[4,8],10],[[[25,[],[[24,[-1]]]],27],[[12,[10]]],1],[[11,27],[[12,[10]]]],[2,21],[1,[[3,[8]]]],[4,[[3,[8]]]],0,[[[25,[],[[24,[-1]]]]],27,1],[11,27],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,22,[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[[[25,[],[[24,[-1]]]],-1],[[12,[10]]],1],0,0],"c":[],"p":[[10,"SerialPortSettings",0],[6,"BaudRate",0],[6,"Option",190],[5,"PortSettings",0],[6,"CharSize",0],[6,"ErrorKind",0],[6,"Parity",0],[6,"StopBits",0],[6,"FlowControl",0],[1,"tuple"],[10,"SerialPort",0],[8,"Result",0],[5,"Error",0],[1,"str"],[1,"bool"],[5,"Formatter",191],[8,"Result",191],[5,"Error",191],[6,"Result",192],[5,"Error",193],[1,"usize"],[5,"String",194],[10,"Into",195],[17,"Settings"],[10,"SerialDevice",0],[10,"Fn",196],[5,"Duration",197],[5,"TypeId",198]],"b":[[91,"impl-Display-for-Error"],[92,"impl-Debug-for-Error"]]}],\
["serial_unix",{"doc":"Serial port implementation for Unix operating systems.","t":"FFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["TTYPort","TTYSettings","as_raw_fd","baud_rate","borrow","borrow","borrow_mut","borrow_mut","char_size","clone","clone_into","configure","drop","flow_control","flush","fmt","from","from","into","into","open","parity","read","read_cd","read_cd","read_cts","read_cts","read_dsr","read_dsr","read_ri","read_ri","read_settings","reconfigure","set_baud_rate","set_char_size","set_dtr","set_dtr","set_flow_control","set_parity","set_rts","set_rts","set_stop_bits","set_timeout","set_timeout","stop_bits","timeout","timeout","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write","write_settings"],"q":[[0,"serial_unix"],[56,"std::os::fd::raw"],[57,"serial_core"],[58,"core::option"],[59,"serial_core"],[60,"serial_core"],[61,"core::fmt"],[62,"core::fmt"],[63,"serial_core"],[64,"serial_core"],[65,"core::any"]],"d":["A TTY-based serial port implementation.","Serial port settings for TTY devices.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Opens a TTY device as a serial port.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,3,1,3,1,3,3,3,3,1,1,3,1,3,1,3,1,3,1,3,1,1,1,1,1,1,1,1,1,1,1,3,3,1,1,3,3,1,1,3,1,1,3,1,1,3,1,3,1,3,1,3,1,1],"f":[0,0,[1,2],[3,[[5,[4]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,[[5,[6]]]],[3,3],[[-1,-2],7,[],[]],[[-1,8],[[10,[7,9]]],[]],[1,7],[3,[[5,[11]]]],[1,[[12,[7]]]],[[3,13],14],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[15,[[16,[1]]]],[3,[[5,[17]]]],[[1,[19,[18]]],[[12,[20]]]],[-1,[[10,[21,9]]],[]],[1,[[16,[21]]]],[1,[[16,[21]]]],[-1,[[10,[21,9]]],[]],[-1,[[10,[21,9]]],[]],[1,[[16,[21]]]],[-1,[[10,[21,9]]],[]],[1,[[16,[21]]]],[1,[[16,[3]]]],[[-1,22],[[10,[7,9]]],[]],[[3,4],[[16,[7]]]],[[3,6],7],[[-1,21],[[10,[7,9]]],[]],[[1,21],[[16,[7]]]],[[3,11],7],[[3,17],7],[[-1,21],[[10,[7,9]]],[]],[[1,21],[[16,[7]]]],[[3,23],7],[[1,24],[[16,[7]]]],[[-1,24],[[10,[7,9]]],[]],[3,[[5,[23]]]],[1,24],[-1,24,[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[[1,[19,[18]]],[[12,[20]]]],[[1,3],[[16,[7]]]]],"c":[],"p":[[5,"TTYPort",0],[8,"RawFd",56],[5,"TTYSettings",0],[6,"BaudRate",57],[6,"Option",58],[6,"CharSize",57],[1,"tuple"],[5,"PortSettings",57],[5,"Error",57],[6,"Result",59],[6,"FlowControl",57],[8,"Result",60],[5,"Formatter",61],[8,"Result",61],[5,"Path",62],[8,"Result",57],[6,"Parity",57],[1,"u8"],[1,"slice"],[1,"usize"],[1,"bool"],[10,"Fn",63],[6,"StopBits",57],[5,"Duration",64],[5,"TypeId",65]],"b":[]}],\
["siphasher",{"doc":"","t":"CCCEEEEFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFKFFFNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["prelude","sip","sip128","_","_","sip","sip128","SipHasher","SipHasher13","SipHasher24","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","default","default","default","finish","finish","finish","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","key","key","key","keys","keys","keys","new","new","new","new_with_key","new_with_key","new_with_key","new_with_keys","new_with_keys","new_with_keys","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write","write","write_u16","write_u16","write_u16","write_u32","write_u32","write_u32","write_u64","write_u64","write_u64","write_u8","write_u8","write_u8","write_usize","write_usize","write_usize","Hash128","Hasher128","SipHasher","SipHasher13","SipHasher24","as_bytes","as_u128","as_u64","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","default","default","default","default","finish","finish","finish","finish128","finish128","finish128","finish128","fmt","fmt","fmt","fmt","from","from","from","from","from","h1","h2","hash","hash","hash","into","into","into","into","key","key","key","keys","keys","keys","new","new","new","new_with_key","new_with_key","new_with_key","new_with_keys","new_with_keys","new_with_keys","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","write","write","write_u16","write_u16","write_u16","write_u32","write_u32","write_u32","write_u64","write_u64","write_u64","write_u8","write_u8","write_u8","write_usize","write_usize","write_usize"],"q":[[0,"siphasher"],[3,"siphasher::prelude"],[7,"siphasher::sip"],[79,"siphasher::sip128"],[173,"core::fmt"],[174,"core::fmt"],[175,"core::any"]],"d":["","An implementation of SipHash.","An implementation of SipHash with a 128-bit output.","","","","","An implementation of SipHash 2-4.","An implementation of SipHash 1-3.","An implementation of SipHash 2-4.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Hash a byte array - This is the easiest and safest way to …","Hash a byte array - This is the easiest and safest way to …","Hash a byte array - This is the easiest and safest way to …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the key used by this hasher as a 16 byte vector","Get the key used by this hasher as a 16 byte vector","Get the key used by this hasher as a 16 byte vector","Get the keys used by this hasher","Get the keys used by this hasher","Get the keys used by this hasher","Creates a new <code>SipHasher13</code> with the two initial keys set to …","Creates a new <code>SipHasher24</code> with the two initial keys set to …","Creates a new <code>SipHasher</code> with the two initial keys set to 0.","Creates a <code>SipHasher13</code> from a 16 byte key.","Creates a <code>SipHasher24</code> from a 16 byte key.","Creates a <code>SipHasher</code> from a 16 byte key.","Creates a <code>SipHasher13</code> that is keyed off the provided keys.","Creates a <code>SipHasher24</code> that is keyed off the provided keys.","Creates a <code>SipHasher</code> that is keyed off the provided keys.","","","","","","","","","","","","","","","","","","","","","","","","","","","","A 128-bit (2x64) hash output","","An implementation of SipHash128 2-4.","An implementation of SipHash128 1-3.","An implementation of SipHash128 2-4.","Convert into a 16-bytes vector","Convert into a <code>u128</code>","Convert into <code>(u64, u64)</code>","","","","","","","","","","","","","","","","","","","","Return a 128-bit hash","Return a 128-bit hash","Return a 128-bit hash","Return a 128-bit hash","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Hash a byte array - This is the easiest and safest way to …","Hash a byte array - This is the easiest and safest way to …","Hash a byte array - This is the easiest and safest way to …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the key used by this hasher as a 16 byte vector","Get the key used by this hasher as a 16 byte vector","Get the key used by this hasher as a 16 byte vector","Get the keys used by this hasher","Get the keys used by this hasher","Get the keys used by this hasher","Creates a new <code>SipHasher13</code> with the two initial keys set to …","Creates a new <code>SipHasher24</code> with the two initial keys set to …","Creates a new <code>SipHasher</code> with the two initial keys set to 0.","Creates a <code>SipHasher13</code> from a 16 byte key.","Creates a <code>SipHasher24</code> from a 16 byte key.","Creates a <code>SipHasher</code> from a 16 byte key.","Creates a <code>SipHasher13</code> that is keyed off the provided keys.","Creates a <code>SipHasher24</code> that is keyed off the provided keys.","Creates a <code>SipHasher</code> that is keyed off the provided keys.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,0,0,0,0,16,16,16,16,18,19,20,16,18,19,20,16,18,19,20,16,18,19,20,18,19,20,21,18,19,20,16,18,19,20,16,16,18,19,20,16,16,18,19,20,16,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,16,18,19,20,16,18,19,20,16,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20],"f":[0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[[],1],[[],2],[[],3],[1,4],[2,4],[3,4],[[1,5],6],[[2,5],6],[[3,5],6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[1,[8,[7]]],4],[[2,[8,[7]]],4],[[3,[8,[7]]],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,[[9,[7]]]],[2,[[9,[7]]]],[3,[[9,[7]]]],[1,[[10,[4,4]]]],[2,[[10,[4,4]]]],[3,[[10,[4,4]]]],[[],1],[[],2],[[],3],[[[9,[7]]],1],[[[9,[7]]],2],[[[9,[7]]],3],[[4,4],1],[[4,4],2],[[4,4],3],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[[1,[8,[7]]],10],[[2,[8,[7]]],10],[[3,[8,[7]]],10],[[1,13],10],[[2,13],10],[[3,13],10],[[1,14],10],[[2,14],10],[[3,14],10],[[1,4],10],[[2,4],10],[[3,4],10],[[1,7],10],[[2,7],10],[[3,7],10],[[1,15],10],[[2,15],10],[[3,15],10],0,0,0,0,0,[16,[[9,[7]]]],[16,17],[16,[[10,[4,4]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[16,16],[18,18],[19,19],[20,20],[[],16],[[],18],[[],19],[[],20],[18,4],[19,4],[20,4],[21,16],[18,16],[19,16],[20,16],[[16,5],6],[[18,5],6],[[19,5],6],[[20,5],6],[17,16],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[[18,[8,[7]]],16],[[19,[8,[7]]],16],[[20,[8,[7]]],16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[18,[[9,[7]]]],[19,[[9,[7]]]],[20,[[9,[7]]]],[18,[[10,[4,4]]]],[19,[[10,[4,4]]]],[20,[[10,[4,4]]]],[[],18],[[],19],[[],20],[[[9,[7]]],18],[[[9,[7]]],19],[[[9,[7]]],20],[[4,4],18],[[4,4],19],[[4,4],20],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[[18,[8,[7]]],10],[[19,[8,[7]]],10],[[20,[8,[7]]],10],[[18,13],10],[[19,13],10],[[20,13],10],[[18,14],10],[[19,14],10],[[20,14],10],[[18,4],10],[[19,4],10],[[20,4],10],[[18,7],10],[[19,7],10],[[20,7],10],[[18,15],10],[[19,15],10],[[20,15],10]],"c":[],"p":[[5,"SipHasher13",7],[5,"SipHasher24",7],[5,"SipHasher",7],[1,"u64"],[5,"Formatter",173],[8,"Result",173],[1,"u8"],[1,"slice"],[1,"array"],[1,"tuple"],[6,"Result",174],[5,"TypeId",175],[1,"u16"],[1,"u32"],[1,"usize"],[5,"Hash128",79],[1,"u128"],[5,"SipHasher13",79],[5,"SipHasher24",79],[5,"SipHasher",79],[10,"Hasher128",79]],"b":[]}],\
["sk6812_rpi",{"doc":"","t":"CCFNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNONNNNNNNNNNNNOGGPPPPPPPPPPPPPPPPPPPPPPPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNN","n":["led","strip","Led","adapt_into_using","add","add","add","add_assign","add_assign","add_assign","b","borrow","borrow_mut","clone","clone_into","default","div","div","div","div_assign","div_assign","div_assign","eq","fmt","from","from","from","from","from","from","from_rgb","from_rgb_array","from_rgbw","from_rgbw_array","g","into","into_color","into_color_unclamped","into_rgb_array","into_rgbw_array","mul","mul","mul","mul_assign","mul_assign","mul_assign","new","r","sub","sub","sub","sub_assign","sub_assign","sub_assign","to_owned","to_raw_led_bytes","try_from","try_into","try_into_color","type_id","w","Bus","SlaveSelect","Spi0","Spi1","Spi2","Spi3","Spi4","Spi5","Spi6","Ss0","Ss1","Ss10","Ss11","Ss12","Ss13","Ss14","Ss15","Ss2","Ss3","Ss4","Ss5","Ss6","Ss7","Ss8","Ss9","Strip","adapt_into_using","adapt_into_using","adapt_into_using","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone_into","clone_into","eq","eq","fill","fmt","fmt","fmt","fmt","fmt","from","from","from","into","into","into","into_color","into_color","into_color","into_color_unclamped","into_color_unclamped","into_color_unclamped","leds","new","new_with_custom_ss","set_gradient","shift_left","shift_right","shl_assign","shr_assign","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","try_into_color","try_into_color","try_into_color","type_id","type_id","type_id","update"],"q":[[0,"sk6812_rpi"],[2,"sk6812_rpi::led"],[61,"sk6812_rpi::strip"],[146,"palette::chromatic_adaptation"],[147,"core::fmt"],[148,"core::fmt"],[149,"palette::rgb::rgb"],[150,"palette::hsl"],[151,"alloc::vec"],[152,"core::result"],[153,"palette::convert"],[154,"core::any"],[155,"core::fmt"],[156,"alloc::boxed"],[157,"palette::rgb"],[158,"palette::gradient"],[159,"alloc::string"]],"d":["","","Structure representing a single RGBW LED","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Converts the instance of this struct to SK6812-compatible …","","","","","","SPI buses.","Slave Select pins.","","","","","","","","","","","","","","","","","","","","","","","","Structure representing whole SK6812RGBW strip. Should be …","","","","","","","","","","","","","","","","","Set the color of all LEDs in the strip at once","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Create new SK6812RGBW strip Since rppal library requires …","Create new SK6812RGBW strip with custom slave-select pin …","","","","","","","","","","","","","","","","","","","","","","Call this to send the data from <code>leds</code> to the strip This …"],"i":[0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,17,18,19,17,18,19,17,18,19,17,18,19,18,19,18,19,17,17,18,18,19,19,17,18,19,17,18,19,17,18,19,17,18,19,17,17,17,17,17,17,17,17,18,19,18,19,17,18,19,17,18,19,17,18,19,17,18,19,17],"f":[0,0,0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[2,2],-1,[]],[[2,3],-1,[]],[[2,4],-1,[]],[[2,4],5],[[2,2],5],[[2,3],5],0,[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[-1,-2],5,[],[]],[[],2],[[2,2],-1,[]],[[2,4],-1,[]],[[2,3],-1,[]],[[2,3],5],[[2,2],5],[[2,4],5],[[2,2],6],[[2,7],8],[9,2],[[[10,[3]]],2],[[[10,[3]]],2],[-1,-1,[]],[11,2],[12,2],[[3,3,3],2],[[[10,[3]]],2],[[3,3,3,3],2],[[[10,[3]]],2],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,[[10,[3]]]],[2,[[10,[3]]]],[[2,3],-1,[]],[[2,4],-1,[]],[[2,2],-1,[]],[[2,4],5],[[2,3],5],[[2,2],5],[[],2],0,[[2,4],-1,[]],[[2,2],-1,[]],[[2,3],-1,[]],[[2,3],5],[[2,4],5],[[2,2],5],[-1,-2,[],[]],[2,[[13,[3]]]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2,[15,[-2]]]]],[],[]],[-1,16,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[[-1,-5],-6,[],[],[],[],[[1,[-2,-3,-4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[17,5],[18,18],[19,19],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[18,18],6],[[19,19],6],[[17,2],5],[[17,7],8],[[18,7],[[14,[5,20]]]],[[18,7],[[14,[5,20]]]],[[19,7],[[14,[5,20]]]],[[19,7],[[14,[5,20]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[18,21],[[14,[17,[23,[22]]]]]],[[18,21,19],[[14,[17,[23,[22]]]]]],[[17,[25,[24]]],5],[[17,21],5],[[17,21],5],[[17,21],5],[[17,21],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,26,[]],[-1,26,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2,[15,[-2]]]]],[],[]],[-1,[[14,[-2,[15,[-2]]]]],[],[]],[-1,[[14,[-2,[15,[-2]]]]],[],[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[17,[[14,[5,[23,[22]]]]]]],"c":[],"p":[[10,"TransformMatrix",146],[5,"Led",2],[1,"u8"],[1,"f32"],[1,"tuple"],[1,"bool"],[5,"Formatter",147],[8,"Result",147],[5,"Hsv",148],[1,"array"],[5,"Rgb",149],[5,"Hsl",150],[5,"Vec",151],[6,"Result",152],[5,"OutOfBounds",153],[5,"TypeId",154],[5,"Strip",61],[6,"Bus",61],[6,"SlaveSelect",61],[5,"Error",147],[1,"usize"],[10,"Error",155],[5,"Box",156],[8,"LinSrgb",157],[5,"Gradient",158],[5,"String",159]],"b":[[4,"impl-Add-for-Led"],[5,"impl-Add%3Cu8%3E-for-Led"],[6,"impl-Add%3Cf32%3E-for-Led"],[7,"impl-AddAssign%3Cf32%3E-for-Led"],[8,"impl-AddAssign-for-Led"],[9,"impl-AddAssign%3Cu8%3E-for-Led"],[16,"impl-Div-for-Led"],[17,"impl-Div%3Cf32%3E-for-Led"],[18,"impl-Div%3Cu8%3E-for-Led"],[19,"impl-DivAssign%3Cu8%3E-for-Led"],[20,"impl-DivAssign-for-Led"],[21,"impl-DivAssign%3Cf32%3E-for-Led"],[24,"impl-From%3CHsv%3E-for-Led"],[25,"impl-From%3C%5Bu8;+4%5D%3E-for-Led"],[26,"impl-From%3C%5Bu8;+3%5D%3E-for-Led"],[28,"impl-From%3CRgb%3E-for-Led"],[29,"impl-From%3CHsl%3E-for-Led"],[40,"impl-Mul%3Cu8%3E-for-Led"],[41,"impl-Mul%3Cf32%3E-for-Led"],[42,"impl-Mul-for-Led"],[43,"impl-MulAssign%3Cf32%3E-for-Led"],[44,"impl-MulAssign%3Cu8%3E-for-Led"],[45,"impl-MulAssign-for-Led"],[48,"impl-Sub%3Cf32%3E-for-Led"],[49,"impl-Sub-for-Led"],[50,"impl-Sub%3Cu8%3E-for-Led"],[51,"impl-SubAssign%3Cu8%3E-for-Led"],[52,"impl-SubAssign%3Cf32%3E-for-Led"],[53,"impl-SubAssign-for-Led"],[105,"impl-Debug-for-Bus"],[106,"impl-Display-for-Bus"],[107,"impl-Debug-for-SlaveSelect"],[108,"impl-Display-for-SlaveSelect"]]}],\
["spidev",{"doc":"Spidev","t":"TTTTTTTTTTTTTTTTFFFENNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONONNNNNNNNNOCNNNNNNNNNNNNNNNNNNNIOONNOONNOONNHHHHNOONNHHHHOOFHHNNNN","n":["SPI_3WIRE","SPI_CPHA","SPI_CPOL","SPI_CS_HIGH","SPI_LOOP","SPI_LSB_FIRST","SPI_MODE_0","SPI_MODE_1","SPI_MODE_2","SPI_MODE_3","SPI_NO_CS","SPI_READY","SPI_RX_DUAL","SPI_RX_QUAD","SPI_TX_DUAL","SPI_TX_QUAD","SpiModeFlags","Spidev","SpidevOptions","SpidevTransfer","all","as_raw_fd","bitand","bitand_assign","bitor","bitor_assign","bits","bits_per_word","bits_per_word","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","cmp","complement","configure","contains","default","difference","empty","eq","eq","extend","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","inner","insert","intersection","intersects","into","into","into","into_inner","is_all","is_empty","lsb_first","lsb_first","max_speed_hz","max_speed_hz","mode","new","new","not","open","partial_cmp","read","remove","set","spi_mode","spidevioctl","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","transfer","transfer_multiple","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","write","SpidevTransfer","bits_per_word","bits_per_word","borrow","borrow_mut","cs_change","cs_change","default","delay","delay_usecs","delay_usecs","fmt","from","get_bits_per_word","get_lsb_first","get_max_speed_hz","get_mode","into","pad","pad","read","read_write","set_bits_per_word","set_lsb_first","set_max_speed_hz","set_mode","speed_hz","speed_hz","spi_ioc_transfer","transfer","transfer_multiple","try_from","try_into","type_id","write"],"q":[[0,"spidev"],[112,"spidev::spidevioctl"],[147,"std::os::fd::raw"],[148,"core::cmp"],[149,"std::io::error"],[150,"core::iter::traits::collect"],[151,"core::fmt"],[152,"core::fmt"],[153,"core::hash"],[154,"std::fs"],[155,"std::path"],[156,"core::convert"],[157,"core::result"],[158,"core::any"]],"d":["SI/SO Signals Shared","Clock Phase","Clock Polarity","Chipselect Active High?","Loopback Mode","Per-word Bits On Wire","","","","","1 dev/bus; no chipselect","Slave pulls low to pause","Receive with 2 wires","Receive with 4 wires","Transmit with 2 wires","Transmit with 4 wires","","Provide high-level access to Linux Spidev Driver","Options that control defaults for communication on a device","","Returns the set containing all flags.","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","The number of bits in each SPI transfer word","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","Finalize and build the SpidevOptions","","","","","","Returns the complement of this set of flags.","Write the provided configuration to this device","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Get a reference to the underlying <code>File</code> object","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consume the object and get the underlying <code>File</code> object","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","The bit justification used to transfer SPI words","","The maximum SPI transfer speed, in Hz","","Set the SPI Transfer Mode","Wrap an already opened <code>File</code> for use as an spidev","Create a new, empty set of options","Returns the complement of this set of flags.","Open the spidev device with the provided path","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","Perform a single transfer","Perform multiple transfers in a single system call to the …","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","Representation of a spidev transfer that is shared with …","","","","","","","","Create a delay transfer of a number of microseconds","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","Create a read transfer","Create a read/write transfer. Note that the <code>tx_buf</code> and …","","","","","","","Structure that is used when performing communication with …","","","","","","Create a write transfer"],"i":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,2,1,1,1,1,1,6,6,1,1,1,2,6,1,2,6,6,1,6,1,6,1,1,2,1,6,1,1,1,6,1,2,1,1,1,1,1,2,6,1,2,6,1,1,1,1,1,2,1,1,1,1,2,6,2,1,1,6,6,6,6,6,2,6,1,2,1,2,1,1,6,0,1,1,1,1,6,1,2,2,1,2,6,1,2,6,1,2,6,1,2,0,22,25,25,25,22,25,25,25,22,25,25,25,0,0,0,0,25,22,25,25,25,0,0,0,0,22,25,0,0,0,25,25,25,25],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[2,3],[[1,1],1],[[1,1],4],[[1,1],1],[[1,1],4],[1,5],[[6,7],6],0,[[1,1],1],[[1,1],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[6,6],[1,1],[6,6],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[1,1],8],[1,1],[[2,6],[[9,[4]]]],[[1,1],10],[[],6],[[1,1],1],[[],1],[[1,1],10],[[6,6],10],[[1,-1],4,[[12,[],[[11,[1]]]]]],[2,[[9,[4]]]],[[1,13],14],[[1,13],14],[[1,13],14],[[1,13],14],[[1,13],14],[[2,13],14],[[6,13],14],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[5,[[15,[1]]]],[5,1],[5,1],[-1,1,[[12,[],[[11,[1]]]]]],[[1,-1],4,16],[2,17],[[1,1],4],[[1,1],1],[[1,1],10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,17],[1,10],[1,10],[[6,10],6],0,[[6,5],6],0,[[6,1],6],[17,2],[[],6],[1,1],[-1,[[9,[2]]],[[19,[18]]]],[[1,1],[[15,[8]]]],[[2,[20,[7]]],[[9,[21]]]],[[1,1],4],[[1,1,10],4],0,0,[[1,1],1],[[1,1],4],[[1,1],1],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],4],[[2,22],[[9,[4]]]],[[2,[20,[22]]],[[9,[4]]]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[[1,1],1],[[2,[20,[7]]],[[9,[21]]]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[],25],[26,25],0,0,[[25,13],14],[-1,-1,[]],[3,[[9,[7]]]],[3,[[9,[7]]]],[3,[[9,[5]]]],[3,[[9,[7]]]],[-1,-2,[],[]],0,0,[[[20,[7]]],25],[[[20,[7]],[20,[7]]],25],[[3,7],[[9,[4]]]],[[3,10],[[9,[4]]]],[[3,5],[[9,[4]]]],[[3,1],[[9,[4]]]],0,0,0,[[3,22],[[9,[4]]]],[[3,[20,[22]]],[[9,[4]]]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,24,[]],[[[20,[7]]],25]],"c":[],"p":[[5,"SpiModeFlags",0],[5,"Spidev",0],[8,"RawFd",147],[1,"tuple"],[1,"u32"],[5,"SpidevOptions",0],[1,"u8"],[6,"Ordering",148],[8,"Result",149],[1,"bool"],[17,"Item"],[10,"IntoIterator",150],[5,"Formatter",151],[8,"Result",151],[6,"Option",152],[10,"Hasher",153],[5,"File",154],[5,"Path",155],[10,"AsRef",156],[1,"slice"],[1,"usize"],[8,"SpidevTransfer",112],[6,"Result",157],[5,"TypeId",158],[5,"spi_ioc_transfer",112],[1,"u16"]],"b":[[53,"impl-UpperHex-for-SpiModeFlags"],[54,"impl-Debug-for-SpiModeFlags"],[55,"impl-LowerHex-for-SpiModeFlags"],[56,"impl-Octal-for-SpiModeFlags"],[57,"impl-Binary-for-SpiModeFlags"]]}],\
["sysfs_gpio",{"doc":"GPIO access under Linux using the GPIO sysfs interface","t":"PGGPGPPPPPPPPPFFIPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNQNNNNNNN","n":["BothEdges","Direction","Edge","Err","Error","FallingEdge","High","In","InvalidPath","Io","Low","NoInterrupt","Ok","Out","Pin","PinPoller","Result","RisingEdge","Unexpected","Unsupported","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone_into","clone_into","clone_into","drop","eq","eq","eq","export","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_path","get_active_low","get_direction","get_edge","get_pin","get_pin","get_pin_num","get_poller","get_value","into","into","into","into","into","is_exported","new","new","poll","set_active_low","set_direction","set_edge","set_value","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_unexport","type_id","type_id","type_id","type_id","type_id","unexport","with_exported"],"q":[[0,"sysfs_gpio"],[99,"core::error"],[100,"core::option"],[101,"core::fmt"],[102,"core::fmt"],[103,"nix"],[104,"std::path"],[105,"core::convert"],[106,"alloc::string"],[107,"core::result"],[108,"core::any"],[109,"core::ops::function"]],"d":["","","","Contains the error value","","","","","Invalid Path","Simple IO error","","","Contains the success value","","","","","","Read unusual data from sysfs file.","Operation not supported on target os","","","","","","","","","","","","","","","","","","","","","","Export the GPIO","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new Pin with the provided path","Get polarity of the Pin (<code>true</code> is active low)","Get the direction of the Pin","Get the currently configured edge for this pin","Get the pin number for the Pin","Get the pin associated with this PinPoller","Get the pin number","Get a PinPoller object for this pin","Get the value of the Pin (0 or 1)","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Determines whether the GPIO is exported","Create a new Pin with the provided <code>pin_num</code>","Create a new PinPoller for the provided pin number","Block until an interrupt occurs","Set the polarity of the Pin (<code>true</code> is active low)","Set this GPIO as either an input or an output","Set the edge on which this GPIO will trigger when polled","Set the value of the Pin","","","","","","","","","","","","","","","","","","","","","Unexport the GPIO","Run a closure with the GPIO exported"],"i":[6,0,0,10,0,6,5,5,1,1,5,6,10,5,0,0,0,6,1,1,1,4,5,6,8,1,4,5,6,8,1,4,5,6,4,5,6,8,4,5,6,4,1,1,4,5,6,8,1,1,1,4,5,6,8,4,4,4,4,4,8,4,4,4,1,4,5,6,8,4,4,8,8,4,4,4,4,4,5,6,1,1,4,5,6,8,1,4,5,6,8,0,1,4,5,6,8,4,4],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,[[3,[2]]]],[4,4],[5,5],[6,6],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[8,7],[[4,4],9],[[5,5],9],[[6,6],9],[4,[[10,[7]]]],[[1,11],12],[[1,11],12],[[4,11],12],[[5,11],12],[[6,11],12],[[8,11],12],[-1,-1,[]],[13,1],[14,1],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[10,[4]]],[[16,[15]]]],[4,[[10,[9]]]],[4,[[10,[5]]]],[4,[[10,[6]]]],[4,17],[8,4],[4,17],[4,[[10,[8]]]],[4,[[10,[18]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,9],[17,4],[17,[[10,[8]]]],[[8,19],[[10,[[3,[18]]]]]],[[4,9],[[10,[7]]]],[[4,5],[[10,[7]]]],[[4,6],[[10,[7]]]],[[4,18],[[10,[7]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,20,[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],0,[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[-1,22,[]],[4,[[10,[7]]]],[[4,-1],[[10,[7]]],[[24,[],[[23,[[10,[7]]]]]]]]],"c":[],"p":[[6,"Error",0],[10,"Error",99],[6,"Option",100],[5,"Pin",0],[6,"Direction",0],[6,"Edge",0],[1,"tuple"],[5,"PinPoller",0],[1,"bool"],[8,"Result",0],[5,"Formatter",101],[8,"Result",101],[5,"Error",102],[8,"Error",103],[5,"Path",104],[10,"AsRef",105],[1,"u64"],[1,"u8"],[1,"isize"],[5,"String",106],[6,"Result",107],[5,"TypeId",108],[17,"Output"],[10,"FnOnce",109]],"b":[[42,"impl-Debug-for-Error"],[43,"impl-Display-for-Error"],[49,"impl-From%3CError%3E-for-Error"],[50,"impl-From%3CErrno%3E-for-Error"]]}],\
["tap",{"doc":"<code>tap</code> – Syntactical Plumb-Lines","t":"KRRKKKKKRCNCNNNNNNNNNCCNNNNNNNNNNMNMNNNMNMNMNNNNNMNMNNKKNNKNNNNNNNNNKRRKKKKKRNNNNNNNNNNNNNNNNNNNNMNMNNNMNMNMNNNNNMNMNNRRKKKRNNNNNNNNNNMNMNNNMNMNMNNNNNMNMN","n":["Conv","Err","Ok","Pipe","Tap","TapFallible","TapOptional","TryConv","Val","conv","conv","pipe","pipe","pipe_as_mut","pipe_as_ref","pipe_borrow","pipe_borrow_mut","pipe_deref","pipe_deref_mut","pipe_ref","pipe_ref_mut","prelude","tap","tap","tap_borrow","tap_borrow_dbg","tap_borrow_mut","tap_borrow_mut_dbg","tap_dbg","tap_deref","tap_deref_dbg","tap_deref_mut","tap_deref_mut_dbg","tap_err","tap_err_dbg","tap_err_mut","tap_err_mut_dbg","tap_mut","tap_mut_dbg","tap_none","tap_none_dbg","tap_ok","tap_ok_dbg","tap_ok_mut","tap_ok_mut_dbg","tap_ref","tap_ref_dbg","tap_ref_mut","tap_ref_mut_dbg","tap_some","tap_some_dbg","tap_some_mut","tap_some_mut_dbg","try_conv","Conv","TryConv","conv","try_conv","Pipe","pipe","pipe_as_mut","pipe_as_ref","pipe_borrow","pipe_borrow_mut","pipe_deref","pipe_deref_mut","pipe_ref","pipe_ref_mut","Conv","Err","Ok","Pipe","Tap","TapFallible","TapOptional","TryConv","Val","conv","pipe","pipe_as_mut","pipe_as_ref","pipe_borrow","pipe_borrow_mut","pipe_deref","pipe_deref_mut","pipe_ref","pipe_ref_mut","tap","tap_borrow","tap_borrow_dbg","tap_borrow_mut","tap_borrow_mut_dbg","tap_dbg","tap_deref","tap_deref_dbg","tap_deref_mut","tap_deref_mut_dbg","tap_err","tap_err_dbg","tap_err_mut","tap_err_mut_dbg","tap_mut","tap_mut_dbg","tap_none","tap_none_dbg","tap_ok","tap_ok_dbg","tap_ok_mut","tap_ok_mut_dbg","tap_ref","tap_ref_dbg","tap_ref_mut","tap_ref_mut_dbg","tap_some","tap_some_dbg","tap_some_mut","tap_some_mut_dbg","try_conv","Err","Ok","Tap","TapFallible","TapOptional","Val","tap","tap_borrow","tap_borrow_dbg","tap_borrow_mut","tap_borrow_mut_dbg","tap_dbg","tap_deref","tap_deref_dbg","tap_deref_mut","tap_deref_mut_dbg","tap_err","tap_err_dbg","tap_err_mut","tap_err_mut_dbg","tap_mut","tap_mut_dbg","tap_none","tap_none_dbg","tap_ok","tap_ok_dbg","tap_ok_mut","tap_ok_mut_dbg","tap_ref","tap_ref_dbg","tap_ref_mut","tap_ref_mut_dbg","tap_some","tap_some_dbg","tap_some_mut","tap_some_mut_dbg"],"q":[[0,"tap"],[54,"tap::conv"],[58,"tap::pipe"],[68,"tap::prelude"],[118,"tap::tap"],[154,"core::marker"],[155,"core::ops::function"],[156,"core::result"]],"d":["Wraps <code>Into::&lt;T&gt;::into</code> as a method that can be placed in …","The interior type used to indicate a failed construction.","The interior type used to indicate a successful …","Provides universal suffix-position call syntax for any …","Point-free value inspection and modification.","Fallible tapping, conditional on the optional success of …","Optional tapping, conditional on the optional presence of …","Wraps <code>TryInto::&lt;T&gt;::try_into</code> as a method that can be …","The interior type that the container may or may not carry.","Method-Directed Type Conversion","Converts <code>self</code> into <code>T</code> using <code>Into&lt;T&gt;</code>.","Universal Suffix Calls","Pipes by value. This is generally the method you want to …","Mutably borrows <code>self</code>, then passes <code>self.as_mut()</code> into the …","Borrows <code>self</code>, then passes <code>self.as_ref()</code> into the pipe …","Borrows <code>self</code>, then passes <code>self.borrow()</code> into the pipe …","Mutably borrows <code>self</code>, then passes <code>self.borrow_mut()</code> into …","Borrows <code>self</code>, then passes <code>self.deref()</code> into the pipe …","Mutably borrows <code>self</code>, then passes <code>self.deref_mut()</code> into …","Borrows <code>self</code> and passes that borrow into the pipe function.","Mutably borrows <code>self</code> and passes that borrow into the pipe …","Reëxports all traits in one place, for easy import.","Point-Free Inspection","Immutable access to a value.","Immutable access to the <code>Borrow&lt;B&gt;</code> of a value.","Calls <code>.tap_borrow()</code> only in debug builds, and is erased in …","Mutable access to the <code>BorrowMut&lt;B&gt;</code> of a value.","Calls <code>.tap_borrow_mut()</code> only in debug builds, and is …","Calls <code>.tap()</code> only in debug builds, and is erased in …","Immutable access to the <code>Deref::Target</code> of a value.","Calls <code>.tap_deref()</code> only in debug builds, and is erased in …","Mutable access to the <code>Deref::Target</code> of a value.","Calls <code>.tap_deref_mut()</code> only in debug builds, and is erased …","Immutably accesses an interior failure value.","Calls <code>.tap_err()</code> only in debug builds, and is erased in …","Mutably accesses an interior failure value.","Calls <code>.tap_err_mut()</code> only in debug builds, and is erased …","Mutable access to a value.","Calls <code>.tap_mut()</code> only in debug builds, and is erased in …","Runs an effect function when the container is empty.","Calls <code>.tap_none()</code> only in debug builds, and is erased in …","Immutably accesses an interior success value.","Calls <code>.tap_ok()</code> only in debug builds, and is erased in …","Mutably accesses an interior success value.","Calls <code>.tap_ok_mut()</code> only in debug builds, and is erased in …","Immutable access to the <code>AsRef&lt;R&gt;</code> view of a value.","Calls <code>.tap_ref()</code> only in debug builds, and is erased in …","Mutable access to the <code>AsMut&lt;R&gt;</code> view of a value.","Calls <code>.tap_ref_mut()</code> only in debug builds, and is erased …","Immutabily accesses an interior value only when it is …","Calls <code>.tap_some()</code> only in debug builds, and is erased in …","Mutably accesses an interor value only when it is present.","Calls <code>.tap_some_mut()</code> only in debug builds, and is erased …","Attempts to convert <code>self</code> into <code>T</code> using <code>TryInto&lt;T&gt;</code>.","Wraps <code>Into::&lt;T&gt;::into</code> as a method that can be placed in …","Wraps <code>TryInto::&lt;T&gt;::try_into</code> as a method that can be …","Converts <code>self</code> into <code>T</code> using <code>Into&lt;T&gt;</code>.","Attempts to convert <code>self</code> into <code>T</code> using <code>TryInto&lt;T&gt;</code>.","Provides universal suffix-position call syntax for any …","Pipes by value. This is generally the method you want to …","Mutably borrows <code>self</code>, then passes <code>self.as_mut()</code> into the …","Borrows <code>self</code>, then passes <code>self.as_ref()</code> into the pipe …","Borrows <code>self</code>, then passes <code>self.borrow()</code> into the pipe …","Mutably borrows <code>self</code>, then passes <code>self.borrow_mut()</code> into …","Borrows <code>self</code>, then passes <code>self.deref()</code> into the pipe …","Mutably borrows <code>self</code>, then passes <code>self.deref_mut()</code> into …","Borrows <code>self</code> and passes that borrow into the pipe function.","Mutably borrows <code>self</code> and passes that borrow into the pipe …","Wraps <code>Into::&lt;T&gt;::into</code> as a method that can be placed in …","The interior type used to indicate a failed construction.","The interior type used to indicate a successful …","Provides universal suffix-position call syntax for any …","Point-free value inspection and modification.","Fallible tapping, conditional on the optional success of …","Optional tapping, conditional on the optional presence of …","Wraps <code>TryInto::&lt;T&gt;::try_into</code> as a method that can be …","The interior type that the container may or may not carry.","Converts <code>self</code> into <code>T</code> using <code>Into&lt;T&gt;</code>.","Pipes by value. This is generally the method you want to …","Mutably borrows <code>self</code>, then passes <code>self.as_mut()</code> into the …","Borrows <code>self</code>, then passes <code>self.as_ref()</code> into the pipe …","Borrows <code>self</code>, then passes <code>self.borrow()</code> into the pipe …","Mutably borrows <code>self</code>, then passes <code>self.borrow_mut()</code> into …","Borrows <code>self</code>, then passes <code>self.deref()</code> into the pipe …","Mutably borrows <code>self</code>, then passes <code>self.deref_mut()</code> into …","Borrows <code>self</code> and passes that borrow into the pipe function.","Mutably borrows <code>self</code> and passes that borrow into the pipe …","Immutable access to a value.","Immutable access to the <code>Borrow&lt;B&gt;</code> of a value.","Calls <code>.tap_borrow()</code> only in debug builds, and is erased in …","Mutable access to the <code>BorrowMut&lt;B&gt;</code> of a value.","Calls <code>.tap_borrow_mut()</code> only in debug builds, and is …","Calls <code>.tap()</code> only in debug builds, and is erased in …","Immutable access to the <code>Deref::Target</code> of a value.","Calls <code>.tap_deref()</code> only in debug builds, and is erased in …","Mutable access to the <code>Deref::Target</code> of a value.","Calls <code>.tap_deref_mut()</code> only in debug builds, and is erased …","Immutably accesses an interior failure value.","Calls <code>.tap_err()</code> only in debug builds, and is erased in …","Mutably accesses an interior failure value.","Calls <code>.tap_err_mut()</code> only in debug builds, and is erased …","Mutable access to a value.","Calls <code>.tap_mut()</code> only in debug builds, and is erased in …","Runs an effect function when the container is empty.","Calls <code>.tap_none()</code> only in debug builds, and is erased in …","Immutably accesses an interior success value.","Calls <code>.tap_ok()</code> only in debug builds, and is erased in …","Mutably accesses an interior success value.","Calls <code>.tap_ok_mut()</code> only in debug builds, and is erased in …","Immutable access to the <code>AsRef&lt;R&gt;</code> view of a value.","Calls <code>.tap_ref()</code> only in debug builds, and is erased in …","Mutable access to the <code>AsMut&lt;R&gt;</code> view of a value.","Calls <code>.tap_ref_mut()</code> only in debug builds, and is erased …","Immutabily accesses an interior value only when it is …","Calls <code>.tap_some()</code> only in debug builds, and is erased in …","Mutably accesses an interor value only when it is present.","Calls <code>.tap_some_mut()</code> only in debug builds, and is erased …","Attempts to convert <code>self</code> into <code>T</code> using <code>TryInto&lt;T&gt;</code>.","The interior type used to indicate a failed construction.","The interior type used to indicate a successful …","Point-free value inspection and modification.","Fallible tapping, conditional on the optional success of …","Optional tapping, conditional on the optional presence of …","The interior type that the container may or may not carry.","Immutable access to a value.","Immutable access to the <code>Borrow&lt;B&gt;</code> of a value.","Calls <code>.tap_borrow()</code> only in debug builds, and is erased in …","Mutable access to the <code>BorrowMut&lt;B&gt;</code> of a value.","Calls <code>.tap_borrow_mut()</code> only in debug builds, and is …","Calls <code>.tap()</code> only in debug builds, and is erased in …","Immutable access to the <code>Deref::Target</code> of a value.","Calls <code>.tap_deref()</code> only in debug builds, and is erased in …","Mutable access to the <code>Deref::Target</code> of a value.","Calls <code>.tap_deref_mut()</code> only in debug builds, and is erased …","Immutably accesses an interior failure value.","Calls <code>.tap_err()</code> only in debug builds, and is erased in …","Mutably accesses an interior failure value.","Calls <code>.tap_err_mut()</code> only in debug builds, and is erased …","Mutable access to a value.","Calls <code>.tap_mut()</code> only in debug builds, and is erased in …","Runs an effect function when the container is empty.","Calls <code>.tap_none()</code> only in debug builds, and is erased in …","Immutably accesses an interior success value.","Calls <code>.tap_ok()</code> only in debug builds, and is erased in …","Mutably accesses an interior success value.","Calls <code>.tap_ok_mut()</code> only in debug builds, and is erased in …","Immutable access to the <code>AsRef&lt;R&gt;</code> view of a value.","Calls <code>.tap_ref()</code> only in debug builds, and is erased in …","Mutable access to the <code>AsMut&lt;R&gt;</code> view of a value.","Calls <code>.tap_ref_mut()</code> only in debug builds, and is erased …","Immutabily accesses an interior value only when it is …","Calls <code>.tap_some()</code> only in debug builds, and is erased in …","Mutably accesses an interor value only when it is present.","Calls <code>.tap_some_mut()</code> only in debug builds, and is erased …"],"i":[0,9,9,0,0,0,0,0,11,0,1,0,3,3,3,3,3,3,3,3,3,0,0,6,6,6,6,6,6,6,6,6,6,9,9,9,9,6,6,11,11,9,9,9,9,6,6,6,6,11,11,11,11,12,0,0,1,12,0,3,3,3,3,3,3,3,3,3,0,9,9,0,0,0,0,0,11,1,3,3,3,3,3,3,3,3,3,6,6,6,6,6,6,6,6,6,6,9,9,9,9,6,6,11,11,9,9,9,9,6,6,6,6,11,11,11,11,12,9,9,0,0,0,11,6,6,6,6,6,6,6,6,6,6,9,9,9,9,6,6,11,11,9,9,9,9,6,6,6,6,11,11,11,11],"f":[0,0,0,0,0,0,0,0,0,0,[1,-1,2],0,[[3,-2],-1,2,[[5,[3],[[4,[-1]]]]]],[[3,-3],-2,2,2,[[5,[-1],[[4,[-2]]]]]],[[3,-3],-2,2,2,[[5,[-1],[[4,[-2]]]]]],[[3,-3],-2,2,2,[[5,[-1],[[4,[-2]]]]]],[[3,-3],-2,2,2,[[5,[-1],[[4,[-2]]]]]],[[3,-3],-2,2,2,[[5,[-1],[[4,[-2]]]]]],[[3,-3],-2,2,2,[[5,[-1],[[4,[-2]]]]]],[[3,-2],-1,2,[[5,[3],[[4,[-1]]]]]],[[3,-2],-1,2,[[5,[3],[[4,[-1]]]]]],0,0,[[6,-1],6,[[5,[6]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-1],6,[[5,[6]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[[9,[],[[7,[-1]],[8,[-2]]]],-3],[[9,[],[[7,[-1]],[8,[-2]]]]],2,2,[[5,[-2]]]],[[[9,[],[[7,[-1]],[8,[-2]]]],-3],[[9,[],[[7,[-1]],[8,[-2]]]]],2,2,[[5,[-2]]]],[[[9,[],[[7,[-1]],[8,[-2]]]],-3],[[9,[],[[7,[-1]],[8,[-2]]]]],2,2,[[5,[-2]]]],[[[9,[],[[7,[-1]],[8,[-2]]]],-3],[[9,[],[[7,[-1]],[8,[-2]]]]],2,2,[[5,[-2]]]],[[6,-1],6,[[5,[6]]]],[[6,-1],6,[[5,[6]]]],[[[11,[],[[10,[-1]]]],-2],[[11,[],[[10,[-1]]]]],2,5],[[[11,[],[[10,[-1]]]],-2],[[11,[],[[10,[-1]]]]],2,5],[[[9,[],[[7,[-1]],[8,[-2]]]],-3],[[9,[],[[7,[-1]],[8,[-2]]]]],2,2,[[5,[-1]]]],[[[9,[],[[7,[-1]],[8,[-2]]]],-3],[[9,[],[[7,[-1]],[8,[-2]]]]],2,2,[[5,[-1]]]],[[[9,[],[[7,[-1]],[8,[-2]]]],-3],[[9,[],[[7,[-1]],[8,[-2]]]]],2,2,[[5,[-1]]]],[[[9,[],[[7,[-1]],[8,[-2]]]],-3],[[9,[],[[7,[-1]],[8,[-2]]]]],2,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[[11,[],[[10,[-1]]]],-2],[[11,[],[[10,[-1]]]]],2,[[5,[-1]]]],[[[11,[],[[10,[-1]]]],-2],[[11,[],[[10,[-1]]]]],2,[[5,[-1]]]],[[[11,[],[[10,[-1]]]],-2],[[11,[],[[10,[-1]]]]],2,[[5,[-1]]]],[[[11,[],[[10,[-1]]]],-2],[[11,[],[[10,[-1]]]]],2,[[5,[-1]]]],[12,[[13,[-1,-2]]],2,[]],0,0,[1,-1,2],[12,[[13,[-1,-2]]],2,[]],0,[[3,-2],-1,2,[[5,[3],[[4,[-1]]]]]],[[3,-3],-2,2,2,[[5,[-1],[[4,[-2]]]]]],[[3,-3],-2,2,2,[[5,[-1],[[4,[-2]]]]]],[[3,-3],-2,2,2,[[5,[-1],[[4,[-2]]]]]],[[3,-3],-2,2,2,[[5,[-1],[[4,[-2]]]]]],[[3,-3],-2,2,2,[[5,[-1],[[4,[-2]]]]]],[[3,-3],-2,2,2,[[5,[-1],[[4,[-2]]]]]],[[3,-2],-1,2,[[5,[3],[[4,[-1]]]]]],[[3,-2],-1,2,[[5,[3],[[4,[-1]]]]]],0,0,0,0,0,0,0,0,0,[1,-1,2],[[3,-2],-1,2,[[5,[3],[[4,[-1]]]]]],[[3,-3],-2,2,2,[[5,[-1],[[4,[-2]]]]]],[[3,-3],-2,2,2,[[5,[-1],[[4,[-2]]]]]],[[3,-3],-2,2,2,[[5,[-1],[[4,[-2]]]]]],[[3,-3],-2,2,2,[[5,[-1],[[4,[-2]]]]]],[[3,-3],-2,2,2,[[5,[-1],[[4,[-2]]]]]],[[3,-3],-2,2,2,[[5,[-1],[[4,[-2]]]]]],[[3,-2],-1,2,[[5,[3],[[4,[-1]]]]]],[[3,-2],-1,2,[[5,[3],[[4,[-1]]]]]],[[6,-1],6,[[5,[6]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-1],6,[[5,[6]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[[9,[],[[7,[-1]],[8,[-2]]]],-3],[[9,[],[[7,[-1]],[8,[-2]]]]],2,2,[[5,[-2]]]],[[[9,[],[[7,[-1]],[8,[-2]]]],-3],[[9,[],[[7,[-1]],[8,[-2]]]]],2,2,[[5,[-2]]]],[[[9,[],[[7,[-1]],[8,[-2]]]],-3],[[9,[],[[7,[-1]],[8,[-2]]]]],2,2,[[5,[-2]]]],[[[9,[],[[7,[-1]],[8,[-2]]]],-3],[[9,[],[[7,[-1]],[8,[-2]]]]],2,2,[[5,[-2]]]],[[6,-1],6,[[5,[6]]]],[[6,-1],6,[[5,[6]]]],[[[11,[],[[10,[-1]]]],-2],[[11,[],[[10,[-1]]]]],2,5],[[[11,[],[[10,[-1]]]],-2],[[11,[],[[10,[-1]]]]],2,5],[[[9,[],[[7,[-1]],[8,[-2]]]],-3],[[9,[],[[7,[-1]],[8,[-2]]]]],2,2,[[5,[-1]]]],[[[9,[],[[7,[-1]],[8,[-2]]]],-3],[[9,[],[[7,[-1]],[8,[-2]]]]],2,2,[[5,[-1]]]],[[[9,[],[[7,[-1]],[8,[-2]]]],-3],[[9,[],[[7,[-1]],[8,[-2]]]]],2,2,[[5,[-1]]]],[[[9,[],[[7,[-1]],[8,[-2]]]],-3],[[9,[],[[7,[-1]],[8,[-2]]]]],2,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[[11,[],[[10,[-1]]]],-2],[[11,[],[[10,[-1]]]]],2,[[5,[-1]]]],[[[11,[],[[10,[-1]]]],-2],[[11,[],[[10,[-1]]]]],2,[[5,[-1]]]],[[[11,[],[[10,[-1]]]],-2],[[11,[],[[10,[-1]]]]],2,[[5,[-1]]]],[[[11,[],[[10,[-1]]]],-2],[[11,[],[[10,[-1]]]]],2,[[5,[-1]]]],[12,[[13,[-1,-2]]],2,[]],0,0,0,0,0,0,[[6,-1],6,[[5,[6]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-1],6,[[5,[6]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[[9,[],[[7,[-1]],[8,[-2]]]],-3],[[9,[],[[7,[-1]],[8,[-2]]]]],2,2,[[5,[-2]]]],[[[9,[],[[7,[-1]],[8,[-2]]]],-3],[[9,[],[[7,[-1]],[8,[-2]]]]],2,2,[[5,[-2]]]],[[[9,[],[[7,[-1]],[8,[-2]]]],-3],[[9,[],[[7,[-1]],[8,[-2]]]]],2,2,[[5,[-2]]]],[[[9,[],[[7,[-1]],[8,[-2]]]],-3],[[9,[],[[7,[-1]],[8,[-2]]]]],2,2,[[5,[-2]]]],[[6,-1],6,[[5,[6]]]],[[6,-1],6,[[5,[6]]]],[[[11,[],[[10,[-1]]]],-2],[[11,[],[[10,[-1]]]]],2,5],[[[11,[],[[10,[-1]]]],-2],[[11,[],[[10,[-1]]]]],2,5],[[[9,[],[[7,[-1]],[8,[-2]]]],-3],[[9,[],[[7,[-1]],[8,[-2]]]]],2,2,[[5,[-1]]]],[[[9,[],[[7,[-1]],[8,[-2]]]],-3],[[9,[],[[7,[-1]],[8,[-2]]]]],2,2,[[5,[-1]]]],[[[9,[],[[7,[-1]],[8,[-2]]]],-3],[[9,[],[[7,[-1]],[8,[-2]]]]],2,2,[[5,[-1]]]],[[[9,[],[[7,[-1]],[8,[-2]]]],-3],[[9,[],[[7,[-1]],[8,[-2]]]]],2,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[6,-2],6,2,[[5,[-1]]]],[[[11,[],[[10,[-1]]]],-2],[[11,[],[[10,[-1]]]]],2,[[5,[-1]]]],[[[11,[],[[10,[-1]]]],-2],[[11,[],[[10,[-1]]]]],2,[[5,[-1]]]],[[[11,[],[[10,[-1]]]],-2],[[11,[],[[10,[-1]]]]],2,[[5,[-1]]]],[[[11,[],[[10,[-1]]]],-2],[[11,[],[[10,[-1]]]]],2,[[5,[-1]]]]],"c":[],"p":[[10,"Conv",0],[10,"Sized",154],[10,"Pipe",0],[17,"Output"],[10,"FnOnce",155],[10,"Tap",0],[17,"Ok"],[17,"Err"],[10,"TapFallible",0],[17,"Val"],[10,"TapOptional",0],[10,"TryConv",0],[6,"Result",156]],"b":[]}],\
["termios",{"doc":"The <code>termios</code> crate provides Rust bindings for the POSIX …","t":"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEFEEEEEEEEEEENNEHHHHHHNNNNNCNNNNCEHEHHHHHHNNNNHHHHHHHHHHHHHCESSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSNNOOOOOINNNNNNIIFNNNN","n":["B0","B110","B1200","B134","B150","B1800","B19200","B200","B2400","B300","B38400","B4800","B50","B600","B75","B9600","BRKINT","CLOCAL","CREAD","CS5","CS6","CS7","CS8","CSIZE","CSTOPB","ECHO","ECHOE","ECHOK","ECHONL","HUPCL","ICANON","ICRNL","IEXTEN","IGNBRK","IGNCR","IGNPAR","INLCR","INPCK","ISIG","ISTRIP","IXANY","IXOFF","IXON","NOFLSH","OCRNL","ONLCR","ONLRET","ONOCR","OPOST","PARENB","PARMRK","PARODD","TAB3","TCIFLUSH","TCIOFF","TCIOFLUSH","TCION","TCOFLUSH","TCOOFF","TCOON","TCSADRAIN","TCSAFLUSH","TCSANOW","TOSTOP","Termios","VEOF","VEOL","VERASE","VINTR","VKILL","VMIN","VQUIT","VSTART","VSTOP","VSUSP","VTIME","borrow","borrow_mut","cc_t","cfgetispeed","cfgetospeed","cfmakeraw","cfsetispeed","cfsetospeed","cfsetspeed","clone","clone_into","deref","deref_mut","eq","ffi","fmt","from","from_fd","into","os","speed_t","tcdrain","tcflag_t","tcflow","tcflush","tcgetattr","tcgetsid","tcsendbreak","tcsetattr","to_owned","try_from","try_into","type_id","cfgetispeed","cfgetospeed","cfmakeraw","cfsetispeed","cfsetospeed","cfsetspeed","tcdrain","tcflow","tcflush","tcgetattr","tcgetsid","tcsendbreak","tcsetattr","linux","target","B0","B1000000","B110","B115200","B1152000","B1200","B134","B150","B1500000","B1800","B19200","B200","B2000000","B230400","B2400","B2500000","B300","B3000000","B3500000","B38400","B4000000","B460800","B4800","B50","B500000","B57600","B576000","B600","B75","B921600","B9600","BRKINT","BS0","BS1","BSDLY","CBAUD","CBAUDEX","CIBAUD","CLOCAL","CMSPAR","CR0","CR1","CR2","CR3","CRDLY","CREAD","CRTSCTS","CS5","CS6","CS7","CS8","CSIZE","CSTOPB","ECHO","ECHOCTL","ECHOE","ECHOK","ECHOKE","ECHONL","ECHOPRT","EXTA","EXTB","EXTPROC","FF0","FF1","FFDLY","FLUSHO","HUPCL","ICANON","ICRNL","IEXTEN","IGNBRK","IGNCR","IGNPAR","IMAXBEL","INLCR","INPCK","ISIG","ISTRIP","IUCLC","IUTF8","IXANY","IXOFF","IXON","NCCS","NL0","NL1","NLDLY","NOFLSH","OCRNL","OFDEL","OFILL","OLCUC","ONLCR","ONLRET","ONOCR","OPOST","PARENB","PARMRK","PARODD","PENDIN","TAB0","TAB1","TAB2","TAB3","TABDLY","TCIFLUSH","TCIOFF","TCIOFLUSH","TCION","TCOFLUSH","TCOOFF","TCOON","TCSADRAIN","TCSAFLUSH","TCSANOW","TOSTOP","VDISCARD","VEOF","VEOL","VEOL2","VERASE","VINTR","VKILL","VLNEXT","VMIN","VQUIT","VREPRINT","VSTART","VSTOP","VSUSP","VSWTC","VT0","VT1","VTDLY","VTIME","VWERASE","XCASE","XTABS","borrow","borrow_mut","c_cc","c_cflag","c_iflag","c_lflag","c_oflag","cc_t","clone","clone_into","eq","fmt","from","into","speed_t","tcflag_t","termios","to_owned","try_from","try_into","type_id"],"q":[[0,"termios"],[109,"termios::ffi"],[122,"termios::os"],[124,"termios::os::linux"],[284,"std::io::error"],[285,"core::fmt"],[286,"core::fmt"],[287,"libc::unix"],[288,"libc::unix"],[289,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unix terminal I/O control structure.","","","","","","","","","","","","","","","Gets the input baud rate stored in a <code>Termios</code> structure.","Gets the output baud rate stored in a <code>Termios</code> structure.","Sets flags to disable all input and output processing.","Sets the input baud rate.","Sets the output baud rate.","Sets input and output baud rates.","","","","","","Unsafe FFI bindings.","","Returns the argument unchanged.","Creates a <code>Termios</code> structure based on the current settings …","Calls <code>U::from(self)</code>.","OS-specific definitions.","","Blocks until all output written to the file descriptor is …","","Suspends or restarts transmission or reception of data.","Discards data waiting in the terminal device’s buffers.","Populates a <code>Termios</code> structure with parameters associated …","Returns the process group ID of the controlling terminal’…","Transmits data to generate a break condition.","Sets a terminal device’s parameterseturns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,0,5,5,5,5,5,5,0,0,0,5,5,5,5],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[1,2],[1,2],[1,3],[[1,2],[[4,[3]]]],[[1,2],[[4,[3]]]],[[1,2],[[4,[3]]]],[1,1],[[-1,-2],3,[],[]],[1,5],[1,5],[[1,1],6],0,[[1,7],8],[-1,-1,[]],[9,[[4,[1]]]],[-1,-2,[],[]],0,0,[9,[[4,[3]]]],0,[[9,10],[[4,[3]]]],[[9,10],[[4,[3]]]],[[9,1],[[4,[3]]]],[9,11],[[9,10],[[4,[3]]]],[[9,10,1],[[4,[3]]]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[5,5],[[-1,-2],3,[],[]],[[5,5],6],[[5,7],8],[-1,-1,[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]]],"c":[],"p":[[5,"Termios",0],[8,"speed_t",124],[1,"tuple"],[8,"Result",284],[5,"termios",124],[1,"bool"],[5,"Formatter",285],[8,"Result",285],[8,"RawFd",286],[8,"c_int",287],[8,"pid_t",287],[6,"Result",288],[5,"TypeId",289]],"b":[]}],\
["toml",{"doc":"A serde-compatible TOML-parsing library","t":"EEFENNNNNNCNNNNNEENNNNNCNCNNNNEEEQNNNCFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNNGFFFFFPFPFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPGPPFPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNHNHHNNNNNNIPPPFFPFEPKPEGPIPFGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNOOOONONNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOO","n":["Deserializer","Serializer","Spanned","Value","borrow","borrow","borrow_mut","clone","clone_into","cmp","de","deserialize","end","eq","fmt","from","from_slice","from_str","get_mut","get_ref","hash","into","into_inner","map","partial_cmp","ser","serialize","span","start","to_owned","to_string","to_string_pretty","to_vec","toml","try_from","try_into","type_id","value","Deserializer","Error","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","custom","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","eq","fmt","fmt","from","from","from_slice","from_str","into","into","into_deserializer","line_col","new","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Entry","IntoIter","Iter","IterMut","Keys","Map","Occupied","OccupiedEntry","Vacant","VacantEntry","Values","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone_into","contains_key","default","deserialize","entry","eq","extend","fmt","from","from","from","from","from","from","from","from","from","from_iter","get","get","get_mut","get_mut","index","index_mut","insert","insert","insert","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_mut","is_empty","iter","iter_mut","key","key","key","keys","len","len","len","len","len","len","new","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","or_insert","or_insert_with","remove","remove","serialize","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","with_capacity","Custom","DateInvalid","Error","KeyNotString","NumberInvalid","Serializer","UnsupportedNone","UnsupportedType","ValueAfterTable","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","custom","eq","fmt","fmt","from","from","into","into","new","pretty","pretty_array","pretty_array_indent","pretty_array_trailing_comma","pretty_string","pretty_string_literal","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","tables_last","to_owned","to_string","to_string","to_string_pretty","to_vec","try_from","try_from","try_into","try_into","type_id","type_id","Array","Array","Boolean","Custom","Date","Datetime","Datetime","DatetimeParseError","Entry","Float","Index","Integer","Map","Offset","String","Table","Table","Time","Value","Z","as_array","as_array_mut","as_bool","as_datetime","as_float","as_integer","as_str","as_table","as_table_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","date","day","deserialize","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","get","get_mut","hour","index","index_mut","into","into","into","into","into","into","into_deserializer","is_array","is_bool","is_datetime","is_float","is_integer","is_str","is_table","minute","month","nanosecond","offset","same_type","second","serialize","serialize","time","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_str","year","hours","minutes"],"q":[[0,"toml"],[38,"toml::de"],[96,"toml::map"],[236,"toml::ser"],[306,"toml::value"],[491,"toml::value::Offset"],[493,"alloc::string"],[494,"core::clone"],[495,"core::cmp"],[496,"core::cmp"],[497,"serde::de"],[498,"serde::de"],[499,"core::fmt"],[500,"core::hash"],[501,"core::cmp"],[502,"serde::ser"],[503,"core::fmt"],[504,"core::convert"],[505,"core::iter::traits::collect"],[506,"core::fmt"],[507,"alloc::vec"],[508,"alloc::collections::btree::map"],[509,"std::collections::hash::map"]],"d":["","","A spanned value, indicating the range at which it is …","","","","","","","","Deserializing TOML into Rust structures.","","Access the end of the span of the contained value.","","","Returns the argument unchanged.","","","Returns a mutable reference to the contained value.","Returns a reference to the contained value.","","Calls <code>U::from(self)</code>.","Consumes the spanned value and returns the contained value.","A map of String to toml::Value.","","Serializing Rust structures into TOML.","","Get the span of the contained value.","Access the start of the span of the contained value.","","","","","Construct a <code>toml::Value</code> from TOML syntax.","","","","Definition of a TOML value","Deserialization implementation for TOML.","Errors that can occur when deserializing a type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Deserializes a byte slice into a type.","Deserializes a string into a type.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Produces a (line, column) pair of the position of the …","Creates a new deserializer which will be deserializing the …","","","","","","","","","A view into a single entry in a map, which may either be …","An owning iterator over a toml::Map’s entries.","An iterator over a toml::Map’s entries.","A mutable iterator over a toml::Map’s entries.","An iterator over a toml::Map’s keys.","Represents a TOML key/value type.","An occupied Entry.","An occupied Entry. It is part of the <code>Entry</code> enum.","A vacant Entry.","A vacant Entry. It is part of the <code>Entry</code> enum.","An iterator over a toml::Map’s values.","","","","","","","","","","","","","","","","","","","Clears the map, removing all values.","","","Returns true if the map contains a value for the specified …","","","Gets the given key’s corresponding entry in the map for …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","","","Inserts a key-value pair into the map.","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry with the <code>OccupiedEntry</code>’s …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Converts the entry into a mutable reference to its value.","Returns true if the map contains no elements.","Gets an iterator over the entries of the map.","Gets a mutable iterator over the entries of the map.","Returns a reference to this entry’s key.","Gets a reference to the key that would be used when …","Gets a reference to the key in the entry.","Gets an iterator over the keys of the map.","Returns the number of elements in the map.","","","","","","Makes a new empty Map.","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Removes a key from the map, returning the value at the key …","Takes the value of the entry out of the map, and returns …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets an iterator over the values of the map.","Makes a new empty Map with the given initial capacity.","A custom error which could be generated when serializing a …","A serialized date was invalid.","Errors that can occur when serializing a type.","The key of all TOML maps must be strings, but …","A serialized number was invalid.","Serialization implementation for TOML.","None was attempted to be serialized, but it’s not …","Indicates that a Rust type was requested to be serialized …","All values in a TOML table must be emitted before further …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new serializer which will emit TOML into the …","Instantiate a “pretty” formatter","Enable or Disable pretty arrays","Set the indent for pretty arrays","Specify whether to use a trailing comma when serializing …","Enable or Disable pretty strings","Enable or Disable Literal strings for pretty strings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convenience function to serialize items in a map in an …","","Serialize the given data structure as a String of TOML.","","Serialize the given data structure as a “pretty” …","Serialize the given data structure as a TOML byte vector.","","","","","","","Type representing a TOML array, payload of the <code>Value::Array</code>…","Represents a TOML array","Represents a TOML boolean","Offset between local time and UTC","A parsed TOML date value","A parsed TOML datetime value","Represents a TOML datetime","Error returned from parsing a <code>Datetime</code> in the <code>FromStr</code> …","","Represents a TOML float","Types that can be used to index a <code>toml::Value</code>","Represents a TOML integer","","A parsed TOML time offset","Represents a TOML string","Type representing a TOML table, payload of the <code>Value::Table</code>…","Represents a TOML table","A parsed TOML time value","Representation of a TOML value.","A suffix which, when applied to a time, denotes a UTC …","Extracts the array value if it is an array.","Extracts the array value if it is an array.","Extracts the boolean value if it is a boolean.","Extracts the datetime value if it is a datetime.","Extracts the float value if it is a float.","Extracts the integer value if it is an integer.","Extracts the string of this value if it is a string.","Extracts the table value if it is a table.","Extracts the table value if it is a table.","","","","","","","","","","","","","","","","","","","","","","","","","Optional date. Required for: <em>Offset Date-Time</em>, <em>Local </em>…","Day: 1 to {28, 29, 30, 31} (based on month/year)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Index into a TOML array or map. A string index can be used …","Mutably index into a TOML array or map. A string index can …","Hour: 0 to 23","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Tests whether this value is an array.","Tests whether this value is a boolean.","Tests whether this value is a datetime.","Tests whether this value is a float.","Tests whether this value is an integer.","Tests if this value is a string.","Tests whether this value is a table.","Minute: 0 to 59","Month: 1 to 12","Nanosecond: 0 to 999_999_999","Optional offset. Required for: <em>Offset Date-Time</em>.","Tests whether this and another value have the same type.","Second: 0 to {58, 59, 60} (based on leap second rules)","","","Optional time. Required for: <em>Offset Date-Time</em>, <em>Local </em>…","","","","","","","","","","","","","Convert a <code>T</code> into <code>toml::Value</code> which is an enum that can …","","","","","","","","Interpret a <code>toml::Value</code> as an instance of type <code>T</code>.","","","","","","","","","","","","Returns a human-readable representation of the type of …","Year: four digits","Hours: -12 to +12","Minutes: 0 to 59"],"i":[0,0,0,0,2,2,2,2,2,2,0,2,2,2,2,2,0,0,2,2,2,2,2,0,2,0,2,2,2,2,0,0,0,0,2,2,2,0,0,0,26,24,26,24,24,24,24,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,24,24,24,26,24,0,0,26,24,26,24,26,24,24,26,24,26,24,26,24,0,0,0,0,0,0,34,0,34,0,0,31,34,40,39,41,42,44,43,45,31,34,40,39,41,42,44,43,45,31,31,31,31,31,31,31,31,31,31,31,34,40,39,41,42,44,43,45,31,31,39,31,39,31,31,31,40,39,31,34,40,39,41,42,44,43,45,31,31,31,41,42,44,43,45,39,31,31,31,34,40,39,31,31,41,42,44,43,45,31,41,42,44,43,45,41,42,44,43,45,34,34,31,39,31,41,42,44,43,45,31,31,34,40,39,41,42,44,43,45,31,34,40,39,41,42,44,43,45,31,34,40,39,41,42,44,43,45,31,31,48,48,0,48,48,0,48,48,48,49,48,49,48,48,48,48,48,48,48,49,48,49,48,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,48,0,48,0,0,49,48,49,48,49,48,0,30,30,66,0,0,30,0,0,30,0,30,0,0,30,0,30,0,0,66,30,30,30,30,30,30,30,30,30,30,61,63,64,65,66,30,61,63,64,65,66,30,61,63,64,65,66,30,61,63,64,65,66,61,64,30,61,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,61,64,65,66,30,30,61,61,63,63,64,65,66,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,61,63,64,65,66,30,61,30,30,65,30,30,30,61,63,64,65,66,30,30,30,30,30,30,30,30,65,64,65,61,30,65,30,61,61,30,61,63,64,65,66,30,61,63,64,65,66,30,30,61,63,64,65,66,30,30,61,63,64,65,66,30,61,63,64,65,66,30,64,70,70],"f":[0,0,0,0,[[[2,[1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[-1]]],[[2,[-1]]],4],[[-1,-2],5,[],[]],[[[2,[-1]],[2,[-1]]],6,7],0,[-1,[[8,[[2,[-2]]]]],9,10],[[[2,[-1]]],11,[]],[[[2,[-1]],[2,[-1]]],12,13],[[[2,[-1]],14],15,16],[-1,-1,[]],0,0,[[[2,[-1]]],-1,[]],[[[2,[-1]]],-1,[]],[[[2,[-1]],-2],5,17,18],[-1,-2,[],[]],[[[2,[-1]]],-1,[]],0,[[[2,[-1]],[2,[-1]]],[[19,[6]]],20],0,[[[2,[-1]],-2],8,21,22],[[[2,[-1]]],[[5,[11,11]]],[]],[[[2,[-1]]],11,[]],[-1,-2,[],[]],0,0,0,0,[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,23,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[24,24],[[-1,-2],5,[],[]],[-1,24,25],[[26,-1],[[8,[24]]],27],[[26,-1],[[8,[-2]]],27,[]],[[26,-1],[[8,[-2]]],27,[]],[[26,-1],[[8,[-2]]],27,[]],[[26,-1],[[8,[-2]]],27,[]],[[26,3,[28,[3]],-1],[[8,[24]]],27],[[26,-1],[[8,[-2]]],27,[]],[[26,-1],[[8,[-2]]],27,[]],[[26,-1],[[8,[-2]]],27,[]],[[26,-1],[[8,[-2]]],27,[]],[[26,-1],[[8,[-2]]],27,[]],[[26,-1],[[8,[-2]]],27,[]],[[26,-1],[[8,[-2]]],27,[]],[[26,-1],[[8,[-2]]],27,[]],[[26,-1],[[8,[-2]]],27,[]],[[26,3,-1],[[8,[-2]]],27,[]],[[26,-1],[[8,[-2]]],27,[]],[[26,-1],[[8,[-2]]],27,[]],[[26,-1],[[8,[-2]]],27,[]],[[26,-1],[[8,[-2]]],27,[]],[[26,3,[28,[3]],-1],[[8,[24]]],27],[[26,11,-1],[[8,[-2]]],27,[]],[[26,3,11,-1],[[8,[-2]]],27,[]],[[26,-1],[[8,[-2]]],27,[]],[[26,-1],[[8,[-2]]],27,[]],[[26,-1],[[8,[-2]]],27,[]],[[26,-1],[[8,[-2]]],27,[]],[[26,-1],[[8,[-2]]],27,[]],[[26,3,-1],[[8,[-2]]],27,[]],[[24,24],12],[[24,14],15],[[24,14],15],[-1,-1,[]],[-1,-1,[]],[[[28,[29]]],[[8,[-1,24]]],10],[3,[[8,[-1,24]]],10],[-1,-2,[],[]],[-1,-2,[],[]],[26,-1,[]],[24,[[19,[[5,[11,11]]]]]],[3,26],[-1,-2,[],[]],[-1,1,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[31,[1,30]]],5],[[[31,[1,30]]],[[31,[1,30]]]],[[-1,-2],5,[],[]],[[[31,[1,30]],-1],12,[7,32,17,33]],[[],[[31,[1,30]]]],[-1,[[8,[[31,[1,30]]]]],9],[[[31,[1,30]],-1],34,[[35,[1]]]],[[[31,[1,30]],[31,[1,30]]],12],[[[31,[1,30]],-1],5,[[37,[],[[36,[[5,[1,30]]]]]]]],[[[31,[1,30]],14],[[8,[5,38]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[31,[1,30]]],[[37,[],[[36,[[5,[1,30]]]]]]]],[[[31,[1,30]],-1],[[19,[30]]],[7,32,17,33]],[39,30],[[[31,[1,30]],-1],[[19,[30]]],[7,32,17,33]],[39,30],[[[31,[1,30]],-1],30,[7,32,17,33]],[[[31,[1,30]],-1],30,[7,32,17,33]],[[[31,[1,30]],1,30],[[19,[30]]]],[[40,30],30],[[39,30],30],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[31,[1,30]]],-1,[]],[[[31,[1,30]]],-1,[]],[[[31,[1,30]]],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[39,30],[[[31,[1,30]]],12],[[[31,[1,30]]],41],[[[31,[1,30]]],42],[34,1],[40,1],[39,1],[[[31,[1,30]]],43],[[[31,[1,30]]],11],[41,11],[42,11],[44,11],[43,11],[45,11],[[],[[31,[1,30]]]],[41,[[19,[-1]]],[]],[42,[[19,[-1]]],[]],[44,[[19,[-1]]],[]],[43,[[19,[-1]]],[]],[45,[[19,[-1]]],[]],[41,[[19,[-1]]],[]],[42,[[19,[-1]]],[]],[44,[[19,[-1]]],[]],[43,[[19,[-1]]],[]],[45,[[19,[-1]]],[]],[[34,30],30],[[34,-1],30,[[47,[],[[46,[30]]]]]],[[[31,[1,30]],-1],[[19,[30]]],[7,32,17,33]],[39,30],[[[31,[1,30]],-1],8,22],[41,[[5,[11,[19,[11]]]]]],[42,[[5,[11,[19,[11]]]]]],[44,[[5,[11,[19,[11]]]]]],[43,[[5,[11,[19,[11]]]]]],[45,[[5,[11,[19,[11]]]]]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[[[31,[1,30]]],45],[11,[[31,[1,30]]]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[48,48],[[-1,-2],5,[],[]],[-1,48,25],[[48,48],12],[[48,14],15],[[48,14],15],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,49],[1,49],[[49,12],49],[[49,11],49],[[49,12],49],[[49,12],49],[[49,12],49],[[49,12],[[8,[5,-1]]],[]],[[49,[28,[29]]],[[8,[5,-1]]],[]],[[49,50],[[8,[5,-1]]],[]],[[49,51],[[8,[5,-1]]],[]],[[49,52],[[8,[5,-1]]],[]],[[49,53],[[8,[5,-1]]],[]],[[49,54],[[8,[5,-1]]],[]],[[49,55],[[8,[5,-1]]],[]],[[49,56],[[8,[5,-1]]],[]],[[49,[19,[11]]],[[8,[-1,-2]]],[],[]],[[49,3,-1],[[8,[5,-2]]],[21,33],[]],[[49,3,57,3,-1],[[8,[5,-2]]],[21,33],[]],[49,[[8,[5,-1]]],[]],[[49,[19,[11]]],[[8,[-1,-2]]],[],[]],[[49,-1],[[8,[5,-2]]],[21,33],[]],[[49,3],[[8,[5,-1]]],[]],[[49,3,11],[[8,[-1,-2]]],[],[]],[[49,3,57,3,11],[[8,[-1,-2]]],[],[]],[[49,11],[[8,[-1,-2]]],[],[]],[[49,3,11],[[8,[-1,-2]]],[],[]],[[49,3,57,3,11],[[8,[-1,-2]]],[],[]],[[49,58],[[8,[5,-1]]],[]],[[49,57],[[8,[5,-1]]],[]],[[49,59],[[8,[5,-1]]],[]],[[49,29],[[8,[5,-1]]],[]],[49,[[8,[5,-1]]],[]],[[49,3],[[8,[5,-1]]],[]],[[49,3,57,3],[[8,[5,-1]]],[]],[[-1,-2],8,[],22],[-1,-2,[],[]],[-1,[[8,[1,48]]],[21,33]],[-1,1,[]],[-1,[[8,[1,48]]],[21,33]],[-1,[[8,[[60,[29]],48]]],[21,33]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[30,[[19,[[60,[30]]]]]],[30,[[19,[[60,[30]]]]]],[30,[[19,[12]]]],[30,[[19,[61]]]],[30,[[19,[52]]]],[30,[[19,[55]]]],[30,[[19,[3]]]],[30,[[19,[62]]]],[30,[[19,[62]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[30,30],[61,61],[63,63],[64,64],[65,65],[66,66],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],0,0,[-1,[[8,[30]]],9],[-1,[[8,[61]]],9],[[30,-1],[[8,[24]]],27],[[30,-1],[[8,[-2]]],27,[]],[[30,-1],[[8,[-2]]],27,[]],[[30,-1],[[8,[-2]]],27,[]],[[30,-1],[[8,[-2]]],27,[]],[[30,3,[28,[3]],-1],[[8,[24]]],27],[[30,-1],[[8,[-2]]],27,[]],[[30,-1],[[8,[-2]]],27,[]],[[30,-1],[[8,[-2]]],27,[]],[[30,-1],[[8,[-2]]],27,[]],[[30,-1],[[8,[-2]]],27,[]],[[30,-1],[[8,[-2]]],27,[]],[[30,-1],[[8,[-2]]],27,[]],[[30,-1],[[8,[-2]]],27,[]],[[30,-1],[[8,[-2]]],27,[]],[[30,3,-1],[[8,[24]]],27],[[30,-1],[[8,[24]]],27],[[30,-1],[[8,[-2]]],27,[]],[[30,-1],[[8,[-2]]],27,[]],[[30,-1],[[8,[-2]]],27,[]],[[30,3,[28,[3]],-1],[[8,[-2]]],27,[]],[[30,11,-1],[[8,[-2]]],27,[]],[[30,3,11,-1],[[8,[-2]]],27,[]],[[30,-1],[[8,[-2]]],27,[]],[[30,-1],[[8,[-2]]],27,[]],[[30,-1],[[8,[-2]]],27,[]],[[30,-1],[[8,[-2]]],27,[]],[[30,-1],[[8,[-2]]],27,[]],[[30,3,-1],[[8,[-2]]],27,[]],[[30,30],12],[[61,61],12],[[64,64],12],[[65,65],12],[[66,66],12],[[30,14],15],[[30,14],15],[[61,14],15],[[61,14],15],[[63,14],15],[[63,14],15],[[64,14],15],[[65,14],15],[[66,14],15],[-1,-1,[]],[3,30],[56,30],[[[67,[-1,-2]]],30,[[35,[1]]],[[35,[30]]]],[51,30],[[[60,[-1]]],30,[[35,[30]]]],[55,30],[54,30],[57,30],[62,30],[12,30],[61,30],[29,30],[52,30],[[[68,[-1,-2]]],30,[[35,[1]],17,32],[[35,[30]]]],[1,30],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[3,[[8,[30,-1]]],[]],[3,[[8,[61,63]]]],[[30,-1],[[19,[30]]],69],[[30,-1],[[19,[30]]],69],0,[[30,-1],30,69],[[30,-1],30,69],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[30,30],[30,12],[30,12],[30,12],[30,12],[30,12],[30,12],[30,12],0,0,0,0,[[30,30],12],0,[[30,-1],8,22],[[61,-1],8,22],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,[[8,[30,48]]],21],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[30,[[8,[-1,24]]],10],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[30,3],0,0,0],"c":[],"p":[[5,"String",493],[5,"Spanned",0],[1,"str"],[10,"Clone",494],[1,"tuple"],[6,"Ordering",495],[10,"Ord",495],[6,"Result",496],[10,"Deserializer",497],[10,"Deserialize",497],[1,"usize"],[1,"bool"],[10,"PartialEq",495],[5,"Formatter",498],[8,"Result",498],[10,"Debug",498],[10,"Hash",499],[10,"Hasher",499],[6,"Option",500],[10,"PartialOrd",495],[10,"Serialize",501],[10,"Serializer",501],[5,"TypeId",502],[5,"Error",38],[10,"Display",498],[5,"Deserializer",38],[10,"Visitor",497],[1,"slice"],[1,"u8"],[6,"Value",306],[5,"Map",96],[10,"Eq",495],[10,"Sized",503],[6,"Entry",96],[10,"Into",504],[17,"Item"],[10,"IntoIterator",505],[5,"Error",498],[5,"OccupiedEntry",96],[5,"VacantEntry",96],[5,"Iter",96],[5,"IterMut",96],[5,"Keys",96],[5,"IntoIter",96],[5,"Values",96],[17,"Output"],[10,"FnOnce",506],[6,"Error",236],[5,"Serializer",236],[1,"char"],[1,"f32"],[1,"f64"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"i8"],[1,"u32"],[1,"u16"],[1,"u64"],[5,"Vec",507],[5,"Datetime",306],[8,"Table",306],[5,"DatetimeParseError",306],[5,"Date",306],[5,"Time",306],[6,"Offset",306],[5,"BTreeMap",508],[5,"HashMap",509],[10,"Index",306],[15,"Custom",491]],"b":[[77,"impl-Display-for-Error"],[78,"impl-Debug-for-Error"],[163,"impl-IntoIterator-for-Map%3CString,+Value%3E"],[164,"impl-IntoIterator-for-%26mut+Map%3CString,+Value%3E"],[165,"impl-IntoIterator-for-%26Map%3CString,+Value%3E"],[253,"impl-Debug-for-Error"],[254,"impl-Display-for-Error"],[397,"impl-Display-for-Value"],[398,"impl-Debug-for-Value"],[399,"impl-Debug-for-Datetime"],[400,"impl-Display-for-Datetime"],[401,"impl-Debug-for-DatetimeParseError"],[402,"impl-Display-for-DatetimeParseError"],[407,"impl-From%3C%26str%3E-for-Value"],[408,"impl-From%3Ci8%3E-for-Value"],[409,"impl-From%3CBTreeMap%3CS,+V%3E%3E-for-Value"],[410,"impl-From%3Cf32%3E-for-Value"],[411,"impl-From%3CVec%3CV%3E%3E-for-Value"],[412,"impl-From%3Ci64%3E-for-Value"],[413,"impl-From%3Ci32%3E-for-Value"],[414,"impl-From%3Cu32%3E-for-Value"],[415,"impl-From%3CMap%3CString,+Value%3E%3E-for-Value"],[416,"impl-From%3Cbool%3E-for-Value"],[417,"impl-From%3CDatetime%3E-for-Value"],[418,"impl-From%3Cu8%3E-for-Value"],[419,"impl-From%3Cf64%3E-for-Value"],[420,"impl-From%3CHashMap%3CS,+V%3E%3E-for-Value"],[421,"impl-From%3CString%3E-for-Value"]]}],\
["unicode_ident",{"doc":"github crates-io docs-rs","t":"HH","n":["is_xid_continue","is_xid_start"],"q":[[0,"unicode_ident"]],"d":["",""],"i":[0,0],"f":[[1,2],[1,2]],"c":[],"p":[[1,"char"],[1,"bool"]],"b":[]}],\
["void",{"doc":"Void","t":"KKGNNNNNNNNNNNNNNNNNHMM","n":["ResultVoidErrExt","ResultVoidExt","Void","borrow","borrow_mut","cause","clone","clone_into","description","eq","fmt","fmt","from","into","partial_cmp","to_owned","to_string","try_from","try_into","type_id","unreachable","void_unwrap","void_unwrap_err"],"q":[[0,"void"],[23,"core::error"],[24,"core::option"],[25,"core::fmt"],[26,"core::fmt"],[27,"alloc::string"],[28,"core::result"],[29,"core::any"]],"d":["Extensions to <code>Result&lt;Void, E&gt;</code>","Extensions to <code>Result&lt;T, Void&gt;</code>","The empty type for cases which can’t occur.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","A safe version of <code>intrinsincs::unreachable</code>.","Get the value out of a wrapper.","Get the error out of a wrapper."],"i":[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,14,15],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,[[3,[2]]]],[1,1],[[-1,-2],4,[],[]],[1,5],[[1,-1],6,[]],[[1,7],8],[[1,7],8],[-1,-1,[]],[-1,-2,[],[]],[[1,-1],[[3,[9]]],[]],[-1,-2,[],[]],[-1,10,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[1,13],[14,-1,[]],[15,-1,[]]],"c":[],"p":[[6,"Void",0],[10,"Error",23],[6,"Option",24],[1,"tuple"],[1,"str"],[1,"bool"],[5,"Formatter",25],[8,"Result",25],[6,"Ordering",26],[5,"String",27],[6,"Result",28],[5,"TypeId",29],[1,"never"],[10,"ResultVoidExt",0],[10,"ResultVoidErrExt",0]],"b":[[10,"impl-Debug-for-Void"],[11,"impl-Display-for-Void"]]}],\
["wyz",{"doc":"<code>wyz</code> – myrrlyn’s wyzyrdly library","t":"CCCCFKNNNNNNNNNNNNNNNNNNFTFTRFFKFTTRIKTKNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNFFKFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKMMM","n":["bidi","comu","fmt","range","Bidi","BidiIterator","bidi","borrow","borrow_mut","count","from","into","into_iter","last","len","new","next","next_back","nth","nth_back","size_hint","try_from","try_into","type_id","Address","CONTAINS_MUTABILITY","Const","DANGLING","ElementAddr","Frozen","Mut","Mutability","NullPtrError","PEANO_NUMBER","RENDER","Ref","Reference","Referential","SELF","SliceReferential","add","align_offset","as_mut","as_ref","assert_mut","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","copy_from","copy_from_nonoverlapping","copy_to","copy_to_nonoverlapping","default","default","default","default","drop_in_place","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","freeze","freeze","from","from","from","from","from","from","from","from_raw_parts","from_raw_parts","from_raw_parts","from_raw_parts","from_ref","from_ref","from_ref","from_ref","hash","hash","hash","hash","hash","immut","into","into","into","into","into","into_inner","new","offset","offset_from","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","read","read_unaligned","read_volatile","replace","sub","swap","thaw","thaw","to_const","to_mut","to_ref","to_ref","to_ref","to_ref","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","wrapping_add","wrapping_offset","wrapping_sub","write","write_unaligned","write_volatile","FmtBinary","FmtDisplay","FmtForward","FmtList","FmtLowerExp","FmtLowerHex","FmtOctal","FmtPointer","FmtUpperExp","FmtUpperHex","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt_binary","fmt_display","fmt_list","fmt_lower_exp","fmt_lower_hex","fmt_octal","fmt_pointer","fmt_upper_exp","fmt_upper_hex","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","RangeExt","intersection","normalize","union"],"q":[[0,"wyz"],[4,"wyz::bidi"],[24,"wyz::comu"],[161,"wyz::fmt"],[359,"wyz::range"],[363,"core::iter::traits::double_ended"],[364,"core::option"],[365,"core::iter::traits::exact_size"],[366,"core::iter::traits::collect"],[367,"core::result"],[368,"core::any"],[369,"core::marker"],[370,"core::clone"],[371,"core::cmp"],[372,"core::cmp"],[373,"core::cmp"],[374,"core::fmt"],[375,"core::hash"],[376,"core::hash"],[377,"core::cmp"],[378,"core::convert"]],"d":["A bidirectional iterator that only checks its direction …","Trait-level <code>co</code>nst/<code>mu</code>table tracking.","Format forwarding","Range utilities.","An iterator that conditionally reverses itself upon …","Extension trait that provides <code>.bidi()</code> for all double-ended …","Conditionally reverses the direction of iteration.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Applies the <code>Bidi</code> adapter to a double-ended iterator and …","","","","","","","","","A generic non-null pointer with type-system mutability …","Marks whether this type contains mutability permissions …","A basic <code>const</code> marker.","The dangling pointer.","The type of the element pointer.","A frozen wrapper over some other <code>Mutability</code> marker.","A basic <code>mut</code> marker.","Generalized mutability permissions.","<code>Address</code> cannot be constructed over null pointers.","Counts the layers of <code>Frozen&lt;&gt;</code> wrapping around a base <code>Const</code> …","One of <code>*const</code> or <code>*mut</code>.","The created reference type. Must be one of <code>&amp;T</code> or <code>&amp;mut T</code>.","A generically-mutable reference.","Allows an <code>Address</code> to produce an ordinary reference.","Allow instances to be constructed generically.","Allows an <code>Address&lt;M, [T]&gt;</code> to produce an ordinary slice …","Applies <code>&lt;*T&gt;::add</code>.","Applies <code>&lt;*T&gt;::align_offset</code>.","Applies <code>&lt;*T&gt;::as_mut</code>.","Applies <code>&lt;*T&gt;::as_ref</code>.","Force an <code>Address&lt;Const&gt;</code> to be <code>Address&lt;Mut&gt;</code>.","","","","","","","","","","","Applies <code>&lt;*T&gt;::cast</code>.","","","","","","","","","","","Applies <code>&lt;*T&gt;::copy_from</code>.","Applies <code>&lt;*T&gt;::copy_from_nonoverlapping</code>.","Applies <code>&lt;*T&gt;::copy_to</code>.","Applies <code>&lt;*T&gt;::copy_to_nonoverlapping</code>.","","","","","Applies <code>&lt;*T&gt;::drop_in_place</code>.","","","","","","","","","","","","","Freeze this type, wrapping it in a <code>const</code> marker that may …","Freezes the <code>Address</code> so that it is read-only.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs an ordinary slice reference from a base-address …","","","","Converts a reference back into an <code>Address</code>.","","","","","","","","","Permanently converts an <code>Address&lt;_&gt;</code> into an <code>Address&lt;Const&gt;</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Removes the <code>Address</code> type marker, returning the original …","Constructs a new <code>Address</code> over some pointer value.","Applies <code>&lt;*T&gt;::offset</code>.","Applies <code>&lt;*T&gt;::offset_from</code>.","","","","","","Applies <code>&lt;*T&gt;::read</code>.","Applies <code>&lt;*T&gt;::read_unaligned</code>.","Applies <code>&lt;*T&gt;::read_volatile</code>.","Applies <code>&lt;*T&gt;::replace</code>.","Applies <code>&lt;*T&gt;::sub</code>.","Applies <code>&lt;*T&gt;::swap</code>.","Thaw a previously-frozen type, removing its <code>Frozen</code> marker …","Thaws the <code>Address</code> to its original mutability permission.","Gets the address as a read-only pointer.","Gets the address as a write-capable pointer.","Converts the <code>Address</code> to a reference.","","","","","","","","","","","","","","","","","","","","","Applies <code>&lt;*T&gt;::wrapping_add</code>.","Applies <code>&lt;*T&gt;::wrapping_offset</code>.","Applies <code>&lt;*T&gt;::wrapping_sub</code>.","Applies <code>&lt;*T&gt;::write</code>.","Applies <code>&lt;*T&gt;::write_unaligned</code>.","Applies <code>&lt;*T&gt;::write_volatile</code>.","Forwards a type’s <code>Binary</code> formatting implementation to …","Forwards a type’s <code>Display</code> formatting implementation to …","Wraps any value with a format-forward to <code>Debug</code>.","Renders each element of a stream into a list.","Forwards a type’s <code>LowerExp</code> formatting implementation to …","Forwards a type’s <code>LowerHex</code> formatting implementation to …","Forwards a type’s <code>Octal</code> formatting implementation to …","Forwards a type’s <code>Pointer</code> formatting implementation to …","Forwards a type’s <code>UpperExp</code> formatting implementation to …","Forwards a type’s <code>UpperHex</code> formatting implementation to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Causes <code>self</code> to use its <code>Binary</code> implementation when <code>Debug</code>…","Causes <code>self</code> to use its <code>Display</code> implementation when <code>Debug</code>…","Formats each item in a sequence.","Causes <code>self</code> to use its <code>LowerExp</code> implementation when <code>Debug</code>…","Causes <code>self</code> to use its <code>LowerHex</code> implementation when <code>Debug</code>…","Causes <code>self</code> to use its <code>Octal</code> implementation when <code>Debug</code>…","Causes <code>self</code> to use its <code>Pointer</code> implementation when <code>Debug</code>…","Causes <code>self</code> to use its <code>UpperExp</code> implementation when <code>Debug</code>…","Causes <code>self</code> to use its <code>UpperHex</code> implementation when <code>Debug</code>…","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extension methods for working with various range types.","Finds the intersection between two range-likes. The …","Normalizes a range-like type to a canonical half-open <code>Range</code>…","Finds the union between two range-likes. The produced <code>Range</code>…"],"i":[0,0,0,0,0,0,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,14,0,13,57,0,0,0,0,14,14,29,0,0,14,0,13,13,13,13,13,13,17,15,18,20,13,17,15,18,20,13,13,17,15,18,20,13,17,15,18,20,13,13,13,13,17,15,18,20,13,13,17,15,18,20,13,13,17,15,18,20,20,14,13,13,13,13,17,15,18,20,57,13,13,13,29,13,13,13,13,17,15,18,20,13,13,17,15,18,20,13,13,13,13,13,17,15,18,20,13,13,13,13,13,13,14,13,13,13,29,13,13,13,13,13,13,17,15,18,20,13,17,15,18,20,13,17,15,18,20,13,13,13,13,13,13,0,0,0,0,0,0,0,0,0,0,36,38,40,41,43,45,47,49,51,36,38,40,41,43,45,47,49,51,36,38,40,41,43,45,47,49,51,36,38,40,41,43,45,47,49,51,36,38,40,41,43,45,47,49,51,36,38,40,41,43,45,47,49,51,36,36,36,36,36,36,36,36,36,38,38,38,38,38,38,38,38,38,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,43,43,43,43,43,43,43,43,43,45,45,45,45,45,45,45,45,45,47,47,47,47,47,47,47,47,47,49,49,49,49,49,49,49,49,49,51,51,51,51,51,51,51,51,51,53,53,53,53,53,53,53,53,53,36,38,40,41,43,45,47,49,51,36,38,40,41,43,45,47,49,51,36,38,40,41,43,45,47,49,51,36,38,40,41,43,45,47,49,51,36,38,40,41,43,45,47,49,51,0,54,54,54],"f":[0,0,0,0,0,0,[[1,2],[[3,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[-1]]],4,5],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[-1]]],[[6,[-2]]],5,[]],[[[3,[-1]]],4,[5,7]],[[-2,2],[[3,[-1]]],5,[[9,[],[[8,[-1]]]]]],[[[3,[-1]]],[[6,[-2]]],5,[]],[[[3,[-1]]],[[6,[-2]]],5,[]],[[[3,[-1]],4],[[6,[-2]]],5,[]],[[[3,[-1]],4],[[6,[-2]]],5,[]],[[[3,[-1]]],[[10,[4,[6,[4]]]]],5],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[13,[-1,-2]],4],[[13,[-1,-2]]],14,[]],[[[13,[-1,-2]],4],4,14,[]],[[[13,[15,-1]]],[[6,[-1]]],16],[[[13,[-1,-2]]],[[6,[-2]]],14,16],[[[13,[-1,-2]]],[[13,[15,-2]]],14,16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[13,[-1,-2]]],[[13,[-1,-3]]],14,[],[]],[[[13,[-1,-2]]],[[13,[-1,-2]]],14,16],[17,17],[15,15],[[[18,[-1]]],[[18,[-1]]],[14,19]],[20,20],[[[13,[-1,-2]],[13,[-1,-2]]],21,14,[]],[[17,17],21],[[15,15],21],[[[18,[-1]],[18,[-1]]],21,[14,22]],[[20,20],21],[[[13,[15,-1]],[13,[-2,-1]],4],10,[],14],[[[13,[15,-1]],[13,[-2,-1]],4],10,[],14],[[[13,[-1,-2]],[13,[15,-2]],4],10,14,[]],[[[13,[-1,-2]],[13,[15,-2]],4],10,14,[]],[[],17],[[],15],[[],[[18,[-1]]],[14,23]],[[],20],[[[13,[15,-1]]],10,16],[[[13,[-1,-2]],[13,[-3,-4]]],2,14,[],14,[]],[[17,17],2],[[15,15],2],[[[18,[-1]],[18,[-1]]],2,[14,24]],[[20,20],2],[[[13,[-1,-2]],25],26,14,16],[[[13,[-1,-2]],25],26,14,16],[[17,25],26],[[15,25],26],[[[18,[-1]],25],26,[14,27]],[[20,25],26],[[20,25],26],[14,[[18,[14]]]],[[[13,[-1,-2]]],[[13,[[18,[-1]],-2]]],14,16],[-1,-1,[]],[-1,[[13,[17,-1]]],16],[-1,[[13,[15,-1]]],16],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,4],-2,[],[]],[[-1,4],-2,[],[]],[[-1,4],-2,[],[]],[[-1,4],-2,[],[]],[-1,[[29,[],[[28,[-1]]]]],30],[-1,[[13,[15,-2]]],[],16],[-1,[[13,[17,-2]]],[],16],[-1,[[13,[[18,[-2]],-3]]],[],14,16],[[[13,[-1,-2]],-3],10,14,16,31],[[17,-1],10,31],[[15,-1],10,31],[[[18,[-1]],-2],10,[14,32],31],[[20,-1],10,31],[[[13,[-1,-2]]],[[13,[17,-2]]],14,16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[13,[-1,-2]]],[[33,[-2]]],14,16],[[[33,[-1]]],[[13,[-2,-1]]],16,14],[[[13,[-1,-2]],34],[[13,[-1,-2]]],14,[]],[[[13,[-1,-2]],[13,[-1,-2]]],34,14,[]],[[[13,[-1,-2]],[13,[-3,-4]]],[[6,[21]]],14,[],14,[]],[[17,17],[[6,[21]]]],[[15,15],[[6,[21]]]],[[[18,[-1]],[18,[-1]]],[[6,[21]]],[14,35]],[[20,20],[[6,[21]]]],[[[13,[-1,-2]]],-2,14,[]],[[[13,[-1,-2]]],-2,14,[]],[[[13,[-1,-2]]],-2,14,[]],[[[13,[15,-1]],-1],-1,[]],[[[13,[-1,-2]],4],[[13,[-1,-2]]],14,[]],[[[13,[15,-1]],[13,[15,-1]]],10,[]],[[[18,[14]]],14],[[[13,[[18,[-1]],-2]]],[[13,[-1,-2]]],14,16],[[[13,[-1,-2]]],[],14,16],[[[13,[15,-1]]],[],[]],[[[29,[],[[28,[-1]]]]],-1,30],[[[13,[15,-1]]],-2,16,[]],[[[13,[17,-1]]],-2,16,[]],[[[13,[[18,[-1]],-2]]],-3,14,16,[]],[[],[[11,[[13,[15,-1]],-2]]],16,[]],[-1,[[11,[-2]]],[],[]],[[],[[11,[[13,[17,-1]],-2]]],16,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[[[13,[-1,-2]],4],[[13,[-1,-2]]],14,[]],[[[13,[-1,-2]],34],[[13,[-1,-2]]],14,[]],[[[13,[-1,-2]],4],[[13,[-1,-2]]],14,[]],[[[13,[15,-1]],-1],10,[]],[[[13,[15,-1]],-1],10,[]],[[[13,[15,-1]],-1],10,[]],0,0,0,0,0,0,0,0,0,0,[[[36,[-1]]],-1,37],[[[38,[-1]]],-1,39],[[[40,[-1]]],-1,[]],[[[41,[-1]]],-1,42],[[[43,[-1]]],-1,44],[[[45,[-1]]],-1,46],[[[47,[-1]]],-1,48],[[[49,[-1]]],-1,50],[[[51,[-1]]],-1,52],[[[36,[-1]]],-1,37],[[[38,[-1]]],-1,39],[[[40,[-1]]],-1,[]],[[[41,[-1]]],-1,42],[[[43,[-1]]],-1,44],[[[45,[-1]]],-1,46],[[[47,[-1]]],-1,48],[[[49,[-1]]],-1,50],[[[51,[-1]]],-1,52],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[36,[-1]]],-2,37,[]],[[[38,[-1]]],-2,39,[]],[[[40,[-1]]],-2,[],[]],[[[41,[-1]]],-2,42,[]],[[[43,[-1]]],-2,44,[]],[[[45,[-1]]],-2,46,[]],[[[47,[-1]]],-2,48,[]],[[[49,[-1]]],-2,50,[]],[[[51,[-1]]],-2,52,[]],[[[36,[-1]]],-2,37,[]],[[[38,[-1]]],-2,39,[]],[[[40,[-1]]],-2,[],[]],[[[41,[-1]]],-2,42,[]],[[[43,[-1]]],-2,44,[]],[[[45,[-1]]],-2,46,[]],[[[47,[-1]]],-2,48,[]],[[[49,[-1]]],-2,50,[]],[[[51,[-1]]],-2,52,[]],[[[36,[-1]],25],26,[37,37]],[[[36,[-1]],25],26,[37,50]],[[[36,[-1]],25],26,37],[[[36,[-1]],25],26,[37,42]],[[[36,[-1]],25],26,[37,44]],[[[36,[-1]],25],26,[37,48]],[[[36,[-1]],25],26,[37,39]],[[[36,[-1]],25],26,[37,52]],[[[36,[-1]],25],26,[37,46]],[[[38,[-1]],25],26,[39,44]],[[[38,[-1]],25],26,[39,37]],[[[38,[-1]],25],26,[39,46]],[[[38,[-1]],25],26,[39,48]],[[[38,[-1]],25],26,[39,50]],[[[38,[-1]],25],26,39],[[[38,[-1]],25],26,[39,52]],[[[38,[-1]],25],26,[39,39]],[[[38,[-1]],25],26,[39,42]],[[[40,[-1]],25],26,[]],[[[40,[-1]],25],26,[]],[[[40,[-1]],25],26,[]],[[[40,[-1]],25],26,[]],[[[40,[-1]],25],26,[]],[[[40,[-1]],25],26,[]],[[[40,[-1]],25],26,[]],[[[40,[-1]],25],26,[]],[[[41,[-1]],25],26,[42,37]],[[[41,[-1]],25],26,[42,48]],[[[41,[-1]],25],26,42],[[[41,[-1]],25],26,[42,44]],[[[41,[-1]],25],26,[42,50]],[[[41,[-1]],25],26,[42,42]],[[[41,[-1]],25],26,[42,52]],[[[41,[-1]],25],26,[42,46]],[[[41,[-1]],25],26,[42,39]],[[[43,[-1]],25],26,[44,50]],[[[43,[-1]],25],26,[44,42]],[[[43,[-1]],25],26,[44,44]],[[[43,[-1]],25],26,[44,37]],[[[43,[-1]],25],26,[44,48]],[[[43,[-1]],25],26,[44,46]],[[[43,[-1]],25],26,[44,39]],[[[43,[-1]],25],26,[44,52]],[[[43,[-1]],25],26,44],[[[45,[-1]],25],26,46],[[[45,[-1]],25],26,[46,46]],[[[45,[-1]],25],26,[46,37]],[[[45,[-1]],25],26,[46,42]],[[[45,[-1]],25],26,[46,44]],[[[45,[-1]],25],26,[46,48]],[[[45,[-1]],25],26,[46,52]],[[[45,[-1]],25],26,[46,50]],[[[45,[-1]],25],26,[46,39]],[[[47,[-1]],25],26,[48,46]],[[[47,[-1]],25],26,[48,37]],[[[47,[-1]],25],26,[48,39]],[[[47,[-1]],25],26,[48,42]],[[[47,[-1]],25],26,[48,48]],[[[47,[-1]],25],26,48],[[[47,[-1]],25],26,[48,50]],[[[47,[-1]],25],26,[48,44]],[[[47,[-1]],25],26,[48,52]],[[[49,[-1]],25],26,[50,39]],[[[49,[-1]],25],26,[50,50]],[[[49,[-1]],25],26,[50,52]],[[[49,[-1]],25],26,50],[[[49,[-1]],25],26,[50,37]],[[[49,[-1]],25],26,[50,46]],[[[49,[-1]],25],26,[50,44]],[[[49,[-1]],25],26,[50,48]],[[[49,[-1]],25],26,[50,42]],[[[51,[-1]],25],26,[52,44]],[[[51,[-1]],25],26,[52,46]],[[[51,[-1]],25],26,[52,37]],[[[51,[-1]],25],26,[52,39]],[[[51,[-1]],25],26,[52,42]],[[[51,[-1]],25],26,[52,50]],[[[51,[-1]],25],26,[52,52]],[[[51,[-1]],25],26,[52,48]],[[[51,[-1]],25],26,52],[53,[[36,[53]]]],[53,[[38,[53]]]],[53,[[40,[53]]]],[53,[[41,[53]]]],[53,[[43,[53]]]],[53,[[45,[53]]]],[53,[[47,[53]]]],[53,[[49,[53]]]],[53,[[51,[53]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],0,[[54,-2],[[6,[[55,[-1]]]]],22,[[54,[-1]]]],[[54,-2,-3],[[55,[-1]]],22,[[56,[[6,[-1]]]]],[[56,[[6,[-1]]]]]],[[54,-2],[[6,[[55,[-1]]]]],22,[[54,[-1]]]]],"c":[],"p":[[10,"BidiIterator",4],[1,"bool"],[5,"Bidi",4],[1,"usize"],[10,"DoubleEndedIterator",363],[6,"Option",364],[10,"ExactSizeIterator",365],[17,"IntoIter"],[10,"IntoIterator",366],[1,"tuple"],[6,"Result",367],[5,"TypeId",368],[5,"Address",24],[10,"Mutability",24],[5,"Mut",24],[10,"Sized",369],[5,"Const",24],[5,"Frozen",24],[10,"Clone",370],[5,"NullPtrError",24],[6,"Ordering",371],[10,"Ord",371],[10,"Default",372],[10,"PartialEq",371],[5,"Formatter",373],[8,"Result",373],[10,"Debug",373],[17,"Ref"],[10,"Referential",24],[10,"Deref",374],[10,"Hasher",375],[10,"Hash",375],[5,"NonNull",376],[1,"isize"],[10,"PartialOrd",371],[5,"FmtBinary",161],[10,"Binary",373],[5,"FmtDisplay",161],[10,"Display",373],[5,"FmtList",161],[5,"FmtLowerExp",161],[10,"LowerExp",373],[5,"FmtLowerHex",161],[10,"LowerHex",373],[5,"FmtOctal",161],[10,"Octal",373],[5,"FmtPointer",161],[10,"Pointer",373],[5,"FmtUpperExp",161],[10,"UpperExp",373],[5,"FmtUpperHex",161],[10,"UpperHex",373],[10,"FmtForward",161],[10,"RangeExt",359],[5,"Range",377],[10,"Into",378],[10,"SliceReferential",24]],"b":[[80,"impl-Debug-for-Address%3CM,+T%3E"],[81,"impl-Pointer-for-Address%3CM,+T%3E"],[85,"impl-Debug-for-NullPtrError"],[86,"impl-Display-for-NullPtrError"],[90,"impl-From%3C%26T%3E-for-Address%3CConst,+T%3E"],[91,"impl-From%3C%26mut+T%3E-for-Address%3CMut,+T%3E"],[97,"impl-SliceReferential%3C\'a%3E-for-Address%3CFrozen%3CM%3E,+%5BT%5D%3E"],[98,"impl-SliceReferential%3C\'a%3E-for-Address%3CConst,+%5BT%5D%3E"],[99,"impl-SliceReferential%3C\'a%3E-for-Address%3CMut,+%5BT%5D%3E"],[101,"impl-Referential%3C\'a%3E-for-Address%3CMut,+T%3E"],[102,"impl-Referential%3C\'a%3E-for-Address%3CConst,+T%3E"],[103,"impl-Referential%3C\'a%3E-for-Address%3CFrozen%3CM%3E,+T%3E"],[135,"impl-Referential%3C\'a%3E-for-Address%3CMut,+T%3E"],[136,"impl-Referential%3C\'a%3E-for-Address%3CConst,+T%3E"],[137,"impl-Referential%3C\'a%3E-for-Address%3CFrozen%3CM%3E,+T%3E"],[138,"impl-TryFrom%3C*mut+T%3E-for-Address%3CMut,+T%3E"],[140,"impl-TryFrom%3C*const+T%3E-for-Address%3CConst,+T%3E"],[225,"impl-Binary-for-FmtBinary%3CT%3E"],[226,"impl-UpperExp-for-FmtBinary%3CT%3E"],[227,"impl-Debug-for-FmtBinary%3CT%3E"],[228,"impl-LowerExp-for-FmtBinary%3CT%3E"],[229,"impl-LowerHex-for-FmtBinary%3CT%3E"],[230,"impl-Pointer-for-FmtBinary%3CT%3E"],[231,"impl-Display-for-FmtBinary%3CT%3E"],[232,"impl-UpperHex-for-FmtBinary%3CT%3E"],[233,"impl-Octal-for-FmtBinary%3CT%3E"],[234,"impl-LowerHex-for-FmtDisplay%3CT%3E"],[235,"impl-Binary-for-FmtDisplay%3CT%3E"],[236,"impl-Octal-for-FmtDisplay%3CT%3E"],[237,"impl-Pointer-for-FmtDisplay%3CT%3E"],[238,"impl-UpperExp-for-FmtDisplay%3CT%3E"],[239,"impl-Debug-for-FmtDisplay%3CT%3E"],[240,"impl-UpperHex-for-FmtDisplay%3CT%3E"],[241,"impl-Display-for-FmtDisplay%3CT%3E"],[242,"impl-LowerExp-for-FmtDisplay%3CT%3E"],[243,"impl-UpperExp-for-FmtList%3CT%3E"],[244,"impl-UpperHex-for-FmtList%3CT%3E"],[245,"impl-LowerExp-for-FmtList%3CT%3E"],[246,"impl-Octal-for-FmtList%3CT%3E"],[247,"impl-Debug-for-FmtList%3CT%3E"],[248,"impl-Display-for-FmtList%3CT%3E"],[249,"impl-Binary-for-FmtList%3CT%3E"],[250,"impl-LowerHex-for-FmtList%3CT%3E"],[251,"impl-Binary-for-FmtLowerExp%3CT%3E"],[252,"impl-Pointer-for-FmtLowerExp%3CT%3E"],[253,"impl-Debug-for-FmtLowerExp%3CT%3E"],[254,"impl-LowerHex-for-FmtLowerExp%3CT%3E"],[255,"impl-UpperExp-for-FmtLowerExp%3CT%3E"],[256,"impl-LowerExp-for-FmtLowerExp%3CT%3E"],[257,"impl-UpperHex-for-FmtLowerExp%3CT%3E"],[258,"impl-Octal-for-FmtLowerExp%3CT%3E"],[259,"impl-Display-for-FmtLowerExp%3CT%3E"],[260,"impl-UpperExp-for-FmtLowerHex%3CT%3E"],[261,"impl-LowerExp-for-FmtLowerHex%3CT%3E"],[262,"impl-LowerHex-for-FmtLowerHex%3CT%3E"],[263,"impl-Binary-for-FmtLowerHex%3CT%3E"],[264,"impl-Pointer-for-FmtLowerHex%3CT%3E"],[265,"impl-Octal-for-FmtLowerHex%3CT%3E"],[266,"impl-Display-for-FmtLowerHex%3CT%3E"],[267,"impl-UpperHex-for-FmtLowerHex%3CT%3E"],[268,"impl-Debug-for-FmtLowerHex%3CT%3E"],[269,"impl-Debug-for-FmtOctal%3CT%3E"],[270,"impl-Octal-for-FmtOctal%3CT%3E"],[271,"impl-Binary-for-FmtOctal%3CT%3E"],[272,"impl-LowerExp-for-FmtOctal%3CT%3E"],[273,"impl-LowerHex-for-FmtOctal%3CT%3E"],[274,"impl-Pointer-for-FmtOctal%3CT%3E"],[275,"impl-UpperHex-for-FmtOctal%3CT%3E"],[276,"impl-UpperExp-for-FmtOctal%3CT%3E"],[277,"impl-Display-for-FmtOctal%3CT%3E"],[278,"impl-Octal-for-FmtPointer%3CT%3E"],[279,"impl-Binary-for-FmtPointer%3CT%3E"],[280,"impl-Display-for-FmtPointer%3CT%3E"],[281,"impl-LowerExp-for-FmtPointer%3CT%3E"],[282,"impl-Pointer-for-FmtPointer%3CT%3E"],[283,"impl-Debug-for-FmtPointer%3CT%3E"],[284,"impl-UpperExp-for-FmtPointer%3CT%3E"],[285,"impl-LowerHex-for-FmtPointer%3CT%3E"],[286,"impl-UpperHex-for-FmtPointer%3CT%3E"],[287,"impl-Display-for-FmtUpperExp%3CT%3E"],[288,"impl-UpperExp-for-FmtUpperExp%3CT%3E"],[289,"impl-UpperHex-for-FmtUpperExp%3CT%3E"],[290,"impl-Debug-for-FmtUpperExp%3CT%3E"],[291,"impl-Binary-for-FmtUpperExp%3CT%3E"],[292,"impl-Octal-for-FmtUpperExp%3CT%3E"],[293,"impl-LowerHex-for-FmtUpperExp%3CT%3E"],[294,"impl-Pointer-for-FmtUpperExp%3CT%3E"],[295,"impl-LowerExp-for-FmtUpperExp%3CT%3E"],[296,"impl-LowerHex-for-FmtUpperHex%3CT%3E"],[297,"impl-Octal-for-FmtUpperHex%3CT%3E"],[298,"impl-Binary-for-FmtUpperHex%3CT%3E"],[299,"impl-Display-for-FmtUpperHex%3CT%3E"],[300,"impl-LowerExp-for-FmtUpperHex%3CT%3E"],[301,"impl-UpperExp-for-FmtUpperHex%3CT%3E"],[302,"impl-UpperHex-for-FmtUpperHex%3CT%3E"],[303,"impl-Pointer-for-FmtUpperHex%3CT%3E"],[304,"impl-Debug-for-FmtUpperHex%3CT%3E"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
