searchState.loadedDescShard("palette", 0, "A library that makes linear color calculations and …\nAn alpha component wrapper for colors.\nA trait for clamping and checking if colors are within …\nThe opaque color type, without any transparency.\nA trait for calculating the color difference between two …\nCommon trait for color components.\nPerform a unary or binary operation on each component of a …\nCommon trait for floating point color components.\nConverts from a color component type, while performing the …\nA trait for infallible conversion from <code>f64</code>. The conversion …\nA trait for colors where a hue may be calculated.\nHSL color space.\nLinear HSL with an alpha component. See the <code>Hsla</code> …\nHSLuv color space.\nHSLuv with an alpha component. See the <code>Hsluva</code> …\nHSV color space.\nLinear HSV with an alpha component. See the <code>Hsva</code> …\nA trait for colors where the hue can be manipulated …\nThe kind of hue unit this color space uses.\nHWB color space.\nLinear HWB with an alpha component. See the <code>Hwba</code> …\nConverts into a color component type, while performing the …\nThe CIE L*a*b* (CIELAB) color space.\nA hue type for the CIE L*a*b* family of color spaces.\nCIE L*a*b* (CIELAB) with an alpha component. See the <code>Laba</code> …\nCIE L*C*h°, a polar version of CIE L*a*b*.\nCIE L*C*h° with an alpha component. See the <code>Lcha</code> …\nCIE L*C*uv h°uv, a polar version of CIE L*u*v*.\nCIE L*C*uv h°uv with an alpha component. See the <code>Lchuva</code> …\nThe CIE L*u*v* (CIELUV) color space.\nA hue type for the CIE L*u*v* family of color spaces.\nCIE L*u*v* (CIELUV) with an alpha component. See the <code>Luva</code> …\nA 9 element array representing a 3x3 matrix.\nA trait for linear color interpolation.\nThe Oklab color space.\nA hue type for the Oklab color space.\nOklab with an alpha component. See the <code>Oklaba</code> …\nOklch, a polar version of Oklab.\nOklch with an alpha component. See the <code>Oklcha</code> …\nA trait for calculating relative contrast between two …\nA hue type for the RGB family of color spaces.\nA trait for colors where the saturation (or chroma) can be …\nThe type of the calculated color difference\nThe type of the contrast ratio.\nThe type of the mixing factor.\nThe type of the lighten/darken modifier.\nThe type of the (de)saturation modifier.\nThe scalar type for color components.\nThe <code>Shade</code> trait allows a color to be lightened or darkened.\nA trait for color types that can have or be given …\nThe color type with transparency applied.\nThe CIE 1931 XYZ color space.\nCIE 1931 XYZ with an alpha component. See the <code>Xyza</code> …\nThe CIE 1931 Yxy (xyY)  color space.\nCIE 1931 Yxy (xyY) with an alpha component. See the <code>Yxya</code> …\na* goes from red at -128 to green at 127.\na goes from red at -1 to green at 1.\nThe transparency component. 0.0 is fully transparent and …\nThe transparency component. 0.0 is fully transparent and …\nThe transparency component. 0.0 is fully transparent and …\nThe transparency component. 0.0 is fully transparent and …\nThe transparency component. 0.0 is fully transparent and …\nThe transparency component. 0.0 is fully transparent and …\nThe transparency component. 0.0 is fully transparent and …\nThe transparency component. 0.0 is fully transparent and …\nThe transparency component. 0.0 is fully transparent and …\nThe transparency component. 0.0 is fully transparent and …\nThe transparency component. 0.0 is fully transparent and …\nThe transparency component. 0.0 is fully transparent and …\nThe transparency component. 0.0 is fully transparent and …\nb* goes from yellow at -128 to blue at 127.\nb goes from yellow at -1 to blue at 1.\nThe blackness of the color. It specifies the amount black …\nColor blending and blending equations.\nC* is the colorfulness of the color. It’s similar to …\nC*uv is the colorfulness of the color. It’s similar to …\nC is the colorfulness of the color, from greyscale at 0 to …\nConvert colors from one reference white point to another\nReturn a new color where the components have been clamped …\nClamp the color’s components to the nearest valid values.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nThe color.\nPerform a binary operation on this and an other color.\nPerform a unary operation on this color.\nCalculate the ratio between two <code>luma</code> values.\nTraits for converting between color spaces.\nScale the color towards the minimum lightness by <code>factor</code>, a …\nDarken the color by <code>amount</code>, a value ranging from <code>0.0</code> to <code>1.0</code>…\nScale the color towards the minimum saturation by <code>factor</code>, …\nIncrease the saturation by <code>amount</code>, a value ranging from <code>0.0</code>…\nVarious encoding traits, types and standards.\nFloating point trait\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts <code>other</code> into <code>Self</code>, while performing the appropriate …\nConvert from a <code>(hue, saturation, lightness, alpha)</code> tuple.\nConvert from a <code>(hue, whiteness, blackness, alpha)</code> tuple.\nConvert from a <code>(L\\*, C\\*uv, h°uv, alpha)</code> tuple.\nConvert from a <code>(L, a, b, alpha)</code> tuple.\nConvert from u <code>(L\\*, u\\*, v\\*, alpha)</code> tuple.\nConvert from a <code>(L, C, h, alpha)</code> tuple.\nConvert from a <code>(hue, saturation, value, alpha)</code> tuple.\nConvert from a <code>(L\\*, C\\*, h°, alpha)</code> tuple.\nConvert from a <code>(red, green, blue, alpha)</code> tuple.\nConvert from a <code>(hue, saturation, l, alpha)</code> tuple.\nConvert from a <code>(X, Y, Z, alpha)</code> tuple.\nConvert from a <code>(luma, alpha)</code> tuple.\nConvert from a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.\nConvert from a <code>(L\\*, a\\*, b\\*, alpha)</code> tuple.\nConvert from a <code>(hue, saturation, lightness)</code> tuple.\nConvert from a <code>(hue, saturation, l)</code> tuple.\nConvert from a <code>(hue, saturation, value)</code> tuple.\nConvert from a <code>(hue, whiteness, blackness)</code> tuple.\nConvert from a <code>(L\\*, a\\*, b\\*)</code> tuple.\nConvert from a <code>(L\\*, C\\*, h°)</code> tuple.\nConvert from a <code>(L\\*, C\\*uv, h°uv)</code> tuple.\nConvert from a <code>(L\\*, u\\*, v\\*)</code> tuple.\nConvert from a <code>(L, a, b)</code> tuple.\nConvert from a <code>(L, C, h)</code> tuple.\nConvert from a <code>(X, Y, Z)</code> tuple.\nConvert from a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.\nCreate a new hue from degrees.\nCreate a new hue from degrees.\nCreate a new hue from degrees.\nCreate a new hue from degrees.\nConvert RGB from a different encoding with transparency.\nConvert luminance from a different encoding with …\nCreates a value from an <code>f64</code> constant.\nConvert from another component type.\nConvert from another component type.\nConvert linear luminance to non-linear luminance with …\nConvert linear RGB to non-linear RGB with transparency.\nCreate a new hue from radians, instead of degrees.\nCreate a new hue from radians, instead of degrees.\nCreate a new hue from radians, instead of degrees.\nCreate a new hue from radians, instead of degrees.\nConvert from a packed <code>u32</code> with specifiable component …\nReturn the difference or distance between two colors\nCalculate the contrast ratio between two colors.\nCalculate a hue if possible.\nTypes for interpolation between multiple colors.\nVerify the contrast between two colors satisfies SC 1.4.6 …\nVerify the contrast between two colors satisfies SC 1.4.6 …\nVerify the contrast between two colors satisfies SC 1.4.6. …\nVerify the contrast between two colors satisfies SC 1.4.6. …\nVerify the contrast between two colors satisfies SC 1.4.11 …\nVerify the contrast between two colors satisfies SC 1.4.11 …\nVerify the contrast between two colors satisfies SC 1.4.3 …\nVerify the contrast between two colors satisfies SC 1.4.3 …\nVerify the contrast between two colors satisfies SC 1.4.3. …\nVerify the contrast between two colors satisfies SC 1.4.3. …\nThe hue of the color, in degrees. Decides if it’s red, …\nThe hue of the color, in degrees. Decides if it’s red, …\nThe hue of the color, in degrees. Decides if it’s red, …\nThe hue of the color, in degrees. Decides if it’s red, …\nThe hue of the color, in degrees. Decides if it’s red, …\nThe hue of the color, in degrees. Decides if it’s red, …\nh is the hue of the color, in degrees. Decides if it’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>self</code> into <code>T</code>, while performing the appropriate …\nConvert to a <code>(hue, saturation, value, alpha)</code> tuple.\nConvert to a <code>(luma, alpha)</code> tuple.\nConvert to a <code>(L, a, b, alpha)</code> tuple.\nConvert to a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.\nConvert to a <code>(L\\*, C\\*uv, h°uv, alpha)</code> tuple.\nConvert to a <code>(red, green, blue, alpha)</code> tuple.\nConvert to a <code>(L\\*, C\\*, h°, alpha)</code> tuple.\nConvert to a <code>(hue, whiteness, blackness, alpha)</code> tuple.\nConvert to u <code>(L\\*, u\\*, v\\*, alpha)</code> tuple.\nConvert to a <code>(hue, saturation, l, alpha)</code> tuple.\nConvert to a <code>(L\\*, a\\*, b\\*, alpha)</code> tuple.\nConvert to a <code>(X, Y, Z, alpha)</code> tuple.\nConvert to a <code>(L, C, h, alpha)</code> tuple.\nConvert to a <code>(hue, saturation, lightness, alpha)</code> tuple.\nConvert to a <code>(hue, saturation, lightness)</code> tuple.\nConvert to a <code>(hue, saturation, l)</code> tuple.\nConvert to a <code>(hue, saturation, value)</code> tuple.\nConvert to a <code>(hue, whiteness, blackness)</code> tuple.\nConvert to a <code>(L\\*, a\\*, b\\*)</code> tuple.\nConvert to a <code>(L\\*, C\\*, h°)</code> tuple.\nConvert to a <code>(L\\*, C\\*uv, h°uv)</code> tuple.\nConvert to a <code>(L\\*, u\\*, v\\*)</code> tuple.\nConvert to a <code>(L, a, b)</code> tuple.\nConvert to a <code>(L, C, h)</code> tuple.\nConvert to a <code>(X, Y, Z)</code> tuple.\nConvert to a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.\nConvert the color to a different encoding with …\nConvert the color to a different encoding with …\nConvert into another component type.\nConvert into another component type.\nConvert the color to linear luminance with transparency.\nConvert the color to linear RGB with transparency.\nConvert to a packed <code>u32</code> with with specifiable component …\nCheck if the color’s components are within the expected …\nDecides how light the color will look. 0.0 will be black, …\nL* is the lightness of the color. 0.0 gives absolute black …\nL* is the lightness of the color. 0.0 gives absolute black …\nL* is the lightness of the color. 0.0 gives absolute black …\nL* is the lightness of the color. 0.0 gives absolute black …\nL is the lightness of the color. 0 gives absolute black …\nL is the lightness of the color. 0 gives absolute black …\nScale the color towards the maximum lightness by <code>factor</code>, a …\nLighten the color by <code>amount</code>, a value ranging from <code>0.0</code> to …\nDecides how light the color will look. 0.0 will be black, …\nLuminance types.\nluma (Y) was a measure of the brightness or luminance of a …\nReturn the <code>a</code> value maximum.\nReturn the <code>a</code> value maximum.\nReturn the <code>alpha</code> value maximum.\nReturn the <code>b</code> value maximum.\nReturn the <code>b</code> value maximum.\nReturn the <code>blackness</code> value maximum.\nReturn the <code>chroma</code> value maximum. This value does not cover …\nReturn the <code>chroma</code> value maximum.\nReturn the <code>chroma</code> value maximum.\nReturn the <code>chroma</code> extended maximum value. This value …\nThe highest displayable value this component type can …\nReturn the <code>l</code> value maximum.\nReturn the <code>l</code> value maximum.\nReturn the <code>l</code> value maximum.\nReturn the <code>l</code> value maximum.\nReturn the <code>l</code> value maximum.\nReturn the <code>l</code> value maximum.\nReturn the <code>l</code> value maximum.\nReturn the <code>lightness</code> value maximum.\nReturn the <code>luma</code> value maximum.\nReturn the <code>saturation</code> value maximum.\nReturn the <code>saturation</code> value maximum.\nReturn the <code>saturation</code> value maximum.\nReturn the <code>u</code> value maximum.\nReturn the <code>v</code> value maximum.\nReturn the <code>value</code> value maximum.\nReturn the <code>whiteness</code> value maximum.\nReturn the <code>x</code> value maximum.\nReturn the <code>x</code> value maximum.\nReturn the <code>y</code> value maximum.\nReturn the <code>y</code> value maximum.\nReturn the <code>z</code> value maximum.\nReturn the <code>a</code> value minimum.\nReturn the <code>a</code> value minimum.\nReturn the <code>alpha</code> value minimum.\nReturn the <code>b</code> value minimum.\nReturn the <code>b</code> value minimum.\nReturn the <code>blackness</code> value minimum.\nReturn the <code>chroma</code> value minimum.\nReturn the <code>chroma</code> value minimum.\nReturn the <code>chroma</code> value minimum.\nReturn the <code>l</code> value minimum.\nReturn the <code>l</code> value minimum.\nReturn the <code>l</code> value minimum.\nReturn the <code>l</code> value minimum.\nReturn the <code>l</code> value minimum.\nReturn the <code>l</code> value minimum.\nReturn the <code>l</code> value minimum.\nReturn the <code>lightness</code> value minimum.\nReturn the <code>luma</code> value minimum.\nReturn the <code>saturation</code> value minimum.\nReturn the <code>saturation</code> value minimum.\nReturn the <code>saturation</code> value minimum.\nReturn the <code>u</code> value minimum.\nReturn the <code>v</code> value minimum.\nReturn the <code>value</code> value minimum.\nReturn the <code>whiteness</code> value minimum.\nReturn the <code>x</code> value minimum.\nReturn the <code>x</code> value minimum.\nReturn the <code>y</code> value minimum.\nReturn the <code>y</code> value minimum.\nReturn the <code>z</code> value minimum.\nMix the color with an other color, by <code>factor</code>.\nA collection of named color constants. Can be toggled with …\nOklch and transparency.\nCIE Yxy and transparency with white point D65.\nCIE Yxy and transparency with white point D65.\nCreate a luminance color with transparency.\nCIE L*u*v* and transparency and white point D65.\nNon-linear RGB.\nHSV and transparency for linear sRGB.\nHSL and transparency for linear sRGB.\nHWB and transparency for linear sRGB.\nHSLuv and transparency with standard D65 whitepoint.\nCIE L*a*b* and transparency and white point D65.\nCIE L*C*uv h°uv and transparency with white point D65.\nOklab and transparency.\nCIE L*C*h° and transparency with white point D65.\nHSL for linear sRGB.\nHSLuv with standard D65 whitepoint\nHSV for linear sRGB.\nHWB for linear sRGB.\nCIE L*a*b* with white point D65.\nCIE L*C*h° with white point D65.\nCIE L*C*uv h°uv with white point D65.\nCIE L*u*v* with white point D65.\nCreate an Oklab color.\nCreate an Oklch color.\nCIE XYZ with white point D65.\nCIE Yxy with white point D65.\nTransforms the color into a fully opaque color with a …\nTransforms the color into a fully opaque color with a …\nRGB types, spaces and standards.\nScale the color towards the maximum saturation by <code>factor</code>, …\nIncrease the saturation by <code>amount</code>, a value ranging from <code>0.0</code>…\nThe colorfulness of the color. 0.0 gives gray scale colors …\nThe colorfulness of the color, as a percentage of the …\nThe colorfulness of the color. 0.0 gives gray scale colors …\nReturn a new copy of <code>self</code>, but with the hue shifted by …\nSplits the color into separate color and transparency …\nThe white point and RGB primaries this color is adapted …\nThe white point and RGB primaries this color is adapted …\nThe white point and RGB primaries this color is adapted …\nGet the hue as degrees, in the range <code>(-180, 180]</code>.\nGet the hue as degrees, in the range <code>(-180, 180]</code>.\nGet the hue as degrees, in the range <code>(-180, 180]</code>.\nGet the hue as degrees, in the range <code>(-180, 180]</code>.\nConvert the hue to positive degrees, in the range <code>[0, 360)</code>.\nConvert the hue to positive degrees, in the range <code>[0, 360)</code>.\nConvert the hue to positive degrees, in the range <code>[0, 360)</code>.\nConvert the hue to positive degrees, in the range <code>[0, 360)</code>.\nConvert the hue to positive radians, in the range <code>[0, 2π)</code>.\nConvert the hue to positive radians, in the range <code>[0, 2π)</code>.\nConvert the hue to positive radians, in the range <code>[0, 2π)</code>.\nConvert the hue to positive radians, in the range <code>[0, 2π)</code>.\nConvert the hue to radians, in the range <code>(-π, π]</code>.\nConvert the hue to radians, in the range <code>(-π, π]</code>.\nConvert the hue to radians, in the range <code>(-π, π]</code>.\nConvert the hue to radians, in the range <code>(-π, π]</code>.\nGet the internal representation, without normalizing it.\nGet the internal representation, without normalizing it.\nGet the internal representation, without normalizing it.\nGet the internal representation, without normalizing it.\nGet the internal representation as radians, without …\nGet the internal representation as radians, without …\nGet the internal representation as radians, without …\nGet the internal representation as radians, without …\nTransforms the color into a fully transparent color. If …\nTransforms the color into a fully transparent color. If …\nThe range of valid u* varies depending on the values of L* …\nThe range of valid v* varies depending on the values of L* …\nDecides how bright the color will look. 0.0 will be black, …\nDefines the tristimulus values of the CIE Illuminants.\nThe white point and RGB primaries this color is adapted …\nThe white point associated with the color’s illuminant …\nThe white point associated with the color’s illuminant …\nThe white point associated with the color’s illuminant …\nThe white point associated with the color’s illuminant …\nThe white point associated with the color’s illuminant …\nThe white point associated with the color’s illuminant …\nThe whiteness of the color. It specifies the amount white …\nTransforms the color into a transparent color with the …\nReturn a new copy of <code>self</code>, but with a specific hue.\nCIE L*C*h° and transparency.\nCIE XYZ and transparency.\nCIE L*u*v* and transparency.\nCIE Yxy and transparency.\nCIE L*a*b* and transparency.\nLinear HWB and transparency.\nCIE L*C*uv h°uv and transparency.\nLinear HSL and transparency.\nHSLuv and transparency.\nLinear HSV and transparency.\nLinear HSL.\nHSLuv with custom whitepoint.\nLinear HSV.\nLinear HWB.\nCIE L*a*b*.\nCIE L*C*h°.\nCIE L*C*uv h°uv\nCIE L*u*v*.\nCIE XYZ.\nCIE Yxy.\nRemoves the transparency from the color. If <code>Self::Color</code> has\nX is the scale of what can be seen as a response curve for …\nx chromaticity co-ordinate derived from XYZ color space as …\nY is the luminance of the color, where 0.0 is black and …\ny chromaticity co-ordinate derived from XYZ color space as …\nZ is the scale of what can be seen as the blue …\nAdd the source and destination, according to …\nA trait for colors that can be blended together.\nA trait for custom blend functions.\nThe core color type. Typically <code>Self</code> for color types …\nThe destination alpha.\nThe destination color, or alpha.\nA blending equation.\nA pair of blending equations and corresponding parameters.\nCreate a color where each component is the largest of each …\nCreate a color where each component is the smallest of …\nA simple 1.\nOne minus the destination alpha.\nOne minus the destination color, or alpha.\nOne minus the source alpha.\nOne minus the source color, or alpha.\nA blending parameter.\nA pair of source and destination parameters.\nPremultiplied alpha wrapper.\nSubtract the source from the destination, according to …\nThe source alpha.\nThe source color, or alpha.\nSubtract the destination from the source, according to …\nA simple 0.\nThe transparency component. 0.0 is fully transparent and …\nThe equation for the alpha component.\nThe parameters for the alpha component.\nApply this blend function to a pair of colors.\nPlace <code>self</code> over only the visible parts of <code>other</code>.\nPlace <code>self</code> over only the visible parts of <code>other</code>.\nBlend self, as the source color, with <code>destination</code>, using …\nBlend self, as the source color, with <code>destination</code>, using …\nDarken <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is …\nDarken <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is …\nThe premultiplied color components (…\nThe equation for the color components.\nThe parameters for the color components.\nReturn the darkest parts of <code>self</code> and <code>other</code>.\nReturn the darkest parts of <code>self</code> and <code>other</code>.\nThe destination parameter.\nReturn the absolute difference between <code>self</code> and <code>other</code>. It…\nReturn the absolute difference between <code>self</code> and <code>other</code>. It…\nLighten <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is …\nLighten <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is …\nSimilar to <code>difference</code>, but appears to result in a lower …\nSimilar to <code>difference</code>, but appears to result in a lower …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a pair of blending equations, where all the …\nCreate a pair of additive blending equations with the …\nConvert the color from premultiplied alpha.\nMultiply <code>self</code> or <code>other</code> if other is dark, or screen them if …\nMultiply <code>self</code> or <code>other</code> if other is dark, or screen them if …\nResults in the parts of <code>self</code> that overlaps the visible …\nResults in the parts of <code>self</code> that overlaps the visible …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the color to premultiplied alpha.\nReturn the lightest parts of <code>self</code> and <code>other</code>.\nReturn the lightest parts of <code>self</code> and <code>other</code>.\nMultiply <code>self</code> with <code>other</code>. This uses the alpha component to …\nMultiply <code>self</code> with <code>other</code>. This uses the alpha component to …\nResults in the parts of <code>self</code> that lies outside the visible …\nResults in the parts of <code>self</code> that lies outside the visible …\nPlace <code>self</code> over <code>other</code>. This is the good old common alpha …\nPlace <code>self</code> over <code>other</code>. This is the good old common alpha …\nMultiply <code>self</code> or <code>other</code> if other is dark, or screen them if …\nMultiply <code>self</code> or <code>other</code> if other is dark, or screen them if …\nAdd <code>self</code> and <code>other</code>. This uses the alpha component to …\nAdd <code>self</code> and <code>other</code>. This uses the alpha component to …\nMake a color which is at least as light as <code>self</code> or <code>other</code>.\nMake a color which is at least as light as <code>self</code> or <code>other</code>.\nLighten <code>other</code> if <code>self</code> is light, or darken <code>other</code> as if it’…\nLighten <code>other</code> if <code>self</code> is light, or darken <code>other</code> as if it’…\nThe source parameter.\nResults in either <code>self</code> or <code>other</code>, where they do not overlap.\nResults in either <code>self</code> or <code>other</code>, where they do not overlap.\nTrait to convert color from one reference white point to …\nTrait to convert color with one reference white point into …\nBradford chromatic adaptation method\nHolds the matrix coefficients for the chromatic adaptation …\nChromatic adaptation methods implemented in the library\nGenerates a conversion matrix to convert the Xyz …\nVonKries chromatic adaptation method\nXyzScaling chromatic adaptation method\nConvert the source color to the destination color using …\nConvert the source color to the destination color using …\nConvert the source color to the destination color using …\nConvert the source color to the destination color using …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a 3x3 transformation matrix to convert color …\nGet the cone response functions for the chromatic …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n3x3 matrix for the inverse of the cone response domains\n3x3 matrix for the cone response domains\nA trait for converting one color from another, in a …\nA trait for unchecked conversion of one color from another.\nA trait for converting a color into another, in a possibly …\nA trait for unchecked conversion of a color into another.\nThe error type for a color conversion that converted a …\nA trait for fallible conversion of one color from another.\nA trait for fallible conversion of a color into another.\nConsume this error and return the wrapped color\nReturns the argument unchanged.\nConvert from T with values clamped to the color defined …\nConvert from T. The resulting color might be invalid in …\nCalls <code>U::from(self)</code>.\nConvert into T with values clamped to the color defined …\nConvert into T. The resulting color might be invalid in …\nConvert from T, returning ok if the color is inside of its …\nConvert into T, returning ok if the color is inside of its …\nA transfer function to and from linear space.\nConvert the color component <code>x</code> from linear space.\nGamma encoding.\nConvert the color component <code>x</code> into linear space.\nLinear encoding\nPixel encodings and pixel format conversion.\nThe sRGB standard.\nRepresents <code>2.2f64</code>.\nGamma encoding.\nThe transfer function for gamma encoded colors.\nA type level float constant.\nThe represented number.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA generic standard with linear components.\nLinear color component encoding.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe guaranteed number of channels in the sequence.\nThe number of color channels.\nRepresents colors that can be serialized and deserialized …\nA contiguous sequence of pixel channels.\nA contiguous sequence of pixel channels with a known …\nConvert to a mutable pointer.\nConvert to a pointer.\nCast as a reference to raw color components.\nCast as a mutable reference to raw color components.\nThe length of the sequence.\nCast from a reference to raw color components.\nCast from a mutable reference to raw color components.\nConvert from a pointer and a length.\nConvert from a mutable pointer and a length.\nCast a slice of raw color components to a slice of colors.\nCast a mutable slice of raw color components to a mutable …\nConvert into raw color components.\nCast a slice of colors to a slice of raw color components.\nCast a mutable slice of colors to a mutable slice of raw …\nThe sRGB color space.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGeneric trait for floating point numbers\nComputes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …\nThe positive difference of two numbers.\nComputes the arccosine of a number. Return value is in …\nInverse hyperbolic cosine function.\nComputes the arcsine of a number. Return value is in …\nInverse hyperbolic sine function.\nComputes the arctangent of a number. Return value is in …\nComputes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…\nInverse hyperbolic tangent function.\nTake the cubic root of a number.\nReturns the smallest integer greater than or equal to a …\nClamps a value between a min and max.\nReturns the floating point category of the number. If only …\nReturns a number composed of the magnitude of <code>self</code> and the …\nComputes the cosine of a number (in radians).\nHyperbolic cosine function.\nReturns epsilon, a small positive value.\nReturns <code>e^(self)</code>, (the exponential function).\nReturns <code>2^(self)</code>.\nReturns <code>e^(self) - 1</code> in a way that is accurate even if the …\nReturns the largest integer less than or equal to a number.\nReturns the fractional part of a number.\nCalculate the length of the hypotenuse of a right-angle …\nReturns the infinite value.\nReturns the mantissa, base 2 exponent, and sign as …\nReturns <code>true</code> if this number is neither infinite nor <code>NaN</code>.\nReturns <code>true</code> if this value is positive infinity or …\nReturns <code>true</code> if this value is <code>NaN</code> and false otherwise.\nReturns <code>true</code> if the number is neither zero, infinite, …\nReturns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …\nReturns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …\nReturns <code>true</code> if the number is subnormal.\nReturns the natural logarithm of the number.\nReturns <code>ln(1+n)</code> (natural logarithm) more accurately than if\nReturns the logarithm of the number with respect to an …\nReturns the base 10 logarithm of the number.\nReturns the base 2 logarithm of the number.\nReturns the maximum of the two numbers.\nReturns the largest finite value that this type can …\nReturns the minimum of the two numbers.\nReturns the smallest positive, normalized value that this …\nReturns the smallest finite value that this type can …\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nReturns the <code>NaN</code> value.\nReturns the negative infinite value.\nReturns <code>-0.0</code>.\nRaise a number to a floating point power.\nRaise a number to an integer power.\nTake the reciprocal (inverse) of a number, <code>1/x</code>.\nReturns the nearest integer to a number. Round half-way …\nReturns a number that represents the sign of <code>self</code>.\nComputes the sine of a number (in radians).\nSimultaneously computes the sine and cosine of the number, …\nHyperbolic sine function.\nTake the square root of a number.\nComputes the tangent of a number (in radians).\nHyperbolic tangent function.\nConverts radians to degrees.\nConverts degrees to radians.\nReturn the integer part of a number.\nA linear interpolation between colors.\nA domain range for gradient slices.\nA slice of a Gradient that limits its domain.\nAn iterator over interpolated colors.\nGet the limits of this gradient’s domain.\nGet the limits of this gradient slice’s domain.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a color from the gradient. The color of the closest …\nGet a color from the gradient slice. The color of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA collection of named gradient constants. Can be toggled …\nCreate a gradient of evenly spaced colors with the domain […\nSlice this gradient to limit its domain.\nSlice this gradient slice to further limit its domain. …\nTake <code>n</code> evenly spaced colors from the gradient, as an …\nTake <code>n</code> evenly spaced colors from the gradient slice, as an …\nCreate a gradient of colors with custom spacing and …\nNew matplotlib colormap by Nathaniel J. Smith, Stefan van …\nNew matplotlib colormap by Nathaniel J. Smith, Stefan van …\nNew matplotlib colormap by Nathaniel J. Smith, Stefan van …\nNew matplotlib colormap by Nathaniel J. Smith, Stefan van …\nGamma 2.2 encoded luminance.\nGamma 2.2 encoded luminance with an alpha component.\nLinear luminance.\nLinear luminance with an alpha component.\nLuminance.\nA white point and a transfer function.\nLuminance with an alpha component. See the <code>Lumaa</code> …\nsRGB encoded luminance.\nsRGB encoded luminance with an alpha component.\nThe transfer function for the luminance component.\nThe white point of the color space.\nThe transparency component. 0.0 is fully transparent and …\nThe transparency component. 0.0 is fully transparent and …\nThe transparency component. 0.0 is fully transparent and …\nThe transparency component. 0.0 is fully transparent and …\nConvert to a raw pixel format.\nConvert to a raw pixel format.\nThe color.\nThe color.\nThe color.\nThe color.\nReturns the argument unchanged.\nConvert from a <code>(luma,)</code> tuple.\nConvert luminance from a different encoding.\nConvert from another component type.\nConvert linear luminance to non-linear luminance.\nCalls <code>U::from(self)</code>.\nConvert to a <code>(luma,)</code> tuple.\nConvert the color to a different encoding.\nConvert into another component type.\nConvert the color to linear luminance.\nThe lightness of the color. 0.0 is black and 1.0 is white.\nThe lightness of the color. 0.0 is black and 1.0 is white.\nThe lightness of the color. 0.0 is black and 1.0 is white.\nThe lightness of the color. 0.0 is black and 1.0 is white.\nReturn the <code>luma</code> value maximum.\nReturn the <code>luma</code> value minimum.\nCreate a luminance color.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nGet a SVG/CSS3 color by name. Can be toggled with the …\nError type for parsing a string of hexadecimal characters …\nGamma 2.2 encoded sRGB.\nGamma 2.2 encoded sRGB with an alpha component.\nThe hex value was not in a valid 3 or 6 character format.\nLinear sRGB.\nLinear sRGB with an alpha component.\nRGBA color packed into a 32-bit unsigned integer. Defaults …\nAn error occurred while parsing the string into a valid …\nRepresents the red, green and blue primaries of an RGB …\nThe primaries of the RGB color space.\nGeneric RGB.\nSplits and combines RGB(A) types with some channel …\nA set of primaries and a white point.\nAn RGB space and a transfer function.\nGeneric RGB with an alpha component. See the <code>Rgba</code> …\nThe RGB color space.\nNon-linear sRGB.\nNon-linear sRGB with an alpha component.\nThe transfer function for the color components.\nThe white point of the RGB color space.\nThe transparency component. 0.0 is fully transparent and …\nThe transparency component. 0.0 is fully transparent and …\nThe transparency component. 0.0 is fully transparent and …\nThe transparency component. 0.0 is fully transparent and …\nConvert to a raw pixel format.\nConvert to a raw pixel format.\nPrimary blue.\nThe amount of blue light, where 0.0 is no blue light and …\nThe amount of blue light, where 0.0 is no blue light and …\nThe amount of blue light, where 0.0 is no blue light and …\nThe amount of blue light, where 0.0 is no blue light and …\nThe channel ordering for red, green, blue, and alpha …\nChannel orderings for packed RGBA types.\nThe color.\nThe color.\nThe color.\nThe color.\nThe sRGB color packed into a <code>u32</code>.\nCreate an RGBA color from a <code>(u8, u8, u8, u8)</code> tuple.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>(red, green, blue)</code> tuple.\nConvert RGB from a different encoding.\nConvert from another component type.\nConvert linear RGB to non-linear RGB.\nConvert from a packed <code>u32</code> with specifiable component …\nConvert from a packed <code>u32</code> with specifiable component …\nPrimary green.\nThe amount of green light, where 0.0 is no green light and …\nThe amount of green light, where 0.0 is no green light and …\nThe amount of green light, where 0.0 is no green light and …\nThe amount of green light, where 0.0 is no green light and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to a <code>(red, green, blue)</code> tuple.\nConvert the color to a different encoding.\nConvert into another component type.\nConvert the color to linear RGB.\nConvert to a packed <code>u32</code> with with specifiable component …\nConvert to a packed <code>u32</code> with with specifiable component …\nReturn the <code>blue</code> value maximum.\nReturn the <code>green</code> value maximum.\nReturn the <code>red</code> value maximum.\nReturn the <code>blue</code> value minimum.\nReturn the <code>green</code> value minimum.\nReturn the <code>red</code> value minimum.\nCreate an RGB color.\nPrimary red.\nThe amount of red light, where 0.0 is no red light and …\nThe amount of red light, where 0.0 is no red light and …\nThe amount of red light, where 0.0 is no red light and …\nThe amount of red light, where 0.0 is no red light and …\nSplit RGBA components into a <code>(u8, u8, u8, u8)</code> tuple.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nThe kind of RGB standard. sRGB is the default.\nRGBA color packed in ABGR order.\nRGBA color packed in ARGB order.\nRGBA color packed in BGRA order.\nRGBA color packed in RGBA order.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCIE standard illuminant A\nCIE standard illuminant B\nCIE standard illuminant C\nCIE D series standard illuminant - D50\nCIE D series standard illuminant - D50\nCIE D series standard illuminant - D55\nCIE D series standard illuminant - D55\nCIE D series standard illuminant - D65\nCIE D series standard illuminant - D65\nCIE D series standard illuminant - D75\nCIE D series standard illuminant - D75\nCIE standard illuminant E\nCIE fluorescent illuminant series - F11\nCIE fluorescent illuminant series - F2\nCIE fluorescent illuminant series - F7\nWhitePoint defines the Xyz color co-ordinates for a given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the Xyz chromaticity co-ordinates for the white point.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")