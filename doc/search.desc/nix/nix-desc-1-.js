searchState.loadedDescShard("nix", 1, "The implementation supports the Batch Job Message Request …\nThe implementation supports the Track Batch Job Request …\nThe implementation supports the Software Development …\nThe implementation supports the User Portability Utilities …\nInteger value indicating version of the Shell and …\nThe implementation supports the Advisory Information …\nThe implementation supports asynchronous input and output.\nAsynchronous input or output operations may be performed …\nThe implementation supports barriers.\nThe use of <code>chown</code> and <code>fchown</code> is restricted to a process with\nThe implementation supports clock selection.\nThe implementation supports the Process CPU-Time Clocks …\nThe implementation supports the File Synchronization …\nThe implementation supports the IPv6 option.\nThe implementation supports job control.\nThe implementation supports memory mapped Files.\nThe implementation supports the Process Memory Locking …\nThe implementation supports the Range Memory Locking …\nThe implementation supports memory protection.\nThe implementation supports the Message Passing option.\nThe implementation supports the Monotonic Clock option.\nPathname components longer than {NAME_MAX} generate an …\nThe implementation supports the Prioritized Input and …\nThe implementation supports the Process Scheduling option.\nPrioritized input or output operations may be performed …\nThe implementation supports the Raw Sockets option.\nThe implementation supports read-write locks.\nThe implementation supports realtime signals.\nThe implementation supports the Regular Expression …\nEach process has a saved set-user-ID and a saved …\nThe implementation supports semaphores.\nThe implementation supports the Shared Memory Objects …\nThe implementation supports the POSIX shell.\nThe implementation supports the Spawn option.\nThe implementation supports spin locks.\nThe implementation supports the Process Sporadic Server …\nThe implementation supports the Synchronized Input and …\nSynchronized input or output operations may be performed …\nThe implementation supports threads.\nThe implementation supports the Thread Stack Address …\nThe implementation supports the Thread Stack Size …\nThe implementation supports the Thread CPU-Time Clocks …\nThe implementation supports the Thread Execution …\nThe implementation supports the Non-Robust Mutex Priority …\nThe implementation supports the Non-Robust Mutex Priority …\nThe implementation supports the Thread Process-Shared …\nThe implementation supports the Robust Mutex Priority …\nThe implementation supports the Robust Mutex Priority …\nThe implementation supports thread-safe functions.\nThe implementation supports the Thread Sporadic Server …\nThe implementation supports timeouts.\nThe implementation supports timers.\nThe implementation supports the Trace option.\nThe implementation supports the Trace Event Filter option.\nThe implementation supports the Trace Inherit option.\nThe implementation supports the Trace Log option.\nThe implementation supports the Typed Memory Objects …\nThe implementation provides a C-language compilation …\nThe implementation provides a C-language compilation …\nThe implementation provides a C-language compilation …\nThe implementation provides a C-language compilation …\nThis symbol shall be defined to be the value of a …\nInteger value indicating version of this standard …\nThe implementation supports the X/Open Encryption Option …\nThe implementation supports the Issue 4, Version 2 Enhanced\nThe implementation supports the X/Open Realtime Option …\nThe implementation supports the X/Open Realtime Threads …\nThe implementation supports the Issue 4, Version 2 Shared …\nThe implementation supports the XSI STREAMS Option Group.\nThe implementation supports the XSI option\nInteger value indicating version of the X/Open Portability …\nChecks the file named by <code>path</code> for accessibility according …\nAlarm signal scheduling.\nReturns the set containing all flags.\nGet the raw <code>uid_t</code> wrapped by <code>self</code>.\nGet the raw <code>gid_t</code> wrapped by <code>self</code>.\nGet the raw <code>pid_t</code> wrapped by <code>self</code>.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nChange the current working directory of the calling …\nChange the ownership of the file at <code>path</code> to be owned by …\nClose a raw file descriptor\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns Uid of calling process. This is practically a more …\nReturns Gid of calling process. This is practically a more …\nDaemonize this process by detaching from the controlling …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nHome directory\nCreate a copy of the specified file descriptor (see dup(2)…\nCreate a copy of the specified file descriptor using the …\nCreate a new copy of the specified file descriptor using …\nReturns effective Uid of calling process. This is …\nReturns effective Gid of calling process. This is …\nReturns an empty set of flags.\nReplace the current process image with a new one (see …\nReplace the current process image with a new one (see …\nExecute program relative to a directory file descriptor …\nReplace the current process image with a new one and …\nReplace the current process image with a new one and …\nChange the current working directory of the process to the …\nChange the ownership of the file referred to by the open …\nChange the ownership of the file at <code>path</code> to be owned by …\nSynchronize the data of a file\nReplace the current process image with a new one (see …\nCreate a new child process duplicating the parent process (…\nLike <code>pathconf</code>, but works with file descriptors instead of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nGet a group by GID.\nGet a user by name.\nGet a group by name.\nCreates <code>Uid</code> from raw <code>uid_t</code>.\nCreates <code>Gid</code> from raw <code>gid_t</code>.\nCreates <code>Pid</code> from raw <code>pid_t</code>.\nGet a user by UID.\nSynchronize changes to a file\nTruncate a file to a specified length\nUser information\nReturns the current directory as a <code>PathBuf</code>\nGet the effective group ID\nGet the effective user ID\nGet the real group ID\nCalculate the supplementary group access list.\nGet the list of supplementary group IDs of the calling …\nGet the host name and store it in the provided buffer, …\nGet the group id of the calling process (see getpgrp(3)).\nGet the pid of this process (see getpid(2)).\nGet the pid of this processes’ parent (see getpid(2)).\nGets the real, effective, and saved group IDs.\nGets the real, effective, and saved user IDs.\nGet the process group ID of a session leader getsid(2).\nGet the caller’s thread ID (see gettid(2).\nGet a real user ID\nGroup ID\nGroup ID\nInitialize the supplementary group access list.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturn <code>true</code> if this is the child process of the <code>fork()</code>\nReturns <code>true</code> if no flags are currently stored.\nReturns <code>true</code> if this is the parent process of the <code>fork()</code>\nReturns true if the <code>Uid</code> represents privileged user - root. …\nLink one file to another file\nMove the read/write file offset.\nList of Group members\nCreates new directory <code>path</code> with access rights <code>mode</code>.  (see …\nCreates new fifo special file (named pipe) with path <code>path</code> …\nCreates new fifo special file (named pipe) with path <code>path</code> …\nCreates a regular file which persists even after process …\nUsername\nGroup name\nReturns the complement of this set of flags.\nReturns PID of parent of calling process\nUser password (probably encrypted)\nGroup password\nGet path-dependent configurable system variables (see …\nSuspend the thread until a signal is received.\nCreate an interprocess channel.\nLike <code>pipe</code>, but allows setting certain file descriptor …\nRead from a raw file descriptor.\nRemoves the specified flags in-place.\nInserts or removes the specified flags depending on the …\nSet the effective group ID\nSet the effective user ID\nSet the group identity used for filesystem checks …\nSet the user identity used for filesystem checks …\nSet the group ID\nSet the list of supplementary group IDs for the calling …\nSet the system host name (see sethostname(2)).\nSet a process group ID (see setpgid(2)).\nSets the real, effective, and saved gid. (see setresuid(2))\nSets the real, effective, and saved uid. (see setresuid(2))\nCreate new session and set process group id (see setsid(2)…\nSet the user ID\nPath to shell\nSuspend execution for an interval of time\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nCreates a symbolic link at <code>path2</code> which points to <code>path1</code>.\nReturns the symmetric difference between the flags in <code>self</code> …\nCommit filesystem caches to disk\nGet configurable system variables (see sysconf(3))\nGet the terminal foreground process group (see tcgetpgrp(3)…\nSet the terminal foreground process group (see tcgetpgrp(3)…\nReturns PID of calling process\nToggles the specified flags in-place.\nTruncate a file to a specified length\nGet the name of the terminal device that is open on file …\nUser ID\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nRemove a directory entry\nRemove a directory entry\nWrite to a raw file descriptor.\nDisable process accounting\nEnable process accounting\nCancel an previously set alarm signal.\nSchedule an alarm signal.")