searchState.loadedDescShard("rppal", 0, "RPPAL provides access to the Raspberry Pi’s GPIO, I2C, …\nInterface for the GPIO peripheral.\nInterface for the I2C peripheral.\nInterface for the PWM peripheral.\nInterface for the main and auxiliary SPI peripherals.\nRaspberry Pi system-related tools.\nInterface for the UART peripherals and any USB to serial …\nContains the error value\nErrors that can occur when accessing the GPIO peripheral.\nProvides access to the Raspberry Pi’s GPIO peripheral.\nGPIO pin configured as input.\nI/O error.\nGPIO pin that can be (re)configured for any mode or …\nPin logic levels.\nPin modes.\nContains the success value\nGPIO pin configured as output.\nPermission denied when opening <code>/dev/gpiomem</code>, <code>/dev/mem</code> or …\nUnconfigured GPIO pin.\nPin is not available.\nBuilt-in pull-up/pull-down resistor states.\nResult type returned from methods that can have …\nThread panicked.\nInterrupt trigger conditions.\nUnknown model.\nRemoves a previously configured asynchronous interrupt …\nRemoves a previously configured synchronous interrupt …\nStops a previously configured software-based PWM signal.\nStops a previously configured software-based PWM signal.\nResets the pin’s mode and disables the built-in …\nResets the pin’s mode and disables the built-in …\nResets the pin’s mode and disables the built-in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a <code>Pin</code> for the specified BCM GPIO pin number.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Pin</code> and returns an <code>InputPin</code>. Sets the mode to …\nConsumes the <code>Pin</code> and returns an <code>InputPin</code>. Sets the mode to …\nConsumes the <code>Pin</code> and returns an <code>InputPin</code>. Sets the mode to …\nConsumes the <code>Pin</code> and returns an <code>IoPin</code>. Sets the mode to …\nConsumes the <code>Pin</code> and returns an <code>OutputPin</code>. Sets the mode …\nConsumes the <code>Pin</code> and returns an <code>OutputPin</code>. Changes the …\nConsumes the <code>Pin</code> and returns an <code>OutputPin</code>. Changes the …\nReads the pin’s logic level, and returns <code>true</code> if it’s …\nReads the pin’s logic level, and returns <code>true</code> if it’s …\nReads the pin’s logic level, and returns <code>true</code> if it’s …\nReads the pin’s logic level, and returns <code>true</code> if it’s …\nReturns <code>true</code> if the pin’s output state is set to <code>High</code>.\nReturns <code>true</code> if the pin’s output state is set to <code>Low</code>.\nReturns the pin’s mode.\nReturns the pin’s mode.\nConstructs a new <code>Gpio</code>.\nReturns the GPIO pin number.\nReturns the GPIO pin number.\nReturns the GPIO pin number.\nReturns the GPIO pin number.\nBlocks until an interrupt is triggered on the pin, or a …\nBlocks until an interrupt is triggered on any of the …\nReads the pin’s logic level.\nReads the pin’s logic level.\nReads the pin’s logic level.\nReturns the value of <code>reset_on_drop</code>.\nReturns the value of <code>reset_on_drop</code>.\nReturns the value of <code>reset_on_drop</code>.\nConfigures an asynchronous interrupt trigger, which …\nSets the pin’s output state to <code>High</code>.\nSets the pin’s output state to <code>High</code>.\nConfigures a synchronous interrupt trigger.\nSets the pin’s output state to <code>Low</code>.\nSets the pin’s output state to <code>Low</code>.\nSets the pin’s mode.\nConfigures the built-in pull-up/pull-down resistors.\nConfigures a software-based PWM signal.\nConfigures a software-based PWM signal.\nConfigures a software-based PWM signal.\nConfigures a software-based PWM signal.\nWhen enabled, resets the pin’s mode to its original …\nWhen enabled, resets the pin’s mode to its original …\nWhen enabled, resets the pin’s mode to its original …\nToggles the pin’s output state between <code>Low</code> and <code>High</code>.\nToggles the pin’s output state between <code>Low</code> and <code>High</code>.\nSets the pin’s output state.\nSets the pin’s output state.\nLists the features supported by the underlying drivers.\nContains the error value\nErrors that can occur when accessing the I2C peripheral.\nI2C/SMBus feature not supported.\nProvides access to the Raspberry Pi’s I2C peripheral.\nInvalid slave address.\nI/O error.\nContains the success value\nResult type returned from methods that can have <code>i2c::Error</code>…\nUnknown model.\nIndicates whether 10-bit addresses are supported.\nSends an 8-bit <code>command</code>, and then fills a multi-byte <code>buffer</code> …\nSends an 8-bit <code>command</code> followed by a multi-byte <code>buffer</code>.\nReturns the I2C bus ID.\nReturns information on the functionality supported by the …\nReturns the clock frequency in hertz (Hz).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndicates whether I2C Block Read is supported.\nIndicates whether I2C Block Write is supported.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>I2c</code>.\nReceives incoming data from the slave device and writes it …\nEnables or disables 10-bit addressing.\nSets a 7-bit or 10-bit slave address.\nEnables or disables SMBus Packet Error Checking.\nSets the maximum duration of a transaction in milliseconds …\nIndicates whether SMBus Block Process Call is supported.\nIndicates whether SMBus Block Read is supported.\nSends an 8-bit <code>command</code>, and then receives an 8-bit byte …\nIndicates whether SMBus Block Write is supported.\nSends an 8-bit <code>command</code> and an 8-bit byte count along with …\nIndicates whether SMBus Host Notify is supported.\nIndicates whether SMBus Packet Error Checking is supported.\nIndicates whether SMBus Process Call is supported.\nSends an 8-bit <code>command</code> and a 16-bit <code>value</code>, and then …\nSends an 8-bit <code>command</code> and a 16-bit <code>value</code>, and then …\nIndicates whether SMBus Quick Command is supported.\nSends a 1-bit <code>command</code> in place of the R/W bit.\nIndicates whether SMBus Read Byte is supported.\nSends an 8-bit <code>command</code>, and receives an 8-bit value.\nIndicates whether SMBus Read Word is supported.\nSends an 8-bit <code>command</code>, and receives a 16-bit value.\nSends an 8-bit <code>command</code>, and receives a 16-bit <code>value</code> in a …\nIndicates whether SMBus Receive Byte is supported.\nReceives an 8-bit value.\nIndicates whether SMBus Send Byte is supported.\nSends an 8-bit <code>value</code>.\nIndicates whether SMBus Write Byte is supported.\nSends an 8-bit <code>command</code> and an 8-bit <code>value</code>.\nIndicates whether SMBus Write Word is supported.\nSends an 8-bit <code>command</code> and a 16-bit <code>value</code>.\nSends an 8-bit <code>command</code> and a 16-bit <code>value</code> in a …\nConstructs a new <code>I2c</code> using the specified bus.\nSends the outgoing data contained in <code>buffer</code> to the slave …\nSends the outgoing data contained in <code>write_buffer</code> to the …\nPWM channels.\nContains the error value\nErrors that can occur when accessing the PWM peripheral.\nI/O error.\nContains the success value\nOutput polarities.\nProvides access to the Raspberry Pi’s PWM peripheral.\nResult type returned from methods that can have <code>pwm::Error</code>…\nDisables the PWM channel.\nReturns the duty cycle.\nEnables the PWM channel.\nReturns the frequency.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the PWM channel is enabled.\nConstructs a new <code>Pwm</code>.\nReturns the period.\nReturns the polarity.\nReturns the pulse width.\nReturns the value of <code>reset_on_drop</code>.\nSets the duty cycle.\nSets the frequency and duty cycle.\nSets the period.\nSets the polarity.\nSets the pulse width.\nWhen enabled, disables the PWM channel when the <code>Pwm</code> …\nConstructs a new <code>Pwm</code> using the specified settings.\nConstructs a new <code>Pwm</code> using the specified settings.\nBit orders.\nThe specified bit order is not supported.\nThe specified number of bits per word is not supported.\nSPI buses.\nThe specified clock speed is not supported.\nContains the error value\nErrors that can occur when accessing the SPI peripheral.\nI/O error.\nSPI modes indicating the clock polarity and phase.\nThe specified mode is not supported.\nContains the success value\nSlave Select polarities.\nThe specified Slave Select polarity is not supported.\nResult type returned from methods that can have <code>spi::Error</code>…\nPart of a multi-segment transfer.\nSlave Select pins.\nProvides access to the Raspberry Pi’s SPI peripherals.\nGets the bit order.\nGets the number of bits per word.\nGets the number of bits per word for this segment.\nGets the clock frequency in hertz (Hz).\nGets the custom clock speed in hertz (Hz) for this segment.\nGets the delay in microseconds (µs) for this segment.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this segment won’t transfer any bytes.\nReturns the number of bytes that will be transferred.\nGets the SPI mode.\nConstructs a new <code>Spi</code>.\nConstructs a new <code>Segment</code> with the default settings, and …\nReceives incoming data from the slave device and writes it …\nReverses the bits of each byte in <code>buffer</code>.\nSets the order in which bits are shifted out and in.\nSets the number of bits per word.\nSets the number of bits per word for this segment.\nSets the clock frequency in hertz (Hz).\nSets a custom clock speed in hertz (Hz) for this segment.\nSets a delay in microseconds (µs) for this segment.\nSets the SPI mode.\nChanges Slave Select’s behavior for this segment.\nSets Slave Select polarity.\nGets the state of Slave Select change for this segment.\nGets the Slave Select polarity.\nSends and receives data at the same time.\nTransfers multiple half-duplex or full-duplex segments.\nConstructs a new <code>Segment</code> with the default settings, and …\nConstructs a new <code>Segment</code> with the specified settings.\nConstructs a new <code>Segment</code> with the default settings, and …\nSends the outgoing data contained in <code>buffer</code> to the slave …\nRetrieves Raspberry Pi device information.\nContains the error value\nErrors that can occur when trying to identify the …\nIdentifiable Raspberry Pi models.\nContains the success value\nResult type returned from methods that can have …\nIdentifiable Raspberry Pi SoCs.\nUnknown model.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the Raspberry Pi’s model.\nConstructs a new <code>DeviceInfo</code>.\nReturns the Raspberry Pi’s SoC.\nBoth queues.\nContains the error value\nErrors that can occur when accessing the UART peripheral.\nEven parity.\nGPIO error.\nInput queue.\nInvalid or unsupported value.\nI/O error.\nSets parity bit to <code>1</code>.\nMarks bytes with parity errors with a preceding <code>255</code> and <code>0</code> …\nNo parity bit.\nIgnores parity errors.\nOdd parity.\nContains the success value\nOutput queue.\nParity bit modes.\nParity check modes.\nQueue types.\nReplaces bytes with parity errors with a <code>0</code> byte.\nResult type returned from methods that can have <code>uart::Error</code>…\nSets parity bit to <code>0</code>.\nControl signal status.\nRemoves bytes with parity errors from the input queue.\nProvides access to the Raspberry Pi’s UART peripherals …\nReturns the line speed in baud (Bd).\nReturns <code>true</code> if CTS is active.\nReturns the number of data bits.\nReturns <code>true</code> if DCD is active.\nBlocks until all data in the output queue has been …\nReturns <code>true</code> if DSR is active.\nReturns <code>true</code> if DTR is active.\nDiscards all data in the input and/or output queue.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>true</code> if RTS/CTS hardware flow control is enabled.\nReturns the number of bytes waiting in the input queue.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>read</code> is configured to block when needed.\nReturns <code>true</code> if <code>write</code> is configured to block when needed.\nConstructs a new <code>Uart</code>.\nReturns the number of bytes waiting in the output queue.\nReturns the parity bit mode.\nReturns the parity check mode for incoming data.\nReceives incoming data from the external device and stores …\nReturns <code>true</code> if RI is active.\nReturns <code>true</code> if RTS is active.\nRequests the external device to resume its transmission …\nRequests the external device to pause its transmission …\nSets the line speed in baud (Bd).\nSets the number of data bits.\nSets DTR to active (<code>true</code>) or inactive (<code>false</code>).\nEnables or disables RTS/CTS hardware flow control.\nSets the parity bit mode.\nConfigures parity checking for incoming data.\nSets the blocking mode for subsequent calls to <code>read</code>.\nSets RTS to active (<code>true</code>) or inactive (<code>false</code>).\nEnables or disables XON/XOFF software flow control.\nSets the number of stop bits.\nSets the blocking mode for subsequent calls to <code>write</code>.\nReturns <code>true</code> if XON/XOFF software flow control is enabled.\nReturns the status of the control signals.\nReturns the number of stop bits.\nConstructs a new <code>Uart</code> connected to the serial character …\nSends the contents of <code>buffer</code> to the external device.")